{"2787": {"code": ["\n:\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\n\n:\n\n\n\n\t\n:\n\nUse Call-Based format\n\n\n[a:b]\n[a:b]\n\n\n\nUse Python 3 format\n:\n\n\n\n\n\n\nYou", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format:\nUse Call-Based format\n\n\nUse Slice-Based format\n\n\n:\n\n\n>>>\n:\n:\n\n\t\n\n:\n\n\nUse Slice-Based format\n\n\n\n\n\n\n:\n\nitems[a:b]\n\n\n\n\n\nYou", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\t\n\t\n\n\nYou're familiar with `list slicing`\n\n\n\n\n:\n\n\n\n\n\n\n> a, b:\n2,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format:\n\n\n\n\n\n\nUse Call-Based format:\n\n\n>>>\n\n:\n\n\n\n\t\nUse Python2 format\n\n\nYou're familiar with a list slicing\n\n\n\n\n:\nitems[a:b]\n\n\n\nYou're", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Slice-Based format:\n\n\n\n\n\nUse Call-Based format:\n\nUse Slice-Based format\n\n>>>\n\n\n\n:\n\n\n\n\t\n:\n\nUse Python format\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe input is a valid list\n\n``", "\nUse Call-Based format\n\n\nUse Slice-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n\nThe function `inverse_slice()` works in a python 2 and 3 compatible format\n\n:\n\n\n>>>\n\n\n:\n\n\n\n\n\n:\n\n\n\n\nUse Function-Based format\n\n\n\n\n\n\nUse Python 3:", "\nUse Function-Based format:\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n:\n\n\n>>> ages[a:b]\n[a, b]\n\n:\n:\n\n\n:\n\n\n\n\nUse Function-Based format\n:\n\n\n\n\nThe function `reverse_slice", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format:\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n:\n\n\n\n>>>\n:\n:\n\n\n\n\n:\n\n\n\n\nUse Python-based format\n\n:\n\n\n```python\n\n\n>>>\n\n\n```python", "\nUse Call-Based format:\nUse Call-Based format\n\n\n:\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\n:\n\n\n\t\n\t\n:\n\nUse Python-Based format\n\n[a:b]\n[a:b]\n\n\n:\n\n\n\n\n\n```python\n>>> from", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format:\n\n\n>>>\n\t\n\n\n\n\n\n\t\n\n\n\nUse Call-Based format\n\nNOTE:\n\n\n\n\n\n:\n\nitems[a:b]\n\n\n\n\n\nYou're f", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\nThe inverse slice is not implemented by Python.\n\nUse Python-Based format\n\n\n\n:\n\n\n>>>\n\n:\n\n\n\t\n:\n\nUse Python 2 format\n\n\n\n:\n\n\n\n\n\n\n+ If you're famil", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n\n:\n\n\nyou're familiar with a list slicing\n\n\t\n\n\n\n:\n\n\nitems[a:b]\n\n\n\n\n```", "\nUse Call-Based format\t\nUse Call-Based format\n\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format:\n\n\n>>>\n\n:\n:\n\n\n\n:\n\nUse Slice-Based format\n\n\nThe function inverse_slice() does not take a slice\n\n\n\n:\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format:\n\n\n\n\n\n:\n\n\n[a:b]\n\n\n\n\t\n:\n\n:\n\n\n\n\t\n\n:\n\nUse Python format\n\n\n\n\n\n:\n\n\n\n\n\n\n\n```python\n>>> items = [12", "\nUse Python-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Python-Based format\n\n\nThe inverse slice function is used to take the inverse slice of the input.\n\n\n\n:\n\n\n\n>>>\n\n:\n\n\n\n:\n\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n`items` can", "\nUse Call-Based format\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\t\n\n:\n\n\n\t\n\n\t\n\n\n\n\n[a:b]\n[a:b]\n\n\n\n\n:\n\n\n\n\n\n\n```python\n>>>", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Slice-Based format:\n\nUse Slice-Based format\n\n\n\n\n\n:\n\n\n\n>>>\n\n\n\n\n\n\n\n\t\n\n\n\nUse Call-Based format\n\n[a:b]\n\n\n\n:\n\n\n\n\n\n`items` can be a list", "\nUse Python-Based format\n\n\n\nUse Call-Based format\n:\nUse Slice-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format:\n\n\n>>>\n\n:\n\n\n\n\n\n\n\nUse Slice-Based format\n\nUse Python-Based format\nCOMPRESS:\n\n\n\n\n\n\nYou're famili", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n>>>\n\n:\n\n:\n\n\n\n\n\t\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nYou're familiar with `list", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format:\n\n\n>>> inverse_slice([items, a, b])\n\n\n\n:\n:\n\n\n\n:\n\n\n\n\n\nUse Slice-Based format\n:\n\n\n\n\n\n    You're"], "prompt": "\nQUESTION:\nYou're familiar with [list slicing](https://docs.python.org/3/library/functions.html#slice) in Python and know, for example, that:\n\n```python\n>>> ages = [12, 14, 63, 72, 55, 24]\n>>> ages[2:4]\n[63, 72]\n>>> ages[2:]\n[63, 72, 55, 24]\n>>> ages[:3]\n[12, 14, 63]\n```\n\nwrite a function `inverse_slice()` that takes three arguments: a list `items`, an integer `a` and an integer `b`. The function should return a new list with the slice specified by `items[a:b]` _excluded_. For example:\n\n```python\n>>>inverse_slice([12, 14, 63, 72, 55, 24], 2, 4)\n[12, 14, 55, 24]\n```\n\nThe input will always be a valid list, `a` and `b` will always be different integers equal to or greater than zero, but they _may_ be zero or be larger than the length of the list.\ndef inverse_slice(items, a, b):\n\t\nUse Call-Based format\nANSWER:\n"}}