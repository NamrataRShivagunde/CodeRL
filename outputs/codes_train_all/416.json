{"416": {"code": ["\n    catMouseGame(self, graph: List[List[int]]) -> int\n\n\u00a0|\n\u00a0/\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\nExample 2:\n   \n\n\n\u00a01\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\u00a01\n\n\n    A", "\nUse Call-Based format\n\n\n    catMouseGame(self, graph)\n\n\n\n\nExample 2:\n\nInput: [1,2,3]\n\n\n\n\n\n\n\n\n\n\n    catMouseGame(self, graph)\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nA game on an undirected graph is play", "\n\n\u00a0\n|\u00a0|\u00a0|\n\u00a0/\u00a0|\n\u00a0|\n\u00a0|\n\u00a0|\n\u00a0|\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n\n\u00a01\n\u00a02\n\u00a03\n\n\n\n\n\n\n\n\n\n\n1\n1\u00a02\u00a04\u00a0", "\n    catMouseGame(self, graph)\n\n\n\n\n\n\n\u00a0|\n|\u00a0|\n\u00a0|\n\n\nExample 2:\n    catMouseGame(self, graph)\n\nExample 3:\n    catMouseGame(self, graph)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first node", "\nUse Call-Based format\n\u00a0|\u00a0|\u00a0/\u00a0|\n\u00a0\u00a0|\n\n\n\n\n\n\u00a0\n\n\n   \n\n\n\n   \n    catMouseGame(self, graph)\n\n\n\u00a0|\n\u00a0|\n\n\n\n\n\n\n\n\n\n\n\n|\u00a0|\n\n\n\nExample 2:", "\nUse Call-Based format\n\n    catMouseGame(self, graph) -> int\n\nExample 2:\n    catMouseGame(self, graph) -> int\n\nExample 3:\n\n\n\n\n\n\n   \n\n\n\n\n\nExample 2:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCat is played by two players", "\n\nUse Call-Based format\n\n\u00a0|\n\u00a0|\n\n\n\n\u00a0/\u00a0\n\n\u00a0|\n\u00a0|\n\u00a0|\n\n   \n\n\n\n   \n    catMouseGame(self, graph)\n\n\n\n\n\n\n\n\n\n\n\nA game is played by two players.\n\n\n\n\nA game on", "\n\n    catMouseGame(self, graph)\n\n\n\n\n\n\nUse Call-Based format:\n    catMouseGame(self, graph)\n\n\n\n\n\n\n\n\n\n\n    catMouseGame(graph)\n\n\n\n\n\n\n\n\n\n1\u00a01\u00a02\u00a02\n\n\n\n\n\n\nA game on an undirected", "\n    catMouseGame(self, graph)\n    \n\n\n\nUse Call-Based format:\n\n\n\u00a0|\u00a0|\n\u00a0/\u00a0|\n\n\n\nExample 2:\n   \n\n\n\n   \n        \n\n\u00a0|\n\u00a0|\n\n\n\n\n\n\n\n\n\n\n\n2\u00a05\n\n\n    A game", "\nUse Call-Based format\n\u00a0|\u00a0|\n\u00a0/\u00a0\u00a0|\n\n\n\n\n\u00a0\n\n\n\n   \n    catMouseGame(self, graph)\n\n\n\n\n    catMouseGame(graph)\n\n\n\n\n\n\n\n\n\n\nA game is played by two players:\n\n\n\n\n\n\nA game", "\nUse Call-Based format\n\n\n    catMouseGame(self, graph)\n    # -> int\n\nUse Call-Based format\n\n\n\n\n\nExplanation:\n\n\nExample 2:\n\n\n\n\n\n\nExample 2:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1:\n    In:\n", "\n    catMouseGame(self, graph)\n\n\u00a0\n\u00a0\u00a0\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n   \n    catMouseGame(self, graph)\n\n\n\n\nExample 2:\n   \n\n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n    Example 2:\n   ", "\nUse Call-Based format\n\u00a0|\u00a0|\u00a0\u00a0/\n\n\n\n\nUse Call-Based format\n\n\n\n\nExample 2:\n    catMouseGame(self, graph)\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nThe game is now not played.\n\n\n\n\n\nA game on an", "\nUse Call-Based format\n\u00a0|\n\u00a0|\n\u00a0|\n\n\n\n\n\n\n    catMouseGame(self, graph)\n\nExample 2:\n    catMouseGame(self, graph)\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\nExample 2:\n\n\n\n\n3 <= graph", "\nUse Call-Based format\n\n    catMouseGame(self, graph) -> int\n\nExample 2:\n    catMouseGame(self, graph) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n   \n        catMouseGame(self, graph)\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nA game on undirected graph is", "\nUse Call-Based format\n\u00a0|\u00a0|\n\u00a0|\u00a0/\u00a0|\n\n\n\n\n\u00a0/\n\nExample 2:\n\nInput:\n    [2,5]\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\u00a0\n2\u00a0\n\n\n\n\n1\u00a0", "\n    catMouseGame(self, graph: List[List[int]])\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\nExample 2:\n    catMouseGame(self, graph)\n\nExample 3:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nA game on an un", "\nUse Call-Based format\n\u00a0|\u00a0|\n\u00a0|\u00a0/\u00a0\u00a0|\n\n\nExample 2:\n    catMouseGame(self, graph)\n\n\n\n\n\n   \n\n\n\n\n\nExample 2:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA game on an undirected graph is", "\nUse Call-Based format\n\n\n    catMouseGame(self, graph)\n\n\n|\u00a0|\u00a0|\u00a0\u00a0|\u00a0\n\u00a0|\n\n\n\n\n\n\n\n    catMouseGame(self, graph)\n\n\n\n\n\n\n\n\n\n\nA game is played by two players:\n\n\n\n\n\nA game is", "\n\n1 <= graph.length <= 50\n1 <= graph.length <= 50\n1 <= graph.length <= 50\n\n\n\n\n\n\n\n\n\n    catMouseGame(self, graph)\n\n\n\n\n    catMouseGame(graph)\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n1 <= graph.length <="], "prompt": "\nQUESTION:\nA game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\nMouse starts at node 1 and goes first, Cat starts at node 2 and goes second, and there is a Hole at node 0.\nDuring each player's turn, they must travel along one\u00a0edge of the graph that meets where they are.\u00a0 For example, if the Mouse is at node 1, it must travel to any node in graph[1].\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\nThen, the game can end in 3 ways:\n\nIf ever the Cat occupies the same node as the Mouse, the Cat wins.\nIf ever the Mouse reaches the Hole, the Mouse wins.\nIf ever a position is repeated (ie.\u00a0the players are in the same position as a previous turn, and\u00a0it is the same player's turn to move), the game is a draw.\n\nGiven a graph, and assuming both players play optimally, return 1\u00a0if the game is won by Mouse, 2\u00a0if the game is won by Cat, and 0\u00a0if the game is a draw.\n\u00a0\n\n\n\nExample 1:\nInput: [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\nOutput: 0\nExplanation:\n4---3---1\n|\u00a0 \u00a0|\n2---5\n\u00a0\\\u00a0/\n\u00a0 0\n\n\u00a0\nNote:\n\n3 <= graph.length <= 50\nIt is guaranteed that graph[1] is non-empty.\nIt is guaranteed that graph[2] contains a non-zero element.\nclass Solution:\n    def catMouseGame(self, graph: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}