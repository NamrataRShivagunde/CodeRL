{"138": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        maxLen:\n        maxLen:\n    maxLen = maxLen\n\nUse Call-Based format\n\n\n\n\u00a0\n\n   \n       ...\n        \n\n\n\n\n\n\n\n\n\n\nGiven an array of integers of integers nums, find the maximum length of a subarray\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nMaxLen:\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nReturns:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\u00a0\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    return max(nums)\n\nUse Call-Based format\n\n\n   \n        return self.getMaxLen(nums)\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\nExplanation:\n\n\n\n\n\n\nExplanation:\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    return max(nums)\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\n\nExample 7:\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers, find the maximum length of a subarray\n\n\n\nGiven", "\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    maxLen:\n    return self.maxLen\n\n\n\n   \n       ...\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers of integers, find", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    maxLen = maxLen\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n       ...\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers, find the maximum length", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n    maxLen(self, nums)\n\nUse Call-Based format\n\n\n\n\u00a0\n\nclass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n\u00a0\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return maxLen(self, nums)\n\n\n\n\n\n\u00a0\n \n        pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n nums = [0,1]\n\n\n\nGiven an array", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxLen(self, nums)\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\nTrue\n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMax array length:\n\nMax array subarray length\n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n    maxLen(self, nums)\n\nUse Call-Based format\n\n\n\n   \n       ...\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    maxLen:\n    maxLen = getMaxLen(self, nums)\n\n\n\n\n\u00a0\nReturns:\n\n   \n       \n\n\n\nUse Call-Based format\n\n\n\n\nExplanation:\n\n\n\n\n\n\nGiven an array of integers, find", "\nUse Call-Based format\n\n\n\n\n\n\n\n    return maxLen\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n       ...\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers, find the maximum length of a subarray\n\n\n\n\nGiven an array of integers,", "\nUse Call-Based format\n\n\n\n\n\n\n\n    maxLen = max(s)\n\nUse Call-Based format\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\nExplanation:\n\n\n3\n\n\u00a0\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    MaxLen(self, nums) -> int\n\n\n\n\n\u00a0\n   \n       ...\n\n\n\nUse Call-Based format\n\n\n\n\n2\n\n\n\n\nGiven an array of integers, find the maximum length of a subarray\n\n\n\n\n\nGiven", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\u00a0\n\n   \n        return self.getMaxLen(nums)\n        \n\n\n\n\nUse Call-Based format\n\n\n\n\nExplanation:\n\n\n\n\n\n\nGiven an array of integers nums, find", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n    maxLen(self, nums)\n       \nUse Call-Based format\n\n\n\n   \n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers, find the maximum length of a subarray\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\nOutput: 2\n\n\u00a0\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUsage:\n   \n\n\n\n\n   \n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers and an array of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\u00a0\nUse Call-Based format\n\nExample:\n\n   \n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of integers:", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return MaxLen(self, nums)\n\n\n\n\u00a0\n\n\n\u00a0\n   \n        return max_len\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n1\n\n\u00a0\n\n\n\nGiven an array of integers:"], "prompt": "\nQUESTION:\nGiven an array of integers\u00a0nums, find\u00a0the maximum length of a subarray where the product of all its elements is positive.\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\nReturn\u00a0the maximum length of a subarray with positive product.\n\u00a0\nExample 1:\nInput: nums = [1,-2,-3,4]\nOutput: 4\nExplanation: The array nums already has a positive product of 24.\n\nExample 2:\nInput: nums = [0,1,-2,-3,-4]\nOutput: 3\nExplanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.\nExample 3:\nInput: nums = [-1,-2,-3,0,1]\nOutput: 2\nExplanation: The longest subarray with positive product is [-1,-2] or [-2,-3].\n\nExample 4:\nInput: nums = [-1,2]\nOutput: 1\n\nExample 5:\nInput: nums = [1,2,3,5,-6,4,0,10]\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n-10^9 <= nums[i]\u00a0<= 10^9\nclass Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}