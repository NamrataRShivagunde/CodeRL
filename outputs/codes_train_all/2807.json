{"2807": {"code": ["\n\n\n## Speed-Based\ndef consecutive_ducks(n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n___\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n\n\n\n_____\n\n# Example :\n", "\n\n## A Python-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## A Python-Based format\n\n## A Python-Based format\n\n\n \n\n\n\n\n\n\n\n\n\n\nN \u2264 \u2264 \u2264 \u2264 \u2264\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~if-not:clojure,csharp,java\n\n**_Return_**\n\n\n\n\n\n\n___\n\n___\n\n___\n\n\n\n___\n\n___\n\n\n\n___\n\n\n## Provided", "\n\n\n\n\n\n\n\n\n\n\n## Hotspot\ndef consecutive_ducks(n):\n\nreturn n\n\n# Task\n\n# Task\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n___\n\n___\n\n___\n\n___\n\n___\n\n\n", "\n\n# Examples\n\n## 1.1.1\ndef consecutive_ducks(n):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n1.1.1.1\n1.2.3.2\n1.3.3\n\n\n\n\n\n", "\n\n# Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n___\n\n___\n\n___\n\n\n\n\n \n\n\n\n\n\n \n\n___\n\n\n\n\n\n\n## The following is a code-based example :\n\n\n\n___\n\n\n    N: `5`\n\n    `6`", "\n\n\n\n_Given_ ** \\w+ ** \\\n_Return_ ** \\\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \n\n\n\n\n\n\n\n\n\n\n\n\n_____\n\n## Saving", "\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n# Law of the main experiment\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 1 \u2264 2 \n\n\n\n\n~~~if", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n \n\n   * \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \n\n\n\n\n\n\n\n\n___\n\n# The UNDER", "\n\n## Examples\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n___\n\n\n\n \n\n\n\nN >= 2\n\n\nN >= 2\n\nN > 2\n\nN > 3\n\nN == 3\n\nN == 3\n\n\n\nN > 2\n\n", "\n\n## A WELCOME\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n\n\n\n\n \n\n\n1 - 2 3 2 3 3 4\n\n2 - 2 2 3 3 3 3 4\n\n\n\n1 + 2 3 3 4 4 4\n\n\n\n\n\n# In a very long time series (", "\n\n\n\n## Hack\n# MrZizoScream\ndef consecutive_ducks(n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n0\n\n___\n\n___\n\n\n\n0\n___\n\n___\n\n\n___\n\n", "\n\n\n\n\n\n# Example\n\nif (n):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n \n      (N,) = (2,) \n\n      (N,) = (2,)\n\n\n\n  \ufffd", "\n\n## Main\ndef consecutive_ducks(n):\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \n\n\n\n\n", "\n\n\n\n\n# I\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# \n\n\n\n\n \n\n___\n\n\n\nPositive integers have so many gorgeous features.\nSome of them could be expressed as a sum of two or more consecutive positive numbers, OtherWise return false.\n___\n\n\n\n\n\n\n\n# Defin", "\n\n## Example\n\n\n\n\n\n\n\n\n\n# Example\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n_______\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n___\n\n___\n\n___\n\n___\n\n___\n\n___\n\n___\n\n___\n\n\n\n\n\n\nn = 3\n", "\n\n\n\n\n# Run the task\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n\n\n \n \n\n\n\n\n\n___\n\n___\n\n\n\nPositive integer is not a valid number.\n\n\n\n_1 \u2264 1 \u2264 1 \u2264 1 \n\n\n\n# Example", "\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n# All the tasks\n\n\n\n\n\n\n\n \u00b11 \u00b12 \u00b13 \u00b12\n\n\n## Another Example :\n\n**_Given_**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The following would be a good example:", "\n\n\n## The End of the AIKIF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_The_*, N, \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264\n\n\n\n\n\n\n\n\n\n+1", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n   \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \u2264 \n\n\n\n\n\n\n\n\n\n# A list of all the"], "prompt": "\nQUESTION:\nPositive integers have so many gorgeous features. \nSome of them could be expressed as a sum of two or more consecutive positive numbers.\n___\n\n# Consider an Example :\n\n* `10` , could be expressed as a sum of `1 + 2 + 3 + 4 `.\n___\n# Task\n\n**_Given_** *Positive integer*, N , **_Return_** true if it could be expressed as a sum of two or more consecutive positive numbers , OtherWise return false .\n___\n\n# Notes \n\n~~~if-not:clojure,csharp,java\n* Guaranteed constraint  :  **_2  \u2264  N  \u2264  (2^32) -1_** .\n~~~\n~~~if:clojure,csharp,java\n* Guaranteed constraint  :  **_2  \u2264  N  \u2264  (2^31) -1_** .\n~~~\n___\n# Input >> Output Examples:\n\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\ndef consecutive_ducks(n):\n\t\nUse Call-Based format\nANSWER:\n"}}