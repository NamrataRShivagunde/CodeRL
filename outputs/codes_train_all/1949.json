{"1949": {"code": ["\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    maximumgold(self, grid: List[List[int]):\n        \nUse Call-Based format\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\nInput: grid", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n        return self.getMaximumGold(grid)\n\n\n\n   \n    return self.getMaximumGold(grid)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nInput: grid = [[0,", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def getCurrentGold(self):\n        return self.getMaximumGold()\n\n\n\u00a0\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= gold < n\n0 <= gold < n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    # Get the maximum gold of all cells in the grid\n\n\u00a0\n\n\n   \n        #...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\nIn a gold mine grid of size m", "\nUse Call-Based format:\n\n\n\nUse Call-Based format\nUse Call-Based format:\n\n\n   \n\nUse Call-Based format:\n\n\n   \n    grid: List[List[int]]:\n\n\n\n\n\n\n\n\n\n\nIn a gold mine grid of size m * n:\n\n\n\n\nIn a gold mine grid of", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def getMinGold(self, grid: List[int]) -> int:\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= gold <= 1\n\n\n\n\ngold = 0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    return maximum_gold(self, grid)\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n0 <= grid[0].length <= n\n\n\n\n\nIn a gold mine grid of", "\nUse Call-Based format:\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format:\n\n\n   \n    pass\n\n\n\n   \n    return getMaximumGold(self, grid)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n    for i in range(1, grid", "\nUse Call-Based format:\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format:\n\n\n   \n    return getMaximumGold(self, grid)\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n    grid[0][0]", "\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\n\n   \n    maximum_gold: int\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\ufffd", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def getMaximumGold(self, grid: List[List[int]):\n        return grid[0][0]\n\n\n\u00a0\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN:\nm = 3", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n    def count(self):\n        return self.getMaximumGold(self, grid)\n\n\u00a0\n\nExample 3:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a gold mine grid of size", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n    def getLatestGold(self):\n        return self.getMaximumGold(grid)\n\n\u00a0\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a gold mine grid of size m *", "\nUse Call-Based format:\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format:\n\n\n   \n    pass\n\n\n\u00a0\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\nIn a gold mine grid of size n,\n\n\n\n\nIn a gold mine grid of size m", "\nUse Call-Based format:\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n    def getGrid(self, grid: List[int]) -> List[int]:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n0 <= grid[0].length <=", "\nUse Call-Based format:\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n    max_gold(grid[i][j])\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\nExample 3:", "\nUse Call-Based format:\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    return max(gold)\n\n\u00a0\n\n\n   \n    return self.getMaximumGold(grid)\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nm = grid.length\nn =", "\nUse Call-Based format:\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    def getMaximumGold(self, grid: List[List[int]):\n        return grid[0]\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\nm = m_0 = m", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def getMaximumGold(self, grid: List[int]) -> int:\n        return grid[0]\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= grid[0][0] <= 1\n\n\nIn", "\nUse Call-Based format:\n\n\nUse Call-Based format:\n\nUse Call-Based format\n\nUse Call-Based format:\n\n\n   \n\n\n\n   \n        # grid\n        \n        # self\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\u00a0\n\nIn a gold mine grid of"], "prompt": "\nQUESTION:\nIn a gold mine grid\u00a0of size m * n,\u00a0each cell in this mine has an integer representing the amount of gold\u00a0in that cell,\u00a00 if it is empty.\nReturn the maximum amount of gold you\u00a0can collect under the conditions:\n\nEvery time you are located in a cell you will collect all the gold in that cell.\nFrom your position you can walk one step to the left, right, up or down.\nYou can't visit the same cell more than once.\nNever visit a cell with\u00a00 gold.\nYou can start and stop collecting gold from\u00a0any position in the grid that has some gold.\n\n\u00a0\nExample 1:\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n\nExample 2:\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n\n\u00a0\nConstraints:\n\n1 <= grid.length,\u00a0grid[i].length <= 15\n0 <= grid[i][j] <= 100\nThere are at most 25\u00a0cells containing gold.\nclass Solution:\n    def getMaximumGold(self, grid: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}