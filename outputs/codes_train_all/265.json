{"265": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n   \n        return maxNonOverlapping(self, nums, target)\n\n\nGiven an array nums and an integer target:\n\n   \n\n\n\n\n\n\n\n\n\n\nGiven an array nums and an integer target:\n\n\n\n\nGiven an array nums", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        pass\n        \n\n\nGiven an array nums and an integer target, return the maximum number of non-overlapping subarrays.\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nInput: nums = [1,2,3,4,5,2,3,4,5,3,4,5,5]\nOutput: 1\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and an integer target", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    maxNonOverlapping(self, nums, target):\n    return target\n\nUse Call-Based format\n\n\n\nGiven an array nums and an integer target.\n\n   \n        \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and an integer target.", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n    maxNonOverlapping(self, nums: List[int], target: int):\n\n\n\n\n\n   \n       ...\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array nums and an integer target.\n\n\nGiven an", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return maxNonOverlapping(self, nums, target)\n\nGiven an array nums and an integer target:\n\n\n   \n        pass\n\n\n\n\nUse Call-Based format\n\n\n\n\nOutput: target\n\nGiven an array nums and an integer target:\n\n\n\n\nGiven an array nums", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n    maxNonOverlapping(self, nums: List[int], target: int)\n\n\n\n   \n        pass\n\n\n\n\nUse Call-Based format\n\n\n\nReturns the maximum number of non-overlapping non-empty subarrays.\n\n\n\n\n\nGiven an array", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        return maxNonOverlapping(self, nums, target)\n\n\n\n   \n\n\n\n\n\n\n\n\n\nReturns the maximum number of non-overlapping subarrays with sum equal to target(1).\n\n\n\n\nGiven an array nums", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        return self.maxNonOverlapping(nums, target)\n\n\nGiven an array nums and an integer target:\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\nReturns the maximum number of non-overlapping arrays\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxNonOverlapping(self, nums: List[int], target: int) -> int\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    pass\n\n\nGiven an array nums and an integer target:\n\n   \n        pass\n\n\n\n\n\nMaxNonOverlapping(nums, target)\n\n\n\nMaxNonOverlapping(nums, target)\n\n\n\n\nGiven an array nums and an", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    maxNonOverlapping(self, nums, target):\n        return 1\n\n\n\n   \n       ...\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array nums and an integer target.\n\n\n\n\nGiven an array", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    maxNonOverlapping(self, nums, target):\n        return nums[0]\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array nums and an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def maxNonOverlapping(self, nums: List[int], target: int):\n        return self.maxNonOverlapping(nums, target)\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def maxNonOverlapping(self, nums, target: int):\n        return max(nums, target)\n\nUse Call-Based format\n\n\n\n\n   \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= nums <= 10^4\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\n\n\n\n\n    maxNonOverlapping(self, nums, target):\n        return self.maxNonOverlapping(nums, target)\n\nUse Call-Based format\n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\nGiven an array nums and an integer target.\n\n\n\n\n\nGiven an array nums and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    maxNonOverlapping(self, nums, target: int):\n        return nums.max()\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array nums and an integer target.\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n   \nGiven an array nums and an integer target.\n\n\n   \n        return maxNonOverlapping(self, nums, target)\n\n\nGiven an array nums and an integer target:\n\n\n\n\n\n\n\nGiven an array nums and an integer target:\n\n\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        # TODO:\n\n\nGiven an array nums and an integer target:\n\n   \n        pass\n\n\nGiven an array nums and an integer target:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and an integer target:\nReturns", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n        return self.maxNonOverlapping(nums, target)\n        \nUse Call-Based format\n\n\n   \n    pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array nums and an integer target.\n\n\nGiven an"], "prompt": "\nQUESTION:\nGiven an array nums and an integer target.\nReturn the maximum number of non-empty\u00a0non-overlapping subarrays such that the sum of values in each subarray is equal to target.\n\u00a0\nExample 1:\nInput: nums = [1,1,1,1,1], target = 2\nOutput: 2\nExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).\n\nExample 2:\nInput: nums = [-1,3,5,1,4,2,-9], target = 6\nOutput: 2\nExplanation: There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\nExample 3:\nInput: nums = [-2,6,6,3,5,4,1,2,8], target = 10\nOutput: 3\n\nExample 4:\nInput: nums = [0,0,0], target = 0\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= nums.length <=\u00a010^5\n-10^4 <= nums[i] <=\u00a010^4\n0 <= target <= 10^6\nclass Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}