{"157": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return self.isMatch(s, p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s), implement wildcard", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"a*b\"\np = \"c*b\"\n\nOutput: false\n\n\nExample 5:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven an input string", "\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str) -> bool:\n\n\n\n\n\n   \n\n\n\n\n    s = \"aaa\"\np = \"aaa\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s), implement wildcard", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    return self.isMatch(s, p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string and a pattern (p):\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\ns = \"abc\"\np = \"abc\"\nOutput: false\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s) and a pattern (p):\n\n\n", "\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def isMatch(self, s, p: str) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\nExample 6:\n\n\n\n\n\n\n\nGiven an input", "\n\nUse Call-Based format\n\n\n    def isMatch(self, s, p: str) -> bool:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\ns = \"?\"\np = \"*\"\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str) -> bool:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nReturns:\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = 'abcd'\n\n\n\n\n\n\n\n\nGiven an input string", "\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n    self.isMatch(s, p) -> bool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"aa\"\np", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    self.isMatch(s, p) -> bool:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = s\np = p\n\n\n\n\n\n\n\n\nGiven an input", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\ns = \"a\"\np = \"b\"\n\n\nExample 6:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s) and a", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\ns = \"\"\np = \"\"\n\n\n\n\n\n\ns = \"\"\np = \"\"\n\n\n\n\n\nReturns:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s), implement wildcard", "\nUse Call-Based format\n\n\n\n    def isMatch(self, s: str, p: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"a\"\np = \"b\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input", "\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str):\n        return s == p\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return self.isMatch(s, p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s),", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = 'abc'\np = 'ab'\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s),", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def isMatch(self, s, p: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"a\"\np = \"b\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nUse Call-Based format\n\n\ns = \"aa\"\np = \"aaa\"\n\nExample 6:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 6:\n\n\n\n\n\n\n\nGiven an input string (s), implement", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\ns = \"a*b\"\np = \"b\"\nOutput: false\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string (s", "\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str):\n\n    return self.isMatch(s, p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"abc\"\np = \"abc\"\n\n\n\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n    def isMatch(self, s: str, p: str) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def isMatch(self, s: str, p: str) -> bool:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an input string ("], "prompt": "\nQUESTION:\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\n\nThe matching should cover the entire input string (not partial).\n\nNote:\n\n\n       s\u00a0could be empty and contains only lowercase letters a-z.\n       p could be empty and contains only lowercase letters a-z, and characters like ?\u00a0or\u00a0*.\n\n\nExample 1:\n\n\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n\nExample 2:\n\n\nInput:\ns = \"aa\"\np = \"*\"\nOutput: true\nExplanation:\u00a0'*' matches any sequence.\n\n\nExample 3:\n\n\nInput:\ns = \"cb\"\np = \"?a\"\nOutput: false\nExplanation:\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n\nExample 4:\n\n\nInput:\ns = \"adceb\"\np = \"*a*b\"\nOutput: true\nExplanation:\u00a0The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\n\n\nExample 5:\n\n\nInput:\ns = \"acdcb\"\np = \"a*c?b\"\nOutput: false\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}