{"46": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\nEnter a test case of the bot:\n\n-----Input-----\n\nThe bot is ready to play a test case of the bot\n\n-----Input-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors:\n", "\n\n\n\n\n\n\n\n\nThe bot has played $n$ rounds\n\nThe first round:\n\nThe bot has played $n$ rounds\n\nThe second round:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Input-----\n\n\n\n\n\n\n\n\n\nRock", "\n\n-----Help-----\n\nThis bot's game is taking place.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors\n\nRock paper scissors\n\n\n\n\n\n\n\n\nRock paper scissors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper sciss", "\n\n\n\n\n\n\n\n\n\n\n\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\n\nThe second line contains a single integer $n$ ($1 \\le t \\le 1000$)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper", "\n\n\n\n\n-----Error-----\n\nYour bot has not been played.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can play $n$ test cases.\n\n\n\n\n\n\nTactic:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Input-----\n\nThe bot has played\n\n\n\n", "\n\n\n\n\n\n\n\n\n\nAnother example:\n\n\nThe bot is able to play \"Rock paper scissors\".\n\nThe bot can play \"Paper scissors\":\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe last line contains a single integer $t$\n\n\n", "\n\n-----Documentation-----\n\n---\n\n-----Experimental-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTactic\n\n\n\n\n\nTactic\n\nThe first line contains a single integer $t$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first line contains a single integer", "\n\n\n\n\n-----Input-----\n\nType $n$\n\n\n\n\n\n\n\n\n\n\n\n\n$n$\n\n\n\n\n\nRock, S, Scissors, P\n\n\n-----Input-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock, S, S", "\n\n\nRock paper scissors\n\n\n\n\n\n\n\n\n\n\n\n\n-----Example-----\n\nThe bot is looking for test cases in $t$\n\n\n\n\n\n\n\n\n\n\nRock paper scissors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors \n\n", "\n\n\n\nRock paper scissors\n\nRock paper scissors\n\nRock paper scissors\n\nRock paper scissors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first round will play all the test cases.\n\n\n\n\n\n\n\n\nRock", "\n\n-----Altitude-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe bot has been played with the following input:\n\n-----Input-----\n\nYou have played with the bot\n\n-----Altitude-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is a good", "\n\n\n\n\n\n\n\n\n\n\n    Example:\n\n    $t = 1000\n\n    $n = 1000\n\n   \n\n\n\n\n\n\n\n\n\nRock paper scissors\n\n\n-----Input-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors with $", "\n\n\n\n\n\n\n\nWelcome to the bot\n\n-----Input-----\n\n\n\n\n\nYou play a bot to play \"Rock paper scissors\"\n\n\n-----Input-----\n\nThe first line contains a single integer $t$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper sciss", "\n\n\n\n\n\n\n\n\n\n\nYou have played $n$ rounds\n\nBoring:\n\nThe bot has played $n$ rounds\n\nBoring:\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----END CLEANUP-----\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors\n\nRock paper scissors\n\n\n-----Error-----\n\nYou don't have a game.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou have played $n$ rounds.\n\nThe first line contains the number of test cases\n\nThe second line contains the number of test cases\n\nThe first line contains the number of test cases\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock S paper", "\n\n\n\n\n\n\n\n\n\n\n\nRock, S, S, P, Rock, S, S, S, S, P\n\n-----Example-----\n\nThe bot is playing the game.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe bot is played with\n\n\n\n\n\n\n\n\ns_2", "\n\n-----Example-----\n\n\n\n\n\n\n\n\n\n\n\nThe first line contains a single integer $t$. The first line contains a single string $s$\n\nThe second line contains a single integer $n$.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock Rock paper sc", "\n\n\n\nRock paper scissors\n\n\n-----Input-----\n\nThe first line contains a single integer $t$.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors\n\nR", "\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper scissors\n\nRock paper scissors\n\n\n\n\n\n\n\n\nRock paper scissors\n\n\n\n\nRock paper scissors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRock paper sciss"], "prompt": "\nQUESTION:\nRecently, you found a bot to play \"Rock paper scissors\" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string $s = s_1 s_2 \\dots s_{n}$ of length $n$ where each letter is either R, S or P.\n\nWhile initializing, the bot is choosing a starting index $pos$ ($1 \\le pos \\le n$), and then it can play any number of rounds. In the first round, he chooses \"Rock\", \"Scissors\" or \"Paper\" based on the value of $s_{pos}$:   if $s_{pos}$ is equal to R the bot chooses \"Rock\";  if $s_{pos}$ is equal to S the bot chooses \"Scissors\";  if $s_{pos}$ is equal to P the bot chooses \"Paper\"; \n\nIn the second round, the bot's choice is based on the value of $s_{pos + 1}$. In the third round\u00a0\u2014 on $s_{pos + 2}$ and so on. After $s_n$ the bot returns to $s_1$ and continues his game.\n\nYou plan to play $n$ rounds and you've already figured out the string $s$ but still don't know what is the starting index $pos$. But since the bot's tactic is so boring, you've decided to find $n$ choices to each round to maximize the average number of wins.\n\nIn other words, let's suggest your choices are $c_1 c_2 \\dots c_n$ and if the bot starts from index $pos$ then you'll win in $win(pos)$ rounds. Find $c_1 c_2 \\dots c_n$ such that $\\frac{win(1) + win(2) + \\dots + win(n)}{n}$ is maximum possible.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nNext $t$ lines contain test cases\u00a0\u2014 one per line. The first and only line of each test case contains string $s = s_1 s_2 \\dots s_{n}$ ($1 \\le n \\le 2 \\cdot 10^5$; $s_i \\in \\{\\text{R}, \\text{S}, \\text{P}\\}$)\u00a0\u2014 the string of the bot.\n\nIt's guaranteed that the total length of all strings in one test doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print $n$ choices $c_1 c_2 \\dots c_n$ to maximize the average number of wins. Print them in the same manner as the string $s$.\n\nIf there are multiple optimal answers, print any of them.\n\n\n-----Example-----\nInput\n3\nRRRR\nRSP\nS\n\nOutput\nPPPP\nRSP\nR\n\n\n-----Note-----\n\nIn the first test case, the bot (wherever it starts) will always choose \"Rock\", so we can always choose \"Paper\". So, in any case, we will win all $n = 4$ rounds, so the average is also equal to $4$.\n\nIn the second test case:   if bot will start from $pos = 1$, then $(s_1, c_1)$ is draw, $(s_2, c_2)$ is draw and $(s_3, c_3)$ is draw, so $win(1) = 0$;  if bot will start from $pos = 2$, then $(s_2, c_1)$ is win, $(s_3, c_2)$ is win and $(s_1, c_3)$ is win, so $win(2) = 3$;  if bot will start from $pos = 3$, then $(s_3, c_1)$ is lose, $(s_1, c_2)$ is lose and $(s_2, c_3)$ is lose, so $win(3) = 0$;  The average is equal to $\\frac{0 + 3 + 0}{3} = 1$ and it can be proven that it's the maximum possible average.\n\nA picture from Wikipedia explaining \"Rock paper scissors\" game:  $\\beta$\nUse Standard Input format\nANSWER:\n"}}