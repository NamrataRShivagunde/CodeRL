{"318": {"code": ["\n    def maxSizeSlices(self, slices: List[int]) -> int:\n\n\n\n    max_size_slices(self, slices) -> int\n\n\n\n\n   \n\n\n\n   \n    maxSizeSlices(self, slices):\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices\n\n", "\n    def maxSize(self, slices: List[int]) -> int:\n        \n\n\n\nUse Call-Based format\n\n\n\n\n   \n    return self.maxSizeSlices()\n\n\n\n\n\n    maxSliceSize = 3\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\nAre", "\n    def maxSizeSlices(self, slices: List[int]) -> int:\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n   \n    maxSizeSlices(self, slices: List[int]) -> int\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\nIf you", "\n    return maxSliceSize\n\n\n\n    slices: List[int]\nOutput: 3\n\n\n\nUse Call-Based format\n\n\n   \n    maxSliceSize: 3\n\n\n\n   \n    maxSizeSlices(self, slices) -> int\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices\n\n\n\n\nIf you", "\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        return len(slices)\n\n\n\n\n\n\n\n\n\n   \n    maxSizeSlices(self, slices) -> int\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\nThere are 3", "\n    return max_size_slices(self, slices)\n\nUse Call-Based format\n\n\n    return max_size_slices(self, slices)\n\n\n\n\n\n   \n    return 1\n\n\n\n   \n        return 2\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\nIf you", "\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        return len(slices)\n\n\n\n\n\n\n\n\n\n   \n    maxSizeSlices(self, slices)\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\nIf", "\n    def maxSizePizzas(self, slices: List[int]):\n        return 10\n\n\n\n\n\n\n\n\n\n   \n        return 3\n\n\nThere are no pizza with 3n slices of varying size\n\n   \n\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices\n\n\n\n\nIf", "\n    return max_size_slices\n\n\n\n    size = int\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n    size = int\n\n\n\n\nOutput: 10\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\nThere is a", "\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        \"\"\"\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    return max(slices)\n\n\n\n\n\n   \n        return 3\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\nAre", "\n    self.maxSizeSlices = max_size_slices\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        return 1\n        \n\n\n\nOutput: 100\n\nReturns:\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\nThere are a", "\n    return self.maxSizeSlices(slices)\n\n\n\n    return self.maxSizeSlices(slices)\n\n\nUse Call-Based format\n\n\n   \n    return self.maxSizeSlices\n\n\n\n\n       \n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\n\nThere is a piz", "\n    def maxSizeSlices(self, slices: List[int]) -> int:\n\n\n\n\n\n\n\n\n   \n\n    MaxSizeSlices(self, slices) -> int\n\n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe pizza is of size 3n:\n\n\n\nThere are 3n", "\n    SliceSize = 3\n\nUse Call-Based format\n\n\n    return self.maxSizeSlices\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\nThere are 3n pizzas with varying size.\n\n   \n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices\n\n\n\n\nThere is a", "\n    return maxSlices(self, slices)\n\n\n\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        \n\n\n\n\n\n   \n    MaxSizeSlices(self, slices) -> int\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices\n\n\n\n\nIf you have", "\n    def maxSizeSlices(self, slices: List[int]) -> int:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\nExplanation:\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices\n\n\n\n\nThere is a", "\nUse Call-Based format\n\n\n    print(self, slices)\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n   \n\n\n\n   \n        MaxSizeSlices(self, slices)\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\n\nThere are no", "\n    pass\n\nUse Call-Based format\n\n    sizeSlices(self, slices: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\n   \n    maxSizeSlices(self, slices):\n        return 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a pizza with 3nThere", "\n    return 0\n    \n\n\n    print \"Not called\"\n\n\n\nUse Call-Based format\n\n\nOutput:\n\n    0\n\n\n   \n    maxSliceSize = 3\n        \n\n\n   \n\n\n\n\n\n\n\n\n\nThere is a pizza with 3n slices of varying size\n\n\n\n\nThere is a pizza", "\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        return slices[i]\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n    maxSizeSlices(self, slices):\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe pizza with 3"], "prompt": "\nQUESTION:\nThere is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:\n\nYou will pick any pizza slice.\nYour friend Alice\u00a0will pick\u00a0next slice in anti clockwise direction of your pick.\u00a0\nYour friend Bob\u00a0will\u00a0pick\u00a0next slice in clockwise direction of your pick.\nRepeat\u00a0until\u00a0there are no more slices of pizzas.\n\nSizes of Pizza slices is represented by circular array slices in clockwise direction.\nReturn the maximum possible sum of slice sizes which you can have.\n\u00a0\nExample 1:\n\nInput: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n\nExample 2:\n\nInput: slices = [8,9,8,6,1,1]\nOutput: 16\nOutput: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.\n\nExample 3:\nInput: slices = [4,1,2,5,8,3,1,9,7]\nOutput: 21\n\nExample 4:\nInput: slices = [3,1,2]\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= slices.length <= 500\nslices.length % 3 == 0\n1 <= slices[i] <= 1000\nclass Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}