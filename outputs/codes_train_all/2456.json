{"2456": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    def backspaceCompare(self, S, T: str):\n        return S == T\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS\u00a0and T\u00a0are equal\n\n\n\n\n\nGiven two strings S and T, returns true", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nS and T become empty\n\n\n\n   \n\n\n\n    def backspaceCompare(self, S, T):\n        \n\n\n\n\n\n\n\n\n\n\n\nGiven two strings S and T, return if they are equal\n\n\n\n\nGiven two strings S and T,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def backspaceCompare(self, S, T: str):\n        return S == T\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nS and T are two strings.\n\n\n\nGiven two", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def backspaceCompare(self, S: str, T: str):\n        return S == T\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven two strings S and T,\n\n\n\nGiven two strings S and T", "\nUse Call-Based format\n\n\n\n\n\n\n\n    return self.backspaceCompare(S, T)\n\nUse Call-Based format\n\nOutput:\n\n\n\n\n\n   \n    pass\n\n\n\u00a0S and T become \"\".\n\n\n\n\n\n\n\n\n\n\n\nS = \"a#b#c\"\n\n\n\nS =", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def backspaceCompare(self, S: str, T: str):\n        \n\n\n\n\n   \n\n\n\n\n\n\n\nS = \"a\"\nT = \"b\"\n\n\n\n\nS = \"b\"\nT = \"\"\n\n\n\n\nGiven two\u00a0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def backspaceCompare(self, S: str, T: str):\n        \nUse Call-Based format\n\n\n\n\n   \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS = \"a\"\nT = \"b\"\n\n\n\nGiven two", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nS\u00a0 and T\u00a0are equal.\n\n\n\n   \n\n\nS and T are strings\n\n\n    def backspaceCompare(self, S: str, T: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings S and T, and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def backspaceCompare(self, S: str, T: str):\n        return S == T\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\nS and T are equal\n\n\n\n\nS and T are not empty.\n\n\n\nGiven two\u00a0strings S", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def backspaceCompare(self, S: str, T: str):\n        \n\n\n\n\n    def backspaceCompare(self, S: str, T: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings S and T,", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\nS\u00a0and T\u00a0are identical.\n\n\n   \n\n\nS and T must be strings\n\n\n\n\n\n\n\nS = \"ab\"\nT = \"c\"\n\n\n\n\n\nS = \"ab\"\n\n\n\n\nGiven two\ufffd", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n    backspaceCompare(self, S, T) -> bool:\n        \n\n\n\n\n\n\n\n\n\n\nGiven two strings S and T, return if they are equal.\n\n\n\n\n\n\nGiven two strings S and T", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def backspaceCompare(self, S: str, T: str):\n\n\n\n\n\n   \n        pass\n        \nUse Call-Based format\n\n\n\n\n\n\nS and T are the same\n\n\n\nS and T are the same.\n\n\n\n\n\nS\u00a0and T are the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        return S == T\n\n\n\n\n\n\n\n\n\n\n\n\nS\u00a0 and T\n\n\n\n\n\nGiven two\u00a0strings S", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def backspaceCompare(self, S: str, T: str) -> bool:\n\n\n\n\n\n   \n    backspaceCompare(self, S, T) -> bool:\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\nGiven two strings S and T, returns True", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nS\u00a0and T\u00a0are identical?\n\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\nS and T must be at least two characters long\n\n\n\nS and T are of the same length\n\n\n\n\n\nGiven two\u00a0strings", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\n\n   \n\nGiven two strings S and T, return true if they are equal\n\n\n\n\n\n\n\n\n\nGiven two strings S and T, return true if they are equal.\n\n\n\n\nGiven two strings", "\n\n\n\nUse Call-Based format\nUse Call-Based format\nS is a string, T is a string.\n\n\n   \n\n\nS is a string, T is a string\n\n\n    def backspaceCompare(self, S, T):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS = \"a\"\nT = \"\"\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\nS = \"a#b#c\"\nT = \"a#b#c\"\n\n\n\n   \n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nS and T are equal\n\n\nS and T are not empty.\n\n\n\nGiven two\u00a0", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        \n\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nS is a string and T is a string\n\n\n\n\nGiven two\ufffd"], "prompt": "\nQUESTION:\nGiven two\u00a0strings\u00a0S\u00a0and T,\u00a0return if they are equal when both are typed into empty text editors. # means a backspace character.\nNote that after\u00a0backspacing an empty text, the text will continue empty.\n\nExample 1:\nInput: S = \"ab#c\", T = \"ad#c\"\nOutput: true\nExplanation: Both S and T become \"ac\".\n\n\nExample 2:\nInput: S = \"ab##\", T = \"c#d#\"\nOutput: true\nExplanation: Both S and T become \"\".\n\n\nExample 3:\nInput: S = \"a##c\", T = \"#a#c\"\nOutput: true\nExplanation: Both S and T become \"c\".\n\n\nExample 4:\nInput: S = \"a#c\", T = \"b\"\nOutput: false\nExplanation: S becomes \"c\" while T becomes \"b\".\n\nNote:\n\n1 <= S.length <= 200\n1 <= T.length <= 200\nS\u00a0and T only contain\u00a0lowercase letters and '#' characters.\n\nFollow up:\n\nCan you solve it in O(N) time and O(1) space?\nclass Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}