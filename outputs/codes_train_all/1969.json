{"1969": {"code": ["\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, sumNumbers returns a number.\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary tree containing digits from", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary tree containing digits from", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only\n\n\n\n\nGiven a binary tree", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n        SumNumbers(self, root)\n\n\nGiven a binary tree containing digits from 0-9 only, sumNumbers()\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a binary tree containing digits only\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a binary tree containing digits from 0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven a binary tree containing digits from 0-9 only\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n  0    1\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path\n\n\n\nGiven", "\n\n\n -> int:\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n        1\n        2\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary tree containing digits", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, sumNumbers() will return the sum of all root-to-leaf numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary tree containing", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n    1\n    2\n    3\n   \u00a0/\u00a03\n\nNote:\u00a0A leaf is a leaf.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a binary tree containing digits only\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\nUse Call-Based format\nGiven a binary tree containing digits only\n\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSum\nGiven a binary tree containing digits from 0-", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\nsumNumbers(root)\n\nGiven a binary", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven a binary tree containing digits only\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven a binary tree containing digits only\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a binary tree containing digits from 0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a binary tree containing digits", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path represents a number.\n\n\n\n\n\n\n\n\n\nGiven a binary tree containing digits from 0-9 only.\n\n\n\n\nGiven a", "\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n  1  2\n  3  3\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven a binary tree containing digits from 0-9 only,\n\n\n\n\nGiven a binary"], "prompt": "\nQUESTION:\nGiven a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.\n\nAn example is the root-to-leaf path 1->2->3 which represents the number 123.\n\nFind the total sum of all root-to-leaf numbers.\n\nNote:\u00a0A leaf is a node with no children.\n\nExample:\n\n\nInput: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n\nExample 2:\n\n\nInput: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n\u00a0/ \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}