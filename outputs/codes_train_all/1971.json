{"1971": {"code": ["Use Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   1. 1. 0.0.", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n          \nUse Call-Based format\n\n\n    maximalSquare:\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a 2D binary matrix filled with", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n          \n\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nGiven a 2", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n       \n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a 2D binary matrix filled with", "\nUse Call-Based format\nUse Call-Based format\n    \n\nUse Call-Based format\n\n\n\n          \n\n\n    maximalSquare:\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven a 2D binary matrix filled with 0's", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n           \n\n    maximalSquare(self, matrix: List[List[str]]):\n        \n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a 2D binary matrix filled with", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n       \n\n\n\n    pass\n\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a 2D binary matrix filled with 0's", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n       pass\n        \n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nGiven a 2D binary matrix", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n          \n\n\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n        \nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nThe following is a very useful", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\nUse Call-Based format\n1 0 1 1\n\n\nUse Python Call-Based format\n\n\n\n\n\nUse Python format\n\nExample:\n\n1 0 1", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n          \n\n\n\n\n    maximalSquare:\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nExample:\n\n\n1 0 1 1 1\n\n\n\n\n\nGiven a 2D binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n        \nUse Call-Based format\n\n maximalSquare(self, matrix):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D binary matrix filled", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n          \n\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a 2D binary matrix filled with 0's and 1's\n1\nGiven", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n          \n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a 2D binary matrix filled with", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n    maximalSquare(self, matrix: List[str]) -> int:\n       \nUse Class-Based format\n\nclass maximalSquare:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D binary", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n          \n\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n        \nUse Call-Based format\n\nUse Python-based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a 2D binary matrix", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n          \n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nExample:\n\n\nExample:\n\n\n\nGiven a 2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n          \n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a 2D binary matrix filled with", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n          \n\nUse Call-Based format\n\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\nUse Python-based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a 2D binary matrix filled with 0's and", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n           \n\nUse Call-Based format\n\n\n    maximalSquare(self, matrix: List[List[str]]) -> int:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a 2D binary matrix filled"], "prompt": "\nQUESTION:\nGiven a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\nExample:\n\n\nInput: \n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nOutput: 4\nclass Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}