{"2455": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime and given an integer queryTime\n\n\n\nGiven two", "\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime: int) -> int:\n    \nUse Call-Based format\n\n\n\n\n   \n\n\nGiven two integers startTime and endTime and given an integer queryTime\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime", "\nUse Call-Based format\n\n\n    return busyStudent(self, startTime, endTime, queryTime)\n\n\n\n\n\n   \n    return busyStudent(self, startTime, endTime, queryTime)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n    1 <= queryTime <= 100\n\n   \n\n\n   \n\n\ngiven two integer arrays", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime):\n        return 1\n\n\n\n\n\n   \n\n\n\n   \n    def busyStudent(self, startTime, endTime, queryTime):\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\nGiven two", "\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime):\n        return 1\n\n\n\n\n\n   \n    return 1\n\n\n\n\nGiven two integer arrays startTime and endTime and given an integer queryTime:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime", "\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime, queryTime):\n   ...\n\n\n\n\n\n   \n   ...\n\n\nGiven two integer arrays startTime and endTime and given an integer queryTime\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime: int):\n        return 1\n\n\n\n\n\n   \n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array startTime and endTime and given an integer queryTime\n\n\n\nGiven two integer", "\nUse Call-Based format\n\nstartTime, endTime, queryTime\n\nExplanation:\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n    pass\n\n\n\nGiven two integers startTime and endTime and queryTime\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime and", "\nUse Call-Based format\n\n\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\nQuery time is not an integer\n\nQuery time is an integer\n\n\n\n\nGiven two integer arrays startTime and endTimeGiven", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime: int):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\nGiven two integer arrays startTime and endTime and queryTime\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return busyStudent(self, startTime, endTime, queryTime)\n\n\n\n\n\n    def countStudents(self, startTime, endTime, queryTime: int):\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime and\n\n\nGiven two integer", "\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime: int):\n    \"\"\"\nUse Call-Based format\n\n\n\n\n\n   \n\n\nGiven two integer arrays startTime and endTime and given an integer queryTime\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return 1\n\n\n\nstartTime.length == endTime.length\nqueryTime.length == queryTime.length\nExplanation:\n\n\n   \n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\ngiven startTime and endTime and queryTime:\n\n\n\nGiven two integer arrays startTimeGiven", "\nUse Call-Based format\n\n\nStart and end dates.\n\nStart and end times.\n\nEnd times.\n\nEnd times.\n\nExplanation:\n\n\n\n\n\n\n   \n        pass\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime and queryTime:\n\n\n\nGiven two integer", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return 1\n\nUse Call-Based format\n\n\n\n\nstartTime.length == queryTime.length\nendTime.length == queryTime.length\n\nExplanation:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return self.busyStudent(startTime, endTime, queryTime)\n\n\n\n\n\n   \n\n\nGiven two integer arrays startTime and endTime and given an integer queryTime\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime", "\nUse Call-Based format\n\nstartTime.length == endTime.length == queryTime.length\nOutput: 1\nExplanation: We have 3 students.\n\n\n\n\n\n\n\n   \n\n\n\n   \n    return 1\n\n\n\n\n\n\n\n\n\n\nGiven two integers startTime and endTime and given an integer queryTime:\n\n\n   \n\nGiven two", "\nUse Call-Based format\n\nstartTime, endTime, queryTime\n\nExplanation:\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nGiven two integer arrays startTime and endTime and queryTime:\n\n   \n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two integer arrays startTime and endTime and", "\nUse Call-Based format\n\n\n    def busyStudent(self, startTime, endTime, queryTime, queryTime) -> int:\n        return 1\n\n\n\n\n\n   \n\n\nGiven two integer arrays startTime and endTime and given an integer queryTime\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of startTime and endTime and", "\nUse Call-Based format\n\n\n    self.busyStudent(startTime, endTime, queryTime)\n\nUse Call-Based format\n\n\n\n\n   \n\n\nGiven two integer arrays startTime and endTime and given an integer queryTime:\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    startTime.length == queryTime."], "prompt": "\nQUESTION:\nGiven two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime\u00a0lays in the interval [startTime[i], endTime[i]] inclusive.\n\u00a0\nExample 1:\nInput: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.\n\nExample 2:\nInput: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime.\n\nExample 3:\nInput: startTime = [4], endTime = [4], queryTime = 5\nOutput: 0\n\nExample 4:\nInput: startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7\nOutput: 0\n\nExample 5:\nInput: startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5\nOutput: 5\n\n\u00a0\nConstraints:\n\nstartTime.length == endTime.length\n1 <= startTime.length <= 100\n1 <= startTime[i] <= endTime[i] <= 1000\n1 <=\u00a0queryTime <= 1000\nclass Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}