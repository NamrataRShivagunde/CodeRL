{"497": {"code": ["\n\n\n\nUse Call-Based format\n\nThe jobScheduling method is called for every job.\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\nWe have n jobs\n\n\nWe have n jobs\n\nExplanation:\n\n\n\nWe have n jobs,", "\n    Use Call-Based format\n\n\n\n\n\n\n\n\nmaxProfit = 1\nmaxProfit = 1\n\nExplanation:\n\nProfit obtained 6 = 0\n\nExample 4:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n jobs\n\nExample 4:\n\n\n\n\n\nWe have n jobs, where every", "\nUse Call-Based format\n\n\n\n\nWe have n jobs\n\n\n\n\n\nWe have n jobs\n\nUse Call-Based format\nWe have n jobs\n\n\n\n    # JobScheduling\n       \n\n\nendTime = [1,1,1]\n\n\n\n\n\n\n\nYou have n jobs\n\n\n\n\n\nn jobs = 1 \u00a0", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nWe have n jobs, with a max of 5, 10, 10, 10, 10, 10, 10, 20\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n1 + 3\n\n\n\n\n\nn jobs scheduled\n\n\n1 + 3\n\n\n\nWe have n jobs, where", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nWe have n jobs.\n\n\n\n\n\nWe have n jobs, where every job is scheduled from start to end.\n\n\n\n\n\n    \"\"\"\n\n\nendTime = 10^4\n\n\n\n\n\n\n\n\nWe have n jobs\n\n\n\n\nWe have n jobs, where every job", "\n\n\n\n\nUse Call-Based format\n\nWe have n jobs, and you need to call jobScheduling() on the subset chosen.\n\n\n\n\n\n\n\nWe have n jobs, and you want to call jobScheduling() on the subset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProfit of 50 + 70 + 60.\n\n\n\n1", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nWe have n jobs\n\nWe have n jobs\n\nExplanation:\n\n\n\n    jobScheduling(self, startTime, endTime, profit) -> int:\n        \n\n\nendTime = 10^3\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n jobs, where every job is scheduled", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nWe have n jobs\n\nExplanation:\n\nWe have n jobs\n\n\n\n\nWe have n jobs\n\nendTime = [3,2,4]\n\n\n\n\n\n\n\nThe subset has been chosen.\n\n\n\n\nWe have n jobs, where every", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nWe have n jobs, we have n jobs and we have n profit\n\n\n\n\n\n\nWe have n jobs\n\n\n\n   ...\n\n\nendTime = [4]\n\n\n\n\n\n\n\n\nWe have n jobs\n\n\n\nWe have n jobs\n\nWe have n jobs,", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nExplanation:\n\n1 < n < 3\n\n\n\n\n\n\n2 < n < 3\n\n\n\n\n\n\n\nendTime = [1,2,3]\n\n\n\n\n\n\n\n\n\n\n\n\nThe subset has been chosen.\n\n\n0 <= i < 3", "\n    pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWe have n jobs\n\n\n\n    @jobScheduling\n    @jobScheduling(startTime: List[int], endTime: List[int], profit: List[int])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 < n < 1\n1 <", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nThe subset chosen is the first job, and the profit is the maximum profit.\n\n\n\n\n\nendTime = [3,6]\n\n\n\n\n\n\n\n\n\n\n\nWe have n jobs, where every job is done \n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nWe have n jobs\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nWe have n jobs\n\n\n    pass\n\n\n\nendTime = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n jobs, where every job is scheduled from", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nWe have n jobs, the number of jobs you choose.\n\n\n\n\nWe have n jobs, and we have n profit\n\n\n\n\n\n   ...\n\n\n\n\n\n\n\n\n\nWe have n jobs\n\nExplanation:\n\n\n\n\nWe have n jobs, where we have", "\n\n\n\n\nUse Call-Based format\nWe have n jobs\n\nWe have n jobs\n\n\n\n\n\n   \n\n\n\n\nWe have n jobs\n\n\n\n\n\n    #jobScheduling(self, startTime, endTime, profit) -> int\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\nWe have n jobs, where we have n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nThe subset is chosen with the jobScheduling method.\n\n\n\n    self = self\n\n\nendTime = [5,10,6]\n\n\n\n\n\n\n\n\n1\n\n\n\n\nWe have n jobs, where every", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nWe have n jobs\n\n\nUse Call-Based format\n\nExplanation:\n\nUse Call-Based format\n\n\n\n    self.jobScheduling(startTime, endTime, profit)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n jobs, where every job is", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nExample 4:\n\nInput: startTime = [1,2,3]\nOutput: 1\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe subset is scheduled\n\nExample 4:\n\n\n\n\n\nWe have n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nThe subset chosen is from the beginning to the end of the time range\n\n\n\n\n\n\n\n\n   \n    jobScheduling(self, startTime, endTime, profit) -> int\n\n\n\n\n\n\n\n\n\n\n\n\nProfit obtained 6\n\nExplanation:\n\n\n# Pro", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nThe jobScheduling method is called on a subset of the jobs.\n\n\n\n\n\n\nWe have n jobs, where every job is scheduled to start.\n\n\n\n\nstartTime = [1,2,3]\n\n\n\n\n\n\n\n\n\n\n\nWe have n jobs, where every job"], "prompt": "\nQUESTION:\nWe have n jobs, where every job\u00a0is scheduled to be done from startTime[i] to endTime[i], obtaining a profit\u00a0of profit[i].\nYou're given the\u00a0startTime\u00a0,\u00a0endTime\u00a0and profit\u00a0arrays,\u00a0you need to output the maximum profit you can take such that there are no 2 jobs in the subset\u00a0with overlapping time range.\nIf you choose a job that ends at time X\u00a0you\u00a0will be able to start another job that starts at time X.\n\u00a0\nExample 1:\n\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n\nExample 2:\n \n\nInput: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n\nExample 3:\n\nInput: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6\n\n\u00a0\nConstraints:\n\n1 <= startTime.length == endTime.length ==\u00a0profit.length\u00a0<= 5 * 10^4\n1 <=\u00a0startTime[i] <\u00a0endTime[i] <= 10^9\n1 <=\u00a0profit[i] <= 10^4\nclass Solution:\n    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}