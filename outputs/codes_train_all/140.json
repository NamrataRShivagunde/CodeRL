{"140": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    def findMaximum(self, nums: List[int]) -> int:\n        return self.findMaximumXOR(nums)\n\nUse Function-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n       \n\n\n\n    __call__:\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\nGiven a non-empty array of numbers, a0, a1,\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n    def findMaximum(self, nums: List[int]):\n       :\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a non-empty", "\nUse Call-Based format\n\n\n    def findMaximumXOR(self, nums: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n   \n\n\n\n   :\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a non-empty", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n   \n        pass\n\n\n\n    __call__(self):\n        \nUse Call-Based format\nGiven a non-empty array of numbers\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of numbers, a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        pass\n\n\n\n   \n        \nUse Call-Based format\nGiven a non-empty array of numbers, use the following call-based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a non-empty array of", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    def findMaximum(self, nums: List[int]):\n        \nUse Call-Based format\n\n\n   :\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n   :\n\nThis function uses a Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nFind the maximum result of a0 XOR a1, where ai < 231.\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n   \n\n\n\n   :\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a non", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        \nUse Call-Based format\n\n\n   :\n    pass\n\n\n\nAnother solution is used.\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nGiven a non-empty array of numbers,\n\n\n\n\nGiven a non-", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n   ) -> int:\n        \n\n\n   :\n        \nUse Call-Based format\nFind the maximum result of all pairwise XOR operations\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a non-empty", "\nUse Call-Based format\n\n\n    def findMaximumXOR(self, nums: List[int]) -> int:\n\n\n\n\n\n   \n        \n\n\n   :\nUse Python-Based format\nUse Python-based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of numbers,", "\nUse Call-Based format\n\n\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a non-empty array of", "\nUse Call-Based format\n\n    def findMaximumXOR(self, nums: List[int]):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of numbers, a", "\nUse Call-Based format\n\n    def findMaximumXOR(self, nums: List[int]) -> int:\n\n\n\n\n\n\n   \n\n\n\n    __call__(self) -> int:\n        \n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a non-empty array of numbers, a", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n   \n        return 0\n\n\n\n   :\n       \nUse Call-Based format\nGiven an array of numbers, a0, a1, a2, and a2,\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of numbers,", "\n\n\n    def findMaximumXOR(self, nums: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n   :\nSee findMaximumXOR for more details\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of numbers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n    def\n        pass\nUse Python-based format\nThis is a Python-based function.\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a non-empty array of numbers, a0", "\nUse Call-Based format\n\n\n    def findMaximumXOR(self, nums: List[int]):\n        \n\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nGiven a non-empty array of numbers\n\n\n\n\nGiven a non-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   ) -> int:\n        \n\n\n   :\n\nUse Call-Based format\nUse Call-Based formatGiven a non-empty array of numbers, a0, a1, a2,\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a non-"], "prompt": "\nQUESTION:\nGiven a non-empty array of numbers, a0, a1, a2, \u2026 , an-1, where 0 \u2264 ai < 231.\n\nFind the maximum result of ai XOR aj, where 0 \u2264 i, j < n.\n\nCould you do this in O(n) runtime?\n\nExample:\n\nInput: [3, 10, 5, 25, 2, 8]\n\nOutput: 28\n\nExplanation: The maximum result is 5 ^ 25 = 28.\nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}