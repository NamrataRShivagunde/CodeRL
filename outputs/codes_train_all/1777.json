{"1777": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n`\n \n\n \n\n\n\n\n\n\n\n`\n\n\n\n\n\n `[output]` string `output`\n\n# Exaple\n\n\n - `[task]` string `task`\n\n# Task\n\n\n![](http://media.openjudgecn)`\n\n", "\n\n\n\n\n\n\n\n\n Example:\n\n\n\n\n\n \n`string `image`\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n![image]\n![output]\n![edge]\n\n# Example\n\n\n# Task\n\n\n![image]", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`string `image`\n \n`string `output`\n \n`string `output`\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[output]` string `image`\n \n \n A simple edge detection algorithm set a color value.\n \n \n\n - `[edge]` string", "\n\n\n\n\n\n\n\n Example:\n\n\n\n image\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n![]\n![http://media.openjudge.cn`\n\n\n\n\n![]\n![]\n![]\n![]\n![]\n\n\n\n\n\n\n\n![input]\n![]", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `image`\n \n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n [test]\n\n\n`string `output`\n\n# Task\n\n![input]\n![output]\n![]\n![\n![]\n![]\n![]\n![]\n![]\n![]", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[input]` string `image`\n \n `image`\n \n `[output]` string `output`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [output] string `output`\n\n# Example\n\n 7,15 4 100 15 5 25 5\n\n\n \n \n `", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n \n# Example\n\n# Task\n IONU Satellite Imaging, Inc. records\n\n # Example\n\n `image`\n\n `image`\n\n\n\n\n\n\n\n\n# Example\n\n\n\n `input`\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n `image`\n \n\n \n \n\n \n `edge`\n \n\n\n image\n \n\n\n\n\n\n\n\n\n\n\n\n\n`string`\n\n# Task\n IONU Satellite Imaging, Inc. records\n 7      ----> image width\n 100 15      ...........ALL.........................\n\n \n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n `\n \n A RLE string of image.\n \n\n` string `image`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[input]` string `image`\n\n# Exaple\n\n\n# Task\n\n IONU Satellite Imaging, Inc. records", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[test]` string `test`\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n IONU Satellite Imaging, Inc. records\n 7      ----> image width\n 15 4      ...........ALL.........................\n 7      ----> two number of", "\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n `[input]` string `image`\n \n `[output]` string `image`\n\n `[output]` string `image`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[input]", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  # Example:\n\n# Input/Output\n\n\n\n# Example:\n\n# Task\n\n 7       ----> image width\n 7       ----> pair\n 7       ---->", "\n\n\n\n\n\n\n\n\n\n\n\n\n image\n \n A RLE string\n \n image\n\n\n\n \n` string `output`\n \n` string `image`\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`string`\n \n\n# Task\n\n![image]\n\n\n\n![](http://media.open", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n`string `image`\n \n\n\n\n\n\n\n\n\n![# Example]\n\n# Example:\n\n# Example\n 7      ----> image width\n 15 4     ..................\n 175 2      ..........ABOVE.......................\n\n\n\n\n\n\n\n`string`\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n`string `image`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[output]` string `output`\n \n \n \n `[task]` string `task`\n\n# Task\n\n `[input]` string `image`\n\n# Task\n\n#", "\n\n\n\n\n\n\n\n\n\n\n\n `image`\n \n `edge`\n \n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`string `edge`\n \n \n `# Task\n\n  # Exaple\n\n\n# Task\n\n 7      ----> image\n 7      ----> pair\n 7     ", "\n\n\n\n\n\n\n\n\n\n\n\n\n `image`\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n 7    ----> image\n 7    ----> image width\n 7      ----> image width\n 7      ----> image width\n 7      ----> image width\n\n\n\n\n\n\n\n\n# Example\n\n\n#", "\n\n\n\n\n\n\n\n\n\n\n\n\n \n `[output]` string `output`\n \n \n\n\n\n\n\n\n\n\n\n# Example:\n\n\n\n\n\n\n\n\n\n\n[output]` string `output`\n\n# Example:\n\n\n\n `edge_detection` string `edge_detection`\n\n# Example:\n\n#", "\n\n\n\n\n\n\n\n\n\n\n\n\n - `[algorithm]` string `algorithm`\n\n\n\n\n `output`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`string `image`\n \n \n `[output]` string `edge`\n \n \n `[algorithm]` string `edge`\n \n \n `[algorithm", "\n\n\n\n\n\n\n\n\n\n\n\n\n `image`\n \n\n\n\n\n \n\n\n\n\n\n# Example:\n\n image width\n 15 4   100 15 5     175 2      ...........ABOVE......................\n 175 2        .......ABOVE......................\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n -"], "prompt": "\nQUESTION:\n# Task\n IONU Satellite Imaging, Inc. records and stores very large images using run length encoding. You are to write a program that reads a compressed image, finds the edges in the image, as described below, and outputs another compressed image of the detected edges.\n \n A simple edge detection algorithm sets an output pixel's value to be the maximum absolute value of the differences between it and all its surrounding pixels in the input image. Consider the input image below:\n\n ![](http://media.openjudge.cn/images/1009_1.jpg)\n\n The upper left pixel in the output image is the maximum of the values |15-15|,|15-100|, and |15-100|, which is 85. The pixel in the 4th row, 2nd column is computed as the maximum of |175-100|, |175-100|, |175-100|, |175-175|, |175-25|, |175-175|,|175-175|, and |175-25|, which is 150.\n \n Images contain 2 to 1,000,000,000 (10^9) pixels. All images are encoded using run length encoding (RLE). This is a sequence of pairs, containing pixel value (0-255) and run length (1-10^9). Input images have at most 1,000 of these pairs. Successive pairs have different pixel values. All lines in an image contain the same number of pixels.\n  \n For the iamge as the example above, the RLE encoding string is `\"7 15 4 100 15 25 2 175 2 25 5 175 2 25 5\"`\n \n ```\n Each image starts with the width, in pixels(means the first number 7)\n This is followed by the RLE pairs(two number is a pair).\n 7      ----> image width\n 15 4   ----> a pair(color value + number of pixel)\n 100 15       ...........ALL.......................\n 25 2         ..........THESE......................\n 175 2        ...........ARE.......................\n 25 5         ..........PAIRS......................\n 175 2        ...........LIKE......................\n 25 5         ..........ABOVE......................\n ```\n \n Your task is to calculate the result by using the edge detection algorithm above. Returns a encoding string in the same format as the input string.\n \n# Exaple\n\n `Please see examples in the example test block.`\n \n# Input/Output\n\n\n - `[input]` string `image`\n \n A RLE string of image.\n \n \n - `[output]` a string\n \n A RLE string calculate by using the edge detection algorithm.\ndef edge_detection(image):\n\t\nUse Call-Based format\nANSWER:\n"}}