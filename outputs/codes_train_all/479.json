{"479": {"code": ["\n\n\n    - 1.0.0.0\n    - 1.0.0.0\n\n\n\nUse Call-Based format\n\n\n\n\n\nThere is a brick in front of you. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front of you.\n\n\n\n\n\nThe wall is", "\n\nUse Call-Based format\n\n\n\n\n\n\nThe line is not call-based format\n\nInput: \n\nwall: \n\n\n\n\n\nThere is a brick wall in front of you. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can", "\nUse Call-Based format\n\n\n    Call-Based format\n\nA wall is a list of lists of integers representing the brick walls in front of you\n\nUse Call-Based format\n\n\n\n\n\nA wall is a list of integers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is no wall in front\n\n\n\n\n\nThere are two", "\n\nUse Call-Based format\n\n\n\n\n\nThe wall is a list of integers representing one or more bricks. \n\n\nThe number of bricks in a list of rectangular rows are above 20,000 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front\n\n\n\n\n\nThere is a br", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nThe line will be drawn to cross the least bricks\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\nYou have a brick wall in front of you. \n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n    @class leastBricks(self, wall: List[List[int]]) -> int:\n\n\n\n\n\n\nThere are two brick walls in front of you\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front of you.\n\n\n\n\n\nIf", "\nUse Call-Based format\n\n\n\n\n\nThe line is called with call-based format\n\n\n\n\n\nThere is a brick wall in front of you.\n\nThe line is called with call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front of you\n\n\n\n\n\n\n\nThere is a br", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nThe wall is rectangular\n\n\n\n\n\nWall is rectangular\n\nWall is rectangular\n\n\n\n\n\n\n\nThere is a brick wall in front of you. \n\n\n\n\n\n\n\n\n\nThe line is rectangular\n\n\n\n\n\n\nThe wall is rectangular", "\nUse Call-Based format\n\n\n\n\n\n\nThere is a brick wall in front of you.\n\n\nThe wall is a list of integers representing the width and height of the brick. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe wall is rectangular\n\n\n\n\n\n\n\n\n\n\n\n        The number of", "\nUse Call-Based format\n\n\n    Call-Based format\n\nThere are two bricks in front of you.\n\n\n\n\nThere is a brick wall in front of you.\n\nThere is a brick wall in front of you. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe wall is rectangular \n\n", "\nUse Call-Based format\n\n\n\n\nThe wall is rectangular. The width sum of bricks in front of you. \n\n\n\n\n\n\n\nThere is a brick wall in front of you. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front\n\n\n\n\n\nThere is a brick", "\nUse Call-Based format\n\n\n\n\nThere is a brick wall in front of you. \n\nUse Call-Based format\nANSWER:\n\n\nThere is a brick wall in front of you. \n\n\n\n\n\nThere is a brick wall in front of you\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall", "\n\nUse Call-Based format\n\n\n\n\nThe wall is rectangular and will be in front of the line\n\n\n\n\n\nThe wall is rectangular. \n\n\n\n\n\n\nThere is a brick wall in front of you\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nThere is a brick wall in front of you. The wall is rectangular.\n\n\n\n\n\n\nThere is a brick wall in front of you\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a wall in front\n\n", "\nUse Call-Based format\n\n\n\n\nThe wall is in front of you. \n\nUse Call-Based format\n\n\n\n\nThe wall is in front of you.\n\n\n\n\n\nThere is a brick wall in front of you. \n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front\n\n\n\n\nThere are two", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nThere is a brick wall in front of you.\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe wall is rectangular\n\n\n\n\n\n\n\nThe wall is rectangular\n\nThe", "\nUse Call-Based format\n\n\n    leastBricks(self, wall: List[List[int]]) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThe line is call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a brick wall in front of you\n\n\n\n\n\n\n\nIf", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nThere is a brick wall in front of you\n\nUse Call-Based format\nThere is a brick wall in front of you. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe number of bricks cross the least", "\nUse Call-Based format\n\n\nThe wall is rectangular\nINPUT: \n[2,4,2,2,1]\n\nUse Call-Based format\nANSWER:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is no brick wall in front\n\n\n\n\n\nThere is", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nThere is a brick wall in front of you.\n\nWall:\n    wall: \n\n    leastBricks(self, wall)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are two bricks"], "prompt": "\nQUESTION:\nThere is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks. \n\n\nThe brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right. \n\n\nIf your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks. \n\nYou cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. \n\nExample:\n\nInput: \n[[1,2,2,1],\n [3,1,2],\n [1,3,2],\n [2,4],\n [3,1,2],\n [1,3,1,1]]\nOutput: 2\nExplanation: \n\n\n\n\nNote:\n\nThe width sum of bricks in different rows are the same and won't exceed INT_MAX.\nThe number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}