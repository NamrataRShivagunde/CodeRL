{"2790": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n\n\n~if:rust\n\n~endif\n\n\n\n\n~endif\n\n\n \n\t\n:\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n* Another Kata, you will need to", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n~~~else:rust\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~\n\t\n:\n\n\n\n\n\n\n~~~endif\n\ndef\n\n\n~~~if", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n~\n\nUse Call-Based format\n\n~~~if:rust\n\n\n\n\n\nUse Call-Based format\n~else:\n\n(arry):\n\t\n\t\n:\n~\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n~~~if:rust\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n>>>\n\n\n\n\n\n\n\n\n\n\n\n\n~\ndef\n\ndef dup(arry):\n\t\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n  [Alternate capitalization](https", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\nDEF:\n\t\nUse Call-Based format\n\nDEF:rust\n\n\n:\n\n\n\n\n\n:\n~ =\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n  * `arry`", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\nADD:\n\n\n\n\n\n:\n\n\n\n\n\n\n:\n~ =\n\treturn arry\n\n\n:\n\n\n \n:\n\n\n\n\n\n\n\n\n\n\n\n[Alternate capitalization](https://", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\nUse Call-Based format\n~endif\n\n\n\n\n\t\n\n\n\n\n\t\n\t:\n\n\n\n\n\n\n\n\n\n\n\n#!python\n#\n# Kata", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\nABOVE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n~,\n\t\n\n\n\n\treturn\n:\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\t#!/bin", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n~~~end:rust\n\n\n\n\n\n\n\n\n~endif\n\n\n\n\t\n\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n\n:\n~endif\n\n\n\n\t\n:\n\n\n\treturn\n\n:\n\n\n\n\n\n\n\n\n\n\n\n---\n#!python\n#\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\nABCD:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n~\n  def\n\t\n\n\n\n\n \n:\n\n\n\n\n\n\n\n\n\n\n\n\n  * `dup([\"", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n~~~end:rust\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n---\n#!/bin/", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  def\n\t\n\n\n\n\n\n  def\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# This Kata uses Kata,", "\nUse Call-Based format\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n~~~else:rust\n\nUse Call-Based format\n\n\n:\n\n\n\n\n:\n~(arry):\n\t\n\n:\n\n \n:\n\n\n\n\n\n\n\n\n[Alternate capitalization](https://", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n~~~else\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n    >>> dup([\"abcd\",\"", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n~endif\n\nKata:\n\n\n(arry) =\n\t\n\n\n\n\n\n  def\n\t\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nIn this Kata, you", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n~~~else:rust\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n:\n~,\n\t\n\n:\n\n\n\t\n:\n\n\n\n\n\n\n\n\n:\n\n  * `dup", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:rust\n\nUse Call-Based format\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n:\n~\n\n\t\n\n\n\n~\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  * `a = [a]", "\nUse Call-Based format\n\nUse Call-Based format\n\n~~~if:lust\n\nUse Call-Based format\n~~~else\n\n\n\n:\n~\n\n\n\n\n:\n~(arry):\n\t\n\t\n:\n~\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\n\n+ If you are using Kata, you", "\nUse Call-Based format\n\nUse Call-Based format\n\n~~~if:lust\n\nUse Call-Based format\n~~~else\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n:\n~\n\n\t\n\n:\n~\n\t\n:\n\n\n\n\n\n\n\n\n\n\n  [Alternate capitalization](https://github"], "prompt": "\nQUESTION:\nIn this Kata, you will be given an array of strings and your task is to remove all consecutive duplicate letters from each string in the array.\n\nFor example: \n\n  * `dup([\"abracadabra\",\"allottee\",\"assessee\"]) = [\"abracadabra\",\"alote\",\"asese\"]`. \n  \n  * `dup([\"kelless\",\"keenness\"]) = [\"keles\",\"kenes\"]`.\n\nStrings will be lowercase only, no spaces. See test cases for more examples.\n\n~~~if:rust\nFor the sake of simplicity you can use the macro 'vec_of_string' to create a Vec with an array of string literals.\n~~~\n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\n[Vowel consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\ndef dup(arry):\n\t\nUse Call-Based format\nANSWER:\n"}}