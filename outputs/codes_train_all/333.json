{"333": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven an array of\u00a0integers arr, you are initially positioned at the first index of arr.\n\n\u00a0\nConstraints:\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\nGiven an array of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    return self.minJumps\n\n\u00a0\n\nUse Call-Based format\n\n\n\u00a0\nConstraints:\n\n1 <= i <= j < arr.length\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an array of\u00a0", "\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n\u00a0\n\u00a0\n\n\n\u00a0\n:\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\nGiven an array of\u00a0integers arr", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\u00a0\n\n    def maxJumps(self, arr: List[int]) -> int:\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n1\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an array of\u00a0integ", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\u00a0\n\n    pass\n\n\n6 --> 3 --> 9\n\n\n\n\n\n\n\nGiven an array of\u00a0integers arr:\n\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return self.minJumps\n\n\u00a0\n\n\nGiven an array of\u00a0integers arr, you are initially positioned at index i\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\nGiven an array of\u00a0integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\n\n\n\nGiven an array of\u00a0integers arr:\n\ni = j\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n1 <= j <= 3\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    return arr.index(arr[0])\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven an array of integers arr, you are initially positioned at first index\n\n\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n-10^4 <= arr[i] <= arr[j]\n\u00a0\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\nstart index = 0\n\n\u00a0\n\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n    pass\n\n\nGiven an array of\u00a0integers arr, you are positioned at index i\n\n\n\u00a0\n:\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\nGiven an array of\ufffd", "\nUse Call-Based format\n\n\n    def minJumps(self, arr: List[int]) -> int:\n\n\n\n\n\n   \n       ...\n\n\n\nGiven an array of integers arr:\n\ni = j = j + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\nGiven an array of\u00a0integ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        return arr[0]\n\n\nGiven an array of\u00a0integers arr:\n\ni = j\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\nGiven an array of", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def maxJumps(self, arr: List[int]) -> int:\n   \n\n\n\n\n\n\n3 --> 2 --> 3 --> 1\n\u00a0\n\n\n\n\n\n\n\n\n\nGiven an array of integers arr:\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n    return self.minJumps(arr)\n\n\nGiven an array of\u00a0integers arr:\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\nGiven an array of\u00a0integers arr", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def minJumps(self, arr: List[int]) -> int:\n\n\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\n3\n\n\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an array of\u00a0integ", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n        return 1\n\n\nGiven an array of\u00a0integers arr, you are initially positioned at the first index of the array\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of\u00a0integers arr", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\nOutput:\n\n0 <= i < j\n\u00a0\n\n\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\u00a0\n\nGiven an array of\ufffd", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\narr[0]\nOutput: 0\n\n\u00a0\n\n\n\n   \n    return minJumps(arr)\n\n\n\n\n    def minSteps(self):\n        return 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of\u00a0integers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nStart index is 0\nStart index is 1\n\nOutput: 0\n\n\u00a0\n\n\n   \n    return self.minJumps\n\n\n\n   :\n\n\n\n\n\n7\n\n\n\n\n\n\u00a0\n\n\u00a0\n\u00a0\n\n\n\nGiven an array of\u00a0", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    return self.minJumps(arr)\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\nGiven an array of\ufffd"], "prompt": "\nQUESTION:\nGiven an array of\u00a0integers arr, you are initially positioned at the first index of the array.\nIn one step you can jump from index i to index:\n\ni + 1 where:\u00a0i + 1 < arr.length.\ni - 1 where:\u00a0i - 1 >= 0.\nj where: arr[i] == arr[j] and i != j.\n\nReturn the minimum number of steps to reach the last index of the array.\nNotice that you can not jump outside of the array at any time.\n\u00a0\nExample 1:\nInput: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n\nExample 2:\nInput: arr = [7]\nOutput: 0\nExplanation: Start index is the last index. You don't need to jump.\n\nExample 3:\nInput: arr = [7,6,9,6,9,6,9,7]\nOutput: 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array.\n\nExample 4:\nInput: arr = [6,1,9]\nOutput: 2\n\nExample 5:\nInput: arr = [11,22,7,7,7,7,7,7,7,22,13]\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 5 * 10^4\n-10^8 <= arr[i] <= 10^8\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}