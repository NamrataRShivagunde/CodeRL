{"1957": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n    return self.shortestPath(grid, k)\n\n\n\n    def __call__(self, grid, k):\n        return 0\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrid[0][0] ==", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        return 0\n       \n\n\n\ngrid.length == m\ngrid[0].length == n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\ngrid.length == m\ngrid[", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   \n        return self.shortestPath(grid, k)\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid, where each", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        return 0\n        \n\n\nGiven a m * n grid, where each cell is either 0 or 1.\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        grid = [0:m, 0:n]\n        k = 0\n        \n\n\n   \n        return self.shortestPath(grid, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m * n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    grid = [[0,0,0]]\n\n    k = 0\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid, where each cell", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\ngrid.length == m\ngrid.length == n\n\n\n\n   \n        self.grid = grid\n\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk = 1\n\n\u00a0\n\n\n\u00a0\n\n\ngrid.length = m", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.shortestPath(grid, k)\n\n\u00a0\n\n\n   \n        return self.shortestPath(grid, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid, where each cell", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        return k\n\nUse Call-Based format\n\n\n   \n        k = 1\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\nGiven a m * n grid, where each cell is", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n   \n    grid = [m,n]\n        k = 0\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nk = 1\n\n\u00a0\n\n\nGiven a m * n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.shortestPath(grid, k)\n\n\n\n\ngrid.length\u00a0== m\ngrid[0].length== n\n\n   \n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Python format\n\n\n\n\nGiven a m * n grid", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        return self.shortestPath(grid, k)\n\n\n\n   \n        return self.shortestPath(grid, k)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid, where each cell is", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n    def grid(self, grid, k):\n        return 0\n\n   \n\n\n\n   \n        self = self\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid, where each cell is", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\ngrid.length == m\ngrid[0].length == n\ngrid[0][0] == 0\n\n\u00a0\nConstraints:\n\n\n   \n\n\n\n   \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid, where the last cell", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        grid = [0,1,2,3,4,5]\n        k = 0\n\n\n\n   \n   ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven a m * n grid, where", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    return 0\n\n\n\u00a0\nExplanation:\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a m * n grid, where each cell is either 0 or 1\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n        return self.shortestPath(grid, k)\n\n\n\n    def maxAbs(self, grid, k):\n        return k\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid,", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        pass\n\n\n\n   \n        return self.shortestPath(grid, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven a m * n grid,", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return k\n        \n\n\n\n   \n        self.grid = grid\n        self.k = k\n        \n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid, where each cell", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        return self.shortestPath(grid, k)\n        \n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nGiven a m * n grid,\n\n\n\n\nGiven a m * n grid, where"], "prompt": "\nQUESTION:\nGiven a m * n grid, where each cell is either 0 (empty)\u00a0or 1 (obstacle).\u00a0In one step, you can move up, down, left or right from and to an empty cell.\nReturn the minimum number of steps to walk from the upper left corner\u00a0(0, 0)\u00a0to the lower right corner\u00a0(m-1, n-1) given that you can eliminate\u00a0at most k obstacles. If it is not possible to find such\u00a0walk return -1.\n\u00a0\nExample 1:\nInput: \ngrid = \n[[0,0,0],\n\u00a0[1,1,0],\n [0,0,0],\n\u00a0[0,1,1],\n [0,0,0]], \nk = 1\nOutput: 6\nExplanation: \nThe shortest path without eliminating any obstacle is 10.\u00a0\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).\n\n\u00a0\nExample 2:\nInput: \ngrid = \n[[0,1,1],\n\u00a0[1,1,1],\n\u00a0[1,0,0]], \nk = 1\nOutput: -1\nExplanation: \nWe need to eliminate at least two obstacles to find such a walk.\n\n\u00a0\nConstraints:\n\ngrid.length\u00a0== m\ngrid[0].length\u00a0== n\n1 <= m, n <= 40\n1 <= k <= m*n\ngrid[i][j] == 0 or 1\ngrid[0][0] == grid[m-1][n-1] == 0\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}