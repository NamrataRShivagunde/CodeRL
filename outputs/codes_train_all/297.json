{"297": {"code": ["\nUse Call-Based format\n\n   \n\n\n\n\n        return 1\n\n\u00a0\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n   :\n        return 0\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n          \n\n\n\n        return 1\n\n\u00a0\n\n\u00a0\n\nUse Call-Based format\n\nClass Solution:\n   :\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nYou have n\u00a0\u00a0tiles", "\nUse Call-Based format\nUse Call-Based format\n    def numTilePossibilities(self, tiles: str):\n        return 1\n\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0\u00a0tiles\n\n\nYour number of tiles has n\u00a0\u00a0\u00a0tiles.\n\n\n\n\nYou have n", "\nUse Call-Based format\n\n\n    def numTilePossibilities(self, tiles: str):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   :\n       \n\n\n\n\n\nUse Call-Based format\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\n\n\n\nYou have n\u00a0\u00a0tiles,", "\nUse Call-Based format\n\n\n    def numTilePossibilities(self, tiles: str):\n        \n\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\n\n", "\nUse Call-Based format\n\n\n    def numTilePossibilities(self, tiles: str) -> int:\n        \n\n\n\n\n   \n        return numTilePossibilities(self, tiles)\n\n\n\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nYou have n\u00a0\u00a0tiles\n\nYou have n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n   :\n        return 1\n\nYou have n\u00a0\u00a0\u00a0tiles, where each tile has one letter tiles[0].\n\n\n\n\n\n\n\nYou have n\u00a0\u00a0tiles\n\n\n\n\nYou have n\u00a0\u00a0tiles, where", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return numTilePossibilities(self, tiles)\n\n\n\n   :\n        return self.numTilePossibilities(tiles)\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles\nYou", "\nUse Call-Based format\n\n\n    def numTilePossibilities(self, tiles: str):\n\n\n\n\n\n   \n\n\n\n\u00a0\n\n   :\n        \nUse Call-Based format\n\n\n\n\n\nYou have n\u00a0\u00a0tiles\n\n\n\n\nYou have n\u00a0\u00a0tiles\n\n\n\n\nYou have n\u00a0\ufffd", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def numTilePossibilities(self, tiles: str) -> int:\n        \nUse Call-Based format\n\nConstraints:\n\n\u00a0\nConstraints:\n\n\u00a0\nConstraints:\n\n\n\n:                \n\n                \n\n\n\n\n\n\n\nYou have n\ufffd", "\nUse Call-Based format\n\n    numTilePossibilities(self, tiles: str):\n\n\n\n\n\n          \n\n\u00a0\n\n\n   :\n        \"\"\"\n\nYour number of tiles is less than n\u00a0\u00a0\u00a0tiles.\n\n\n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\n\n\n\nYou have n", "\nUse Call-Based format\nUse Call-Based format\n\n    def numTilePossibilities(self, tiles: str) -> int:\n        \n\n\n\n\n   \n\n\n\n   :\n        \n\n\nUse Call-Based format\n\n\n\n\n\n\nThe number of possible sequences of letters are used.\n\u00a0\n\n\n\u00a0\n\n\nYou have n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n        return self.numTilePossibilities(tiles)\n\n\u00a0\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\nYou have n\u00a0\u00a0", "\nUse Call-Based format\nUse Call-Based format\n    def numTilePossibilities(self, tiles: str):\n\n\n\n\n\n   \n\n\n\n\nReturns:\n\n1 <= numTilePossibilities <= 7\n\n\u00a0\n\n:\n        \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nYou have n\u00a0\u00a0tiles,", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\n\n\n\n\n          \n    pass\n\n\u00a0\n\n\n   :\n        \n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\nUse Call-Based format\n\n\n\n\nYou have n\ufffd", "\nUse Call-Based format\n\n       \n\n\n\nUse Call-Based format\n\n\n\n   \n    return self.numTilePossibilities(tiles)\n\n\n\n   :\n        return self.numTilePossibilities(tiles)\n\n\n\n\n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles\n\n\n\u00a0\n\n\nYou have n\ufffd", "\nUse Call-Based format\n\n\n    def numTilePossibilities(self, tiles: str):\n        \n\n\n\n\n   \n\n\n\n   :\n        return self.numTilePossibilities(tiles)\n\n\n\n\n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\nn\u00a0\u00a0\u00a0tiles\n\n\n\nYou have", "\nUse Call-Based format\nUse Call-Based format\n\n    def numTilePossibilities(self, tiles: str):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n        \n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\nYou have n\u00a0\u00a0tiles", "\nUse Call-Based format\nUse Call-Based format\n    def numTilePossibilities(self, tiles: str):\n\n\n\n\n\n   \n\n\n\n   :\n\nA valid number of possible tile possibilities is returned.\n\n\n\n\n\n\n\n\n\u00a0\n\nYou have n\u00a0\u00a0\u00a0tiles.\n\n\u00a0\n\n\nYou have n", "\nUse Call-Based format\n\n       \n\n\n\n\n\n\n   \n        return self.numTilePossibilities(tiles)\n        \n\n\n   :\n        return self.numTilePossibilities(tiles)\n        \n\n\n\n\n\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles\n\n\n\nYou have n\u00a0\u00a0\u00a0tiles\n\n"], "prompt": "\nQUESTION:\nYou have n\u00a0\u00a0tiles, where each tile has one letter tiles[i] printed on it.\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.\n\u00a0\nExample 1:\nInput: tiles = \"AAB\"\nOutput: 8\nExplanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n\nExample 2:\nInput: tiles = \"AAABBC\"\nOutput: 188\n\nExample 3:\nInput: tiles = \"V\"\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= tiles.length <= 7\ntiles consists of uppercase English letters.\nclass Solution:\n    def numTilePossibilities(self, tiles: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}