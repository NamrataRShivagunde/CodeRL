{"1832": {"code": ["\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    self.nodes(edges, M, N)\n    return self.nodes()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= M <= N <= 10000\n\n0 <= M <= N <= 3000\n\n\n\n28", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    for node in self:\n        return self.nodes(edges[node])\n\n\n\n    return self.nodes(edges)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= M <= N <= 3\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n    self.nodes(edges, M, N)\n\n\n\n\n    self.nodes(edges, M, N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= M <= N <= 10000\n0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    Reachable nodes\n\nExample 3:\n    self.reachableNodes(edges, M, N) -> int\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= M < N < 100\n\n\n\n0 <= M < 100", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThe \"original graph\" is a directed undirected graph.\n\nExample 3:\nInput: edges = [...]\n\n\n\n   ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= M <= N <= 10\n0", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThe original graph is not directed, a node is not reachable.\n\nExample 3:\n\n    def reachableNodes(self, edges, M, N):\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    >>> from pymbar import *\n    >>>", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nNote:\n\n0 <= M <= N <= 10000\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= M <= N <= 10000\n\nExplanation:\n\n\n\n\n\nM", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    return self.reachableNodes(edges, M, N)\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\nThe original graph is a directed graph (the \"original graph\")\n\n\n\n\n\n0 <= edges.length <= 10000", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nN = 3\n\nExplanation:\n\n\n\n\n\n\n\n\n\n        #!python\n   \n        #!python\n        #!python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN = 3\nexplanation:\n\n\n\n\n\n\n0 <= M <= N", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nNote:\n\n0 <= M <= 10000 < N <= 10000\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\nThe \"original graph\" is undirected.\n\nExample 1:\n\n\n\n\nStart with an undirected graph", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nN = 2\n\n\nExample 3:\n\nInput: edges, M, N\n\n\n\n    self\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= edges.length <= 10000\n\n\n\n\n\nM = 6\nN", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nN = 2\nExplanation:\n\nN = 3\n\nExample:\n\n0 <= M <= 10000\n\n\n\n\n\n\n\n   \n    self = self\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n0 <= M < N\n\n\n\n\n\nM = 6\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nN = 3\n\nExample 0:\nInput: edges = [[]]\n\n\n\n\n\n\n   \n    @reachableNodes\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= M < N < 10^9\n\n\n\n\n\n\n0 <= M < N\n0 <= M", "\nUse Call-Based format\n\n\nUse Call-Based format\nExplanation:\n\n\n\n\n\n\n\n\n\n\n   \n    self.edges = edges\n\n\n\n\n\n\n\n\n\n\nThe following solution is used to determine how many nodes are reachable.\n\n\n\n\n\n\n\n\nN = 2\n\n\n\n\n0 <= edges.length <= M", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n0 <= M <= N < 10000\nExplanation:\n\n\n\n\n\n\n0 <= M <=", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nExplanation:\n\n\n\n\n\n\n\n\n    return self.reachableNodes(edges, M, N)\n\n\n\n\n\n\n\n\n\n\n\n\nN = 3\n\n\n\nN = 3\n\nExample 3:\n\n\n\n\nM =", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nExplanation:\n\n\n\n\n   \n    self, edges, M, N = [1, 3, 2, 4]\n\n\n\n\n\n\n\n\n\n\n\n0 <= edges.length <= 10000\n\n\n\n\n\n0 <= edges.length <= 10000", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n    self.edges = edges\n    \n\n\n\n\n\n\n\n\u00a0Explanation:\n\n\n\n\n\n\n\u00a0Explanation:\n\u00a0\n\u00a0\n\n\n\n\n0 <= M <= N\n0", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0Explanation:\n\n\n    return self.nodes(edges, M, N)\n\n\n\n    return self.nodes(edges, M, N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= edges.length <= 10000\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nExplanation:\n\n0 <= M <= N <= 10^9\nOutput: 10\n\n\n\n\n    def reachableNodes(self, edges, M, N):\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= M <= N <= 10^9\n\n0 <="], "prompt": "\nQUESTION:\nStarting with an\u00a0undirected graph (the \"original graph\") with nodes from 0 to N-1, subdivisions are made to some of the edges.\nThe graph is given as follows: edges[k] is a list of integer pairs (i, j, n) such that (i, j) is an edge of the original graph,\nand n is the total number of new nodes on that edge.\u00a0\nThen, the edge (i, j) is deleted from the original graph,\u00a0n\u00a0new nodes (x_1, x_2, ..., x_n) are added to the original graph,\nand n+1 new\u00a0edges (i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)\u00a0are added to the original\u00a0graph.\nNow, you start at node 0\u00a0from the original graph, and in each move, you travel along one\u00a0edge.\u00a0\nReturn how many nodes you can reach in at most M moves.\n\u00a0\nExample 1:\nInput: edges = [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3\nOutput: 13\nExplanation: \nThe nodes that are reachable in the final graph after M = 6 moves are indicated below.\n\n\n\nExample 2:\nInput: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M = 10, N = 4\nOutput: 23\n\u00a0\n\nNote:\n\n0 <= edges.length <= 10000\n0 <= edges[i][0] <\u00a0edges[i][1] < N\nThere does not exist any\u00a0i != j for which edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1].\nThe original graph\u00a0has no parallel edges.\n0 <= edges[i][2] <= 10000\n0 <= M <= 10^9\n1 <= N <= 3000\nA reachable node is a node that can be travelled to\u00a0using at most\u00a0M moves starting from\u00a0node 0.\nclass Solution:\n    def reachableNodes(self, edges: List[List[int]], M: int, N: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}