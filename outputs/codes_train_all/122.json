{"122": {"code": ["\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nThere are several cards\u00a0arranged in a row.\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nThere are several cards\u00a0arranged in a row\n\n\n\n\n\nThere are several cards arranged in", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def maxScore(self, cardPoints: List[int], k: int):\n    \"\"\"\n\n\n\n\n\n\n   \n    maxScore(self, cardPoints)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following two cards\u00a0arranged in a", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n\n   \n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n\n\n\n   \n\n\n\n\n\n1\n\n\n\n\nThere are several cards\u00a0arranged in a row.\n\n\n\n\n\n\nThere are", "\n\n\n\nUse Call-Based format\n\n\n\n    The score is the maximum of the k most used cards.\n\n\nExample 6:\n\n        cardPoints = [1,2,3,4,5,2,3]\n\nExample 7:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 6:\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n1 <= k <= cardPoints.length\n\n1 <= k <= cardPoints.length\n\n1 <= k <= cardPoints.length\n\n1 <= k <= cardPoints.length\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several cards\u00a0arranged in a row", "\nUse Call-Based format\n\n\n\n\nThe following cards are taken:\n\n    k = 2\n\nUse Call-Based format\n\n\n\n   \n    k = 2\n\n\n\n\n   \n    maxScore(self, cardPoints, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n    k = 2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def minScore(self, cardPoints: List[int], k: int):\n        return 1\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk = 10\n\n# Card", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def minScore(self, cardPoints, k):\n        return self.maxScore(cardPoints, k)\n\n\n\u00a0\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe most common case is when you are not", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nThere are two or more cards\n\n\n\n\n\n\n   \n\n\n\n\n\n\u00a0\n\nExample 2:\n\n   \n    maxScore(self, cardPoints, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk = 1\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n    from pycard import Solution\n\n\n\n\n\n\n    maxScore(self, cardPoints: List[int], k: int) -> int\n\n\u00a0\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nThere are several cards\u00a0arranged in a row.\n\n\n\n\nIf you", "\nUse Call-Based format\n\n\nExample 2:\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\n\nExample 5:\n\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= k <= 10^5\n\n\n\n\n\n    Args", "\n\nUse Call-Based format\n\n\n    Use Call-Based format\n\n\n\n\n\n\n    def maxScore(self, cardPoints: List[int], k: int):\n\n   \n\n\n\n   \n    maxScore(self, cardPoints, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several cards\u00a0arranged", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n1 <= k <= 2\nOutput: 1\n\n\u00a0\n\n\n\n   \n\n\n\n   \n    pass\n\n\nThe cards are taken in a row.\n\n\n\n\n\n\n\n\n\nThere are several cards arranged in a row.\n\n\n\n\nThere are two", "\nUse Call-Based format\n\n\n\n\n\n\n   \n\n   \n\n    return maxScore(self, cardPoints, k)\n\n\nThere are several cards\u00a0arranged in a row\n\n\n\nExample 6:\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several cards\u00a0arranged in a row\n\n\n\n\n\n\nThere are", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nYou have not specified any of the following formats:\n\n\n\n    def maxScore(self, cardPoints, k: int):\n        return 1\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several rows", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nExample 2:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    maxScore(self, k):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    The following methods are available:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxScore(self, cardPoints, k):\n        return self.maxScore(cardPoints, k)\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThe number of points in a row is 1\n\n\n\n\n\n\nThere are", "\nUse Call-Based format\n\n\n    Use Call-Based format\n\nThe maximum score is only available on call-based format.\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n        k = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= k <= 10^6\n\n\nThere are two", "\nUse Call-Based format\n\n\n    def maxScore(self, cardPoints, k: int) -> int:\n\n\n\n\n\n\n\n\n\n   \n\n\n\nThere are two or more cards\n\n\u00a0Constraints:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several cards\n\n\n\n\n\nThere are several cards arranged in", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n   \n        return maxScore(self, cardPoints, k)\n\n\n\n\n\n\n\n\n\n\n\nThere are several cards\u00a0arranged in a row.\n\n\n\n\n\nThere are two cards arr"], "prompt": "\nQUESTION:\nThere are several cards\u00a0arranged in a row, and each card has an associated number of points\u00a0The points are given in the integer array\u00a0cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.\n\u00a0\nExample 1:\nInput: cardPoints = [1,2,3,4,5,6,1], k = 3\nOutput: 12\nExplanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.\n\nExample 2:\nInput: cardPoints = [2,2,2], k = 2\nOutput: 4\nExplanation: Regardless of which two cards you take, your score will always be 4.\n\nExample 3:\nInput: cardPoints = [9,7,7,9,7,7,9], k = 7\nOutput: 55\nExplanation: You have to take all the cards. Your score is the sum of points of all cards.\n\nExample 4:\nInput: cardPoints = [1,1000,1], k = 1\nOutput: 1\nExplanation: You cannot take the card in the middle. Your best score is 1. \n\nExample 5:\nInput: cardPoints = [1,79,80,1,1,1,200,1], k = 3\nOutput: 202\n\n\u00a0\nConstraints:\n\n1 <= cardPoints.length <= 10^5\n1 <= cardPoints[i] <= 10^4\n1 <= k <= cardPoints.length\nclass Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}