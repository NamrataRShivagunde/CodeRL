{"753": {"code": ["\n\n\n0 1 2 3 4 3 3 4 3 4 4 4 4 1 2 2 3 3 3 4 4 4 4 4 4 3\n\n\n\n\n\n1 1 2 3 3\n1 2 3\n1 3\n\n\n have\n\n1 1 2\n\n\n\n\n\n\n\n\n2\n3 2\n4\n\n\n1\n1\n1\n7\n 1 1 2", "\n\n\n\n\n-----Input-----\n\nit's autumn now.\n\nInput:1\n1 3\n1 4\n1 2 3\n\n-----Constraints-----\n\n\n\n\n\n\n1 2 3\n1 3 4\n1 1 2\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Constraints-----\n\n1\n\n\n create a zeroth leaf", "\n\n-----Example-----\n\nThe most common case is:\n\n\n\n\n-----Constraints-----\n\n\n\n\n\n\n\n3 1 2 3\n1 1 2 2\n1 2 2 3\n1 2 2\n1 2 3\n1 3 3\n1 2 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n1 2 3\n\n\n 1", "\n\nInput:10\n\nOutput:10\n\nConstraints:10\n\n\n\n\n\n\n\n1 1 2 3\n1 2 2\n1 1 2\n1 2 3\n1 3\n1 2 3\n1\n\n\n have\n\n\n\n\n\n\n\n\n\n1 2 3\n1 2\n2 3\n3\n\n\n1\n\n3 2\n output: 1", "\n\n-----Input-----\n\n\n\n\n-----Constraints-----\n\nT \u2264 10000\n\n\n\n- 1 \u2264 0\n2 3 4\n3 4 4\n\n-----Output-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3 3 4\n\n\n\n1 2 3\n1 2 2\n1\n\n\n1 2 3 2", "\n\n-----Description-----\n\nExample:\n find all levels of a tree and the type of the tree.\nInput:5\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n-----Constraints-----\n\n\n\n1 2 3\n3 2\n3 3\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1 1 2\n1 1 2\n1 2", "\n\n-----Input-----\n\n\n\n\n\n-----Constraints-----\n\n\nT \u2264 10000\nT \u2264 10000\n\n-----Input-----\n\n\n-\n1 1 2 2 3\n\n\n\n have\n\n\n\n\n\n\n\n\n\n\n\n3 2 3\n4 3 4\n\n-----Explanation-----\n\n\n1 2 3\n 1 2 3", "\n\n-----Input-----\nExample:\n\nInput:2\n\nOutput:3\n\n\n\nConstraints:\n\nInput:5\n\nOutput:7\n\n\n\n\n\n\n\n\n\n\n\n\n3 2\n4 1\n3 3\n\n\n\n\n\n\n\n\n\n-----Explanation-----\n\n1\n\n\n1 3 4\n1 3\n\n1 4", "\n\n-----Description-----\n\n\n\n\nConstraints:\n\n0 0 1 2 3 4\n2 1 3\n3 4 2 3 3\n1 3 3 3\n2 1 4\n3 3 3\n1 2 2\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n1 2 3\n1\n have 10,000 m", "\n\n\n1 2 3 3 4\n1 2 3 4\n1 2 3 3\n1 3 3\n1 2 3\n2 3\n3 4\n3\n\n\n\n\n\n\n1\n1 2 3\n1 2 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 2 3\n2 3\n\n\n\n1\n1 2 2\n\n 1 1 2", "\n\n-----Notes-----\n Find the number of the following tests.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10000\n\n\n\n-----Notes-----\n\n\n\n-\n\n1\n\n\n have\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 2 3\n3 4\n\n\n1\n1 2 3\n\n 1 2", "\n\n-----Input-----\n\nA test case.\n\n\n\n\n-----Constraints-----\n\nA test case:\n\n\n\nConstraints:\n\n1 \u2264 0\n2 1\n3 2\n3 2\n\n-----Output-----\n\nA test case:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n 1 2", "\n\n\n\n\n-----Input-----\n\n0\n1 1\n2 2\n1 2\n3 3\n4\n3\n3\n\n\n\n\n1 2 2\n1 3 3\n1 4\n1 3 2\n1 3\n\n1 3 3\n2 2\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n 1 2", "\n\n\n1\n2 3 3\n1 2 3 4 3 4\n5 4 3 3 4\n5 4 4\n5 4 4\n5 3 4\n5 4\n\n\n\n\n\n\n\n have\n\n1 1 2\n2 1 2\n1 2 3\n\n\n\n\n\n\n\n1\n2 2\n3 4\n\n\n1\n\n1\n\n output 7\n", "\n\n-----Description-----\n\n\n\n\nConstraints:\n\n0 1 2\n0 3\n3 1 2\n3 2 2\n3 1\n4 2\n3 1\n\n\n\n2 1 2 2\n3 3 2\n2 1\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n3 4 2\n\n1\n have 5 1 3", "\n\n\n- 1 \u2264 0 \u2264 1\n- 2 \u2264 2\n- 3 \u2264 3\n\n\n\n\n\n\n\n\n\n\n\n have 1 line\n\n\n1 1 1 2\n\n\n\n\n\n\n\n\n\n\n\n1 1 3\n2 3\n5\n\n\n\n\n7\n\n 1 2 3\n", "\n\n\n\n\n-----Explanation-----\n\nNote:\n\n\n\nConstraints:\n\n- 1 \u2264 0 \u2264 10\n1 1 2 3\n1 2 2\n2 1 3 3\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n1 2 3\n2 3\n\n\n\n1 1", "\n\n\n\n\n-----Input-----\n\nT\nT\nT\nT \u2264 10000\n\n-----Constraints-----\n\nT \u2264 10\n\n\n-----Constraints-----\n\n\n\n\n\n\n\n create a bouquet of 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 1 2 3\n1 1 4\n1\n\n 1 2", "\n\n\n\n\n1\n1 2 3\n2 4 3\n2 3 3\n3 4\n4 1\n3 3\n3\n4\n5\n\n\n\n1 1 2 2\n1 2 3\n1\n\n\n have\n\n create a tree.\n\n\n\n\n\n\n\n\n-----Explanation-----\n\n\n\n1 2 3\n1 3 4\n\n 1 2", "\n\n-----Input-----\n\n\n\n\n-----Constraints-----\n\nT \u2264 10\n\nT \u2264 10\n\n-----Explanation-----\n\n\n\n\n\n\n1\n\n have 3\n\n\n-----Constraints-----\n\n\n\n\n\n\n\n1 3 3 3\n1 2 3\n1\n\n\n\n1 3 4\n1 2 3\n1 2"], "prompt": "\nQUESTION:\nIt's autumn now, the time of the leaf fall.\nSergey likes to collect fallen leaves in autumn. In his city, he can find fallen leaves of maple, oak and poplar. These leaves can be of three different colors: green, yellow or red.\nSergey has collected some leaves of each type and color. Now he wants to create the biggest nice bouquet from them. He considers the bouquet nice iff all the leaves in it are either from the same type of tree or of the same color (or both). Moreover, he doesn't want to create a bouquet with even number of leaves in it, since this kind of bouquets are considered to attract bad luck. However, if it's impossible to make any nice bouquet, he won't do anything, thus, obtaining a bouquet with zero leaves.\nPlease help Sergey to find the maximal number of leaves he can have in a nice bouquet, which satisfies all the above mentioned requirements.\nPlease note that Sergey doesn't have to use all the leaves of the same color or of the same type. For example, if he has 20 maple leaves, he can still create a bouquet of 19 leaves.\n\n-----Input-----\nIThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\"\nThe first line of each test case contains three space-separated integers MG MY MR denoting the number of green, yellow and red maple leaves respectively.\nThe second line contains three space-separated integers OG OY OR denoting the number of green, yellow and red oak leaves respectively.\nThe third line of each test case contains three space-separated integers PG PY PR denoting the number of green, yellow and red poplar leaves respectively.\n\n-----Output-----\nFor each test case, output a single line containing the maximal amount of flowers in nice bouquet, satisfying all conditions or 0 if it's impossible to create any bouquet, satisfying the conditions.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10000\n- Subtask 1 (50 points): 0 \u2264 MG, MY, MR, OG, OY, OR, PG, PY, PR \u2264 5\n- Subtask 2 (50 points): 0 \u2264 MG, MY, MR, OG, OY, OR, PG, PY, PR \u2264 109\n\n-----Example-----\nInput:1\n1 2 3\n3 2 1\n1 3 4\n\nOutput:7\n\n-----Explanation-----\nExample case 1. We can create a bouquet with 7 leaves, for example, by collecting all yellow leaves. This is not the only way to create the nice bouquet with 7 leaves (for example, Sergey can use all but one red leaves), but it is impossible to create a nice bouquet with more than 7 leaves.\nUse Standard Input format\nANSWER:\n"}}