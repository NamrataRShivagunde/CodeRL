{"1904": {"code": ["\nUse Call-Based format\n\n\n    def kClosest(self, points, K: int) -> List[List[int]]:\n\n\n\n\n   \n\n\n\n\n\nUse Method-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n    Parameters:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    points = [[[int],[int]]\n\n\n\n\n   \n    points = [[-2,2]]\n\n\n\n\n\n\n\n\n\n\nThe points are on a plane.\n\n\n\n\n\n    points = [[3,3],", "\nUse Call-Based format\n\n\n    KClosest(self, points, K) -> List[List[int]]\n\n\n\n\n\n   \n    return kClosest(self, points, K)\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples 2:\n\n\nExample 1:\n\n\n\n   ", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n    points = [[-2,2],[-2,2]]\n\nUse Call-Based format\n\n\n\n\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= K <= points.length <= 10000\n\n\n\n\npoints = [[-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n       \n    points = points.kClosest(self, K)\n\n\nUse Method-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a list of points on the plane.\n\n\nExample 3:\n\n\nWe have points on the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n       \n        # K = 2\n        # K = 1\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nK = 2\n\n\n\n\n\u00a0\n    KClosest:\n", "\n\n\n\nUse Call-Based format\nWe have points on the plane.\n\n\n\n\n       \n    KClosest(self, points, K)\n       \n\n\n\n   \n    points = points[i]\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\nThe points on the plane are closest to the origin.\n\n\n\nWe have points on", "\nUse Call-Based format\n\n\n    def kClosest(self, points: List[List[int]], K: int):\n\n\n\n\n\n   \n    points = points.kClosest(self, points, K)\n        \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1]\n\n\u00a0", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return self.kClosest(points, K)\n\nUse Method-Based format\n\n    points = points.kClosest(self, K)\n    \n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n    points = [[1,3],", "\nUse Call-Based format\n\n\n\nWe have a list of points on the plane\n\n\n\n   \n\n\n\nWe have a list of points on the plane.\n\n\u00a0\n\n   \n    points = [points]\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThe K closest points to the origin are closest to", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    points: list of points\n        K: number of points to find the closest K to.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe points on the plane are closest to the origin.\n\n\n\n\n\npoints = [[1,", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    return kClosest(self, points, 2)\n\nUse Call-Based format\n\n\nUse Python 3-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        K = 1\n\n\nExample 3:\nInput: points = [[3,3]]\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        # K = 2\n        # K = 1\n        # K = 2\n\n\n\n\n\nWe have points on the plane.\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    K = 1\n\nReturns:\n\n\n\n-2,2,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        points = [points]\n        \n\n\n\n\n\n    points = [points, points]\n\nUse Call-Based format\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nK = 2\n\n\n\nWe have a list of points on", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\nWe have a list of points on the plane.\n\u00a0\n\n\n   \n    points = [[3,4],[5,-1]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    points = [[-2,2], [-", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n       \n    kClosest(self, points, K)\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nThe K closest points to the origin.\n\n\n\n\nWe have a", "\nUse Call-Based format\n\n\n    points = [points]\n    K = 1\n\n\n\n\n\n   \n        points = [[points]]\n        K = 2\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nReturns the K closest points to the origin\n\n\n\n\n\n\nK = 1\nInput:", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return self.kClosest(points, K)\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe points on the plane are on the plane.\n\n\nThe points on the plane are on", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n    # KClosest(self, points, K):\n        # -> [K]\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA list of points on the plane.\n\n\n\n\nWe have points on the plane. We", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n       \n        return self.kClosest(points, K)\n\n\n\n\n   \n    kClosest(self, points, K)\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWe have a list of points on the plane.\n\nWe have"], "prompt": "\nQUESTION:\nWe have a list of points\u00a0on the plane.\u00a0 Find the K closest points to the origin (0, 0).\n(Here, the distance between two points on a plane is the Euclidean distance.)\nYou may return the answer in any order.\u00a0 The\u00a0answer is guaranteed to be unique (except for the order that it is in.)\n\u00a0\n\nExample 1:\nInput: points = [[1,3],[-2,2]], K = 1\nOutput: [[-2,2]]\nExplanation: \nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].\n\n\nExample 2:\nInput: points = [[3,3],[5,-1],[-2,4]], K = 2\nOutput: [[3,3],[-2,4]]\n(The answer [[-2,4],[3,3]] would also be accepted.)\n\n\u00a0\nNote:\n\n1 <= K <= points.length <= 10000\n-10000 < points[i][0] < 10000\n-10000 < points[i][1] < 10000\nclass Solution:\n    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}