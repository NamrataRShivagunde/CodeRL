{"360": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nA cargo has packages that must ship from one port to another\n\n\u00a0\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nA cargo has shipped packages\n\n\n\n\n\nA cargo has shipped packages", "\nUse Call-Based format\nUse Call-Based format\n\n\n    ShipWithinDays(self, weights, D: int) -> int:\n\n\n\n\n\n   \n\n\n\n   \n       \n\nA conveyor belt has packages that must ship within D days\n\n\n\n\n\n\nA cargo is shipped\n\n\n\n\nA port is shipped", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nA conveyor belt has packages that must be shipped from one port to another\n\n\n\n\n\n\n\n   \n        return self.cargo\n\n\n\n\n\n\n\n\n\nA cargo is shipped with more than 1 package\n\n\n\n\n\nA cargo has packages that must", "\nUse Call-Based format\n\n\n\n\nThe cargo is shipped with a package on one port to another\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1st day: 1, 2, 3, 4, 5, 6\n\n\n\n\nA cargo is", "\nUse Call-Based format\n\n\n\n\nA cargo is shipped from one port to another\n\nExplanation:\n\nA cargo is shipped from one port to another\n\n\n\n   \n\n\n\n   \n       \n\n\n\n\n\n\n\n\n\nA cargo is shipped from one port to another\n\n\n\n\nA cargo is shipped from", "\nUse Call-Based format\n\n\n    def shipWithinDays(self, weights: List[int], D: int):\n\n\n\n\n\n\n\n\n\n\n\nA conveyor belt has no ship with packages\n\n\n\n\n\n\n\n\n\n\n\n\n\nA cargo has shipped packages.\n\n\n\n\nA cargo has shipped packages from", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nA cargo is shipped with a different cargo and ship capacity of a different cargo.\n\n\n\n\n\n\n\n\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n\n\nA cargo is shipped with one port to another.\n\n\n\n\n\n\n\n100 <=", "\nUse Call-Based format\n\n\n\nA cargo is shipped from one port to another.\n\n\n\n\n   \n\n\u00a0\nUse Call-Based format\n\n\n\n\n   \n    return 0\n\n\n\n\n\n\n\n\n\nA cargo is shipped from one port to another.\n\n\n\n\nA cargo is shipped from one port to", "\nUse Call-Based format\n\n\n\n\n\nA cargo has no shipped packages\n\nExample 4:\n\n1 <= D <= weights.length <= 40000\n\nExample 5:\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nA cargo is shipped\n\n\n\n\n\nA cargo is shipped on", "\nUse Call-Based format\n\n\n    def shipWithinDays(self, weights: List[int], D: int):\n\n\n\n\n   \n\n\n\n\n\n\u00a0\n\n    print(self.cargo)\n\n\n\n\n\n\n\n\n\n\nA ship with a package is shipped from one port to another\n\n\n\n\n\nA ship with a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    def getShipCapacity(self, weights: List[int], D: int):\n        return self.cargo.shipCapacity\n\nUse Call-Based format\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA conveyor belt has packages that must", "\nUse Call-Based format\n\n\n    def shipWithinDays(self, weights: List[int], D: int):\n\n\n\n\n\n   \n\n\n\n\n   \n        return self.cargo.total_weight_capacity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA cargo has packages that are shipped from one port to another. \n\n", "\nUse Call-Based format\n\n\n\n\n\n1 <= D <= 4:\n1 <= D <= 7\n\nExplanation:\n1 <= D <= 15\n\nExplanation:\n\n\n\n   \n\n\n\n    -> int\n\n\n\n\n\n\n\n\n\nA cargo is shipped from one port to another\n\n\n\n\nA cargo is shipped from", "\nUse Call-Based format\n\n\n    def shipWithinDays(self, weights: List[int], D: int):\n\n\n\n\n\n   \n\n\n\n\n\u00a0\nUse Call-Based format\n\nExample 1:\n   \n\n\n\n\n\n\n\n\n\n\nA conveyor belt has shipped packages\n\n\n\n\nA conveyor bel", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\n\n\n\n\n    def cargo(self, weights: List[int], D: int):\n        return 0\n\n\nCAUSE:\n\n\n\n\n   \n\n\n\n\n\n\n\n\nA cargo has not been shipped\n\n\n\n\n\nA cargo is shipped from", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nA conveyor belt has packages that must ship from one port to another.\n\n\n\n\n\n   \n\n\n\n   \n        return self.cargo.shipWithinDays(weights, D)\n\n\n\n\n\n\n\n\nA\n\n\n\n\nA cargo has packages that must ship with", "\nUse Call-Based format\n\n\n    shipWithinDays(self, weights, D) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n    return self.shipWithinDays(weights, D)\n\n\n\n\n\n\n\n\n\nA conveyor belt has shipped packages that must ship from one port to another.\n\n\n\n\nA port is", "\nUse Call-Based format\n\n\n\n\n\n1 <= D <= 7\n1 <= D <= 11\n\nExample:\n\n1st day: 1, 2, 3\n1st day: 2, 3, 4\n\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\nA ship is shipped\n\n\n\n\n\nA ship has", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nConverged\n\nExamples:\n\n1st day: 1, 2, 3, 4, 5\n\nExample 4:\n\n   :\n\n\n\n\n\n\n\n\n\n\nA ship on one port to another port is shipped.\n\n\n\n\nA ship on one", "\nUse Call-Based format\n\n    Use Call-Based format\n\n\n\n\n\n\n    def ship(self, weights: List[int], D: int):\n        return self.balance()\n\nExample:\n\n\n\n   \n\n\n\n\n\n\n\n\nA conveyor belt has shipped packages\n\n\n\n\nA ship of capacity of 1 is ship"], "prompt": "\nQUESTION:\nA conveyor belt has packages that must be shipped from one port to another within D days.\nThe i-th package on the conveyor belt has a weight of weights[i].\u00a0 Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.\n\u00a0\nExample 1:\nInput: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: \nA ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. \n\nExample 2:\nInput: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: \nA ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n\nExample 3:\nInput: weights = [1,2,3,1,1], D = 4\nOutput: 3\nExplanation: \n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n\n\u00a0\nConstraints:\n\n1 <= D <= weights.length <= 50000\n1 <= weights[i] <= 500\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}