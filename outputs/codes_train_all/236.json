{"236": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    def minFlipsMonoDecrecr(self, S: str):\n        return 2\n\n\n\n:\n\nS is a string\n\n\n\n\n\n\n\n\nS is monotone increasing\n\n\n\n\n\nS consists of '0's", "\nUse Call-Based format\n\n\n    def minFlipsMonoIncr(self, S: str):\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n   :\n       \n\n\n\n\n\n\nS is a string of '0's and '1's\n\n\n\nA string is a string of numbers\n\n\n\n\nS is a string", "\nUse Call-Based format\n\n\n    def minFlipsMonoIncr(self, S: str):\n        return S.length\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\nS is a string\n\n\n\n\n\n\n\nS is monotone increasing if it is between 0 and 1.\n\n\n\n\n\nS is a string of '", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return self.minFlipsMonoIncr\n\n\n\n\n   :\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nS\n\n\n\nS is monotone increasing\n", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n       pass\n\n\u00a0\n\nS = \"000110\"\n\n\n\u00a0\n:\n\nS = \"000110\"\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nS = \"000110", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\n\n\n\n\n\n    def minFlipsMonoIncr(self, S: str):\n        return 2\n\n\u00a0\n\n\nExample:\n\n\n\n\n   :\n\n\nA\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nS = \"000001\"", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def minFlipsMonoDecrecr(self, S: str) -> int:\n        return self.minFlipsMonoIncr(S)\n\n\u00a0\n\nNote:\n\n\n\n\n:\n   :\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\n% 1001", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n:\n        \"\"\"\n\n\n\n\n\n\nThe following string is a string of monotone increasing numbers:\n\n\nA string of 0's and 1's is monotone increasing.\n\n\n\nThe string", "\nUse Call-Based format\nUse Call-Based format\n    def minFlipsMonoIncr(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n        \n\nA string is monotone increasing\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nS consists of '0", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n          \n\n\nS:\n    S = \"000110\"\n\n\n\n\n\n:\n\n\nS is a string\n\nS is a string\n\n\n\n\n\n\nA string of '0's and '1's is monotone increasing.\n\n\n\n\nS is a string S", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n:\n        S: string\n\nS is a string of '0' and '1' characters\n\n\n\nS is a string of monotone increasing digits.\n\n\n\nS is a string\n\n\n\n\nS consists of '", "\nUse Call-Based format\n\n    def minFlipsMonoIncr(self, S: str):\n    return 2\n\n\n\n\n\n\n          \n\n\n   :\n\n\n\n\n\n\nA string of '0's and '1's is monotone decreasing\n\n\nUse Call-Based format\nA string is increasing\n\n\n\n\nS consists", "\nUse Call-Based format\n\n    def __call__(self):\n        \n\n\n\n\n\n   \n\n\n\n\n    def minFlipsMonoDecrecr(self, S: str):\n        return 1\n\n   :\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\nS is monotone increasing\n\n\n\n\nS is monot", "\nUse Call-Based format\n\n    def minFlipsMonoIncr(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   :\n    pass\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nThe string is monotone increasing\n\n\n\n\nS consists of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nS is monotone increasing\n\n\n\n   \n    def minFlipsMonoIncr(self, S: str):\n        \nUse Call-Based format\n\n\n   :\n\nA\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nA string of '0's and '", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n   \n    pass\n\n\n\n:\n\nS is a string that can be used to form a string of 0's and 1's\n\n\n\n\n\n\nA string of '0's and '1's is monotone increasing\n\n\n\n\nA string of '0's", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\u00a0\n\n\n\u00a0\n:\n    \n\nS:\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe string '0' or '1' is monotone increasing\n\n\n\n\nA string of '0", "\nUse Call-Based format\n\n    def minFlipsMonoIncr(self, S: str) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n:\n    pass\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nS is monotone increasing\n\n\n\nS consists of", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n    def minFlipsMonoIncr(self, S: str) -> int:\n\n\n\n\n\n   :\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nA string of '0's and '1", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def minFlipsMonoIncr(self, S: str):\n        return 2\n\n\u00a0\n\n\n\n\n   :\n\nS\n\n\n\n\n\n\n\n\n\n\n\nThe solution is then given by\n"], "prompt": "\nQUESTION:\nA string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)\nWe are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.\nReturn the minimum number of flips to make S\u00a0monotone increasing.\n\u00a0\n\nExample 1:\nInput: \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.\n\n\nExample 2:\nInput: \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.\n\n\nExample 3:\nInput: \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000.\n\n\u00a0\nNote:\n\n1 <= S.length <= 20000\nS only consists of '0' and '1' characters.\nclass Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}