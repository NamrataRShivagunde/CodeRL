{"1731": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n- `~` Push a value onto the stack and discard it.\n- ``\n\n- ``\n\n- ``\n\n\n.\n\n\n\n\n\n\nPop a value; move down and left.\n\n\n\n\n-\n\n\n\n\n\n- `~`\n- `", "\n\n\n\n\n\n\n\n\n- `-`\n\n\n\n- `~`\n\n\n\n\n- `~`\n\n- Pop a value; discard it.\n-\n\n\n\n\n\n\n\n\n\n\n- `-`\nPop a value and push a zero.\n- `_`\n-\n-.\n\n\n-\n\n\n##", "\n\n\n\n\n\n\n\n+\n- `-`\n- `_`\n- `-`\n- `/`\n- `_`\n\n- ``\n- ``\n\n\n\n\n-\n\n\n-\n-\n-\n\n\n\n\n\n\n\n\n-\n\n\n\n- `*`\n\n-\n-\n\n.\n-", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n|\n|\n| ` \\\\\n|` | ` |`\n| `|`\n| `|`\n|` | `|`\n| `|`\n|\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n- `~`\n-\n\n.\n- `", "\n\n\n\n\n\n\n- `*`\nPush a value onto the stack.\n- `/` Push a value onto the stack.\n- `?`\n\n\n\n- ``\n\n\n`\n\n-\n-\n\n.\n\n\n\n\n\n\n-\n\n\n- `~`\n\n- ``\n\n\n\n\n###\n\n#!", "\n\n\n\n\n\n\n\n\n\n\n- `~` Pop a value from the stack.\n- `~` Push a value on the stack.\n-\n- `~` Push a value on the stack.\n\n\n-\n\n\n\n-\n-\n\n\n`\n\n\n\n\n\n\n- `~`\n-\n\n-\n\n from the program's", "\n\n\n\n\n\n\n\n\n- `-`\n\n- `~`\n\n- `!`\n\n- ``\n\n- ``\n\n- ``\n\n\n\n\n-\n- ``\n\n\n.\n\n\n\n\n\n\n\n\n\n\n`\n\n`\n\n\n.\n\n**Example**\n\n- `1` Sub", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `-`\nPop `a` and push `b` from the stack and discard it.\n\n- `_`\nPop `a` and push `b`.\n\n- `~`\n\n-\n\n\n`\n\n\n`\n\n\n-`\n\n-\n-\n\n\n''", "\n\n\n\n\n\nBefunge-93\n\n\n\n\n\n\n\n\n\n\n\nPop value from the stack and discard it.\n- `?` Push value from the stack and discard it.\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nIf you're not able to interpret Be", "\n\n\n\n\n\n\n\n\n- `~` Push the number onto the stack.\n- `~` Push the number onto the stack.\n\n- `?` Push the number onto the stack.\n\n\n\n\n\n\n\n-\n-\n\n\n\n\n\n\n\n\n\n-\n-\n\n-\n- ``\n-\n.\n\n- `-", "\n\n\n\n\nBefunge-93:\n\n\n\n\n\n\n\n\n\n`\nPop a value from the stack and discard it.\n- `~` Push a `~` on top of the stack.\n-\n\n\n\n\n\n\n\n\n\n\n- `~`\n\n- `*`\n-\n- `_`-\n\n\n- `", "\n\nBefunge-93:\n\nBefunge-93:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n- `=`\n\n- `^`\n\n- `_`\n\n- `*", "\n\n\n\n\n\n\n\n\n\n\n\n\n- `-`\nPush a number onto the stack.\n- `+`\n- `-`\n- `-`\n\n- `-`\n\n\n\n\n.\n\n- ``\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n- ``.\n-\n-\n.\n- `", "\n\nBefunge-93\n\nBefunge-93\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `~` Push `a` onto the stack.\n- `?` Push `b`.\n- `=`-\n\n\n\n\n-\n\n\n\n\n\n\n-\n\n-\n- `~`\n-\n.\n\n- `", "\n\n\n\n\n\n\nEOTeric languages:\n\nBefunge-93\n\n\n\n\n\n\n\n\n\n\n\n- `~` Push the code onto the stack.\n- `/` Push the code onto the stack.\n-\n\n\n\n\n\n\n\n\n\n\n-\n\n\n- ``\n\n\n- ``\n- `*`", "\n\n\n\n\n\n\n\n\n\nBefunge-93\n\n\n\n\n\n\n\n\n\n\n\n`\n Push a number onto the stack.\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\nPop a number onto the stack.\n\n\n\n\n\n\n- `-`\n\n- `_`\n\n-\n\n\n- `@", "\n\n\n\n---------------------------------------------------------------------\n\nBEFFIE-93\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n- ``\n Push a value onto the stack, discard it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$ `foo`\n\n$ `bar`\n\n$ `^`", "\n\n\n\n\n\n\nBefunge-93:\n\n\n\n\n- `/`\nPop a value from the stack and discard it.\n- `\\\\`\nPop a value from the stack and discard it.\n\n\n\n-\n\n\n\n-\n\n\n\n\n\n\n\n\n- `~`\n-\n- `~`\n-\n\n- `", "\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n- `` Push a value onto the stack and discard it!\n\nEOF:\n\n\n\n\n- `_`\nPop a value from the stack and discard it!\n\nEOF:\n\n\n\n\n\n\n\n\nPop a value onto the stack!\n\n-\n\n-\n\n\n###\n\n", "\nBefunge-93\n\nBefunge-93\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n- Push a value onto the stack.\n\n.\n\n\n\n\n\n\n\n\n\n- `-` Push a value on top of the stack and discard it.\n- `_` Push zero.\n- `\n-\n-\n.\n"], "prompt": "\nQUESTION:\nEsoteric languages are pretty hard to program, but it's fairly interesting to write interpreters for them!\n\nYour task is to write a method which will interpret Befunge-93 code! Befunge-93 is a language in which the code is presented not as a series of instructions, but as instructions scattered on a 2D plane; your pointer **starts at the top-left corner** and defaults to **moving right** through the code. Note that the instruction pointer **wraps** around the screen! There is a singular stack which we will assume is unbounded and only contain integers. While Befunge-93 code is supposed to be restricted to 80x25, you need not be concerned with code size. Befunge-93 supports the following instructions (from [Wikipedia](https://en.wikipedia.org/wiki/Befunge)):\n\n- `0-9` Push this number onto the stack.\n- `+` Addition: Pop `a` and `b`, then push `a+b`.\n- `-` Subtraction: Pop `a` and `b`, then push `b-a`.\n- `*` Multiplication: Pop `a` and `b`, then push `a*b`.\n- `/` Integer division: Pop `a` and `b`, then push `b/a`, rounded down. If `a` is zero, push zero.\n- `%` Modulo: Pop `a` and `b`, then push the `b%a`. If `a` is zero, push zero.\n- `!`   Logical NOT: Pop a value. If the value is zero, push `1`; otherwise, push zero.\n- ``` ` ``` (backtick) Greater than: Pop `a` and `b`, then push `1` if `b>a`, otherwise push zero.\n- `>` Start moving right.\n- `<` Start moving left.\n- `^` Start moving up.\n- `v` Start moving down.\n- `?` Start moving in a random cardinal direction.\n- `_` Pop a value; move right if `value = 0`, left otherwise.\n- `|` Pop a value; move down if `value = 0`, up otherwise.\n- `\"` Start string mode: push each character's ASCII value all the way up to the next `\"`.\n- `:` Duplicate value on top of the stack. If there is nothing on top of the stack, push a `0`.\n- `\\` Swap two values on top of the stack. If there is only one value, pretend there is an extra `0` on bottom of the stack.\n- `$` Pop value from the stack and discard it.\n- `.` Pop value and output as an integer.\n- `,` Pop value and output the ASCII character represented by the integer code that is stored in the value.\n- `#` Trampoline: Skip next cell.\n- `p` A \"put\" call (a way to store a value for later use). Pop `y`, `x` and `v`, then change the character at the position `(x,y)` in the program to the character with ASCII value `v`.\n- `g` A \"get\" call (a way to retrieve data in storage). Pop `y` and `x`, then push ASCII value of the character at that position in the program.\n- `@` End program.\n- ` ` (i.e. a space)    No-op. Does nothing.\n\nThe above list is slightly modified: you'll notice if you look at the Wikipedia page that we do not use the user input instructions and dividing by zero simply yields zero.\n\nHere's an example:\n\n```\n>987v>.v\nv456<  :\n>321 ^ _@\n```\n\nwill create the output `123456789`.\n\nSo what you must do is create a function such that when you pass in the Befunge code, the function returns the output that would be generated by the code. So, for example:\n\n```\n\"123456789\".equals(new BefungeInterpreter().interpret(\">987v>.v\\nv456<  :\\n>321 ^ _@\")\n```\n\nThis test case will be added for you.\ndef interpret(code):\n\t\nUse Call-Based format\nANSWER:\n"}}