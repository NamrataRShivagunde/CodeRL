{"2801": {"code": ["\n KATA\n\n\n\n\n\n\n\n### Example:\n\n## Definition:\n\n## Parameters:\n\n## The function `pattern`\n\n### The function `pattern`\n\n### Rule:\n\n###\n\n\n\n\n\n         1\n       \n\n\n\n\n\n\n\n\n     1     1     1\n       \n*\n     1     1     1", "\n## Contributions:\n\n## Example:\n\n### Pattern\n###\n\n\n\n\n\n\n\n   \n\n## Arguments:\n\n    pattern(\n        n       , x       , y       , \n       \n       \n\n\n     1     1\n             \n\n\n\n\n\n       \n       \n\n\n     1     1\n       \n     1     1     1", "\nKATA:\n KATA\nQUESTION:\n< PREVIOUS KATA >\nNEXT KATA >\n\nQUESTION:\n< NEXT KATA >\n\n\n\n\n\n\n\n\n\n\n\n\n\n            1     1\n       \n*\n    \n    \n\n\n\n\n\n     1     1     1\n       \n\n\n     1     1     1", "\n\n\n### Syntax:\n\n### KATA\n### KATA\n KATA\n\n## Functions:\n\n### Functions\n\n### Functions\n\n### Functions\n\n### Functions\n\n### Functions\n\n###\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n## Functions\n\n## Functions\n\n\n\n\n\n         1     1    ", "\n\n## Example:\n KATA\n\nQUESTION:\n< KATA >\n< KATA >\n\n## Example:\n\n### Parameters:\n\n### Examples:\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n     1     1\n            1\n\n\n\n\n\n\n\n     1     1\n       \n       \n            1     1    ", "\nKATA:\n KATA >\n\n### Parameters:\n\n## Parameters\n\n1     1     1     1     1\n2     2\n3\n\n\n\n\n\n\n\n\n\n\n\n\n            1     1     1\n            1     1\n         2     2\n    \n\n\n\n\n\n\n\n\n     1     1     1\n         2", "\n\n\n\n\n\n\n\n### Example:\n\n### Basic Pattern\n\n### Basic Pattern\n\n### Basic Pattern\n\n### Basic Pattern\n\n### Basic Pattern\n\n### Basic Pattern\n\n###\n\n\n\n\n\n\n\n\n     1     1\n            \n    \n\n\n\n\n\n\n            1     1     1\n       \n     1     1     1", "\nKATA\n\n\n## Example:\n\n## Example:\n\n### Example\n\nA KATA\nA KATA\nA KATA\nA KATA\n\n## Examples:\n\n## Examples\n\n### Examples\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n     1     1     1\n\n     1     1", "\nKATA\n\n\n\n## Rules:\n\n### Example:\n\n# 1\n# 2\n# 3\n# 4\n# 3\n# 4\n# 4\n\n###\n\n\n\n\n\n\n\n\n\n\n         1     1\n         1     1     1\n\n\n\n\n\n\n\n\n\n\n\n            1     1     1\n         2", "\n## Tasks:\n\n### Rule:\n\n## Rule:\n\n\n\n\n\n### Parameters:\n\n\n\n\n### Rule:\n\n\n\n\n\n\n### Examples:\n\n\n\n\n\n        \n            1     1\n        \n           \n     1\n\n\n\n\n       \n       \n\n## Examples:\n\n\n\n\n\n     1     1", "\nKATA\n\n\n\n\n## Example:\n\n## Example:\n\n##### Examples\n###\n\n###\n\n\n\n\n\n\n        1     1     1     1\n       \n##### Examples\n\n       \n\n\n\n\n        \n        \n        \n\n\n\n    \n## Example:\n\n\n\n\n\n\n\n     1     1\n         2", "\nKATA:\n\n KATA:\n\nBLANKLINE:\n\nKATA:\n\nBLANKLINE:\n\nKATA:\n\n\n\n\n\n\n\n\n### Rules:\n\n### Examples:\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n            1     1     1\n       \n*\n     1     1", "\nKATA\n\n\n\n\n\n\n\n## Functions:\n\n### Function:\n\n### Function:\n\n### KATA\n### KATA\n\n## Term:\n\n\n\n\n\n\n\n\n\n            1     1\n            1     1\n         1\n\n\n\n\n\n\n\n\n\n\n        1     1     1\n            1     1", "\n# Rule:\n# Rule:\n# Rule:\n# Rule:\n# Rule:\n# Rule:\n# Rule:\n# Rule:\n\n\n\n\n\n\n\n\n\n\n\n\n\n            1     1\n           \n            1     1\n       \n\n\n\n\n\n\n            1     1     1\n       \n            1     1    ", "\nKATA\nREPEAT:\n< PREVIOUS KATA >\nNEXT KATA >\nQUESTION:\n< NEXT KATA >\n\n\n\n\n\n\n\n\n\n\n\n\n            1     1     1\n       \n* Having One Argument-\n\n         1\n           \n\n\n\n\n\n\n\n\n     1\n       \n            1    ", "\n\n## Example:\n\n## General:\n\n### Example:\n\n## Rule:\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n### Rule:\n\n#### Examples\n\n### Rule:\n\n\n\n\n\n        \n\n\n\n\n\n\n\n### Example:\n\n## Example:\n\n\n\n\n       \n\n     1     1    ", "\nKATA:\n KATA\n\n\n\n\n### Rules:\n\n### Examples:\n\n## Parameters:\n\n###\n\n\n\n       \n            1     1     1\n       \n*    \n\n         1     1\n         2   2   2   2\n    \n\n\n\n\n\n## Functions:\n\n\n\n\n\n\n\n     1     1", "\nKATA:\n  KATA\n  KATA:\n  KATA\n  KATA\n\nEXAMPLE:\n\n## Example\n\nA\n\n\n\n\n\n\n\n\n\n\n\n        1     1     1     1\n       \n        1     1\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n     1     1\n         2   2", "\n## Pattern\n\n KATA\n\n\n\n\n\n\n\n\n\n    pattern(        n       ,        x       ,        y       ,        x       ,        y        );\n\n## Rule:\n\n## Arguments:\n\n    n\n\n\n\n\n         1\n    \n\n\n\n\n## Effects\n\n\n\n\n\n\n\n     1     1    ", "\nKATA\n\n## Example:\n\n## Example:\n\n## Example\n\n### Example:\n\n###\n\n### Example:\n\n\n\n\n\n\n   \n\n## Examples:\n\n\n\n\n            1\n       \n*     1     1\n             \n    \n\n\n\n\n\n\n            1     1\n       \n*\n     1     1"], "prompt": "\nQUESTION:\n< PREVIOUS KATA\nNEXT KATA >\n\n## Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto desired number of rows. \n\n* Note:```Returning``` the pattern is not the same as ```Printing``` the pattern.\n\n### Parameters:\n    \n    pattern(        n        ,        x        ,        y        );\n                    ^                 ^                 ^   \n                    |                 |                 |\n             Term upto which   Number of times   Number of times\n              Basic Pattern     Basic Pattern     Basic Pattern\n                should be         should be         should be\n                 created          repeated           repeated\n                                horizontally        vertically\n    \n* Note: `Basic Pattern` means what we created in Complete The Pattern #12\n\n## Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* If `x <= 1` then the basic pattern should not be repeated horizontally.\n* If `y <= 1` then the basic pattern should not be repeated vertically.\n* `The length of each line is same`, and is equal to the length of longest line in the pattern.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n \u2208 (-\u221e,25]`\n  + `x \u2208 (-\u221e,10]`\n  + `y \u2208 (-\u221e,10]`\n* If only two arguments are passed then the function `pattern` should run as if `y <= 1`.\n* If only one argument is passed then the function `pattern` should run as if `x <= 1` & `y <= 1`.\n* The function `pattern` should work when extra arguments are passed, by ignoring the extra arguments.\n   \n   \n## Examples:\n\n* Having Three Arguments-\n\n + pattern(4,3,2):\n\n        1     1     1     1\n         2   2 2   2 2   2 \n          3 3   3 3   3 3  \n           4     4     4   \n          3 3   3 3   3 3  \n         2   2 2   2 2   2 \n        1     1     1     1\n         2   2 2   2 2   2 \n          3 3   3 3   3 3  \n           4     4     4   \n          3 3   3 3   3 3  \n         2   2 2   2 2   2 \n        1     1     1     1\n       \n* Having Two Arguments-\n\n  + pattern(10,2):\n\n        1                 1                 1\n         2               2 2               2 \n          3             3   3             3  \n           4           4     4           4   \n            5         5       5         5    \n             6       6         6       6     \n              7     7           7     7      \n               8   8             8   8       \n                9 9               9 9        \n                 0                 0         \n                9 9               9 9        \n               8   8             8   8       \n              7     7           7     7      \n             6       6         6       6     \n            5         5       5         5    \n           4           4     4           4   \n          3             3   3             3  \n         2               2 2               2 \n        1                 1                 1\n\n* Having Only One Argument-\n\n  + pattern(25):\n\n        1                                               1\n         2                                             2 \n          3                                           3  \n           4                                         4   \n            5                                       5    \n             6                                     6     \n              7                                   7      \n               8                                 8       \n                9                               9        \n                 0                             0         \n                  1                           1          \n                   2                         2           \n                    3                       3            \n                     4                     4             \n                      5                   5              \n                       6                 6               \n                        7               7                \n                         8             8                 \n                          9           9                  \n                           0         0                   \n                            1       1                    \n                             2     2                     \n                              3   3                      \n                               4 4                       \n                                5                        \n                               4 4                       \n                              3   3                      \n                             2     2                     \n                            1       1                    \n                           0         0                   \n                          9           9                  \n                         8             8                 \n                        7               7                \n                       6                 6               \n                      5                   5              \n                     4                     4             \n                    3                       3            \n                   2                         2           \n                  1                           1          \n                 0                             0         \n                9                               9        \n               8                                 8       \n              7                                   7      \n             6                                     6     \n            5                                       5    \n           4                                         4   \n          3                                           3  \n         2                                             2 \n        1                                               1\n        \n>>>LIST OF ALL MY KATAS<<<\ndef pattern(n, x=1, y=1, *args):\n\t\nUse Call-Based format\nANSWER:\n"}}