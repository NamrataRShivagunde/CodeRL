{"1784": {"code": ["\n\n\n\n> The following is a very general case:\n\n```python\nadd(x)\n```\n\n\n\n\n\n\n\n## Partial application\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Currying\n", "\n\n\n\n## Currying\n\n> Is the process of fixing the arity of a function:\n\n```python\nadd(1,2,3) # => 6\n```\n\n\n\n\n\n\n## Partial application\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Fisher\n\n", "\n\n\n\n```python\nadd = X \u2192 Y \u2192 R```\n\n```python\nadd(3, 5)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Recursion\n\n```python", "\n\n\n\n\n\n\n\n\n### Interceptation:\n\n```python\nf = add(x, y, z)\n```\n\n>\n\n\n```python\nx = y\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Recursion:\n", "\n\n\n\n```python\nadd(X, Y, Z)\n```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npartialAdd(1,2,3)\n```\n\n\n\n\n\n## HACK:\n\n", "\n\n\n\n\n\n\n\n## Currying and partial application\n\n```python\ncurriedAdd = add(x) # => 6\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\nadd(2, 3)\n\n\n\n\n## Example:\n", "\n\n\n\n\n\n\n## Currying\n\n```python\ncurriedAdd = curriedAdd(X,Y,Z)```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nadd(x)\n\n```python\n\n\n\n\n\n\n\n## Corner case:", "\n\n\n\n\n\n\n\n----------------\n\n\n\nCurrying\n\n```python\ncurriedAdd(x, y, z) # => 6\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n", "\n\n\n\n```python\nadd(1,2,3) # => 6\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nadd(1,2,3) # => 6\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Currying\n\n```", "\n\n\n---\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nadd(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\npartialAdd = X \u2192 Y \u2192 R```\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example", "\n\n\n\n\n\n\n\n\n## Currying\n\n> The technique is a very interesting example:\n\n```python\ncurriedAdd = f'(x) # => 6\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n``", "\n\n\n \n \n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\nadd(x, y, z):\n  # => 6\n\n\n\n### Example:\n\n```python\nadd(x, y, z)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Extraction\n\n``", "\n\n\n### Example:\n\n```python\nadd(x, y, z)```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nX \u2192 Y \u2192 R```\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n### Example\n\n```python\nadd(X,Y,Z)```\n\n```python\nadd(X,Y,Z)```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n```python\n\n", "\n\n\n\n## Example\n\n```python\nadd(x,y,z) # => 6\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Curried application\n\n\n\n\n## Example\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n```", "\n\n\n\n\n## Example:\n\n```python\nadd(x, y, z)```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Interpretation:\n\n```python\nadd(x, y, z)```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Currying\n", "\n\n\n\n\n## Currying\n\n> This is a technique and we can't do that.\n\n## Partial application\n\n>\n\n\n\n\n## Partial application\n\n> Is a technique:\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n", "\n\n\n\n\n\n### Currying and partial application\n\n```python\ncurriedAdd = add(1,2,3,5)`function\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## No curried version\n\n``", "\n\n\n-------\n\n### Currying and partial application\n\n>\n\n```python\nadd = (X, Y, C)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n", "\n\n\n\n\n\n\n## Currying\n\n> Is the technique of the curried version of the function:\n\n```python\ncurriedAdd = x\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Propagation\n\n"], "prompt": "\nQUESTION:\n[Currying and partial application](http://www.2ality.com/2011/09/currying-vs-part-eval.html) are two ways of transforming a function into another function with a generally smaller arity. While they are often confused with each other, they work differently. The goal is to learn to differentiate them.\n\n## Currying\n\n> Is the technique of transforming a function that takes multiple arguments in such a way that it can be called as a chain of functions each with a single argument.\n\nCurrying takes a function:\n\n```\nf: X \u00d7 Y \u2192 R\n```\n\nand turns it into a function:\n\n```\nf': X \u2192 (Y \u2192 R)\n```\n\nInstead of calling `f` with two arguments, we invoke `f'` with the first argument. The result is a function that we then call with the second argument to produce the result. Thus, if the uncurried `f` is invoked as:\n\n```\nf(3, 5)\n```\n\nthen the curried `f'` is invoked as:\n\n`f'(3)(5)`\n\n### Example\n\nGiven this function:\n\n```python\ndef add(x, y, z):\n  return x + y + z\n```\n\nWe can call in a normal way:\n\n```python\nadd(1, 2, 3) # => 6\n```\n\nBut we can create a curried version of `add(a, b, c)`function:\n\n```python\ncurriedAdd = lambda a: (lambda b: (lambda c: add(a,b,c)))\ncurriedAdd(1)(2)(3) # => 6\n```\n\n## Partial application\n\n> Is the process of fixing a number of arguments to a function, producing another function of smaller arity.\n\nPartial application takes a function:\n\n```\nf: X \u00d7 Y \u2192 R\n```\n\nand a fixed value `x` for the first argument to produce a new function\n\n```\nf': Y \u2192 R\n```\n\n`f'` does the same as `f`, but only has to fill in the second parameter which is why its arity is one less than the arity of `f`. One says that the first argument is bound to `x`.\n\n### Example\n\n```python\npartialAdd = lambda a: (lambda *args: add(a,*args))\npartialAdd(1)(2, 3) # => 6\n```\n\n-------------\n\nYour work is to implement a generic `curryPartial()` function allows either currying or partial application.\n\nFor example:\n\n```python\ncurriedAdd = curryPartial(add)\ncurriedAdd(1)(2)(3) # => 6\n\npartialAdd = curryPartial(add, 1)\npartialAdd(2, 3) # => 6\n```\n\nWe want the function be very flexible.\n\nAll these examples should produce the same result:\n\n```python\ncurryPartial(add)(1)(2)(3) # =>6 \ncurryPartial(add, 1)(2)(3) # =>6 \ncurryPartial(add, 1)(2, 3) # =>6 \ncurryPartial(add, 1, 2)(3) # =>6 \ncurryPartial(add, 1, 2, 3) # =>6 \ncurryPartial(add)(1, 2, 3) # =>6 \ncurryPartial(add)(1, 2)(3) # =>6 \ncurryPartial(add)()(1, 2, 3) # =>6 \ncurryPartial(add)()(1)()()(2)(3) # =>6 \n\ncurryPartial(add)()(1)()()(2)(3, 4, 5, 6) # =>6 \ncurryPartial(add, 1)(2, 3, 4, 5) # =>6 \n```\n\nAnd also all of these:\n\n```python\ncurryPartial(curryPartial(curryPartial(add, 1), 2), 3) # =>6\ncurryPartial(curryPartial(add, 1, 2), 3) # =>6\ncurryPartial(curryPartial(add, 1), 2, 3) # =>6\ncurryPartial(curryPartial(add, 1), 2)(3) # =>6\ncurryPartial(curryPartial(add, 1)(2), 3) # =>6\ncurryPartial(curryPartial(curryPartial(add, 1)), 2, 3) # =>6\n```\ndef curry_partial(f,*args):\n\t\nUse Call-Based format\nANSWER:\n"}}