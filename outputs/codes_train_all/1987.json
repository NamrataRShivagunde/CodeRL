{"1987": {"code": ["\nUse Call-Based format\n\n\n\nWe can stack blocks to form a pyramid.\nUse Call-Based format\nWe can stack blocks to form a pyramid.\n\n\n\n\n\n\nWe can stack blocks to form a pyramid.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  bottom = \"XXX\"\n", "\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid\n\n\n\n\n\nIf you can", "\n    def pyramidStack(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can stack the pyramid to the top of a bottom block\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nExample 3:\n", "\nUse Call-Based format\n\n\n\n\nWe are stacking blocks to form a pyramid.\n\n\n\n\n\nWe are stacking blocks to form a pyramid.\n\nUse Call-Based format\n\n \n\n\n\n\n\n\n\n\n\n\n\n We are stacking blocks to form a pyramid.\n\n\n\n\n\n\n    bottom = \"A\"", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nWe can stack the pyramid to the top\n\n\n\n\n\n\n\n\nWe can stack the pyramid to the top\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n We are stacking blocks to form a pyramid\n\n\n\n\nWe are stack", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\nInput: bottom = \"XXX\", allowed = [\"XXX\", \"XXX\", \"XXX\", \"XXX\"]\n\nOutput: true\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nWe can stack blocks to form a pyramid.\n\n\n\n\n\nIf we", "\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nWe can stack the pyramid to the top of the bottom row\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can stack blocks to form a pyramid\n", "\nUse Call-Based format\n\n\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\nWe can stack blocks to form a pyramid to the top\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a py", "\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]):\n\n\n\n\n\n\n\n\n\n\nWe can stack blocks to form a pyramid.\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf we can stack on top", "\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\nWe can stack blocks to form a pyramid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe bottom row of bottom can be", "\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can stack blocks to form a pyramid\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  If we can stack to the", "\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]):\n        \nUse Call-Based format\n\n\n\n\n\n\n\nWe can stacking blocks to form a pyramid.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    If we are stacking blocks", "\nUse Call-Based format\n\n\n    def pyramid(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\nWe can stack blocks to form a pyramid to the top\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can stack the pyramid to the top.\n\n\n\n\n\n\n    If", "\nUse Call-Based format\nUse Call-Based format\n\n    def pyramidStack(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\nWe can stacking blocks to form a pyramid\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form", "\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nInput: bottom = \"XYZ\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\nWe can stack the pyramid to the top\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid\n\n\n\nIf", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nWe are stacking blocks to form a pyramid.\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid.\n\n\n\n\n\nIf bottom is", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid.\n\nUse Call-Based format\n\n\n \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid.\n\n\n\n\nWe", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nWe are stacking blocks to form a pyramid.\n\n\n\n\n\n\nWe can stacking blocks to form a pyramid.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid.\n\n\n\n\n\nWe are stacking", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def pyramidStack(self, bottom: str, allowed: List[str]):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are stacking blocks to form a pyramid\n\n\n\n\n\n\nWe are stacking blocks"], "prompt": "\nQUESTION:\nWe are stacking blocks to form a pyramid.  Each block has a color which is a one letter string, like `'Z'`.\n\nFor every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`.  We are allowed to place the block there only if `(A, B, C)` is an allowed triple.\n\nWe start with a bottom row of bottom, represented as a single string.  We also start with a list of allowed triples allowed.  Each allowed triple is represented as a string of length 3.\n\nReturn true if we can build the pyramid all the way to the top, otherwise false.\n\n\nExample 1:\n\nInput: bottom = \"XYZ\", allowed = [\"XYD\", \"YZE\", \"DEA\", \"FFF\"]\nOutput: true\nExplanation:\nWe can stack the pyramid like this:\n    A\n   / \\\n  D   E\n / \\ / \\\nX   Y   Z\n\nThis works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.\n\n\n\nExample 2:\n\nInput: bottom = \"XXYX\", allowed = [\"XXX\", \"XXY\", \"XYX\", \"XYY\", \"YXZ\"]\nOutput: false\nExplanation:\nWe can't stack the pyramid to the top.\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\n\n\n\nNote:\n\nbottom will be a string with length in range [2, 8].\nallowed will have length in range [0, 200].\nLetters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.\nclass Solution:\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}