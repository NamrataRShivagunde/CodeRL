{"483": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n\n           \n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven n non-negative integers a1, a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\nUse Call-Based format\n\n          \n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven n non-negative integers a1, a2", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n   \n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nGiven n non-negative integers a1,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def max(self, height: List[int]) -> int:\n    \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven n non-negative integers a1", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    def max(self, height: List[int]) -> int:\n   \n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nA solution is a class, not a class.\n\n\n\n\nGiven n non-negative integers a1", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    def maxArea(self, height: List[int]) -> int:\n           \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven n non-negative", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n    def max(self, height: List[int]) -> int:\n       \nUse Call-Based format\n\nclass        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers a1", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    def area(self, height: List[int]) -> int:\n        \nUse Call-Based format\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven n non-negative integers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def max(self, height: List[int]) -> int:\n       \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers a1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\nUse Call-Based format\nUse Call-Based format\n\n    def maxContainer(self, height: List[int]):\n        return 0\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n    def maxArea(self, height: List[int]) -> int:\n\nUse Call-Based format\n\nClass Solution:\n   \n\n\n\n   \n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven n non-negative integers", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n    def max(self, height: List[int]) -> int:\n          \n\nUse Call-Based format\n\n\n\n\n\n\nA solution:\n\nUse Call-Based format\n\n\n\n\n\nGiven n non-negative integers a", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n    def max(self, height: List[int]):\n        return 0\n\nclass        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nGiven n non-negative integers a1", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n    def maxArea(self, height: List[int]):\n        return maxArea(height)\n\nUse Call-Based format\nclass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers a1, a2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    def area(self, height: List[int]):\n        return 0\n   \n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers a1,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\n\n\n   \n    return self.area\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\ni is at coordinate (i, 0).\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers a1,", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n    def max(self, height: List[int]) -> int:\n       \nUse Call-Based format\nclass Solution:\n    def maxArea(self):\n\n\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n nonnegative integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    def maxWater(self, height: List[int]) -> int:\n\nUse Call-Based format\nclass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe best area that contains water is the largest area available.\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n    maxArea(self, height: List[int]) -> int:\n\nUse Call-Based format\nclass        \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven n non-negative integers a1,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def\n\n\n\n\n    def maxHeight(self, height: List[int]) -> int:\n   \n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nTo draw a container with n vertical lines,\n\n\n\nGiven n non"], "prompt": "\nQUESTION:\nGiven n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and n is at least 2.\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}