{"2480": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def maxCostToMoveChips(self, position: List[int]):\n        return 1\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips, where the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nWe have n chips.\n\n\n\n    def maxCostToMoveChips(self, position: List[int]) -> int:\n        return 2\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips, where", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\nWe have n chips\n\n   \n        return self.minCostToMoveChips(position)\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips.\n\n\n\n\nWe have n chips, where where the position", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def minCostToMoveChips(self, position: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n   \n    def minCostToMoveChips(self, position: List):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nWe have n chips, where the position is position[i].\n\n   \n        return 1\n\nWe have n chips\n\n\n\n\n\n\n\n\n\u00a0\n\n\nWe have n chips.\n\n\n\n\nWe have n chips, where the position", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\nWe have n chips, where the position of the ith chip is position[i].\n\n   :\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\nThe minimum cost is 1\n\n\n\n\n\nWe have n chips, where the position of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\nWe have n chips\n\n   \n        return self.minCostToMoveChips(position)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips, where where the", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def\n\n\n\n\n\u00a0\n\n\nWe have n chips.\nUse Call-Based format\nWe have n chips.\n\n\n\n\n\n\n\nWe have n chips.\n\n\n\n\nWe have n chips, where we need to", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nThe position of the ith chip to move is an index of position[i].\n\n\n\n   \n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\nWe have n chips, where position[i] is position[i].\n\n\n\n\nWe have n chips,", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def position(self, position: List[int]) -> int:\n\n   \n\n\n\n   \n        return 1\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWe have n chips, where where the position of", "\nUse Call-Based format\n\n\n    def minCostToMoveChips(self, position: List[int]) -> int:\n       \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        return self.minCostToMoveChips(position)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips, where", "\nUse Call-Based format\n\n\n\n\nWe can move the chips to different positions\n\n\n\n   \n\n\n\n\nWe can move chips to different positions\n\n\n   \n        return self.minCostToMoveChips(position)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips, where the position of i", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nWe have n chips, where the position of the ith chip is position[i].\n\n\n\n   \n\n\n\n   \n        return 1\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\n\n\nWe have n chips, where the position of i", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def moveChips(self, position: List[int]) -> int:\n        return 2\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips, where where the position of the", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def\n    return self.minCostToMoveChips(position)\n\n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips.\n\n\n\n\n\nWe have n chips, where the position of the", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def\n\nUse Call-Based format\n\n\n       \n        return 1\n\nUse Call-Based format\nWe have n chips\n\n\n\n\n\n\n\n\nWe have n chips, where position is 2\n\n\n\n\nWe have n chips, where", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def position(self, position: List[int]) -> int:\n\n   \n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWe have n chips\n\n\n\n\nWe have n chips, where we have n", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nWe have n chips\n\n\n\n\n   \n\nWe have n chips\n\n\n   \n        return 1\n\nWe have n chips\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe minimum cost is 1\n\n\n\n\n\nWe have n chips, where the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def\n\nUse Call-Based format\n\n\nWe can move the chips in one place at a time\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\nWe have n chips.\n\n\n\n\n\n\nWe have n chips, where the position of", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\nWe have n chips\n\n\n\n   \n\nWe have n chips\n\nWe can move all chips to the same position\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nWe have n chips, where where the position"], "prompt": "\nQUESTION:\nWe have n chips, where the position of the ith chip is position[i].\nWe need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:\n\nposition[i] + 2 or position[i] - 2 with cost = 0.\nposition[i] + 1 or position[i] - 1 with cost = 1.\n\nReturn the minimum cost needed to move all the chips to the same position.\n\u00a0\nExample 1:\n\nInput: position = [1,2,3]\nOutput: 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n\nExample 2:\n\nInput: position = [2,2,2,3,3]\nOutput: 2\nExplanation: We can move the two chips at poistion 3 to position 2. Each move has cost = 1. The total cost = 2.\n\nExample 3:\nInput: position = [1,1000000000]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= position.length <= 100\n1 <= position[i] <= 10^9\nclass Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}