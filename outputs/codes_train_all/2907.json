{"2907": {"code": ["\n\n\n\n\n\n\n\n\n\n\n2\n2\n\n```\npython\n\n2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n1 < n <= 21800\n1 < n <= 1200\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n", "\n\n\n\n\n\n\n\nk_boxes\n\n1 <= n <= 1200\n1 <= n <= 1200\n\n2 <= n <= 1200\n\n1 <= n <= 1200\n\n1 < n <= 1200\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nk_boxes", "\n\n\n\n1 < n <= 1500\n1 < n <= 1200\n1 < n <= 1500\n1 < n <= 1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nThis kata is an extension:\n\n", "\n\n\n\n\n\n\n\n\nThe goal for this kata:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n# Examples:\n\n# All\n#\n1 < n <= 1800\n#\n1 < n <= 1200\n#\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n\n", "\n\n\n\n\n\n\n\n\n\n```\npython\n\n1 < n < 1200\n1 < n < 1200\n1 < n < 1800\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\npython\n\n```\n\n\n\n\n#", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 < n < 1200\n1 < n < 1800\n1 < n < 1200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nPython 3 < n <= 1200\npython\n```\n\n\n\n```\n# The", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\npython\n```\npython3\n```\npython2\n```\npython3\n```\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n#\n", "\n\n\n\t\t1 < n < 3\n\t\t2 < n < 7\n\t\t```\n\n\t\tThe goal for this kata\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nThe above example is:\n\n\n\n\n```\n\n\n#", "\n\n\n1 < n <= 1200\n1 < n <= 1800\n2 < n <= 1200\n3 < n <= 1200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n# All the above", "\n\n\n\n#\n\n\n\n\n\n\n\n\n\n#\n#\n\n\n\n1 < n <= 1200\n\n1 < n <= 1800\n\n1 < n <= 1200\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\npython -m\npython -m\n\n```\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n1 < n <= 1200\n1 < n <= 800\n1 < n <= 1200\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n1 < n <= 1200\n\n1 < n <=\n", "\n\n\n1 < n <= 1500\n1 < n <= 1200\n2 < n <= 1200\n1 < n <= 1500\n1 < n <= 1200\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\npython\n\n2 < n <= 1800\n\n\n\n\n\n# Some no", "\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n1 < n <= 600\n\n1 < n <= 1200\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 < n <= 600\n\n1 < n <= 1200\n\n1 <\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n1 < n <= 1200\n2 < n <= 1800\n3 < n <= 1200\n\n1 < n <= 1500\n1 < n <= 1500\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nThe kata is", "\n\n\n\n\nThe following lines are the alternative:\n\n```\npython, ruby, python3\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\npython\n```\n\n1 < n <= 20\n2 < n <= 20\n1 < n <= 20\n\n\n\n\n\n\n\n\n#", "\n\n\n\n\n\n\n\n\n```\n\n\n\n\n1 < n <= 1800\n1 < n <= 1200\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\npython\n\n```\n\n", "\n\n\n1 < n <= 800\n1 < n <= 1200\n\n1 < n <= 11300\n1 < n <= 11300\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n1", "\n\n\n\n\n\n\n\n\n#\n\n1 < n <= 1200\n1 < n <= 1200\n#\n1 < n <= 1200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\npython\n\n\n```\npython\n\n```\n\n\n\n", "\n\n\n1 < n <= 2\n1 < k <= 2\n1 < k < 3\n2 < k < 3\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n1 < n <= 1200\n\n1 < n <= 1500\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n1 < n <= 1200\n2 < n <= 2000\n1 < n <= 2000\n1 < n <= 2000\n1 < n <= 1600\n1 < n <= 3200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\npython\n```"], "prompt": "\nQUESTION:\nThis kata is an extension of \"Combinations in a Set Using Boxes\":https://www.codewars.com/kata/5b5f7f7607a266914200007c\n\nThe goal for this kata is to get all the possible combinations (or distributions) (with no empty boxes) of a certain number of balls, but now, **with different amount of boxes.** In the previous kata, the number of boxes was always the same\n\nJust to figure the goal for this kata, we can see in the picture below the combinations for four balls using the diagram of Hasse:\n\n\n\nPoints that are isolated represent balls that are unique in a box.\nk points that are bonded in an area respresent a subset that is content in a box.\n\nThe unique square at the bottom of the diagram, means that there is only one possible combination for four balls in four boxes.\n\nThe above next line with 6 squares, means that we have 6 possible distributions of the four balls in 3 boxes. These six distributions have something in common, all of them have one box with 2 balls.\n\nGoing up one line more, we find the 7 possible distributions of the four balls in 2 boxes. As it is shown, we will have 7 distributions with: three balls in a box and only one ball in the another box, or two balls in each box.\n\nFinally, we find again at the top, an unique square, that represents, the only possible distribution, having one box, the four balls together in the only available box.\n\nSo, for a set of 4 labeled balls, we have a total of 15 possible distributions (as always with no empty boxes) and with a maximum of 7 possible distributions for the case of two boxes.\n\nPrepare a code that for a given number of balls (an integer), may output an array with required data in the following order:\n```\n[total_amount_distributions, maximum_amount_distributions_case_k_boxes, k_boxes]\n```\nJust see how it would be for the example given above:\n```\ncombs_non_empty_boxesII(4) == [15, 7, 2] # A total of 15 combinations            \n                                         #The case with maximum distributions is 7 using 2 boxes.\n\n```\nFeatures of the random tests:\n```\n1 < n <= 1800 (python)\n1 < n <= 1200 (ruby)\n```\nYou may see the example tests for more cases.\nEnjoy it!\nRuby version will be published soon.\ndef combs_non_empty_boxesII(n):\n\t\nUse Call-Based format\nANSWER:\n"}}