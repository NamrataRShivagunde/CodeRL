{"2839": {"code": ["\n\n\n\n\nUse Call-Based format\n:\n\n\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\t\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nst = count_", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n:\n\n\ndef count_adjacent_pairs(st):\n\t\n:\n\n\n\n\t\nUse Call-Based format:\n:\n\"dog cat\" --> 1\n\n\n:\n\n\n\n\n\n\n\n\n\t\n\n\n\n**Example:**", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\ndef count_adjacent_words(st):\n\t\nUse Call-Based format\ndef\n:\n\n\n\n:\n\n:\n\n\"dog cat\"\n\n:\n\n\n\n\n\n\n\n\t\n\n\n```\n\n\n```", "\n\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n:\n\n\n\n\t\n:\n\"cat cat dog cat cat\" --> 2\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n```\n\nst.count_", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n:\n\n\ndef count_adjacent_words(st):\n\t\nUse Call-Based format\n\n:\n\n\n\ndef\n\t:\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n", "\n\n\n\n\nUse Call-Based format\n:\n\n\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\"dog cat\" --> 2\n\n\n:\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n    st = [", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\n\nUse Call-Based format\n\n\"dog cat cat cat\" --> 1\n\n\n:\n\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n\"\"\"\n\n\n    count", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n:\n\n\n\n\n:\n\n\n\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n\n:\n\n\n\n\t\n:\n\n\"cat cat\"\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif st[", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\"cat cat dog cat cat\" --> 2\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\nst.count_", "\n\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\ndef count_call", "\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n:\n\n\n\ndef count_adjacent_words(st):\n\t\n\n\t:\n:\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n", "\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\t``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\t\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nReturns:\n\ncount_adjacent_pairs(st)\n:\n\"cat cat dog cat cat\" --> 2\n\n\n:\n\ndef\n\n\n\n\n\n\n**Example:**\n\n\n", "\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n:\n\n\n\n\n\t\nUse Call-Based format\n:\n\n\"dog cat\" --> 1\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n``", "\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\"dog cat cat cat\" --> 1\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nst.count_adjacent", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\n\n:\n\n\n\n\t\nUse Call-Based format\n\n\n\"dog cat\" --> 1\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n```\nst = [", "\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\t\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\"dog cat\"\n\"dog DOG cat\"\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n# -----------\n\n\n#"], "prompt": "\nQUESTION:\nYou know how sometimes you write the the same word twice in a sentence, but then don't notice that it happened? For example, you've been distracted for a second. Did you notice that *\"the\"* is doubled in the first sentence of this description?\n\nAs as aS you can see, it's not easy to spot those errors, especially if words differ in case, like *\"as\"* at the beginning of the sentence.\n\nWrite a function that counts the number of sections repeating the same word (case insensitive). The occurence of two or more equal words next after each other count as one.\n\n**Example:**\n```\n\"dog cat\"                 --> 0\n\"dog DOG cat\"             --> 1\n\"apple dog cat\"           --> 0\n\"pineapple apple dog cat\" --> 0\n\"apple     apple dog cat\" --> 1\n\"apple dog apple dog cat\" --> 0\n\"dog dog DOG dog dog dog\" --> 1\n\"dog dog dog dog cat cat\" --> 2\n\"cat cat dog dog cat cat\" --> 3\n```\ndef count_adjacent_pairs(st):\n\t\nUse Call-Based format\nANSWER:\n"}}