{"351": {"code": ["\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\n ->\n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse double operation.\n\n\n\nOn a broken calculator with", "\nUse Call-Based format\n\n\n    raise NotImplementedError\n\nUse Call-Based format\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\n,\n\n\n\n          \nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse double operation and then decrement operation.\n\n\n\nOn", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n   \n    pass\nThe calculator is using call-based format\n\n\n\n\n\n\n\n\nThis calculator is called on a broken number\n\n\n\n\n\nOn a broken calculator that has", "\nUse Call-Based format\n\n    raise Exception(\"No call-based format\")\n\n\n\n\n           raise Exception(\"No call-based format\")\n\n\n\n   \n        return 2\n\nUse Python-Based format\n\nThis method returns the minimum number of operations needed to display a number.\n\n\n\n\n\n\n\n\n\n\n\n  Now we can do two operations", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n              \n\n\n2 <= X <= 10^9\n1 <= Y <= 10^9\n2 <= X <= 10^9\n\n          \n\n\n\n\n\n\n\n\n\nThe number is shown on the display.\n\n\n\n\nOn a broken calculator:\n\nOn a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\n,\n\n\n\n   \n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nOn a broken calculator that has a number showing on its display\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n    def brokenCalc(self, X: int, Y: int):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nOn a broken calculator with a number showing on its\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n       \n\n\n\n\n -> 1\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nReturn the minimum number of operations needed.\n\n\n\nOn a", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\nUse Python-Based format\n\nUse Double-based format\n\n    def brokenCalc(self, X: int, Y: int):\n          \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nOn a broken calculator that has a number showing on its display\n\n\n\nOn", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\n,        \n\n\n\n          \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nThis calculator is not in Call-Based format\n\n\nOn a broken calculator that has a number showing\n", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n -> 2\n\n\n    return 1\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nThis calculator is calling a function that returns a minimum number of operations needed\n\n\n\nOn a broken calculator", "\nUse Call-Based format\n\n    return self(X, Y)\n\nUse Call-Based format\n\n\n\n          \n\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n2\n\n\nOn a broken calculator that has a", "\nUse Call-Based format\nUse Call-Based format\n\n    def brokenCalc(self, X: int, Y: int) -> int:\n\n\n\n\n\n   \n\n\n\n          \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe number on the display is not shown on the screen\n\n\n\nX -> Y", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n, Y: int):\n        return Y\n\n\nUsage:\n\n   \n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\nOn a broken calculator that has a number showing on its display:\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n    self = self.brokenCalc()\n    \nUse Call-Based format\n\n\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\n   \n\n\n           \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nOn a broken calculator that has a number", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n:\n   \n       \nUse Call-Based format\n\n -> 2\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nOn a broken calculator that has", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n       \n        pass\n\n\nUse Call-Based format\n\n          \n\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nOn a broken calculator that has a", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n:\n          \n\n\n\n\n\n    return 1\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nOn a broken calculator that has a number", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n    pass\n\n\nUse Call-Based format\n\nExample 1:\n    ->\n    pass\n\n\n\n\nThis function returns the minimum number of operations needed to display the number Y.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nOn a broken calculator that has a number", "\nUse Call-Based format\n\n\n    pass\n\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\n,\n\n\n\n          \n\nUse Call-Based format\nThe number on a broken calculator is showing on its display\n\n\n\n\n\n\n\n\n\nNo operations required.\n\n\n\nOn a broken calculator that has a number showing on"], "prompt": "\nQUESTION:\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}