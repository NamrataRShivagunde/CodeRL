{"176": {"code": ["\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    def isScramble(self, s1: str, s2: str):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1,", "\nUse Call-Based format\n\nUse Call-Based format\n    def isScramble(self, s1, s2: str):\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n\n\n\n    s1 = \"great\"\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a string", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nGiven a string s1, we may represent a binary tree:\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1, we may", "\nUse Call-Based format:Use Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n    def isScramble(self, s1, s2):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n\n    return self.isScramble(s1, s2)\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string s", "\nUse Call-Based formatUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    def isScramble(self, s1: str, s2: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1,", "\nUse Call-Based format:\n\n\n    def isScramble(self, s1, s2):\n        return self(s1, s2)\n\n\n\n\n\n   \n\n\n\n\n   \n    def isScramble(self, s1: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1,", "\nUse Call-Based format:\nUse Call-Based format\n\nUse Call-Based format:\n\nUse Call-Based format\n\n\n\n\n\n\n    pass\n\n\nGiven a string s1, we may represent it as a binary tree:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1, we", "\n\nUse Call-Based format\n\n\n    def isScramble(self, s1: str, s2: str) -> bool:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns1 = \"abcde\"\n\n\n\n\n\n\n\nGiven a string s", "\n\nUse Call-Based format:\n\n\n    def isScramble(self, s1: str, s2: str):\n\n\n\n\n\n\n   \n\n\nGiven a string s1, we may represent as a binary tree:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1,", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def isScramble(self, s1, s2: str):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a string s1:\n\n\n\nGiven a", "\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\nGiven a string s1, we may represent it as a binary tree:\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1:\n\n\n\n\nGiven a", "\nUse Call-Based format:\nUse Call-Based format\n\n\n    def isScramble(self, s1, s2):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1, we may represent\n\n\nGiven a", "\nUse Call-Based format:\nUse Call-Based format\n\n\nUse Call-Based format:\nUse Call-Based format:\n\n\n\n   \n    def isScramble(self, s1, s2):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string s1, we", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        # noqa\n\n\n\n    s1 = \"great\"\n\nOutput: true\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1,", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s1, we may represent it as a binary tree\n\n\n   \n        \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a string s", "\nUse Call-Based format\n\n    Use Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s1, we may represent it as a binary tree\n\nclass Solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    s1 = \"foo\"\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a string s1, we may represent it as a binary tree:\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1, we", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\nGiven a string s2, we may represent a binary tree:\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1,", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a string s2, we may represent a binary tree:\n\n   \n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s1,"], "prompt": "\nQUESTION:\nGiven a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\n\nBelow is one possible representation of s1 = \"great\":\n\n\n    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n\n\nTo scramble the string, we may choose any non-leaf node and swap its two children.\n\nFor example, if we choose the node \"gr\" and swap its two children, it produces a scrambled string \"rgeat\".\n\n\n    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n\n\nWe say that \"rgeat\" is a scrambled string of \"great\".\n\nSimilarly, if we continue to swap the children of nodes \"eat\" and \"at\", it produces a scrambled string \"rgtae\".\n\n\n    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n\n\nWe say that \"rgtae\" is a scrambled string of \"great\".\n\nGiven two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.\n\nExample 1:\n\n\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\n\n\nExample 2:\n\n\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\nclass Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}