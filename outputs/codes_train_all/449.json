{"449": {"code": ["\nUse Call-Based format\n\n\n    findMin(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n    \n   \n\n\n\n    # noqa\n\n\n\n\n\n\n    Use call-based format\n\n\n\n\nSuppose an array sorted in ascending order is rotated at some pivot unknown.\n\n\n\n\nIf", "\nUse Call-Based format\n\n\n\n\n\n\n\n       \n        return 0\n\n\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you.\n\n    -> int:\n        \n\n\n\nUse Call-Based format\n\nUse Array-Based format\n\n\n\nSuppose an array sorted in ascending order.\n\n\n\n\n\nSuppose an", "\nUse Call-Based format\n\n\n    def findMin(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n    \n   \n\nUse Solution format\n\n\nUse Call-Based format\n\n\n\n\n\n\nFind the minimum element in the array\n\n\n\n\n\nSuppose an array sorted in ascending", "\nUse Call-Based format\n\n       \n\n\n\n\n\n       \n        return nums[0]\n\n\n\n\n   \n        print nums\n        \nUse Call-Based format\nSuppose an array sorted in ascending order is rotated.\n\n\n\n\n\n\n\n\n\n\nThe array is sorted in ascending order.\n\n\n\n\n\n\n\n    Args:\n       ", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n    -> int:\n        return 0\n\n\n\n\n\n\n       :\n        \nUse Call-Based format\n\n\n\n\n\nUse List-Based format2,3,4,6,7\n\n\n\n\n\n\n\n\n\nSuppose an array sorted in ascending order", "\nUse Call-Based format\n\n\n        # Do something with the input\n\n\n\n\n    \n        return nums.index(nums[0])\n\n\n\n   \n\n\n   :\n\n\nUse Python-based format\n\n\n\n\n\n\nFind the minimum element of the array.\n\nUse Call-Based format\n\n\n\n\n\n\nSuppose an array sorted", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        return self.findMin(nums)\n\n\n\nUse Method-Based format\n\n\n\n\nSuppose an array sorted in ascending order is rotated.\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose an array sorted in ascending order is rotated.\n\n\n\nSup", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n   \n       \nUse Call-Based format\n\n\n    -> int:\n        \nUse Call-Based format\n\n\n\nThe following example shows how to use a call-based format\n\n\n\n\n\n\n\n\nFind the minimum element\n\n\n\n\n    findMin(self)\n\nSup", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n       \n       \n\n\n\n\n        return 0\n    def findMax(self, nums: List[int]) -> int:\n        \n\n        pass\n\n\n\n\n\n\nSuppose an array is sorted in ascending order.\n\n\n\n\n\n\n\n\n\n    Args:\n        nums:\n       ", "\nUse Call-Based format\n\n\n    findMin(self, nums: List[int]) -> int:\n\n\n\n\n\n       \n        # noinspection PyUnusedLocal\n\n\n    -> int\n\nUse Python-based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nSuppose an array sorted in ascending order is rotated.\n\n\n\n\n\nIf you", "\n\n\n\n    findMin(self, nums: List[int]) -> int:\n       \nUse Call-Based format\n\n\n\n\n              \n\n\n\n   \n        pass\n\n\n\n\nSuppose an array is sorted in ascending order and rotated.\n\n\n\n\n\n\n\n\n\n\n\nFind the minimum element of an array\n\nExample\n\nIf you", "\nUse Call-Based format\n\n\n\n    findMin(self, nums: List[int]) -> int:\n\n\n\n\n\n       \n        pass\n\n\n\n    # Do nothing\n   :\n\n\n\n\n\n\nUse call-based format\n\n\n\nUse Fixed-Length format\nSuppose an array sorted in ascending order.\n\n\n\n\n\nIf you", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n       \n\n\n\n       \n        return findMin(nums, nums[0])\n\n\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you.\n\n\n\n\n\n\n\n\n\n\n\nSuppose an array sorted in ascending order is rotated", "\nUse Call-Based format\n\n\n    findMin(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n          \n\n\n   \n        pass\n\n\nSuppose an array is sorted in ascending order\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nSuppose an array sorted in ascending order is rotated", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n       \n        return nums[0]\n\n\n\n       \n        \"\"\"\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nSuppose an array sorted in ascending order is rotated.\n\n\n\n\n\n\nThe array is sorted", "\nUse Call-Based format\n\n    \n\n\n\n\n\n\n        return 1\n\n\n           \n\n\n\n\n        return self.findMin(nums[0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n2,3]\n\n\n\nSuppose an array is sorted in ascending order\n\n\n\n\n\n\n    Suppose an array sorted in", "\nUse Call-Based format\nUse Call-Based format\n\n    def findMin(self, nums: List[int]) -> int:\n\n\n\n\n\n   \n\n\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you.\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuppose an array sorted in ascending order", "\nUse Call-Based format\n\n\n    findMin(self, nums: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n       \n\n\n\n   \n\nSuppose an array is sorted in ascending order and rotated.\n\n\n\n\n\n\n\n\nSuppose an array is sorted in ascending order sorted in descending order\n\n\n   \n\nIf", "\nUse Call-Based format\n\n\n    def findMin(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n       \n\n\n\n    \n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nFind the minimum element.\n\nUse Call-Based format\n\n\n\n\n\n    pass\n\n", "\n\n\n\nUse Call-Based format\n    def findMin(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n       \n\n\n   \n        pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nSuppose an array sorted in ascending order is rotated.\n\n\n\n\n\nSuppose an"], "prompt": "\nQUESTION:\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e., \u00a0[0,1,2,4,5,6,7]\u00a0might become \u00a0[4,5,6,7,0,1,2]).\n\nFind the minimum element.\n\nYou may assume no duplicate exists in the array.\n\nExample 1:\n\n\nInput: [3,4,5,1,2] \nOutput: 1\n\n\nExample 2:\n\n\nInput: [4,5,6,7,0,1,2]\nOutput: 0\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}