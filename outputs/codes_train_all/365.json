{"365": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    def uniqueLetterString(self, s: str):\n        return len(s)\n\nExplanation:\n\n\n\nExample:\n   \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\nLet's define a function", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nExplanation:\ns.length = 10^4\n\nExplanation:\ns.countUniqueChars(s) = 10\n\n\u00a0\nConstraints:\n\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Let's define a function countUniqueChars(s", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    # Do something with the string s\n\n\u00a0\nConstraints:\n\n\n\n\n\u00a0\nExplanation:\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountUniqueChars(s) = 5\n\n\ufffd\n\n\n\n\n    countUniqueChars(s):\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    def uniqueLetterString(self, s: str) -> int:\n        \nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\nInput: s = \"ABC\"\n\n\n\n\nLet's", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    def uniqueLetterString(self, s: str) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\nInput: s = \"ABC\"\nOutput:\n\nLet", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nOutput: 1\n\n\u00a0\n\nConstraints:\n\n\u00a0\nExplanation:\n\nUse Call-Based format\n\nInput:\n    s = \"ABC\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's define a function count", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nInput: s = \"ABC\"\nOutput: 8\n\n\u00a0\nExplanation:\n\n\n\n   \n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n    >>> from __future__ import __future__", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\u00a0\nExplanation:\nUse Call-Based format\n\n\n\n\u00a0\nReturns:\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\n\n\n\n\n\n\u00a0\n\n\ncountUniqueChars(s):\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nOutput:\n\n0 <= s <= 10^4\nExplanation: The same as example 1\n\nConstraints:\n\n\u00a0\nConstraints:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's define a function countUniqueChars(s)", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    def uniqueLetterString(self, s: str) -> int:\n        return 1\n\n\u00a0\nConstraints:\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n\n\n    Let's define a function", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    def uniqueLetterString(self, s: str):\n        return self.countUniqueChars(s)\n\nExplanation:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\nExample 2:\n\n\n\n\n10 =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    uniqueLetterString(self, s)\n\n\u00a0\nConstraints:\n\n\n\n\n\u00a0\n\n    s = \"ABC\"\n\n\n\n\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\nLet's define a function countUniqueChars(s)", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return self.countUniqueChars(s)\n\n\u00a0\nExplanation:\nUse Call-Based format\n\n\n\nExample:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountUniqueChars(s) = 10\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n   \n\n\n   \n    >>> uniqueLetterString(s)\n    >>> 0\n\n\u00a0\nExplanation: The same example 1\n\n\u00a0\n\n   ...\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\n\n\n\n\n\n\n    Let's define a function", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    def uniqueLetterString(self, s: str) -> int:\n        return 1\n\n\n\n\n\u00a0\n\n    pass\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\nLet's define a function countUniqueChars(s)\ufffd", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n    def uniqueLetterString(self, s):\n        return len(s)\n\n\n\n\nInput: s = \"ABC\"\nOutput: 10\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's define a function countUniqueChars(s)", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return self.countUniqueChars(s)\n\n\u00a0\n\nExplanation:\nUse Call-Based format\n\n\n\nExample:\n   \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Parameters:", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nConstraints:\n\n\n\u00a0\nUse Call-Based format\n\nConstraints:\n\n\u00a0\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nLet's define a function countUniqueChars(s", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n    def uniqueLetterString(self, s: str) -> int:\n\n\n\n\n\n    def uniqueLetterString(self, s: str):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's define a function countUniqueChars(s)\ufffd", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\nOutput: 9\n\n\u00a0\n\n\n    def uniqueLetterString(self, s: str) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's define a function countUniqueChars(s)\u00a0"], "prompt": "\nQUESTION:\nLet's define a function countUniqueChars(s)\u00a0that returns the number of unique characters on s, for example if s = \"LEETCODE\"\u00a0then \"L\", \"T\",\"C\",\"O\",\"D\" are the unique characters since they appear only once in s, therefore\u00a0countUniqueChars(s) = 5.\n\nOn this problem given a string s we need to return the sum of\u00a0countUniqueChars(t)\u00a0where t is a substring of s. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.\nSince the answer can be very large, return\u00a0the answer\u00a0modulo\u00a010 ^ 9 + 7.\n\u00a0\nExample 1:\nInput: s = \"ABC\"\nOutput: 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvey substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n\nExample 2:\nInput: s = \"ABA\"\nOutput: 8\nExplanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\n\nExample 3:\nInput: s = \"LEETCODE\"\nOutput: 92\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 10^4\ns\u00a0contain upper-case English letters only.\nclass Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}