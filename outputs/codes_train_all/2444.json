{"2444": {"code": ["\nUse Call-Based format\n\n\n    pass\n\n\n\nn = 1\n\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\n\n\u00a0\n\n    binaryGap(self, n)\n\n\n\n\n\n\n\n\n\nn must be a positive integer.\n\n\n\nn = 1\n\n\n\n\nGiven n, find the longest", "\nUse Call-Based format\n\n\n    def binaryGap(self, n: int) -> int:\n        return n - 1\n\n\n\n\n\n\n\u00a0\n\n\n\n\n   \n    return n\n\n\n\n\n\n\n\n\n\nThe n-th binary representation is the binary representation of the n-th binary representation.\n\n\n\n\n\nGiven a positive", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nn = 1\n\nbinary:\n    binaryGap(n) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    binary(self, n: int) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a positive integer n, find the longest", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nn = 1\n\n\n\n\nUse Call-Based format\n\nExplanation:\n\nn = 1001\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nUsage:\n\n\n\n\n\nGiven a positive integer n, find", "\nUse Call-Based format\n\n\n    binaryGap(self, n)\n\nUse Call-Based format\n\n\n\n\n   \n    binaryGap(self, n)\n\nExplanation: n in binary is \"1001\"\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\u00a0\n\nGiven a positive integer", "\nUse Call-Based format\n\n\n    binaryGap(self, n) -> int:\n        raise NotImplementedError\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nOptional:\n\n    Binary:\n    binary: int\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a positive integer n,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nn = 2\n\nArgument:\n    binary(self, n: int):\n    \nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 1\n\n\n\n\n\n\n\nGiven a positive integer n, find the longest distance", "\nUse Call-Based format\n\n\n    binaryGap(self, n)\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\nThe binary representation of n is binary\n\n\n\nThe binary representation of n is binary\n\n\n\n\nThe binary representation of n is binary\n\nGiven a", "\nUse Call-Based format\n\n\n    binaryGap(self, n) -> int:\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\nExplanation:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nn = 1\n\n\n\n\n\nn = 1\n\n\nGiven a positive integer n", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n    def binaryGap(self, n: int) -> int:\n\n\u00a0\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 109\n\nGiven a positive integer n", "\nUse Call-Based format\n\n\n    def binaryGap(self, n: int) -> int:\n\n    Use Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n    binary(self, n: int):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 1\n\nGiven a positive integer n", "\nUse Call-Based format\n\n\n    binaryGap(self, n: int) -> int:\n    return 0\n\n\n\n\n\n    binaryGap(self, n: int) -> int\n\n\u00a0\nConstraints:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 2\n\n\n\n\n\n\nGiven a positive integer n,", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    binaryGap(self, n)\n\nExplanation: n in binary is \"1001\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a positive integer n, find", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\nUse Call-Based format\n\nInput:\n    binary\nOutput: binary\n\n\u00a0\n\nConstraints:\n\n\u00a0\n\nConstraints:\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a positive integer n,", "\nUse Call-Based format\n\n\n    def binaryGap(self, n: int):\n        return n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n    return 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nn <= 1 <= 109\n\n\n\nGiven a positive integer n,", "\nUse Call-Based format\n\n\n    binaryGap(self, n) -> int\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nn < 109\n\nUse Call-Based format\n\n\n\n\nGiven a positive integer n, find", "\nUse Call-Based format\n\n\n    binaryGap(self, n: int):\n        return 0\n\n\n\n\n\n   \n    binaryGap(self, n) -> int\n\nUse Call-Based format\n\n   \n    binaryGap(self, n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a positive integer n, find the", "\nUse Call-Based format\n\n\n    binaryGap(self, n: int) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\nOutput: 1\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nn is an integer\n\n\nn is an integer\n\n\n\n\nGiven a positive integer n,", "\nUse Call-Based format\n\n\n    binaryGap(self, n) -> int:\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n    binaryGap(self, n) -> int\n\n\n\n\n\n\n\n\n\n\n\nn = 2\n\n\n\n\n\n\nGiven a positive integer n, find the longest", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    binaryGap(self, n)\n\n\u00a0\nConstraints:\n\n\n   \n    binaryGap(self, n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nGiven a positive integer n, find the longest"], "prompt": "\nQUESTION:\nGiven a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.\nTwo 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.\n\u00a0\nExample 1:\nInput: n = 22\nOutput: 2\nExplanation: 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.\n\nExample 2:\nInput: n = 5\nOutput: 2\nExplanation: 5 in binary is \"101\".\n\nExample 3:\nInput: n = 6\nOutput: 1\nExplanation: 6 in binary is \"110\".\n\nExample 4:\nInput: n = 8\nOutput: 0\nExplanation: 8 in binary is \"1000\".\nThere aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n\nExample 5:\nInput: n = 1\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= n <= 109\nclass Solution:\n    def binaryGap(self, n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}