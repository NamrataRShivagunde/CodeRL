{"2549": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nYou are given a string of words that are placed among some number of spaces.\n\n\n\n\n\n\u00a0\n\nFunctions:\n   \n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of words that are placed among spaces\n\n\n\n\nYou are", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n        pass\n\n\nYou are given a string of words that are placed among some number of spaces.\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n   \n        return \"a\"\n\nYou are given a string of words that are placed among some number of spaces\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of words that", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n    def reorderWords(self, text: str):\n        \n\n\n\n\n\n\n\n\n\n   \n\n\n\n\u00a0\n\n\n\n\n    Example 1:\n   ", "\nUse Call-Based format\nUse Call-Based format\nExplanation:\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    def reorderWords(self, text: str) -> str:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you are given a string of words that are placed among some", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\nVariables:\n\ntext\u00a0contains a number of words\n\n\u00a0\nVariables:\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntext\u00a0rearrange", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\u00a0\nFunctions:\n\n\n\n   \n    pass\n        \n\u00a0\n\n\n\n\n\n\n\n\n\nYou are given a string of words that are placed among some number of spaces.\n\n\n\n\n\nYou are", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nYou are given a string of words that are placed among some number of spaces.\n\n\n   :\n\n\n\n\n\n\n\n\n\nYou are given a string of words that are placed among some number of spaces\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   \n    def reorderWords(self, text: str):\n        return text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Rearrange the spaces between every", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\u00a0\nType:\n    def reorderSpaces(self, text: str):\n   \n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of words that are placed among spaces\n\n\n\nYou", "\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nConstraints:\n\n\u00a0\nExplanation:\n\n\n\n\n\n\u00a0\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of words that are placed among spaces\n\n\n\nYou are", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\u00a0\nConstraints:\n\n1 <= text.length <= 100\n\n\u00a0\n\nConstraints:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    def reorderWords(self, text: str):\n        \nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe text is rearranged into the specified number of spaces.\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\nMethod:\n\n    def reorderSpaces(self, text: str):\n        return text\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def reorderWords(self, text: str):\n        return text\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string of words that", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUsage:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    def getWords(self, text: str):\n        return \"a\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput:\n    text = \" ", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\nExplanation:\n\n\n\n\n\n\n\n   \n    reorderSpaces(self, text: str)\n\n\n\n\n\nYou are given a string of words with spaces.\n\n\n\n\nYou are given a string of words\n\n\n\n\nYou are", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nReturns:\n\ntext\n\nExplanation:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\nYou are given a string of words that are placed among some number of spaces.\n\n\n\n\n\nYou are given a string of", "\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nConstraints:\n\n1 <= text.length <= 100\n\n1 <= text.length <= 100\n\n\u00a0\nConstraints:\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a string", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n    def reorderSpaces(self, text: str):\n        return text\n\n\n\n\n\u00a0\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nYou are given a string of words that are placed among some number of spaces\n\n\n\n\nYou"], "prompt": "\nQUESTION:\nYou are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.\nRearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.\nReturn the string after rearranging the spaces.\n\u00a0\nExample 1:\nInput: text = \"  this   is  a sentence \"\nOutput: \"this   is   a   sentence\"\nExplanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n\nExample 2:\nInput: text = \" practice   makes   perfect\"\nOutput: \"practice   makes   perfect \"\nExplanation:\u00a0There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n\nExample 3:\nInput: text = \"hello   world\"\nOutput: \"hello   world\"\n\nExample 4:\nInput: text = \"  walks  udp package   into  bar a\"\nOutput: \"walks  udp  package  into  bar  a \"\n\nExample 5:\nInput: text = \"a\"\nOutput: \"a\"\n\n\u00a0\nConstraints:\n\n1 <= text.length <= 100\ntext\u00a0consists of lowercase English letters and\u00a0' '.\ntext\u00a0contains at least one word.\nclass Solution:\n    def reorderSpaces(self, text: str) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}