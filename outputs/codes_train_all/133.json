{"133": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n    balancedString(self, s) -> int\n\n\n\n\n\n\n   \n    balancedString(self, s) -> int\n        \n\n\n   \n   ...\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 0\n\n\n\n\n1 <= s.length <= 10^5", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    return s.balancedString(self)\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\nYou are given a string containing only 4\u00a0kinds of characters 'Q'.\n\n\n\n\nYou are", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n        pass\n        \n\n\n\n    s = \"QQ\"\n\n\u00a0\nConstraints:\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns.replace(4, \"R\")\n\n\n\ns =", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return self.balancedString(s)\n\n\n\n\n   \n        return s.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\u00a0contains 4\u00a0kinds of characters 'Q'.\n\n\n\n\nIf", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n    balancedString(self, s) -> int\n\n\n\n\n\n   \n\n\n\n   \n    return s.length\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 4\n\nExample 1:\n    s = \"QQW\"\n\n\n\nUse", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n   \n        return len(s)\n        \n\n\n   \n        return s.length\n\n\n\n\n\n\n\n\n\n\ns = 'QQWE'\n\n\n\n\n\n\n\ns = 'QWERWE'", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n    balancedString(self, s)\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns.replace(\"Q\", \"R\")\n\n\n\n\ns = \"QWQ", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def string(self) -> str:\n\n   \n\n\n\n   \n    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nYou are given a string containing only 4\u00a0kinds of characters 'Q', 'W', 'E', and 'R'.\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n    s = \"Q\"\n\n\n\n\n\n\n    s = \"QWW", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\ns.length is 10^5\ns.length is 3\ns.length is 4\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"QWQWE", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    return len(s)\n    \nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\ns = 'Q'\n\n\n\n\n\n\ns = \"Q\"\n\nWith a", "\nUse Call-Based format\nUse Call-Based format\n\n    balancedString(self, s: str) -> int:\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n    print s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\u00a0contains only 4\u00a0kinds of characters 'Q'.\n\n\n\nThe", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def balancedLength(self, s: str) -> int:\n        return 0\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"QW", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def string(self, s: str):\n        return s\n    \n\nConstraints:\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = '", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n    return len(s)\n    \nUse Call-Based format\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn 0\n\nExample 5:\n\n\n\n\n\n    Parameters:", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        return s.balancedString()\n\n\n\n   \n        return s.balancedString()\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"QQWQE\"\nS", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        s = self\n\n\n\n\n\n   \n    return s.length\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nYou are given a string containing only 4 kinds of", "\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n    def balancedLength(self, s: str) -> int:\n        return s.length\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    s = \"ABCDEF", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def balancedString(self, s: str) -> int:\n\n   \n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nYou are given a string containing 4 characters.\n\n\n\n   ", "\nUse Call-Based format\n\n\n    balancedString(self, s: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n   \n    balancedString(self, s) -> int\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---------------------------------------------------------------------\n\n\n---------------------------------------------------------------------\n"], "prompt": "\nQUESTION:\nYou are given a string containing only 4\u00a0kinds of characters 'Q', 'W', 'E' and\u00a0'R'.\nA string is said to be\u00a0balanced\u00a0if each of its characters appears\u00a0n/4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make the original string s\u00a0balanced.\nReturn 0 if the string is already balanced.\n\u00a0\nExample 1:\nInput: s = \"QWER\"\nOutput: 0\nExplanation: s is already balanced.\nExample 2:\nInput: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.\n\nExample 3:\nInput: s = \"QQQW\"\nOutput: 2\nExplanation: We can replace the first \"QQ\" to \"ER\". \n\nExample 4:\nInput: s = \"QQQQ\"\nOutput: 3\nExplanation: We can replace the last 3 'Q' to make s = \"QWER\".\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\ns.length is a multiple of 4\ns\u00a0contains only 'Q', 'W', 'E' and\u00a0'R'.\nclass Solution:\n    def balancedString(self, s: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}