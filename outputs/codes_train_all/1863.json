{"1863": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n''''''''\n\n\n\n\n# Definition for a binary tree node\n\n\nInput: [1", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nExample 1:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    If the tree is empty, return an empty list.\n\nNote:\n", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExample 1:\n\nInput: [1,2,3,4,5,6,7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: [1,2,3,4,5,6]\n\nGiven", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Value:\n    Value:\n\n    Left:\n    Right:\n\n   \n\n\n    When", "\n\n\n\n\nUse Call-Based format\n\n\n\nInput: [X,Y,null,null,null,null,null]\nOutput: [[X,Y]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn a list of vertical traversal of all nodes in order.\n\n\n\n\n\nInput: [", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\nReturn a list of vertical traversal of the binary tree.\n\n\u00a0Note:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: [1,2,3,4,15]\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nOutput: [[],[],[],[],[],[],[],[],[],[],[]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: [[],[],[]\n\n\n\n\n\nInput: [1,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nInput: [0,1,2,3,4,5,6,7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nInput: [0,1]\n\n\n\n\n\nInput", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample 1:\n\nInput: [X,Y]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn a list of vertical traversal of the binary tree.\n\n\u00a0\n\n\n\n\nGiven a binary tree, return", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nReturn a list of vertical traversal of the tree values.\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nInput: [1,2,3]\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: [X,Y,X,Y,X,Y]\n\n\n\n\nInput:", "\nUse Call-Based format\n\n\n\n\n\n\nInput: [X, Y, null, left, right]\nOutput: [X, Y, null, left, right]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: [X, Y, null, left, right]\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n# Definition for a binary tree node\n\n\n\nReturn a list of vertical traversal of the tree.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn a list of vertical traversal of the binary tree.\n\n\n\n\n\nReturn a list of vertical traversal of the", "\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n# Definition:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    If the tree is binary, we return", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    :param root:\n    :return:\n\n\n\n\nInput: [", "\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nInput: [X,Y,null,left,right]\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExample 3:\n\nInput: [1,2,3,4,5,6,7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: [1,2,3,5,6]\n\n\n\n# Definition", "\nUse Call-Based format\n\n\n\n\n\n# Definition for a binary tree node:\n\nInput: [1,2,3,4,5,6,null]\nOutput: [[1]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nInput: [3,9", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nExample:\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\nInput: [0,1,2,3,4,5,6,7]\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n# Definition for a binary tree node.\n\n\nInput: [X,Y,null,null,null,null,null,null]\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Definition for a binary tree node.\n\n\n\n\n# Definition for a binary tree node.\n\n# Definition for"], "prompt": "\nQUESTION:\nGiven a binary tree, return the vertical order traversal of its nodes\u00a0values.\nFor each node at position (X, Y), its left and right children respectively\u00a0will be at positions (X-1, Y-1) and (X+1, Y-1).\nRunning a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).\nIf two nodes have the same position, then the value of the node that is reported first is the value that is smaller.\nReturn an list\u00a0of non-empty reports in order of X coordinate.\u00a0 Every report will have a list of values of nodes.\n\u00a0\nExample 1:\n\n\nInput: [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation: \nWithout loss of generality, we can assume the root node is at position (0, 0):\nThen, the node with value 9 occurs at position (-1, -1);\nThe nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);\nThe node with value 20 occurs at position (1, -1);\nThe node with value 7 occurs at position (2, -2).\n\n\nExample 2:\n\nInput: [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation: \nThe node with value 5 and the node with value 6 have the same position according to the given scheme.\nHowever, in the report \"[1,5,6]\", the node value of 5 comes first since 5 is smaller than 6.\n\n\u00a0\n\nNote:\n\nThe tree will have between 1\u00a0and 1000 nodes.\nEach node's value will be between 0 and 1000.\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}