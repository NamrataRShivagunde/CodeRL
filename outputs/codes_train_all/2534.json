{"2534": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxScore(self, s: str) -> int:\n\nUse Call-Based format\n\nConstraints:\n\nConstraints:\n\n0 <= s <= 1\n\n\n\n ->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def minScore(self, s: str):\n        return s.length\n\nUse Call-Based format\n\nConstraints:\n\ns.length:\n\n\nConstraints:\n\n\nConstraints:\n\n\n\n\n\n   :        \n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n    maxScore(self, s: str) -> int:\n       \n\n        return self.maxScore(s)\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s of zeros and ones, return the maximum score", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def minScore(self, s: str):\n        return self.maxScore(s)\n\n\u00a0\nConstraints:\n\n\u00a0\nConstraints:\n\n\n\n\n ->\n            \n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxScore = maxScore\n\n\nReturns:\n\nint:\n\n\n\n\n\n    maxScore(self, s)\n    \n\nReturns:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones, return the maximum score", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    pass\n\n\u00a0\nExplanation:\n\n\n\n    maxScore(self, s)\n\n\u00a0\n\nReturns:\n\nint:\n:\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones.\n\n\nExample\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return self.maxScore(s)\n    \nUse Call-Based format\n\n\n   :\n        return self.maxScore(s)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return self.maxScore(s)\n\n\n\n\n    return self.maxScore(s)\n    \nUse Call-Based format\n\n\u00a0\n\nVariable:\n   \n        \n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones, return the maximum score", "\nUse Call-Based format\n\n\n    maxScore(self, s: str) -> int:\n\n\n\n\n\n   \n    return self.maxScore(s)\n\n\u00a0\n\n\n\n   \n       ...\n        \n\nUse Call-Based format\n\n\n\n \n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones, return", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def minScore(self, s: str) -> int:\n        \nUse Call-Based format\n\nConstraints:\n\n2 <= s.length <= 500\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"0011011\"\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def minScore(self, s: str):\n        return s.length\n\nUse Call-Based format\n\nConstraints:\n\nConstraints:\n\ns = s.length\n\n\n\n\n   :                \n\n\n\n\n\n\n\n\n\n\n\nGiven a string s", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n    def minScore(self, s: str) -> int:\n        return s.length\n\nUse Call-Based format\n\n\n\n\n   :\n        \n\n\n\n\n\n \n\n\n\n\n\n\n\ns = \"0000\"\n\n\u00a0\n\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def minScore(self, s: str):\n        return s.length\n\n\u00a0\nConstraints:\n\n0 <= s <= 1\n\nConstraints:\n\nMax:\n\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    maxScore(self, s) -> int\n\n\u00a0\n\nFunctions:\n   \n\n\n\n   \n        return self.maxScore(s)\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s of zeros and ones,\n\n\n\n\nGiven a string s of", "\nUse Call-Based format\n\n\n\nConstraints:\n\n\n\n\n\n   \n    return self.maxScore(s)\n\n\n\n\n    maxScore(self, s)\n        \n\nUse Call-Based format\n\nclass Solution:\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def maxScore(self, s: str) -> int:\n        return 1\n\n\u00a0\n\nConstraints:\n\n2 <= s.length <= 500\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    maxScore(self, s) -> int:\n\n   \n\n\n\n    maxScore(self, s) -> int:\n\n   \n       ...\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s of zeros and ones, return the maximum score\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    return self.maxScore(s)\n\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 500\n\nUse Call-Based format\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nThe string s is empty\n\n\n\n\nGiven a\u00a0", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    maxScore(self, s: str) -> int:\n\nUse Call-Based format\n\nConstraints:\n\n1 <= s <= 500\n\n\n\n\n   :                \n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def minScore(self, s: str) -> int:\n        return 2\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 500\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of zeros and ones"], "prompt": "\nQUESTION:\nGiven a\u00a0string s\u00a0of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).\nThe score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.\n\u00a0\nExample 1:\nInput: s = \"011101\"\nOutput: 5 \nExplanation: \nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5 \nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4 \nleft = \"011\" and right = \"101\", score = 1 + 2 = 3 \nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2 \nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3\n\nExample 2:\nInput: s = \"00111\"\nOutput: 5\nExplanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5\n\nExample 3:\nInput: s = \"1111\"\nOutput: 3\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 500\nThe string s consists of characters '0' and '1' only.\nclass Solution:\n    def maxScore(self, s: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}