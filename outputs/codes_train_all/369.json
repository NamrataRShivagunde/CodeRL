{"369": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n    def maxSteps(self, mat: List[int]) -> int:\n   \n\n\n\n   \n    return minFlips(mat)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m x n binary matrix mat.", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nInput: mat\nOutput: mat\n\n\u00a0\nConstraints:\n\n\u00a0\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\n\n\n\nGiven a m x n binary matrix mat", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nReturns:\n\nminFlips\nminSteps\nminFlips\nmaxSteps\n\n\u00a0\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmat = [[1,1,1]]\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    minFlips(mat) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm > n\n\nm > n\n\n\nGiven a m", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    minFlips(mat)\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n   \n    minFlips(mat)\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 1\n\n\n\nGiven a m x n binary matrix", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n    mat = [[1,1,1]]\n\n\u00a0\n\n\n   \n        minFlips(self, mat)\n\n\n\n\n\n\n\n\n\n\ngiven a m x n binary matrix mat.\n\n\n\n\n\nGiven a m x n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nOutput: 4\n\n\u00a0\nExplanation:\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nReturns the minimum number of steps required\n\n\n\n\n\nGiven a m", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nInput: mat\nOutput: [m,n]\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 6\n\n\n\n\nGiven a m x n binary matrix", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    minFlips(mat: List[int])\n    minFlips(mat: List[int])\n\n\u00a0\n\nConstraints:\n\n\u00a0\n\n\n\n\n\nclass\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a m x n binary matrix", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nInput: mat\nOutput: m x n\n\n\n\n\n    minFlips(self, mat)\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m x n binary matrix mat,\n\n\n\nGiven a m x n binary matrix mat", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nConstraints:\n\n0:\n\n\u00a0\nConstraints:\n\n0:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a m x n binary matrix mat. The", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    minFlips(self, mat)\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\u00a0\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nGiven a m x n binary matrix mat. In", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    minFlips(mat) -> int\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n\n    minFlips(mat) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 0\n\n\u00a0\n\n\nGiven a m x", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n    minFlips(mat)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm == 1\u00a0<= n\n\nGiven a m", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nThe minimum number of steps required to convert mat to a zero matrix.\n\n\u00a0\n\n\n\n   \n    minFlips(mat)\n\n\n\n\n\n\n\n\n\n\n\n  :return: minFlips\n\n\n\n\nGiven a m x n binary matrix mat", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nm == 0\nm == 1\nn == 1\n\n\n\nGiven a m x", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nOutput:\n\nm x n\nn x m\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven a m x n binary", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nGiven a m x n binary matrix mat:\n\n\n    maxFlips(mat)\n\n\n\n\n\n\n\n\n\n\n\n\nm == m\nn == n\n\n\n\nGiven a m", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nm x n binary matrix mat.\n\n\n\n\n\nm = mat.length\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a m x n binary matrix mat, return the minimum number of steps required to convert mat to a zero matrix.\n\n\n   \n        minFlips(self, mat)\n\n\n\n\n\n\n\n\n\n\nReturn the minimum number of steps required\n\n\n\n\n\nGiven a m x n binary matrix"], "prompt": "\nQUESTION:\nGiven a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbours of it\u00a0if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighboors if they share one edge.\nReturn the minimum number of steps required to convert mat\u00a0to a zero matrix or -1 if you cannot.\nBinary matrix is a matrix with all cells equal to 0 or 1 only.\nZero matrix is a matrix with all cells equal to 0.\n\u00a0\nExample 1:\n\nInput: mat = [[0,0],[0,1]]\nOutput: 3\nExplanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.\n\nExample 2:\nInput: mat = [[0]]\nOutput: 0\nExplanation: Given matrix is a zero matrix. We don't need to change it.\n\nExample 3:\nInput: mat = [[1,1,1],[1,0,1],[0,0,0]]\nOutput: 6\n\nExample 4:\nInput: mat = [[1,0,0],[1,0,0]]\nOutput: -1\nExplanation: Given matrix can't be a zero matrix\n\n\u00a0\nConstraints:\n\nm ==\u00a0mat.length\nn ==\u00a0mat[0].length\n1 <= m\u00a0<= 3\n1 <= n\u00a0<= 3\nmat[i][j] is 0 or 1.\nclass Solution:\n    def minFlips(self, mat: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}