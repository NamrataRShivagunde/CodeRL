{"2881": {"code": ["```\n\n\n\n\n \n\n```\n\nUse Call-Based format\n```\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```if:fsh", "\n\n```if:kata,kata:\n\nUse Call-Based format\n\n\n\n\n```else:\n\n\n\n\n\n\n\n\n\n\n```if:csharp\n\n```if:fsharp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:", "```\n```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```if:fsharp,csharp:\n\n  - if:fsharp\n  - if:csharp\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```if:", "\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:fsharp,csharp\nif:csharp\nif:fsharp\nif:csharp\n\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```", "\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nKata:\n\nValidate credit card number\n\n```if:fsharp,csharp\n\n```if:csharp\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n ", "\n\n\n\n```\n\n  Validate credit card number `n`.\n\n```\n\nUse Call-Based format\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:fsh", "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n```if:kata,cata:\n\nUse Kata format\n```else:\n\n\n\n\n\n\ndef\n\n\n\n \n \n\n\n\n\n\n```else:\n\n\n\n\n\n\n\n```else`\n\n\n\n```", "\n\n\n\n\n\n\n\n\n\n```if:fsharp,csharp\n\nIf:fsharp,csharp,csharp\n\n```if:csharp\n\n```if:fsharp\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:fsharp", "```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:kata\n\n\n\n\n```else:\n\n\n\n\n\n\n\n\n\n\n\n```else:\n\n\n\n\n```\n\n\n", "\n\n```\n\nValidate a credit card number.\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif:fsharp,csharp:\n\n \n\n```\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```", "```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n```if:kata\n\n\n\n```else\n\n\n\n\n\n\n\n```else\n\n```\n\n\n\n\n\n\n\n```else\n\n\n", "\n\t\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:fsharp,csharp\n\nThe input will be a string of 3 digits\n\n```else\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:", "\n```\n\n\n\n\n\n\n\n\n\n```\n\nThe Kata algorithm is implemented as follows:\n\n```if:fsharp,csharp\n```\n\nThe Kata algorithm is implemented as follows:\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:", "```\n\n\n\n\n\n\n\n\n```if:fsharp,csharp:\n\n \n\n```else:\n\n \n\n```else:\n\n \n\n```endif```\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n```if:fsh", "\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nIn this Kata:\n\nUse Call-Based format\n\n```\n\n\n\n```\n\n\n\n\n\n\ndef\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```else```\n\n\n\n", "\n\n\n\n```if:fsharp,csharp\n\nIf:fsharp\n\nIf:csharp\n\n```if:csharp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif```\n\n\n", "\n\n\n\n```\n\nUse Call-Based format\n\n```\n\nCheck the input:\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:", "\n\n\n\n\n\n\n\n\n```if:fsharp,csharp:\n\nThe input will be rounded to 9 digits.\n\n```else:\n\n\n\n```\n\n```\n\n\n\n\n\ndef\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:fsharp,", "\n\n\n\n\n\n\n\n\n```\n\n# :validator:validate\n\nThe validate function will return the credit card number.\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```else:\n\n```if:fsharp\n```\n\n", "\n```\n\n\n\n```if:fsharp,csharp\n\nIf:fsharp,csharp\n\n```else:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:"], "prompt": "\nQUESTION:\nIn this Kata, you will implement the [Luhn Algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm), which is used to help validate credit card numbers.\n\nGiven a positive integer of up to 16 digits, return ```true``` if it is a valid credit card number, and ```false``` if it is not.\n\nHere is the algorithm:\n  \n* Double every other digit, scanning **from right to left**, starting from the second digit (from the right).\n\n  Another way to think about it is: if there are an **even** number of digits, double every other digit starting with the **first**; if there are an **odd** number of digits, double every other digit starting with the **second**:\n\n  ```\n  1714 ==> [1*, 7, 1*, 4] ==> [2, 7, 2, 4]\n  \n  12345 ==> [1, 2*, 3, 4*, 5] ==> [1, 4, 3, 8, 5]\n  \n  891 ==> [8, 9*, 1] ==> [8, 18, 1]\n  ```\n\n*  If a resulting number is greater than `9`, replace it with the sum of its own digits (which is the same as subtracting `9` from it):\n\n  ```\n  [8, 18*, 1] ==> [8, (1+8), 1] ==> [8, 9, 1]\n  \n  or:\n  \n  [8, 18*, 1] ==> [8, (18-9), 1] ==> [8, 9, 1]\n  ```\n  \n* Sum all of the final digits:\n\n  ```\n  [8, 9, 1] ==> 8 + 9 + 1 = 18\n  ```\n\n* Finally, take that sum and divide it by `10`.  If the remainder equals zero, the original credit card number is valid.\n    ```\n    18 (modulus) 10 ==> 8 , which is not equal to 0, so this is not a valid credit card number\n    ```\n\n```if:fsharp,csharp\nFor F# and C# users:\n\nThe input will be a string of spaces and digits `0..9`\n\n```\ndef validate(n):\n\t\nUse Call-Based format\nANSWER:\n"}}