{"2798": {"code": [":\n# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n:\n\n\n\nUse Call-Based format\n:\n:\n# altERnaTIng cAsE\n#\n\n\n:\n <<\n\n#:\n <<\n:\n\n\n#\n# altERnaTIng CaSe\n:\n\n\n# alt", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n:\n\n\n:\n\nUse Call-Based format:\n\n#\n#\n:\n\n << << endl; // outputs: hEllO\n\n#:\n\n <<\n:\n#\n:\n# altERnaTIng\n:\n\n# altER", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n:\n\n#\n\nUse Call-Based format\n\n:\n#\n#\n#\n\n:\n\n << << endl\n\n#\n\n\n```\n\n:\n# altERnaTIng\n#\n:\n#\n:\n#\n\n:\n", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n:\n\n\n\nUse Call-Based format\n:\n# altERnaTIng cAsE\n#\n#\n:\n <<\n#:\n <<\n\n:\n#\n#\n#\n\n\n# altERnaTIng\n\n\n\n# altER", ":\n# Use Call-Based format# altERnaTIng cAsE <=> altERNAtiNG CaSe\n\t\n\n:\n:\n#\n# altERnaTIng caSe\n#\n:\n\n#\n\n\n#:\n <<\n:\n\n\n\n\n# altERnaTIng cAsE\n#\n <<\n\n#", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n:\n\n\n:\n:\n# altERnaTIng cAsE\n#\n# altERnaTIng CaSe\n\n:\n\n <<\n\n:\n\n <<\n:\n#\n:\n\n:\n#\n#\n\n\n# altERna", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n:\n\n\n\nUse Call-Based format\n:\n#\n#\n# altERnaTIng caSe\n#\n:\n\n <<\n\n:\n <<\n:\n\n#\n#\n\n# altERnaTIng\n#\n\n# altERna", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n\nUse Call-Based format:\n\n\n:\n:\n#\n#\n# altERnaTIng cAsE\n#\n:\n\n\n\n\n:\n  <<\n:\n#\n\n:\n\n:\n\n\n\n# altERnaTIng", ":\n# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n#\n#:\n\n#\n#\n#\n:\n:\n#\n#\n\n#\n\n:\n\t\n <<\n\n#:\n\n\n\n:\n# altERnaTIng\n#\n#\n\n#\n#\n\n# altERnaT", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n# use Call-Based format:\n\n\n\n:\n:\n# altERnaTIng cAsE\n#\n:\n:\n << <<\n:\n\n <<\n:\n#\n#\n:\n#\n:\n#\n#\n#\n# altERna", ":\n# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n# Use Call-Based format:\n\n\n:\n:\n#\n#\n#\n:\n\t\n <<\n\n# altERnaTIng caSe\n#\n <<\n:\n#\n\n:\n#\n\n#\n\n\n# altERnaTIng", ":\n# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n:\n\n\n\nUse Call-Based format\n:\n# altERnaTIng cAsE\n#\n#\n#\n:\n <<\n#:\n\n <<\n:\n#\n#\n#\n#\n# altERnaTIng\n#\n\n\n", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n:\n\n\n\nUse Call-Based format\n\n:\n#\n# altERnaTIng cAsE\n\n:\n\n#:\n\n\n\n:\n# altERnaTIng\n#\n\n\n#\n\n\n# altERnaTIng", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n:\n\n\n\nUse Call-Based format\n:\n# altERnaTIng cAsE\n#\n#\n\n:\n <<\n\n#:\n <<\n:\n\n#\n#\n\n\n#\n\n#\n#\n# altERnaTIng", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n\nUse Call-Based format:\n\n\n\n:\n:\n# altERnaTIng CaSe\n#\n#\n:\n\n\n\n#\n\n <<\n:\n#\n#\n#\n\n# altERnaTIng\n:\n\n# altER", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n\nUse Call-Based format:\n\n\n\n:\n:\n#\n#\n# altERnaTIng cAsE\n#\n:\n\n <<\n\n:\n\n <<\n:\n#\n:\n#\n#\n\n#\n# altERnaTIn", ":\n\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\n\n\n:\n\n# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n#\n# altERnaTIng\n\n\n:\n\n\n <<\n\n:\n << <<\n:\n#\n:\n#\n\n# altERnaTIn", ":\n# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n:\n#\n#\n\nUse Call-Based format\n:\n#\n#\n#\n:\n\t\n <<\n\n## altERnaTIng cAsE\n\n <<\n:\n#\n#\n#\n#\n:\n#\n#\n\n# alt", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n\nUse Call-Based format:\n\n\n:\n:\n# altERnaTIng cAsE\n#\n#\n:\n\n <<\n#:\n <<\n:\n\n\n:\n# altERnaTIng\n#\n\n\n\n\n# altER", ":\n# altERnaTIng cAsE <=> altERNAtiNG CaSe\n#:\n\n#\n\nUse Call-Based format\n:\n:\n#\n#\n#\n:\n\n <<\n\n#:\n\n << endl;\n\n\n:\n\n#\n#\n\n#\n# altERnaTIng\n <<\n\n#"], "prompt": "\nQUESTION:\n# altERnaTIng cAsE <=> ALTerNAtiNG CaSe\n\nDefine `String.prototype.toAlternatingCase` (or a similar function/method *such as* `to_alternating_case`/`toAlternatingCase`/`ToAlternatingCase` in your selected language; **see the initial solution for details**) such that each lowercase letter becomes uppercase and each uppercase letter becomes lowercase. For example:\n``` haskell\ntoAlternatingCase \"hello world\" `shouldBe` \"HELLO WORLD\"\ntoAlternatingCase \"HELLO WORLD\" `shouldBe` \"hello world\"\ntoAlternatingCase \"hello WORLD\" `shouldBe` \"HELLO world\"\ntoAlternatingCase \"HeLLo WoRLD\" `shouldBe` \"hEllO wOrld\"\ntoAlternatingCase \"12345\"       `shouldBe` \"12345\"\ntoAlternatingCase \"1a2b3c4d5e\"  `shouldBe` \"1A2B3C4D5E\"\n```\n```C++\nstring source = \"HeLLo WoRLD\";\nstring upperCase = to_alternating_case(source);\ncout << upperCase << endl; // outputs: hEllO wOrld\n```\nAs usual, your function/method should be pure, i.e. it should **not** mutate the original string.\ndef to_alternating_case(string):\n\t\nUse Call-Based format\nANSWER:\n"}}