{"2552": {"code": ["\n\n\n\n\nUse Call-Based format\n\n\n\n\n   ) -> int:\n        return self.findSpecialInteger(arr)\n\n\n\n    __call__(self, arr: List[int])\n\n\n\u00a0\n\n\n\u00a0\n\u00a0 of the time.\n\n\u00a0\n\n\n\n\n\n\n\n1 <= i <= 10\n2 <=", "\n\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n   ) -> int:\n        return 0\n\n\n    __call__(self, arr: List[int])\n\n\n\u00a0\n\u00a0\n\n\nUse a call-based format of the total number of consecutive integers.\n\n\n\n\n6\n\n\n\n1 <= i <= 2 <= i", "\nUse Call-Based format\n\n\n    findSpecialInteger(self, arr) -> int\n\n\n\n\n\n   ) -> int\n\n\n\u00a0\n\n    findSpecialInteger(self, arr: List[int]) -> int:\n\n\n\u00a0\n\n\n\n\u00a0 of the time.\n\n\n\n\n\u00a0\n\n\n1 <= i <= 2 <= i", "\n\n\n       \n\n\nUse Call-Based format\n\n\n\n   ) -> int:\n        return 0\n\n\n\n    findSpecialInteger(self, arr: List[int])\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format of the time.\n\u00a0\n\n\n\n\n\n\n\n\n# Example 2:\n\n# arr = [", "\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n       \n    def) -> int:\n        return 0\n\n\n\n   \n        pass\n        \nUse Class-Based format\n\nUse Call-Based format\u00a0\n\n\n\n\u00a0 of the time.\n\n\u00a0\n\n\n\n\u00a0\n\n\n0 <= i <= 2 <= i <=", "\nUse Call-Based format\n\n\n    findSpecialInteger(self, arr: List[int]) -> int\n\n\n\n\n\n   ) -> int:\n        return 0\n\n\n    findSpecialInteger(self, arr: List[int])\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n1 <= i <= 7\n\u00a0\n\n\n\n249", "\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n   ) -> int:\n        \n\n\n\n    __init__(self)\n\n\n\n\n\n\n of the time.\n\n\u00a0\n\n\n\n5% of the time\n\u00a0\n\n1 <= i <= 7 <= 8\n\u00a0\n\n\n\n100 <= i", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n   ) -> int:\n        \n        return self.findSpecialInteger(arr)\n\n\n\n    findSpecialInteger(self, arr):\n        return -1\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\n\n\n1 <= i <= 4\n2 <= i <=", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   ) -> int\n\n\u00a0\n\n\n    findSpecialInteger(self, arr: List[int]) -> int:\n       \n\n\n\u00a0\n\n\n of the time.\n\u00a0\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n1 <= i <= 5 <= i", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def) -> int\n       \n\u00a0\n\n\n\n    findSpecialInteger(self, arr: List[int]) -> int\n\n\nExample 2:\n\nUse Call-Based format\n\u00a0\n\u00a0 of the time.\n\n\n\n\n\u00a0\n\n\nThe array is sorted in non-decre", "\n\n\n\n    findSpecialInteger(self, arr: List[int]) -> int\n\nUse Call-Based format\n\n\n\n\n    def) -> int:\n        return self.findSpecialInteger(arr)\n\n\n\n    __init__(self):\n\n\n\n\n\n\u00a0 of the time.\n\n\n\n\n\n\n\n\nTrue:\nThe array", "\n\n\n\n\n\n\n\n\u00a0\n\n    def) -> int:\n        \n        return self.findSpecialInteger(arr, i)\n\n\u00a0\n\n\n    __init__(self)\n\n\n\u00a0\n\u00a0\n\n\n\u00a0 of the time.\n\n\n\n\n1 <= i <= 2 <= 3\n\n\n\n1 <= i <= 3", "\n\n\n\u00a0\n\n    pass\n\n\n\n\n\n    @classmethod\n   ) -> int:\n        pass\n\n\n\n    findSpecialInteger(self, arr: List[int])\n\n\n\u00a0\n\n\u00a0\n\u00a0 of the time.\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n1 <= i <= 2 <=", "\nUse Call-Based format\n\n\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n\n\n\n\n\n   ) -> int:\n\n\n\n    findSpecialInteger(self, arr: List) -> int:\n\n\n\n\n\n\u00a0 of the time.\n\n\n\n\n6\n\n\n\n1 <= i <= 2 <=", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n   ) -> int:\n        return -1\n\n\n\n    __init__(self):\n        \n\nUse Python-based format\n\n\u00a0\n\n\n\u00a0 of the time.\n\n\n\n\n\n\n\n\n\n1 <= i <= 2 <= 4 <= i", "\nUse Call-Based format\n\n\n\n\n\n\n       \n    def) -> int:\n        return 6\n\n\n\n    findSpecialInteger(self, arr: List[int])\n\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format of the time.\n\n\n\n\n\n0 <= i <= 4\n1 <= i <= 6\n\n\n40", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n   ) -> int:\n        \n\n\n\n\n    __init__(self):\n        pass\n\n\n\u00a0\n\n\n\n\u00a0 of the time.\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n\n\n1 <= i <= 10^4\n2", "\n\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        pass\n\nUse Call-Based format\n\n@classmethod\n  ,\n\n\n   :\n        pass\n\n\n\n\n\n\n\n of the time.\n\u00a0\n\n\u00a0\n\n\n\nUse a similar format\n\n\n\n1 <= i <= 6 <= i <= 11 <= i", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n    def) -> int\n        return self.findSpecialInteger(arr)\n        \n\n\n    findSpecialInteger(self, arr: List[int])\n\n\n\u00a0\n\n\n of the time.\n\u00a0\n\n\u00a0\n\n\n\n\n\n\n1 <= i <= 3 <= j <= 5\n", "\nUse Call-Based format\n\n       \n    findSpecialInteger(self, arr: List[int]) -> int:\n\n\n\n\n\n   ) -> int:\n        pass\n\n\n\n    __init__(self):\n        \n\n\n\n\n\n\n\u00a0 of the time.\n\n\n\n\n\n\n\n\n1 <= i <= 2 <= 10^4\n"], "prompt": "\nQUESTION:\nGiven an\u00a0integer array\u00a0sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.\nReturn that integer.\n\u00a0\nExample 1:\nInput: arr = [1,2,2,6,6,6,6,7,10]\nOutput: 6\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^4\n0 <= arr[i] <= 10^5\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}