{"1759": {"code": ["\n\n_Bored of easy python kata!_\n\nQUESTION:\n_Bored of easy python katas!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n  \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # The code here is just like", "\n\n\n## Some Examples\n\n## Kata\n\n_A easy kata!_\n\n_Bored of easy python katas!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Testing\n\n\n\n", "\n\n\n\n_I'm easy kata!_\n\n_I'm easy kata!_\n\nQUESTION:\n_I'm easy kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n  \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Tests\n\n  \n", "\n\n\n\n\n\n\n\n\n\n\n\n\n_Bored of easy python kata!_\n\n_Bored of easy python kata!_\n\nQUESTION:\n\n_Bored of easy python katas!_\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def foo", "\n\n\n_I have a base class!_\n\n\n\n\n\n_I have a base class!_\n\n\n\n\n\n\n\n\n\n_I have a base class!_\n\nQUESTION:\n\n\n\n\n \n\n \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def foo", "\n\n\n\n\n\n_Bored of easy kata!_\n\nQUESTION:\n_yet another easy kata!_\n\nQUESTION:\n_yet another easy kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#...\n#\n#", "\n\n\n\n_easy easy kata!_\n\nQUESTION:\n_easy easy kata!_\n\nQUESTION:\n_yet easy easy kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n\n\n   ", "\n\n_Tested my easy kata!_\n\n\n\n\n\n_Bored my easy kata!_\n\nQUESTION:\n\n_Bored my easy kata!_\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Explodes\n", "\n\n\n\n_Jean kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  def foo(self, x, y, z):\n        return self.single + ':' + str(x)\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n_Others of the kata!_\n\n\n\n\n\n_Others of the kata!_\n\nQUESTION:\n\n_Others of the kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Meta\n\n\n\n\n\n\n", "\n\n\n\n\n_I'm a very easy kata!_\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n \n   \n\n  obj = Overload()\n\n \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_Bored of usual python kata!_\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n_easy easy kata!_\n\nQUESTION:\n_easy easy kata!_\n\nQUESTION:\n_easy easy kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def foo(self, b", "\n\n\n_\n\n\n_easy easy kata!_\n\n_easy easy kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n \n\n\n\n\n\n\n \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def foo(self, x):\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n_Bored of easy python kata!_\n\n_Bored of easy python kata!_\n\nQUESTION:\n\n_Bored of easy python katas!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # ---", "\n\n\n\n\n\n\n_Bored of easy python kata!_\n\n\n\n\n\n\n\n\n\n\n\n## The Test\n\n```python\n\n\n\n\n\n \n\n\n\n\n\n \n    \n \n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  def foo(self, x", "\n\n\n\n\n\n\n\n\n_easy easy kata!_\n\nQUESTION:\n_easy easy kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def foo(self, x, y):\n       ", "\n_\n\n\n\n\n\n\n\n\n\n_Bored of easy python katas!_\n\n_Bored of easy python katas!_\n\nQUESTION:\n_\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # -----------\n    ", "\n\n\n\n\n\n_Bored of easy python katas!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n    foo(self, x)\n    # 'This is \"One parameter\" function:1,2'\n\n   \n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n  \n\n\n\n", "\n\n\n\n\n\n\n_easy python kata!_\n\n_easy python kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n   \n\n  \n\n  \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n    metaclass = Overload\n", "\n\n\n\n_Our kata!_\n\n_Bored of easy python katas? me too;_\n\nQUESTION:\n_Our kata!_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "prompt": "\nQUESTION:\n_yet another easy kata!_\n\n_Bored of usual python katas? me too;_\n\n\n\n## Overview\n\n\u2002\u2002\u2002\u2002 As you have guessed from the title of the kata you are going to implement a class that supports ***function overloading***. You might be thinking python doesn't support that thing... Of course python doesn't support that! So you have to implement that missing functionality.\n\n\u2002\u2002\u2002\u2002 To achieve that You have to implement the `Meta` class which will be the metaclass of `Overload` class (see sample tests) and class that use `Meta` should work as usual at other things.\n\n\n\n## The Goal\n\n```python\n    \nclass Overload(metaclass=Meta):\n    \n    CLS_VAR = 42\n    \n    def __init__(self):\n        self.a = 1\n        self.no = 'This is \"No parameter\" function.'\n        self.single = 'This is \"Single parameter\" function'\n        self.two = 'This is \"Two parameter\" function'\n        self.three = 'This is \"Three parameter\" function'\n\n    def foo(self):\n        return self.no\n\n    def foo(self, x):\n        return self.single + ':' + str(x)\n\n    def foo(self, x, y):\n        return self.two + ':' + str(x) + ',' + str(y)\n\n    def foo(self, x, y, z):\n        return self.three + ':' + str(x) + ',' + str(y) + ',' + str(z)\n    \n    def extra(self):\n        return 'This is extra method.'\n            \n  \n\n  obj = Overload()\n\n  Overload.foo=lambda self,a,b,c,d: 'from outside!'\n\n  obj.foo()            # 'This is \"No parameter\" function.'\n  obj.foo(1, 2)        # 'This is \"Two parameter\" function:1,2'\n  obj.foo(1, 2, 3)     # 'This is \"Three parameter\" function:1,2,3'\n  obj.foo(1, 2, 3, 4)  # 'from outside!'\n```\n\n\n\n## Specifications\n   \n   * The Overload base class will always be the same as above. It will be regenerated different times in the tests, for testing purpose.\n   * All the other methods will be added and tested **after instanciation** the class like shown in the example above (***Focus on this point; you will need this***).\n   * Only instance methods will be tested, no static or class level methods.\n   * There is no testing for either `*varargs` or `**kwargs`.\n   * Aside from overloading, the class should behave just like usual. Talking here about variable assginment or reassignment, at class or instance level, reassigning a method to a var or the opposite, ...\n   * If there is neither a method (overloaded or not) which satisfies the expected number of arguments nor a property or class level property that cn be found when calling for an attribute, raise an exception of type `AttributeError` (\"just like usual\", as said above...)\n   * Last but not least, different classes must not share overloaded method. Hence:\n   \n```python\nCls1 = generate_Overload()\nobj = Cls1()\nCls1.foo=lambda self,a,b,c,d: 'from Cls1'\n\nCls2 = generate_Overload()\nobj2 = Cls2()\nCls2.foo=lambda self,a,b,c,d: 'from Cls2'\n\nobj.foo(1,2,3,4)    # -> 'from Cls1'\nobj2.foo(1,2,3,4)   # -> 'from Cls2'\n\nCls2.foo=lambda self: 'updated'\n\nobj.foo()           # -> 'This is \"No parameter\" function.'\nobj2.foo()          # -> 'updated'\n```\n   \n## Notes\n\n   * If there are any flaw in testing then report me.\n   * If you need some hints then ping me in discourse.\n\n_Enjoy!_\n\n_Thanks to B4B for his contribution._\n\n_I can assure you that this can be done without using any library/modules._\ndef setter(prep,k,v,supSetter):\n\t\nUse Call-Based format\nANSWER:\n"}}