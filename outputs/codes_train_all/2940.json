{"2940": {"code": ["\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n  The sum of all elements of a list where all ints occur once.\n\n\nReturn Value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:csharp\n", "\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nsum = sum(source)\n\n```\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\nReturn Value\n\n\n\n\n\n\n\n\n\n\n\t\n\n```\n\n\n\n\n\n\n\n\n\nif:csharp\nReturns\n", "\n\n\n\n\n\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\n \u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n  The sum of the elements of a list where all the integers occur only once.\n\nReturn Value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif\n\n\n", "\nuse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif```\n\n\n# You", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:c", "\n\nUse Call-Based format\n\n\n\nSum of integer combinations\n\n\n```if:csharp\n\n\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```else\n\nint\n\n```\n\n\t\nRe", "\n\n```if:csharp\n\n\n\n```else\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```if:csharp", "\n\n\n\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n \n    return arr\n\n\n\n\n\n\n\n\n\n```else`\n\n\n\n\n\n\n\n\n\t\n```if:csh", "\nUse Call-Based format\n\n\nSum(source)\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n  The sum of all integers in the list. \n\nReturn Value\n\nType: System.Int32\n  The sum of all integers. \n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:csh", "\n\n\nUsage-Based format\n\n\n\n\n\n\nSum(source)\n\n```\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:csharp\n\n\n\n", "\n\n\nSum of prime-indexed elements\n\nSum of integer combinations\n\n```\n\n\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\n\n\n\n```else:csharp\n`\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n``", "\n\n\n\n\nSum(source)\n\n```else:csharp\n\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n```endif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:csharp", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nif:csharp\n\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```else`\n\n\n\n\nif:csh", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:csharp\nif:csh", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nif:csharp\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\nReturn Value\n\nType: System.Int32\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n   \n\n```if:csharp\n", "\n\nUse Call-Based format\n\n\n\n\n```if:csharp\n\n\n\n\n\n\n\n\n```endif`\n\n\n\n\n  The sum of all elements in a list where the sum is the sum of the elements of the list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif```", "\n\nUse Call-Based format\n\n\n\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n \n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n    If you are using this", "\n\n\nIf you use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\nif:c", "\n\n\n\n\n\n```if:csharp\n\n\n\n\n\u00a0\u00a0\u00a0\n\nSum of integer combinations\n\n```else\n\nint Repeats(source)\n\n\n\n```endif\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n```endif\n\n\n\n\n\n\n\n\n```if:", "\n\n\nSum of prime-indexed elements.\n\nUse Call-Based format\n\n\n\n\n\n\nif:csharp\n\n\n\n\n\n\n```\n\ncsharp\n\n\n\u00a0\u00a0\u00a0\n\nReturn Value\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:csharp\n\n\nList"], "prompt": "\nQUESTION:\nIn this Kata, you will be given an array of numbers in which two numbers occur once and the rest occur only twice. Your task will be to return the sum of the numbers that occur only once. \n\nFor example, `repeats([4,5,7,5,4,8]) = 15` because only the numbers `7` and `8` occur once, and their sum is `15`.\n\nMore examples in the test cases. \n\n\n```if:csharp\nDocumentation:\nKata.Repeats Method (List<Int32>)\n\nTakes a list where all ints are repeated twice, except two ints, and returns the sum of the ints of a list where those ints only occur once.\n\nSyntax\n\n\npublic\nstatic\nint Repeats(\nList<int> source\n  \u00a0\u00a0)\n  \n\n\n\nParameters\n\nsource\n\nType: System.Collections.Generic.List<Int32>\nThe list to process.\n\nReturn Value\n\nType: System.Int32\n  The sum of the elements of the list where those elements have no duplicates.\n\n```\n\n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Sum of prime-indexed elements](https://www.codewars.com/kata/59f38b033640ce9fc700015b)\n\n[Sum of integer combinations](https://www.codewars.com/kata/59f3178e3640cef6d90000d5)\ndef repeats(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}