{"291": {"code": ["\nUse Call-Based format\n\n\n    arr = [1,2,3,4,5]\n\n\n\n\n\n\n   \n        return 1\n\n\u00a0\n\n\n   :\n        return 4\n\n\n\n\n\n\nUse Call-Based format\n1\n\n\n\nGiven an array of integers arr.\n\n\n\nGiven an array of integers arr. Return", "\nUse Call-Based format\n\n\n    numOfSubarrays(self, arr) -> int:\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\nGiven an array of integers arr.\n\n   :\n       ...       ...\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= arr.length <= 10\n1 <=\n\n", "\nUse Call-Based format\n\n\n    numSubarrays(self, arr) -> int\n\n\n\nUse Call-Based format\n\n\n\n   \n        return 1\n\n\nGiven an array of integers arr.\n\n\n   \n        return 1\n                \n\n\n\n\n\n\n\nGiven an array of integers arr.\n\n\n\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n    def numOfSubarrays(self, arr: List[int]) -> int:\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven an array of integers arr. Return the number of sub-arrays.\n\n\n\n\nFor", "\nUse Call-Based format\nUse Call-Based format\n\n\n    arr = [1,2,3,4,5,6,7,8,9,8]\n\n\n\n\n\n\n   \n\n\n\n   :\n        return 1\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n1\n\n\u00a0\n\n\n\nGiven an array", "\nUse Call-Based format\nUse Call-Based format\n\n\n    numSubarrays(self, arr) -> int\n\nUse Call-Based format\n\n\n\n\n\n   \n        return arr.count()\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers arr. Return the answer.\n\n\n\n\nGiven an array", "\n\nUse Call-Based format\n\n\n    self.numOfSubarrays(arr) -> int\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n   \n        return 1\n\n\n\n\n\n\nThe answer is computed modulo 10^9 + 7.\n\n\n\n\n\n4\n\n\u00a0\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    arr = [1,2,3,4,5]\n\n\n\n\n\n   \n        return self.numOfSubarrays(arr)\n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n1 <= arr.length <= 10^9\n1 <= arr.\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n    arr = [1,2,3,4,5]\n\n\n\n\n\n\u00a0\n\n   \n       ...\n        \n\n\n   \n       ...\n\n\n\n\n\n\n1\n\u00a0\n\n\nGiven an array of integers arr. Return the number of sub-arrays.\n\n\nGiven", "\nUse Call-Based format\n\n\n    return self.numOfSubarrays(arr)\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\nSignature:\n   \n        return self.numOfSubarrays(arr)\n\n\n\n   :        \n\n\n\n\n\n\n\n\n\n\n\n1\n\u00a0\n\n\n\n\nGiven an array", "\n\n\n\n    def sum(self, arr) -> int:\n        return sum(arr)\n\nUse Call-Based format\n\n\n\n   \n        return 2\n\n\nGiven an array of integers arr.\n\n   \n        return 4\n        \n\n\n\n\n\n\n\n\n\nGiven an array of integers arr.\n\n\n\n\nGiven an array of integers arr", "\nUse Call-Based format\nUse Call-Based format\n\n    arr: List[int]\n\n\n\n\n\n   \n        return sum(arr)\n\n\nGiven an array of integers arr. Return the number of sub-arrays with odd sum.\n\n   \n                \n\n\n        \n\n\n\n\n\n\n\n\n\nGiven an array of integers arr. Return the", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def numOfSubarrays(self, arr: List[int]) -> int:\n\n\n\n\n\n\n   \n\n\n\n   \n\n\nGiven an array of integers arr. Return the number of sub-arrays with odd sum.\n\n        \n\n\n\n\n\n\n\n\n\nGiven an array of integers arr", "\nUse Call-Based format\nUse Call-Based format\n\n    arr = [1,2,3]\n\nUse Call-Based format\n\n\n\n\n\n   \n        return 2\n\n\n\n   \n        return 4\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\u00a0\n\n\n\n\n\u00a0\n\nGiven an array of integers arr", "\nUse Call-Based format\n\n\n    arr = [1,2,3,4,5]\n\n\n\nUse Call-Based format\n\n\n\n   \n        return self.numOfSubarrays(arr)\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n    Return the answer of the sub-array.\n\n\n\n\n\nFor an array", "\nUse Call-Based format\nUse Call-Based format\n\n    arr: List[int]\n\n\n\n\n\n\u00a0\n\n   \n        return 1\n\n\nGiven an array of integers arr. Return the number of sub-arrays with odd sum.\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n1 <= arr[i] <= arr[j]\nOutput: 0\n\n\u00a0\n\n\n\n   \n        pass\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\nGiven an array of integers arr. Return the number of sub-arrays.\n\n\n\nGiven", "\nUse Call-Based format\n\n\n    arr: List[int]\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n        return 1\n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\nReturns an answer from the call-based format.\n\n\n\n3\n\n\u00a0\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    arr = [1,2,3,4,5,6,7]\n\n\n\n\n\n\u00a0\n\u00a0\n\n   \n        return 4\n\n\n\n   :\n\n\n\n\n\n\n\n1\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n    numSubarrays(self, arr):\n        return 1\n\n\n\n\n\n\n\u00a0\n\n   \n        return 1\n\n\nReturn the number of sub-arrays with odd sum.\n\n\u00a0\n\n   :\n                \n\n\n\n\n\n\n\n\n1\n\u00a0\n\u00a0\n\n\nGiven an array"], "prompt": "\nQUESTION:\nGiven an array of integers arr. Return the number of sub-arrays with odd sum.\nAs the answer may grow large, the answer\u00a0must be\u00a0computed modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: arr = [1,3,5]\nOutput: 4\nExplanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.\n\nExample 2:\nInput: arr = [2,4,6]\nOutput: 0\nExplanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.\n\nExample 3:\nInput: arr = [1,2,3,4,5,6,7]\nOutput: 16\n\nExample 4:\nInput: arr = [100,100,99,99]\nOutput: 4\n\nExample 5:\nInput: arr = [7]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 100\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}