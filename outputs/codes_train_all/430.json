{"430": {"code": ["\nUse Call-Based format\n\n\n    return self.distinctSubseqII(S)\n\n\n\n\n\n   \n        \nUse Call-Based format\n\n\n    (S: str):\n        \nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\nS contains only lowercase letters and numbers\n\u00a0\n\n\n\nS contains only lowercase letters.\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        return self.distinctSubseqII(S)\n        \n\n\n\n   \n        S = self.S\n\nUse Call-Based format\n\n\n\n\nS is a string.\n\u00a0\n\n\n\nS is a string.\n\u00a0\n\n\nGiven a string S, count the number", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        return 1\n\n\nGiven a string S, count the number of distinct, non-empty subsequences of S.\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n3\nThe answer modulo 10^9 + 7\n\n\u00a0\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        return self.distinctSubseqII(S).distinctSubseq\n\n\n\n    distinctSubseq(self, S: str):\n        \nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nS contains only lowercase letters.\n\n\n\nGiven a string S,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\n\n\n   :\n       \nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a string S, count the number of distinct non-empty subsequences of S\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n       \n        \nUse Call-Based format\nGiven a string S, count the number of distinct, non-empty subsequences of S.\n    distinctSubseq(self, S: str):\n\n\n\n\n\n\n\n\n\nGiven a string S, count the number of distinct, non-empty subsequences\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return self.distinctSubseqII(S)\n        \nUse Call-Based format\n\n\n    distinctSubseq(self, S: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\nS contains only lowercase letters.\n\n\n\n\nGiven a string S, count the", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        pass\n        \nUse Call-Based format\n\nS contains only lowercase letters.\n\nUse Call-Based format\n\n   \n        \nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nS is a string S\n\n\nGiven a string S, count the number", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\u00a0\n\u00a0\n\u00a0\n\n\n   \n        return self.distinctSubseq(S)\n        \n\n\n\n\n\n\n\n\n\nS contains only lowercase letters and numbers.\n\u00a0\n\n\n\n\nGiven a string S, count the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        \nUse Call-Based format\n\n\n   \n        return self.distinctSubseqII(S)\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nS contains only lowercase letters.\nS contains only uppercase letters.\n\n\nGiven a string S, count the number", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\u00a0\n\u00a0\nNote:\n\n\n\n   \n        return 1\nUse Call-Based format\n\n\n\n\nS contains only lowercase letters.\nS contains only uppercase letters.\n\n\n\n\nS contains only lowercase letters.\n\n\nGiven a string S, count", "\n\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n   \n        pass\n\nGiven a string S, count the number of distinct, non-empty subsequences of S.\n\nUse Call-Based format\nS contains only lowercase letters.\n\n\n\n\n\n\n\nS contains only lowercase letters.\n\u00a0\n\n\nGiven a string S, count the number of", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n   \n        return self.distinctSubseqII(S)\n        \nUse Call-Based format\n\n\n    distinctSubseq(S: str):\n\n\nS contains only lowercase letters.\n\n\n\n\n\n\n\nThe answer modulo 10^9 + 7\n\n\n\n\nS contains only lowercase letters", "\nUse Call-Based format\n\n\n    S: str\n\nUse Call-Based format\n\n\n\n\n\n   \n    pass\n\n\nS:\n   \n\n   \n        \nUse Call-Based format\n\n\n\n\n\nS contains only lowercase letters.\n\n\n\n\nS contains only lowercase letters.\n\u00a0\n\n\nGiven a string S, count the number", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n       \n\n\n\n   \n        S = self.S\n        \nUse Call-Based format\nGiven a string S, count the number of distinct, non-empty subsequences of S.\n\n\n\n\n\n\n\n\n\n\n\nGiven a string S, count the number of distinct,", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return self.distinctSubseqII(S)\n\n\n\n\n   \n        pass\n\nS contains only lowercase letters.\n\nS contains only lowercase letters.\n\u00a0\n\n\n\n\nUse Call-Based format\n\n\n\nS contains only lowercase letters.\n\n\nGiven a string S, count the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\nS contains only lowercase letters.\n\n\n    \n    pass\n\n\nS contains only lowercase letters.\n\n\n\n\n\nS contains only lowercase letters.\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string S, count the number of distinct", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        return self.distinctSubseqII(S).distinctSubseq\n\n\n\n    distinctSubseq(self, S: str) -> int:\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nThe answer modulo 10^9 + 7\n\n\n\nGiven a string S", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    pass\n\n\n\u00a0\n\n\u00a0\n\n\n   :\n    pass\n\nGiven a string S, count the number of distinct, non-empty subsequences of S.        \n\n\n\n\n\n\n\n\u00a0\n\n\n\nS contains only lowercase letters.\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\n\n    pass\n\n\n\n   \n        S = \"abc\"\n        return self.distinctSubseqII(S)\n\n\n\n\n\n\n\n\n\n\n\n\nS contains only lowercase letters and numbers\n\u00a0\n\n\n\nS = \"abc\"\nS"], "prompt": "\nQUESTION:\nGiven a string S, count the number of distinct, non-empty subsequences of S .\nSince the result may be large, return the answer modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: \"abc\"\nOutput: 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n\n\nExample 2:\nInput: \"aba\"\nOutput: 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"ba\", \"aa\" and \"aba\".\n\n\nExample 3:\nInput: \"aaa\"\nOutput: 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n\n\n\n\u00a0\n\u00a0\nNote:\n\nS contains only lowercase letters.\n1 <= S.length <= 2000\nclass Solution:\n    def distinctSubseqII(self, S: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}