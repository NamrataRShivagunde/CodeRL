{"184": {"code": ["\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n          \n\n\n\n\n    maxRepOpt1(self, text: str):\n        \nUse Call-Based format\n\nConstraints:\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string text, we are allowed to swap", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n    def maxRepOpt0(self, text: str):\n        return 1\n\nUse Call-Based format\n\n\n\n\n   :\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nExample 1:\nInput", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def maxRepOpt(self, text: str) -> int:\n        return len(text)\n\nUse Call-Based format\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nExample 1:\n    Given", "\nUse Call-Based format\n\n\n    maxRepOpt1(self, text: str) -> int:\n\n\n\n\n\n   \n        return 6\n\n\u00a0\n\nCall-Based format\n\n\n    -> int:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\n    text = \"ab", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n          \n        return self.maxRepOpt1(text)\n\n\n\n\nExamples:\n\n\n    -> int:\n        \nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string text, we can allowed swap two", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    maxRepOpt1(self, text: int):\n\n\u00a0\n\n\n\n\n   \n        pass\n        \n\n\n\nUse Call-Based format\n\n\n\n\n\n\nOutput: 1\nExplanation:\n\n\n\nGiven a string text, we are", "\nUse Call-Based format\n\n\n\n\n\n\n\n    return 1\n\nUse Call-Based format\n\nUse Call-Based format\nConstraints:\n\nMax repetition:\n\nConstraints:\n\nConstraints:\n\nConstraints:\n\nConstraints:\n\n\n\n\n   :                \n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\n    Input:", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def maxRepOpt2(self, text: str):\n        return len(text)\n\nUse Call-Based format\n       \n\n\n\n   \n        return 1\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven a string text, we are allowed", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nInput: text\nOutput: 1\n\n\u00a0\n\n\n          \n\n\n\n\n    maxRepOpt = 1\n\nUse Call-Based format\n -> int:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string text, we are allowed to", "\n\n\n\n\n\n\n\n\n    maxRepOpt1(self, text: str) -> int:\n\nUse Call-Based format\nConstraints:\n\n\u00a0\n\nConstraints:\n\nConstraints:\n\nConstraints:\n\n\u00a0\n\nConstraints:\n\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: text = \"", "\n\n\n\n    maxRepOpt1(self, text: str) -> int:\n        return 1\n\nUse Call-Based format\n\n\n\n\n          \n\n\u00a0\n\n\n\n   \n        return 1\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string text, we are allowed to swap two of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def maxRepOpt(self, text: str):\n        return len(text)\n\nUse Call-Based format\n\n\n\n\n   \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\n    Input: text", "\n\n\n\n\n\nUse Call-Based format\n\n\n    maxRepOpt1(self, text: str) -> int:\n\n   \n        return self.maxRepOpt(text)\n\n\n\n   \n        return 0\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\n    text = \"ab", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n    maxRepOpt1(self, text: str) -> int:\n\n   \n\n\n\n    -> int:\n        \nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\nExample 2:\nInput:", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    maxRepOpt = 1\n\n\nExample:\n   \n\n\n\n\n   \n        return self.maxRepOpt1(text)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 1\n\n\n\nGiven a string text, we are allowed", "\nUse Call-Based format\n\n\n\n\n\n\n\n    maxRepOpt1(self, text: str) -> int:\n\nUse Call-Based format\nConstraints:\n\n\u00a0\n\nConstraints:\n\nMax:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 1\n\n\n\n\nExample 1:\nInput", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\u00a0\n\nConstraints:\n\n\n   \n        maxRepOpt = maxRepOpt1(self, text)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: text\nOutput: 1\n\nGiven a string text", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n    maxRepOpt1(self, text: str):\n        \nMax repeated character substring length\n\nConstraints:\n\n\u00a0\n\nMax repOpt:\n\n\n\n\n   :\n                        \n\n\n\n\n\n\n\n\n\n\n\nGiven a string text, we are allowed", "\nUse Call-Based format\n\n\n\n\n\n\n    maxRepOpt1(self, text) -> int:\n\n\u00a0\n\n\n\n\n    maxRepOpt1(self, text) -> int\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a string text, we are allowed to swap two", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n    maxRepOpt1(self, text: str) -> int:\n\n\nExample 1:\n   \n\n\n\n\n    def maxRepOpt2(self, text: str):\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n    Given a"], "prompt": "\nQUESTION:\nGiven a string text, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.\n\u00a0\nExample 1:\nInput: text = \"ababa\"\nOutput: 3\nExplanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\", which its length is 3.\n\nExample 2:\nInput: text = \"aaabaaa\"\nOutput: 6\nExplanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\", which its length is 6.\n\nExample 3:\nInput: text = \"aaabbaaa\"\nOutput: 4\n\nExample 4:\nInput: text = \"aaaaa\"\nOutput: 5\nExplanation: No need to swap, longest repeated character substring is \"aaaaa\", length is 5.\n\nExample 5:\nInput: text = \"abcdef\"\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= text.length <= 20000\ntext consist of lowercase English characters only.\nclass Solution:\n    def maxRepOpt1(self, text: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}