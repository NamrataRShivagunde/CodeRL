{"385": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n        return self.kthFactor(n, k)\n\n\n\n   :\n        \n\n\n\n\nUse Call-Based format\n\n\n\nGiven two positive integers n and k.\n\n\n\nGiven two positive integers n and k", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\u00a0\n\n\u00a0\nUse Call-Based format\n\nclass:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven two positive integers n and k.", "\nUse Call-Based format\n\n\n    kthFactor(self, n, k):\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n   :\n       ...\n\nGiven two positive integers n and k.\n\n\n\n\n\n\n\nNo Kth factor defined.\n\n\n\n\nGiven two positive integers n and k.\n\nGiven", "\nUse Call-Based format\n\n\n    kthFactor(self, n, k) -> int:\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   :\nGiven two positive integers n and k.\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven n and k.\n\n\n\n\nGiven two positive integers", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.kthFactor(n, k)\n        \nUse Call-Based format\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two positive integers n and k", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n        kthFactor(self, n, k)\n\n\n\n   :\n        return kthFactor(n, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two positive integers n and k.\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\nGiven two positive integers n and k.\n\n   :\n        return 0\n\n\n\n\n\nUse Call-Based format\n\n\nReturns the kth factor of n and k.\n\n\n\n\nGiven two positive integers n and k", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    kthFactor(self, n, k) -> int\n\n\n\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven two positive integers n and k.\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   :\n        return 0\n        \n\n\n\n\n\n\n\n\n\nGiven two positive integers n and k.\nUse Call-Based format\n\n\n\n\nGiven two positive integers n and k.\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n        return self.kthFactor(n, k)\n\n\n\n   :\n        pass\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven two positive integers n and k.\nThe", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n\n   :\n        \"\"\"\n\n\n\n\n\n\n\n\n\n\n\nGiven n and k.\nUse Call-Based format\n\nGiven n and k.\n\n\n\n\n\nGiven two positive integers n and k.", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nkthFactor(self, n, k):\n    return k\n\nUse Call-Based format\n\n\n\n\n   :\n        \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven two positive integers n and k.\nUse", "\nUse Call-Based format\nUse Call-Based format\n\n\n    kthFactor(self, n, k) -> int:\n\n\n\n\n   \n    kthFactor(self, n, k) -> int\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two positive integers n and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    kthFactor(self, n, k):\n        return k\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n   :\n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two positive integers n and k.\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n\n   :\n        return self.kthFactor(n, k)\n\n\n\n\n\nUse Call-Based format\n\n\n\nn = 2\nk = 2\n\n\n\n\nGiven two positive integers n and", "\nUse Call-Based format\nUse Call-Based format\n\n    kthFactor(self, n, k):\n       \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n   :\n        \n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven two positive integers n and k.", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.kthFactor(n, k)\n\n\n\n\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two positive integers n and k.\nGiven two positive", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n\nGiven two positive integers n and k.\n\n\n\n\n\n\n\n\nGiven n and k.\n\nReturns:\nn + k\n\n\n\n\nGiven two positive integers n and", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        kthFactor(self, n, k)\n        \n\n\n   :\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven two positive integers n and k.", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\nGiven two positive integers n and k.\n\n   :\n        return -1\n        \nGiven two positive integers n and k.\n\n\n\nUse Call-Based format\n\n\n\n\n\n1\n\n\n\n\nGiven two positive integers n and k"], "prompt": "\nQUESTION:\nGiven two positive integers n and k.\nA factor of an integer n is defined as an integer i where n % i == 0.\nConsider a list of all factors of n\u00a0sorted in ascending order, return the kth factor in this list or return -1 if n has less than\u00a0k factors.\n\u00a0\nExample 1:\nInput: n = 12, k = 3\nOutput: 3\nExplanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.\n\nExample 2:\nInput: n = 7, k = 2\nOutput: 7\nExplanation: Factors list is [1, 7], the 2nd factor is 7.\n\nExample 3:\nInput: n = 4, k = 4\nOutput: -1\nExplanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.\n\nExample 4:\nInput: n = 1, k = 1\nOutput: 1\nExplanation: Factors list is [1], the 1st factor is 1.\n\nExample 5:\nInput: n = 1000, k = 3\nOutput: 4\nExplanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].\n\n\u00a0\nConstraints:\n\n1 <= k <= n <= 1000\nclass Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}