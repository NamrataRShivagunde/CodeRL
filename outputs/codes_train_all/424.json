{"424": {"code": ["\nUse Call-Based format\n\n\n\n\n\nimg1, img2\n\n\u00a0\nConstraints:\nimg1[i][j]\nimg2[i][j]\n\n\u00a0\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n img1[i][j]\n\n\n\nimg1[i][j", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\nimg1[i][j][k] is 1\nimg2[i][j][k] is 2\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nimg1 = [[1]]\nimg2 = [[1]]\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    img1 = [0]\n    img2 = [0]\n    \n\n\n\n\n\n\nInput: img1, img2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1[i][j]\n\n\n\nimg1[i", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\nn == n\nn == n == n\nn == n == n == n\nn == n == n\nn == n == n == n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[0,0,", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nimg1[i][j] is not 0 or img2[i][j] is not 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\n\n\n\n\nimg1 = [[1,1,", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nimg1[i][j]\nimg2[i][j]\nimg2[i][j]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[1]]\nimg2 = [[1]]\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    img1[i][j]\nimg2[i][j]\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[0,0,0]]\nimg2 = [[\n\n", "\nUse Call-Based format\n\n\n    Image1, Image2\n\nUse Call-Based format\n\n\n\n\n\n\n    img1[i][j]\nimg2[i][j]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[0,1,0]]\n\n\n\nimg1", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    img1, img2\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given two images img1 and img2.\n\n\n\n\n\nimg1 = [[0,0,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    img1[i][j]\n    img2[i][j]\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\nYou are using a Python-based format\n\n\n\n\n\n\nimg1 = [[0,0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\u00a0\nExplanation:\n\nmaximal overlap is the largest possible overlap of img1 and img2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[1,1,0]]\n\n\n\nimg", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nimg1[i][j][k] == img2[i][k]\nimg2[i][k][k] == img1[i][k]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [1,1]\n\n\nimg", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nimg1 = [[0], [0], [0]]\nimg2 = [[0]]\n\n\u00a0\nConstraints:\n\nn == n <= n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\n\n\n\n\nimg1[0][0", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\nimg1[i][j] < img2[i][j]\nimg2[i][j] < img1[i][j]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nn == img1.length\nn == img2.length\nn == img2.length\nn == img1[i].length\nn == img2[i].length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[0,", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\nn == img1.length\nn == img2.length\nimg1[i][j] == img2[i][j]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[0,0,0],", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nn == img1.length\nn == img2.length\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n1,1,1,1,1,1,1,1]\n\n\n\n\n\n\n\n\nimg1 =", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    Maximal overlap between images\n\n\n\n\n\n\n\n\nUse Python-based format\n1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n\n\n\n\n\n\n\n\n\n\n\n\nThe number of overlap is the", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\nOutput: 3\n\n\nExample:\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg1, img2\n\n\u00a0\n\n\n\n\nimg1 = [[0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nimg1 = [[1], [0], [1]]\nimg2 = [[0]]\n\n\n\n\nimg"], "prompt": "\nQUESTION:\nYou are given two images img1 and img2\u00a0both of size n x n, represented as\u00a0binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)\nWe translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.\u00a0 After, the overlap of this translation is the number of positions that have a 1 in both images.\n(Note also that a translation does not include any kind of rotation.)\nWhat is the largest possible overlap?\n\u00a0\nExample 1:\n\nInput: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\nOutput: 3\nExplanation: We slide img1 to right by 1 unit and down by 1 unit.\n\nThe number of positions that have a 1 in both images is 3. (Shown in red)\n\n\nExample 2:\nInput: img1 = [[1]], img2 = [[1]]\nOutput: 1\n\nExample 3:\nInput: img1 = [[0]], img2 = [[0]]\nOutput: 0\n\n\u00a0\nConstraints:\n\nn == img1.length\nn == img1[i].length\nn == img2.length \nn == img2[i].length\n1 <= n <= 30\nimg1[i][j] is 0 or 1.\nimg2[i][j] is 0 or 1.\nclass Solution:\n    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}