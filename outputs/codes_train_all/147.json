{"147": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nreturn maxPerformance(self, n, speed, efficiency, k)\n\n\nExample 4:\n\nUse Call-Based format\n\nExample 2:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe maximum performance of the team composed of n engine", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nself.maxPerformance = maxPerformance\n\n\n\n\u00a0\nfunction format\n\nfunction format\nInput:\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe answer is the maximum performance of a team\n\nThe", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nn = 6\nk = 2\n\nExplanation:\n\n\n   \n    self.maxPerformance(n, speed, efficiency, k)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThis is an example of the answer:\n\n\n\n\n\n\nThe maximum performance of", "\nUse Call-Based format\n\n\n\n\n\n\n\nreturn maxPerformance(self, n, speed, efficiency, k)\n\n\n\n\n\n\n\nThe maximum performance of a team is the maximum of the team.\n\n\u00a0\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 1\n\nThis is the maximum performance of a team", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nn > 10^5\nn <= k <= n\n\nExplanation:\n\n\n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThe engineers are numbered from 1 to n\n\n\n\n\n\nThe team is the maximum performance of a", "\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nn = 6\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^5\n1 <= k <= n\n\nExplanation:\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00a0\n    k = 2", "\nUse Call-Based format\n\n\n\n\n\nn = 6\nk = 1\n\nExplanation:\n\nn <= k <= n\n\n\n   \n\n\n\n\n   \n   \n    maxPerformance(self, n, speed, efficiency, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 6\n\n\nn = 2\nk =", "\nUse Call-Based format\n\n\n    Use Call-Based format\n\n\n\n\n        return maxPerformance(self, n, speed, efficiency, k)\n\n\u00a0\n\nUse Call-Based format\n\nExample 1:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 2\nn = 2\n\n\nThe maximum performance", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nreturn maxPerformance(self, n, speed, efficiency, k)\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are n engineers numbered from 1 to n, speed and efficiency.\n\nInput\n", "\nUse Call-Based format\n\n\n\n\n\n\nn = 6\nk = 2\n\nExplanation:\n\nn <= k <= n\n\nExplanation:\n\n\n   \n       ...\n\n\n\n   \n   ...\n\n\n\n\n\n\n\n\n\n\n\nThe answer is the maximum performance of a team\n\n\n\n\n\nThe answer is the maximum performance", "\nUse Call-Based format\n\n\n\n\n\n\nn = 6\n\nExplanation:\nn = 6\n\nExplanation:\n\nn = n\n\nExplanation:\n\u00a0\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe maximum performance of a team is the maximum of k", "\n\n\n\n\n\n\n\nn = 6\n\nExplanation:\n\n1 <= n <= 10^5\n1 <= k <= n\n\nExplanation:\n\n1 <= k <= n\n\nExplanation:\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 6\n\n\n\n\nThe maximum performance of a team", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nn >= 1\nk = 1\n\nInput: n >= 1\nefficiency.length == n\n\n\n\n   \n\n\n\n   \n    maxPerformance(self, n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 10^5\n\nThe n", "\nUse Call-Based format\n\n\n    maxPerformance(self, n, speed, efficiency, k) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nThere are n\u00a01 engineers numbered from 1 to n\n\n\n\n\nThe maximum performance of a team is the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nn = 6\n\nExplanation:\n\nn = 6\n\nExplanation:\n\n\n   \n    n = 6\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThis is a function with the default behavior:\n\n\n\nThis is a function with default behavior\n\nThe", "\n\n\n\nUse Call-Based format\n\n\nThe maximum performance of a team is the maximum of a team with k\u00a0engineers.\n\n\n\n   \n    return self.maxPerformance(self, n, speed, efficiency, k)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 10^9\n\nThe maximum", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int):\n        return 100\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    The maximum performance of a team consists of n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are n engineers numbered", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n    def minPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int):\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe number of engineers numbered from 1", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample 1:\n    maxPerformance(self, n, speed, efficiency, k):\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThe maximum performance of a team is 6\n\n\n\n\n\n\nn = 6\n\n"], "prompt": "\nQUESTION:\nThere are n engineers numbered from 1 to n\u00a0and\u00a0two arrays: speed\u00a0and efficiency, where speed[i] and efficiency[i] represent the speed and efficiency for the i-th engineer respectively. Return the maximum performance of a team composed of\u00a0at most\u00a0k\u00a0engineers, since the answer can be a huge number, return this modulo\u00a010^9 + 7.\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among\u00a0their engineers.\u00a0\n\u00a0\nExample 1:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n\nExample 2:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\nOutput: 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n\nExample 3:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\nOutput: 72\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^5\nspeed.length == n\nefficiency.length == n\n1 <= speed[i] <= 10^5\n1 <= efficiency[i] <= 10^8\n1 <= k <= n\nclass Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}