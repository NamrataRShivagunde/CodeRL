{"2405": {"code": ["\nUse Call-Based format\n\n\n    def robot(self, commands: List[int], obstacles: List[List[int]):\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= commands <= 1 <= x <= 9\n\n\n\n\n\n-2", "\n\n\n\n    def robot(self, commands: List[int], obstacles: List[List[int]]) -> int:\n\n\n\n\n\n\n\n\n-30000 <= x <= 9\n\n\n\n\n\n\n\n\n-2 <= x <= 9\n\n-1 <= x <= 9\n\n\n\n\n\n\n\n\n-2 <= x <= 9", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n0 <= commands <= 10000\n\n0 <= obstacles <= 10000\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= commands <= 10000\n\n\n\n\n\n\n1 <= commands <= 10000\n\n\n\n\n2 ^ 31\n\n\n\n\n\n\n\n-2 <= commands", "\n    def robotSim(self, commands: List[int], obstacles: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= commands <= 10000\n\n0 <= obstacles <= 10000\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= x <= 9\n\n\n\n\n\n-2 <=", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n0 <= x <= 9\n\n0 <= y <= 10\n\n\n\n\n0 <= x <= 10\n\n\n\n\n\n1 <= x <= 9\n\n\n\n1 <= x <= 10\n\n\n\n\n-2\n-2 <= x <=", "\n\n-1 <= x <= 1 <= x <= 1 <= x <= 1 <= x <= 1 <= x <= 1\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n-1 <= x <= 1 <= x <= 1\n\n\n\n\n\n\n\n\n\n\n1 <= x <= 1\n\n\n\n\n-2 <= x", "\n\nUse Call-Based format\n\n-1 <= x <= 8 <=\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n-1 <= x <= 9 <= x <= 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n-1 <= x <= 2\n\n\n\n\n\n-1 <= x <= 3\n\n\n\n\n\n\n-2", "\nUse Call-Based format\n\n\n\nA robot on an infinite grid starts at point (0, 0) and faces north.\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= x <= 2 <= x <= 9\n\n\n\n\n\n\n\n2 ^ 31\n\n\n\n\n\n\n0 <= x <= 1\n\n\n\n\n\n-2 <= commands", "\nUse Call-Based format\n\n\n\n    def robot(self, commands, obstacles: List[List[int]]):\n    '''\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= x <= x <= 1\n\n\n\n\n\n\n0 <= x <= 1\n\n\n\n\n\n-2", "\nUse Call-Based format\n\n\n    def robot(self, commands: List[int], obstacles: List[List[int]):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-2 <= x <= 9\n\n-1 <= x <= 8\n\n\n\n\n\n\n\n\n\n\n-2 <=", "\n\n\n        -1 <= x <= 9\n        -1 <= x <= 3\n        -1 <= x <= 1\n\n       \u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= x <= 6\n\n\n\n\n\n\n\n\n\n\n\n0 <= x <= 9\n\n\n\n\n\n-2 <= x <= 9", "\nUse Call-Based format\n\n\n\n\nA robot on an infinite grid starts at point (0, 0)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nThe robot will go to the next square\n\n\n\u00a0\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-2 <= commands[0", "\nUse Call-Based format\n\n\n    def robot(self, commands, obstacles):\n    \"\"\"\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n-2", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n0 <= x <= 10\n-1 <= x <= 9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= x <= 9\n\n\n\n\n\n\n\n-2 <= x", "\n    def robot(self, commands, obstacles: List[List[int]]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n1 <= x <= 9\nReturn x = 1\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n-2 <=", "\n\nUse Call-Based format\n\n\n    def robot(self, commands, obstacles):\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-30000 <= x <= 9\nOutput: 30\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= x <= 9\n\n\n\n\n\n\n-30000 <= x", "\n\n    1 <= x <= 9\n    1 <= x <= 9\n    1 <= x <= 9\n    1 <= x <= 9\n\n\n\n\n\n\n\n\n\n\n\n2 ^ 31\n\n\n\n\n\n\n0 <= commands <= 10000\n\n1 <= x <= 10000\n\n\n\n\n\n\n\n\n\n0 <= x <= 10000\n\n\n\n\n-2", "\n\nUse Call-Based format\n\n\n    def robot(self, commands: List[int], obstacles: List[int]):\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= x <= 9\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n0 <= x <= 10\n\n\n\n\n\n\n-2 <=", "\n    @call_based_format\n\n\n\n\n    @call_based_format\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n-2 <= x <= 9\n0 <= x <= 10\n\n\n\n\n0 <= x <= 10\n\n\n\n-2:\n\n-", "\nUse Call-Based format\n-1 <= commands[i] <= 5 <= commands[i] <= 5\n\n\n\n\n\n\n\n\n\n\n-1 <= commands[i] <= 5 <= commands[i] <= 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= x <= 6\n\n\n-1 <= x <= 5\n\n\n\n\n-2"], "prompt": "\nQUESTION:\nA robot on an infinite grid starts at point (0, 0) and faces north.\u00a0 The robot can receive one of three possible types of commands:\n\n-2: turn left 90 degrees\n-1: turn right 90 degrees\n1 <= x <= 9: move forward x units\n\nSome of the grid squares are obstacles.\u00a0\nThe i-th obstacle is at grid point (obstacles[i][0], obstacles[i][1])\nIf the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)\nReturn the square of the maximum Euclidean distance that the robot will be from the origin.\n\u00a0\nExample 1:\nInput: commands = [4,-1,3], obstacles = []\nOutput: 25\nExplanation: robot will go to (3, 4)\n\n\nExample 2:\nInput: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\nOutput: 65\nExplanation: robot will be stuck at (1, 4) before turning left and going to (1, 8)\n\n\n\u00a0\nNote:\n\n0 <= commands.length <= 10000\n0 <= obstacles.length <= 10000\n-30000 <= obstacle[i][0] <= 30000\n-30000 <= obstacle[i][1] <= 30000\nThe answer is guaranteed to be less than 2 ^ 31.\nclass Solution:\n    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}