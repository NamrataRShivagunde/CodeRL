{"2546": {"code": ["\nUse Call-Based format\n\n\n    pass\n\n\n\nUse Call-Based format\n\n\n        pass\n\n\u00a0\n\nUse Solution-Based format\n\nUse Solution-Based format\n\nUse Call-Based format\n\n        \n\n\n   :\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven an array of integers\n\nGiven an array", "\nUse Call-Based format\n\n\n    numIdenticalPairs(self, nums):\n        return 0\n\n\n\n\n:\n        pass\n\n          \n\n\nGiven an array of integers\u00a0nums.\n\n   :\nUse Python-based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven an array of integers:\n\n\nGiven an", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n:\n        return self.numIdenticalPairs(nums)\n\n\u00a0\nUse Solution-Based format\n\n\n\n\n   :\n\nUse Array-Based formatj > i.\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of integers:", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\u00a0\n\n        return self.numIdenticalPairs(nums)\n\nuse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format       \n\n\n   :                \n\n\n\nUse Python-based format\n\n\n\n\n\n\n\nGiven an array of integers nums.", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n:\n        return 0\n\nUse Call-Based format\n\n        return 1\n\nUse Call-Based format\nGiven an array of integers nums.\n\n   :\n        \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers nums.\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        pass\n\n   \n        pass\n        \n\nGiven an array of integers:\n\n\n   :\n    pass\n\n\n\n\n\nUse Array-Based format\n\n\u00a0\n\n\nUse Call-Based format\n\nGiven an array of integers:\n\n\nGiven an", "\nUse Call-Based format\n\n\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n\n\n\n\n\n\n        pass\n\n\n\n\n   \n\n\n\n   :\n\nUse Python-based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers nums.\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return len(self) == len(nums)\n\n\n\nUse Call-Based format\n       \n\n\n   :\nGiven an array of integers, return the number of good pairs.\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array of integers\n\n\nGiven an", "\nUse Call-Based format\n\n\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n\n\n\n\n\n   \n    return self.numIdenticalPairs(nums)\n\n\n\n   :\n\nj\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nGiven an array of integers:\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        \n\n\n\n\n\n   \n        pass\n\n\n\n   :\n\nUse Sequence-Based format\nUse Python Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers nums.\n\n\nGiven", "\nUse Call-Based format\n\n\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n\n\n\n\n\n        pass\n\n\nUse Solution-Based format\n\nUse Solution-Based format\n\n\n\n\n   :\nUse Sequence format\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums.\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return 0\n\n#\n        return 1\n\nGiven an array of integers, return the number of good pairs.\n\n   :\n\nUse Array-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven an array of integers nums.\n\n\nGiven an", "\nUse Call-Based format\n\n\n    numIdenticalPairs(self, nums: List[int]) -> int:\n\n\n\n\n:\n   \n       \n\n\n\n   :\nGiven an array of integers\u00a0nums.\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers nums.\n\n\nGiven an", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n:\n        pass\n\n\u00a0\n\nUse Solution-Based format\n\nUse Call-Based format\n\n\n\n\n   :\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums.\n\n\nGiven", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n1 <= nums[i] <= nums[j] <= nums[k]\n\nUse Call-Based format\n               \n\n\n   :\nUse Call-Based format\nj\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers:\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        \n\n\n\n\n\n       \n        \"\"\"\n\nGiven an array of integers\u00a0nums.\n\n   :\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\nGiven an array of integers nums.\n\n\nGiven an", "\nUse Call-Based format\n\n\n        pass\n\nUse Call-Based format\n\n\n\n:\n        return 0\n\n\n   \n        pass\n\n\nGiven an array of integers:\n\n\n   :\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven an array of integers:\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\u00a0\n:\n        pass\n\n\nUse Solution-Based format\n\n        pass\n\n\n   :\n       ...\n\nUse Call-Based format\nUse Call-Based formatj is not called good.\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of integers:", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return len(nums)\n\n           \nGiven an array of integers and returns the number of identical pairs.\n\n   :\n        pass\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\nGiven an array of integers:\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n    def numIdenticalPairs(self, nums: List[int]):\n        return len(nums)\n\n\n\n\n\n   \n\n\n\n   :\n        \nUse Python-Based format\nUse Python-2 format\n\nUse Call-Based format\nUse Python-3 format\n\n\n\n\n\n\n\nGiven an array of integers"], "prompt": "\nQUESTION:\nGiven an array of integers\u00a0nums.\nA pair\u00a0(i,j)\u00a0is called good if\u00a0nums[i] == nums[j] and i < j.\nReturn the number of good pairs.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n\nExample 2:\nInput: nums = [1,1,1,1]\nOutput: 6\nExplanation: Each pair in the array are good.\n\nExample 3:\nInput: nums = [1,2,3]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\nclass Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}