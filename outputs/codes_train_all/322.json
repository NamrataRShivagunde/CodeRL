{"322": {"code": ["\nUse Call-Based format\n\n\n    def minPatches(self, nums: List[int], n: int):\n\n\n\n\n\n\n   \n\n\n\n   \n    print(self)\n    print(self)\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a sorted positive integer array nums and an integer n,\n\n\n\nGiven a sorted", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    def minPatches(self, nums: List[int], n: int):\n        return 1\n\n\n   \n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array nums and an integer n, add/patch elements\n\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def minPatches(self, nums: List[int], n: int) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\nAdd patches to an array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a sorted positive integer array nums and an integer", "\nUse Call-Based format\n\n\n    def minPatches(self, nums: List[int], n: int) -> int:\n        \n\n\n\n\n   \n\n\n\n   \n    @Patchable\n    \n\n\n\n\n\nUse Call-Based format\n\n\nAdd all the numbers in range [1, n]\n\n\n\n\nGiven an array nums and an", "\nUse Call-Based format\n\n\n    def minPatches(self, nums: List[int], n: int) -> int:\n        \n\n\n\n\n\n   \n\n\n\n   \n    minPatches(self, nums, n):\n        \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a sorted positive integer array nums and", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\nAdd patch elements to an array with the specified number of elements\n\n\n   \n    return 1\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a sorted positive integer array nums and an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nAdd and patch numbers to an array\n\n   \n        return 1\n\n\n\nGiven a sorted positive integer array nums and an integer n,\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n1, 3, 4, 6\n\nExample 4:\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    def minPatches(self, nums: List[int], n: int):\n        return 2\n\n\n\n\n\n    def minPatches(self, nums: List[int], n: int):                Given a\n\n\n\n\n\n\n\n\n\n\n\nGiven a sorted positive integer array nums and", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n   :\n\n\n\nGiven a sorted positive integer array nums and an integer n, add/patch elements to the array with the specified number of elements to the array.\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a sorted positive integer array nums and n:Given", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    def minPatches(self, nums: List[int], n: int) -> int:\n        \nUse Call-Based format\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a sorted positive integer array nums and an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def maxPatches(self, nums: List[int], n: int):\n        \n\n\n\n\n   \n        \n\n\n\nAdd/patch elements to an array\nUse Call-Based format\n\n\n\n\n\nGiven an array nums and an integer n,\n\nGiven a sorted", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\nUse Call-Based format\n\nAdd 2 patches to the array\n\n\n   \n        return 0\n\nAdd patches to an array\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nGiven a sorted positive integer array nums and n,\n\n\n\nGiven a sorted positive", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nAdd two patches to an array\n\n    def minPatches(self, nums: List[int], n: int):\n        return 2\n\nUse Call-Based format\n\n                Given an\n\n\n\n\n\n\n\n\n\n\nGiven a sorted positive integer array nums and", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n        return 0\nGiven an array of numbers and an integer n, add/patch elements to the array with the given numbers and n.\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nAdd 1, 3 and 2, 5\n\n\nGiven a", "\n\n\n\n\n\n\n\n\n\n    def minPatches(self, nums: List[int], n: int) -> int:\n\n\n\n\n\n    def maxPatches(self, nums: List[int], n: int) -> int:\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a sorted positive integer array nums and an integer", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    minPatches(self, nums: List[int], n: int):\n        return 2\n        \nUse Call-Based format\n\n\n   \n        \n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nGiven a sorted positive integer array nums,\n\nGiven a sorted positive", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    minPatches(self, nums: List[int], n: int)\n\nUse Call-Based format\n\n\n   :\n        \n\n\n\n\n\n\n\n\nUse Call-Based format\nGiven an array nums and an integer n,\n\n\n\nGiven an array nums and an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    def minPatches(self, nums: List[int], n: int):\n        \nUse Call-Based format\n\n\n   :\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven an array nums and an integer n,\n\n\nGiven an array nums", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n       \n\n\n\n       \n        pass\n\n\n    This is a class-based format\n\nGiven a sorted positive integer array nums and an integer n, return the minimum number of patches required\n\n\n\n\n\n\n\n\n\n\n\nGiven a sorted positive integer array nums and an", "\nUse Call-Based format\n\n    def minPatches(self, nums: List[int], n: int):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\nAdd/patch elements to an array of numbers.\n\n\n\n\nGiven a sorted positive integer array nums"], "prompt": "\nQUESTION:\nGiven a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.\n\nExample 1:\n\n\nInput: nums = [1,3], n = 6\nOutput: 1 \nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n\nExample 2:\n\n\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n\n\nExample 3:\n\n\nInput: nums = [1,2,2], n = 5\nOutput: 0\nclass Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}