{"2862": {"code": ["\n`\n\n```\n\nThe code is the same as for `kara_climb`\n\n\n\n\n\n\n\n```if:python \n\n\n\n\n```\n\n\n\n```\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n**Note:**```", "\n`\n\n\n\n```\n\n```\n\n\n\n\n```\n\nThe code will be called by the user to calculate the rank of the leaderboard.\n\n**Note:**\n\n\n\n\n`\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n```\n\n**`\n\n\n\n\n\n```\n", "```\n\nThe code is executed in the same order as the leaderboard's `scores` array\n\n\n\n```\n\n```\n\n\n\n```\n\n\n\n**Note:**\n\n\n\n_climb(scores, kara):\n\n\n\n\n\n\n\n\n\n```\n\n**`\n\n\n\n**Note:**```", "\n```\n\n\n\n```\n\n\n\n\n```if:python\nNote: Python will be used instead of Hackerrank!\n```\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n```\n\n", "\n```if:python \nNote: Python is the default\n```\n`\n\n`\n\n\n```\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n**Note:**\n\n\n\n\n```if:", "\n```python\n\n\n```if:python\n```python\n```\n\n\n\n\n\n```if:python\n\nKara Danvers\n```\n\n\n\n\n\n\n\n\n\n\n\n\n**Note:**\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n``", "\n```if:python\nNote: This kata has no performance requirements.\n`if:python \n`\n```\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n**Note:**\n\n**Note:**\n\n\n```\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n``", "\n```python\n\n```\n\n```\n\n\n```\n\n```\n\n\n\n**Note:**\n\n\n\n\n**Note:**\n\n\n\n\n\n```if:python \n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```if:``", "\n```python\n\n\n\n\n\n```\n\n\n\n\n**Note:**\n\n\n```\n\n\n\n\n**Note:**\n\n\n\n**note:**\n\n\n\n```endif``\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n**`\n\n\n\n\n\n\n\n```python", "\n```if:python \n\tNote: Python\n```else:python\n\n```else:python\n\n```if:python \n```\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```if:python\n**\n\n\n\n\n\n\n\n\n**Note:**\n\n\n```", "\n\n`\n\n```\n\n```\n\nHackerrank:\n\n**Note:** The code is developed for your own code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n```if:", "\n```if:python\n```\n\n`\n\n**Note:**\n\n\n\n`\n\n\n\n```else`\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n**Note:**\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n```", "\n```if:python \nNote: Python is not yet supported!\n```else:python\n`\n\n\n```\n\n\n`\n\n**Note:**\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**`\n\n```\n\nIf:python \n\n```", "\n```if:python\n```else\n```\n`\n\n```\n\n\n\n\n\nWelcome to the Hackerrank code\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n**Note:**\n\n``", "\n```if:python\n```\n```\n\n```\n\n\n```\n\n\n\n\n\n```if:python\n```\n\n\n\n**Note:**\n\n\n\n```if:python\n\n\n\n\n\n\n\n```if:python \n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n```", "\n**NOTE:** This kata uses Call-Based format\n\n`\n\n**Note:** This kata uses Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n```\n\n**`\n\n\n\n\n\n\n```", "\n```python \n\n\n\n\n**Note:** This kata uses Call-Based format\n\n\n\n```if:python \n\n\n\n\n**Note:**\n\n**Note:**\n\n\n\n\n\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\nThe code:\n\n`````", "\n\n\n\n```python\n\nThe kata's performance requirements\n```\n\nThe kata's rank is currently the same as the leaderboard's rank.\n\n\n\n\n\n\n\n```python\n\nif:python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Note:**\n\n\n\n```if:", "\n`\n\n\n\n```\n\n\n\n```\n\n\n\n\n\n```if:python \nNote: Python is not a python version.\n\nNote:\n\n```\n\n**NOTE:**\n\n\n\n\n\n\n\n**\n\n**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:python ", "```\n\n\n\n\n**Note:**\n\n\n**Note:**\n\n\n```\n\n```\n\n```\n\n\n\n\n\n\n**Note:**\n\n\n\n```\n\n\n\n\n\n\n\n\n`\n\n\n\n```\n\n\n\n**`else:python\n\n\n\n```\n\n```\n\n"], "prompt": "\nQUESTION:\n```if:python \nNote: Python may currently have some performance issues. If you find them, please let me know and provide suggestions to improve the Python version! It's my weakest language... any help is much appreciated :)\n```\n\nArtlessly stolen and adapted from Hackerrank.\n\nKara Danvers is new to CodeWars, and eager to climb up in the ranks. We want to determine Kara's rank as she progresses up the leaderboard. \n\nThis kata uses Dense Ranking, so any identical scores count as the same rank (e.g, a scoreboard of `[100, 97, 97, 90, 82, 80, 72, 72, 60]` corresponds with rankings of `[1, 2, 2, 3, 4, 5, 6, 6, 7]`\n\nYou are given an array, `scores`, of leaderboard scores, descending, and another array, `kara`, representing Kara's Codewars score over time, ascending. Your function should return an array with each item corresponding to the rank of Kara's current score on the leaderboard.\n\n**Note:** This kata's performance requirements are significantly steeper than the Hackerrank version. Some arrays will contain millions of elements; optimize your code so you don't time out. If you're timing out before 200 tests are completed, you've likely got the wrong code complexity. If you're timing out around 274 tests (there are 278), you likely need to make some tweaks to how you're handling the arrays.\n\nExamples:\n\n(For the uninitiated, Kara Danvers is Supergirl. This is important, because Kara thinks and moves so fast that she can complete a kata within microseconds. Naturally, latency being what it is, she's already opened many kata across many, many tabs, and solves them one by one on a special keyboard so she doesn't have to wait hundreds of milliseconds in between solving them. As a result, the only person's rank changing on the leaderboard is Kara's, so we don't have to worry about shifting values of other codewarriors. Thanks, Supergirl.)\n\nGood luck! Please upvote if you enjoyed it :)\ndef leaderboard_climb(arr, kara):\n\t\nUse Call-Based format\nANSWER:\n"}}