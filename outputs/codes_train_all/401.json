{"401": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n        return self.maxSumDivThree(nums)\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven an array of integers and a sum", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums) -> int\n\n\n\n\n\n        return maxSumDivThree(self, nums)\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\nInput", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums) -> int:\n\n\n\n\n\n        return nums.pop()\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\n\n   \n        \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an", "\nUse Call-Based format\n\n\n        maxSumDivThree(self, nums)\n\n\n\n\n\n\n        return maxSumDivThree(self, nums)\n\n\n\u00a0\n\n        pass\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers, we have to find the maximum sum\n\n\n\n\nFor an", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        return self.maxSumDivThree(self, nums)\n\n\n\u00a0\n\nUse Call-Based format\n\n        \n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse call-based format\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\ufffd", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums: List[int]) -> int:\n\n\n\n\n\n\n        return self.maxSumDivThree(nums)\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf the array is not", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums: List[int]) -> int:\n\n\n\n\n\n\n        pass\n        \n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n:\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nIf you are not", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums)\n\n\n\n\n\n\n        return self.maxSumDivThree(self, nums)\n\n\n\u00a0\n\n\n\n\n       \nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\nmaxSumDivThree(nums)\n\n\n", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums) -> int:\n        \nUse Call-Based format\n\n\n\n\n       \n        return 0\n\n\n\n   \n       ...\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\nGiven an array of integers:\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums) -> int:\n\n\n\n\n\n        return max(self, nums)\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python-based format\nFor an array", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return self.maxSumDivThree(nums)\n\n\n\n\u00a0\n\nUse Call-Based format\n\nClass Solution:\n   \n        \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nThis example shows how we pick", "\nUse Call-Based format\n\n\n    pass\n\n\n\n   :\n        return self.maxSumDivThree(nums)\n        \nUse Call-Based format\n\n\n\u00a0\n\nConstraints:\n\n1 <= self.maxSumDivThree(nums) <= 3\n\n\n\n\n   \n                \n\n\n\n\n\n\n\n\n\n   \n\nfor i", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums: List[int]) -> int\n\n\n\n\n\n        return self.maxSumDivThree(nums)\n\n\n\n\n\n\u00a0\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nGiven an array of numbers of integers,\n\n\n\n\n\nGiven an array of", "\n\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n        return self.maxSumDivThree(nums)\n\n\n\u00a0\n\n        \n\n\n   \n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    :)\n\n    :)\n\n\n\n\n\n\n\n    :)\n\n", "\nUse Call-Based format\n\n\n\n    maxSumDivThree(self, nums) -> int:\n\n\n\n\n\n        return self.maxSumDivThree(self, nums)\n        \n\n\n\u00a0\n\nUse Solution-Based format\n\n        \n\n\n   \n                \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nFor an", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n\n       \n        return sum(self[i] for i in nums)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n    In this", "\nUse Call-Based format\n\n\n\n\n\n\n\n   :\n        return maxSumDivThree(self, nums[i])\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nGiven an array of integers, we need to", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums: List[int]) -> int\n\n\n\n\n\n        return max(self, nums)\n\n\n\u00a0\n\n\n\u00a0\n\nUse Solution-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers:\n", "\nUse Call-Based format\n\n\n    maxSumDivThree(self, nums)\n\n\n\n\n\n        return self.maxSumDivThree(nums)\n\n\n\u00a0\n\nUse Solution-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given an array of integers:", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n       \n        return maxSumDivThree(self, nums)\n\n\n\u00a0\n\n\n\n\n   \n        pass\n\n\nUse Python-based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array of integers, we can find the maximum sum\n\n\n\nFor"], "prompt": "\nQUESTION:\nGiven an array\u00a0nums\u00a0of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.\n\n\n\u00a0\nExample 1:\nInput: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).\nExample 2:\nInput: nums = [4]\nOutput: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.\n\nExample 3:\nInput: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 4 * 10^4\n1 <= nums[i] <= 10^4\nclass Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}