{"2675": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n1.The fruit packer sort out the bad apples\n2.The fruit packer sort out the bad apples\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ [ 1,3], [ 7,2], [ 7,5]]\n\n\n\n\n``", "\n\n\n\n\n\n\n\n\n\n# No docs\n\n\n\nUse Call-Based format\n\n---\n\n\n\n[ 1, 2 ]\n\n[ 1, 3 ]\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n2.The fruit packer sort out the bad apples\n\n2.\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nThe function should be called from the program\n\nUsage:\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n[\n[ 1,3],\n[],\n\n\n\n``", "\n\nUse Call-Based format\n\n\n\n\n\n\n[ 1, 2, 3, 4, 5 ]\n\n\n\n\n\n\n\n\n\n\n\nHelp a fruit packer sort out the bad apples\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ 1, 2 ]\n[ 1, 2 ]\n[ 1, 2 ]\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\nHelp a fruit packer sort out the bad apples\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\nHelp a fruit packer sort out the bad apples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n#\n\n## Example:\n\n##", "\n\n\n\nCall-Based format\n\n\n\n\n[1,2]\n\n1.An example of a bad apples with an array of arrays:\n\n[1,2,3]\n\n1.A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1,2,3,4,5]\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```\n\nHelp a fruit packer sort out the bad apples.\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n[ [ 0, 1 ], [ 7, 2 ]]\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n[1,3,2,4,5]\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nHelp a fruit packer sort out the bad apples\n\n```\n\n\n\n\n\n\t\n\n\t\t# TODO: This is", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp a fruit packer sort out the bad apples\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.The fruit packer sort out the bad apples \n\n2.The fruit packer sort out the bad apples\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n1.The fruit packer sort out the bad apples\n2.The fruit packer sort out the bad apples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp a fruit packer sort out the bad apples \n\nThe program should have the following output:\n\n```\n\n\n\n\n\n```\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n```\n\nUse Call-Based format\n\nInput:\n\t\nInput data\n\t\nOutput:\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ 0, 3, 4, 5 ]\n\n\n\n\n```", "\n\n\n\n1.Set the bad apples to the correct one\n2.Set the bad apples to the correct one\n\n3.Set the bad apples to the correct one\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n[ [ 0, 0 ] ]\n\n\n\n\n\n\n```\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n[1,2,3,4,5,3,6]\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp a fruit packer sort out the bad apples\n\n```\n\n\n\n\n\n\n```\n\n2.No a good aple", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1.Print a fruit packer sort out the bad apples\n2.Print a fruit packer sort out the bad apples\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ [ 1, 3 ] ]\n\n\n\n\n\n```\n\n", "\n\n\ndef bad_apples(apples):\n\n\t\"\"\"\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp a fruit packer sort out the bad apples\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n[ [ 0, 3], \n  [ 0, 1\n\n\n", "\n\n\n\t1.Repack a fruit packer sort out the bad apples\n\t2.Repack a fruit packer sort out the bad apples\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ [ 0, 1 ], [ 0, 2 ] ]\n\n\n\n[ 1", "\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\nUse Call-Based format\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1,2,3,4,5,6]\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n[ 1,3], \n", "\n\n\n\n\n\n\n[1,2,3,4,5,6,7,6,8]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\t\n\n\n\n\n1.A fruit packer sort out the bad apples\n\t\n2.A fruit packer sort out the bad apples\n\n\n\n\n\n\n\n", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n[ [ 1, 7, 2], [ 0, 1, 2, 3, 4, 5], [ 1, 7, 6] ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1,3]\n\n\n\n\n```\n\n", "\n\n\n    1.Call-Based format\n    2.Call-Based format\n\n```\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.The fruit packer sort out the bad apples\n2.\n\n\n\n\n1.The fruit packer"], "prompt": "\nQUESTION:\nHelp a fruit packer sort out the bad apples. \n\nThere are 7 varieties of apples, all packaged as pairs and stacked in a fruit box. Some of the apples are spoiled. The fruit packer will have to make sure the spoiled apples are either removed from the fruit box or replaced. Below is the breakdown:\n\nApple varieties are represented with numbers, `1 to 7`\n\nA fruit package is represented with a 2 element array `[4,3]`\n\nA fruit package with one bad apple, or a bad package, is represented with `[2,0]` or `[0,2]`\n\nA fruit package with two bad apples, or a rotten package, is represented with `[0,0]`\n\nA fruit box is represented with:\n\n```\n[ [ 1, 3 ],\n  [ 7, 6 ],\n  [ 7, 2 ],\n  [ 1, 3 ],\n  [ 0, 2 ],\n  [ 4, 5 ],\n  [ 0, 3 ],\n  [ 7, 6 ] ]\n\n```\n\nWrite a program to clear the fruit box off bad apples. \n\nThe INPUT will be a fruit box represented with a 2D array: `[[1,3],[7,6],[7,2],[1,3],[0,2],[4,5],[0,3],[7,6]]`\n\nThe OUTPUT should be the fruit box void of bad apples: `[[1,3],[7,6],[7,2],[1,3],[2,3],[4,5],[7,6]]`\n\nConditions to be met:\n\n1.A bad package should have the bad apple replaced if there is another bad package with a good apple to spare. Else, the bad package should be discarded.\n\n2.The order of the packages in the fruit box should be preserved. Repackaging happens from the top of the fruit box `index = 0` to the bottom `nth index`. Also note how fruits in a package are ordered when repacking. Example shown in INPUT/OUPUT above.\n\n3.Rotten packages should be discarded. \n\n4.There can be packages with the same variety of apples, e.g `[1,1]`, this is not a problem.\ndef bad_apples(apples):\n\t\nUse Call-Based format\nANSWER:\n"}}