{"1756": {"code": ["\n\n    pass\n\n    pass\n\n    pass\n\n    pass\n\n    pass\n\n  pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  * The `success` callable can be", "\n  * A real error message\n  * A real error message\n  * A real error message\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  # This is the way the python version is derived.", "\n        return None\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def success(func, val):\n        pass\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n", "\n  # Another way to do this is to do something like this:\n\n  # catch(Exception):\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn 1\n\n\n\n\n\nexit(1)\n\n\n\n\n\n\n##", "\n    pass\n\n  return\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  pass\n\n\n  pass\n\n  pass\n\n\n##\n\n\n\n \n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    success(func)\n   ", "\n\n    Try:\n    print(int(input(\"Input a number: \")))\n    pass\n\n    raise ValueError\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    success(func)\n    pass", "\n    pass\n\n    pass\n\n\n## This code is going to be written by the `try` block.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## The `success` callable will be called\n\n", "\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n  # No code is printed\n\n  # No code is printed\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>> 1\n", "\n\n    >>> import sys\n\n    >>> import sys\n\n    >>> import sys\n\n    >>> import sys\n\n    >>> import sys\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1", "\n\n    # Call-Based format\n\n    # The `failure` callable can handle any exception raised\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  pass\n\n  # pass\n\n \n\n  # pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   ", "\n    print(\"This is a function\")\n\n    return 2\n\n    print(\"This is a function\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  pass\n\n\n## Code for more useful.\n\n\n\n\n\n\n\n\n\n  pass", "\n\n\n\n\n\n\n\n\n\n\n\n\n## Handle exceptions\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n    pass\n\n\n## Process code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Other code:\n\n\n\n\n\n## This is an", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### An example with the Python docstring:\n\n  pass\n\n  pass\n\n###\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    success(1)\n    pass", "\n    pass\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  * The `success` callable knows what is raised.\n  * The `failure` callable knows what is raised.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   ", "\n    pass\n\n\n\n\n\n    print(\"This is a function\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  success(1)\n    pass\n\n  success", "\n\t\tpass\n\t\tpass\n\t\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Some examples:\n\n## What about the code you will handle:\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    success(func)\n        pass\n\n ", "\n\n\n    # Handle exceptions\n\n    failure = 0\n        success = 1\n        failure = 0\n\n    handle = 1\n\n# Handle exceptions\n\n### Handle exceptions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    success(func,", "\n        pass\n\n\treturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n##\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Doing stuff like this:\n\n\n\n\n## Do stuff like this", "\n\treturn 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return 1\n\n\n##\n\n\n\n\n\n  pass\n\n  pass\n\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    success(2)\n    failure(1)\n\n   ", "\n\n    def handle(func, val, *exceptions):\n        pass\n\n    def success(func, *exceptions):\n        pass\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def"], "prompt": "\nQUESTION:\nWe all know how to handle exceptions in Python. Just use:\n\n    try:\n        num = float(input())\n    except ValueError:\n        print(\"That's not a number!\")\n    else:\n        print(num)\n\nCode such as this\n\n    def factorial(x, n = 1):\n        if x == 0:\n          raise ValueError(n)\n        factorial(x - 1, n * x)\n\nrelies on ridiculous exception misuse, but you can't change it because that would require a complete refactor. Code such as this\n\n    try:\n        return int(input(\"Input a number: \")\n    except ValueError:\n        return 4 # random number\n\nrelies on reasonable exception use - almost all of the Python documentation examples are written in this way.\n\nWhat if you are using a faulty implementation of Embedded Python that doesn't implement the `try` statement? Where `sys.excepthook` is a hard-coded, unoverrideable value? Where even `__file__` is not defined? How do you use basic functions like `list.index`?\n\nYour task is to write a function that can handle exceptions raised in a program or function _without_ using `try` or `except`. Somehow.\n\nThe first argument of your function `handle` will be a `lambda` requiring no parameters. You will call this function and handle any exceptions raised. The second argument will be a callable `success`:\n\n    def success(func, val):\n        pass\n\nThe third argument will be a callable `failure`:\n\n    def failure(func, exc):\n        pass\n\nSubsequent arguments will be exceptions. If instances of these exceptions are raised, you must call the handler and no error message must be printed to `stderr`. If the exception raised is not provided as an argument, it should appear as though the exception was never caught.\n\nPass the return value of `func` to `success` unless it raises an exception. If it raises an exception that `isinstance` of an exception class passed to `handle`, call `failure` with an instance of the raised exception.\n\nDon't worry about the little things like dealing with the extra arguments to exceptions or maintaining the call stack. Whoever writes code like _that_ deserves the extra work.\n\n## What does \"catching an exception\" mean?\nIt means:\n\n  * The exception will not be printed to `stderr`.\n  * Code can continue to be executed.\n  * The `failure` callable knows what the exception was.\ndef handle(func, success, failure, *exceptions):\n\t\nUse Call-Based format\nANSWER:\n"}}