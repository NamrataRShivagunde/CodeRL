{"1943": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n    intervalIntersection(A, B) -> List[List[int]]\n\n\n\n\n\n   \n    intervalIntersection(A, B)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nA[i, i]\n\n\n\n\n\n\nA = [1]\n\n\nA", "\nUse Call-Based format\n\n\n    intervalIntersection(self, A, B)\n\nUse Python-Based format\n\nThe interval intersection method is called from a class in the Call-Based format\n\n\n   \n   ...\n\n\n\n\n\n\n\n\n\n\n\n\nA < b\n\nB < a\n\n\n\n\n\n\n\n\nGiven two lists of intervals", "\nUse Call-Based format\n\n\n    intervalIntersection(A, B) -> List[List[int]]\n\n\n\nA[i,i] <= b[i].start < 10^9\nB[i].end < 10^9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [0, 2]\n\n\n", "\nUse Call-Based format\nA[i].start, A[i].end < 10^9\n\n\n\n\nA[i].start < 10^9\nA[i].end < 10^9\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nA and B are lists of intervals.\n\n\n\n\n\n\n\n\nGiven two lists of intervals", "\n\nUse Call-Based format\n\n    def intervalIntersection(self, A, B):\n        return A.intersection(B)\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA, B are closed intervals.\n\n\n\n\n\n\n\n\n\nGiven two lists of intervals A and", "\nUse Call-Based format\n\n\n    intervalIntersection(self, A, B)\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    intervalIntersection(self, A, B)\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two lists of closed intervals,", "\n\n\n\n    intervalIntersection(self, A, B)\n\nUse Call-Based format\n\nUse Python-Based format\n\n\n\n   \n    intervalIntersection(self, A, B)\n\n\n\n\n\n\n\nA[i, j] = B[i]\n\n\n\n\n\n\n\n\n\nA[i].start < 10^9\n\n\n", "\nUse Call-Based format\n\n\n    intervalIntersection(A, B):\n    return A[0]\n\nUse Call-Based format\n\n\n\n\n   \n    intervalIntersection(self, A, B)\n\n\n\n\n\n\n\n\n\nUse Python-based format\n\n\n\n\n\nA list of lists of closed intervals is disjoint\n\n\nGiven two lists", "\nUse Call-Based format\nA[i].start, A[i].end < 10^9\nUse Call-Based format\n\nUse Python-Based format\n\nA[i].start < 10^9\nB[i].end < 10^9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two lists of intervals A", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n    intervalIntersection(self, A, B) -> List[List[int]]\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    IntervalIntersection()\n\n\n\n\n\n\n\nUse Python-based format\n\n\n\n\n\nGiven two lists of closed intervals", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    intervalIntersection(self, A, B)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nA = A - B\nB = B - A\n\n\n\n\n\n\n\n\nGiven two lists of intervals", "\nUse Call-Based format\n\n\n    intervalIntersection(A,B)\n\n\n\nA[i].start <= A[i].end < 10^9\nA[i].start < 10^9\n\n\u00a0\nNote:\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two lists of intervals A and", "\nUse Call-Based format\nUse Call-Based format\n\n    intervalIntersection(self, A, B)\n\n\n\n\n\n   \n    intervalIntersection(self, A, B)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nA and B are lists of intervals.\n\n\n\n\n\n\n\n\nGiven two lists of intervals A and", "\nUse Call-Based format\n\n\n    intervalIntersection(self, A, B)\n\nUse Call-Based format\n\n\n\n   \n    intervalIntersection(A, B)\n\n\n\n\u00a0\n    intervalIntersection(self, A, B)\n\n\n\n\n\n\n\n\n\n\n\n\nA list of closed intervals can be paired\n\n\n\nGiven two lists", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nA and B are not in Python 3.\nUse Call-Based format\n\n\n   \n    intervalIntersection(self, A, B)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA.append(B.pop())\n\n\n\n\n\nGiven two", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\n\n   \n    intervalIntersection(A, B)\n\n\u00a0\n\nExample 2:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nInterval intersection with two lists of closed intervals\n\n\n\n\nGiven two lists of intervals", "\nUse Call-Based format\n\n\n    intervalIntersection(A, B) -> List[List[int]]\n\n\n\nA[i].start < 10^9\nA[i].end < 10^9\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nA and B must be lists of integers\n\n\n\n\n\n\n\nGiven two lists of intervals", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nA[i].start, A[i].end < 10^9\nA[i].start < 10^9\nB[i].end < 10^9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python format\n\n\nA = [1]\nB\n\n", "\nUse Call-Based format\n\n\n    intervalIntersection(A, B) -> List[List[int]]\n\nUse Python-based format\n\n\n\n   \n    return self.intervalIntersection(A, B)\n\n\n\n   \n\n\n\n\n\n\n\nA, B = intervalIntersection()\n\n\u00a0\n\n\n\n\nA\n\n\n\nGiven two lists", "\nUse Call-Based format\n\n\n    intervalIntersection(self, A, B)\n\nUse Call-Based format\n\n\n\n   \n    intervalIntersection(self, A, B)\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n\n\n\nA and B are lists of intervals of closed intervals\n\n\n\n\n\n\n\nA = [[0, 2"], "prompt": "\nQUESTION:\nGiven two lists\u00a0of closed intervals, each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\n(Formally, a closed interval [a, b] (with a <= b) denotes\u00a0the set of real numbers x with a <= x <= b.\u00a0 The\u00a0intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.\u00a0 For example, the intersection of [1, 3] and [2, 4] is [2, 3].)\n\n\u00a0\nExample 1:\n\nInput: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n\n\u00a0\nNote:\n\n0 <= A.length < 1000\n0 <= B.length < 1000\n0 <= A[i].start, A[i].end, B[i].start, B[i].end < 10^9\nclass Solution:\n    def intervalIntersection(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}