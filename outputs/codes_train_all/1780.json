{"1780": {"code": ["\n#\n\n#\n\n\n#\n\n\n\n\n`Sum` -> [3]\n\n#Notes\n`\n`Sum` -> [3]\n\n#Notes\n\n\n`sum(2) -> [3]`\n\n\n\n\n\n\n\n\n\n\n\n#Notes\n\n`prod(n)` : The number of parts is the same as the`\n", "\n\n\n\n\n\n\n#\n\n# Example\n\n#\n\n\n\n\n#Notes:\n\n#\n`range` -> [1,2,3,4]\n#Notes:\n\n`\n\n#\n\n`\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n#\n\n\n\n# Examples:\n\n# Example 1:\n\n", "#\n\n\n\n#Notes\n\n\n\n\n\n\n#Description\n\n`Range` : Average and Median.\n\n#Notes\n\n`Median` : Average and Median.\n\n#Notes\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes\n\n#The following code is the same as wikipedia:\n\n\n\n#", "\n#\n\n\n\n#\n\n\n#Notes:\n\n#\n\n\n\n#Notes:\n\n#Sum(n)\n#Notes:\n\n#\n\n#Note:\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n`prod(n)` -> [[n],[n],[n,n,n]]`\n\n\n`Median`", "\n\n\n\n\n\n\n\n\n#Notes:\n\n#\n\n\n\n\n`sum(2) -> [2]`\n\n#Notes:\n\n`\n\n\n\n\n#\n\n1 -> [2,3,3]`\n\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n\n#Notes:\n\n", "\n\n\n\n\n\n\n\n\n\n#Notes:\n\nSums(n) -> [n]\n\n#Notes:\n\n[2]\n[3]\n\n#Notes:\n\n\n\n\n\n#\n\n\n#\n\n\n\n\n\n\n\n\n\n\n`Sum` -> [1.5,1.5,1.5,1.5", "\n#\n\n\n\n#\n\n\n\n\n\n\n`range: 1 Average: 3.50 Median: 1.50`\n\n#Notes:\n[1]\n\n#\n\n\n`\n\n\n\n\n\n\n\n\n\n`prod(8) -> [3,4,5,6]`\n\n\n`Sum` -> [3,4],[", "\n#\n\n\n\n\n\n#Notes:\n\n#\n\n\n\n\n`range` -> [0, 1, 2, 3, 4]`\n\n#Notes:\n`\n\n\n`prod(10) -> [10]`\n\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n# `n` - `", "\n\n\n\n\n\n\n\n\n\n\n\nSum`\n\n`Median`\n\n`Range`\n\n`Median`\n\n`n`\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\nsum(3) -> [3.50]\n\n`range` : 3.50 Average\n`\n\n3 -\n\n#Notes:", "\n\n\n\n\n#\n\n\n\n\n\n\n`Range` : average average, Median median, and range is the same.\n`\n\n\n`prod(8)`\n\n#Note:\n\n\n\n\n\n\n\n\n\n1 - return the range and average of all the sub-arrays `n`\n2 - return the median\n\n3 -\n\n\n\n", "\n# Example\n\n\n\n\n\n\n\n\n\n#Notes\n\n2 - calculate the sum of all the sub-arrays in a partition\n#Notes\n\n#Notes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes\n\n#Notes\n\n#\n\n#TODO\n\n##Notes\n\n# Returns\n\n1 - `", "\n\n\n\n\n\n\n\n\n`range`\n`median`\n`range`\n`median`\n\n#Notes:\n\n\n\n``\n`median`\n`median`\n\n#Notes:\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 - return `n` - `2` - `5` - `Median", "\n#\n#\n\n\n#\n\n\n\n`prod(1)`\n\n`prod(2)`\n\n`prod(3)`\n\n\n\n``\n\n\n\n\n\n``\n\n\n\n\n\n\n\n\n#Notes:\n\n#\n\n# Example:\n\n#\n\n#Notes\n\n`Sum` -> [1,2,3],", "\n\n\n\n\n\n#\n\n\n\n#Notes:\n\n#\n\n`range` -> [[1],[1],[1],[1]]`\n\n#Notes:\n\n\n\n\n\n`prod(3)`\n\n\n\n\n\n\n\n\n\n\n\n`Range` : average of each array of the same size (`n`)  \n\n#Notes:\n", "\n#\n\n\n\n\n\n\n\n\n\n#Notes\n\n#Notes\n\n#\n`range` : average of all integers (2 <= n <= 40)\n`median` : median of all integers (2 <= n <= 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n# Example for checking uniqueness of a partition of", "#Notes:\n#\n#Notes:\n\n\n#Notes:\n\n#Notes:\n\n\nSum(n)\n\n#Notes:\n\n\n``\n\n\n\n\n`prod(8) -> [1,2,3,4,5,6]`\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n#\n# 1 - We", "\n\n\n\n\n\n\n\n\n\n\n\n[3]\n\n#Notes:\n\n#\n\n\n#Notes:\n\n\n`prod(8)`\n\n#Notes:\n\n#Notes:\n\n#Notes:\n\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n`Sum` -> [4.1]\n\n#Notes:\n", "\n#\n\n\n\n\n\n\n\n\n\n`range` : average between two integers and median\n`median` : median between two integers\n`n` : the number of parts\n`n` : the number of parts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 - return the range and average of the array.\n\n2 -\n\n1 - return the", "\n\n\n\n\n\n\n\n#Notes:\n\n#\n\n\n\n\n`prod(5) -> [5,5,5,5]`\n\n#Notes:\n\n`\n\n\n\n`prod(3)`\n\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n`Sum` -> [3,4,", "\n\n\n\n\n\n\n\n\n`range` :\n\n`median` :\n\n`median` :\n\n`range` :\n\n\n\n#Notes\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`Sum` : average of sum of sum of n`\n`Median` : median of n`\n\n#"], "prompt": "\nQUESTION:\nFrom wikipedia  \n\nIn number theory and combinatorics, a partition of a positive integer n, also called an integer partition, \nis a way of writing n as a sum of positive integers. \nTwo sums that differ only in the order of their summands are considered the **same** partition.\n\nFor example, 4 can be partitioned in five distinct ways:\n\n`4, 3 + 1, 2 + 2, 2 + 1 + 1, 1 + 1 + 1 + 1`.\n\nWe can write:\n\n`enum(4) -> [[4],[3,1],[2,2],[2,1,1],[1,1,1,1]]` and\n\n`enum(5) -> [[5],[4,1],[3,2],[3,1,1],[2,2,1],[2,1,1,1],[1,1,1,1,1]]`.\n\nThe number of parts in a partition grows very fast.\nFor n = 50 number of parts is `204226`, for 80 it is `15,796,476`\nIt would be too long to tests answers with arrays of such size. So our task is the following:\n\n1 - n being given (n integer, 1 <= n <= 50) calculate enum(n) ie the partition of n.\nWe will obtain something like that:  \n`enum(n) -> [[n],[n-1,1],[n-2,2],...,[1,1,...,1]]` (order of array and sub-arrays\ndoesn't matter). This part is not tested.\n\n2 - For each sub-array of enum(n) calculate its product. \nIf n = 5 we'll obtain **after removing duplicates and sorting**:\n\n`prod(5) -> [1,2,3,4,5,6]`\n\n`prod(8) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18]`\n\nIf n = 40 prod(n) has a length of `2699` hence the tests will not verify such arrays.\nInstead our task number 3 is:\n\n3 - return the range, the average and the median of prod(n) in the following form \n(example for n = 5):\n\n`\"Range: 5 Average: 3.50 Median: 3.50\"`\n\nRange is an integer, Average and Median are float numbers rounded to two decimal \nplaces (\".2f\" in some languages).\n\n#Notes:\n`Range` : difference between the highest and lowest values. \n\n`Mean or Average` : To calculate mean, add together all of the numbers \nin a set and then divide the sum by the total count of numbers.\n\n`Median` : The median is the number separating the higher half \nof a data sample from the lower half. \n(https://en.wikipedia.org/wiki/Median)\n\n#Hints:\nTry to optimize your program to avoid timing out.\n\nMemoization can be helpful but it is not mandatory for being successful.\ndef prod(u):\n\t\nUse Call-Based format\nANSWER:\n"}}