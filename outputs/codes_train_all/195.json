{"195": {"code": ["\nUse Call-Based format\n\n\n    def countTriplets(self, A: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    return self.countTriplets(A)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA[i,j,k]\n\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n    countTriplets(self, A) -> int\n\n\n\n\n\n\n   ...\n\n\n\n   \n    countTriplets(self, A)\n        \nUse Call-Based format\n\n\n\n\n\n 1 & 1 & 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n    A[i] = 2\n", "\nUse Call-Based format\n\n\n    int countTriplets(self, A: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    # use call-based format\n\n 2 & 3 & 4\n\n\n\n1 & 2 & 3\n\n\n\n\n\n\n\n\n\nGiven an array of integers A, find the number", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    self.countTriplets(A)\n\n\n\n\n    pass\n\n\n\n\n\n\n 1 & 2 & 3\n\n\u00a0\nNote:\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def countTriplets(self, A: List[int]) -> int:\n    \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [0,1,2]\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    self = A\n\nUse Call-Based format\n\n\n\n    self.A = A\n    \n\n 1 & 2 & 3\n\n\nUse Call-Based format\n 1 & 2 & 3\n\n\n\n\n\n\n\n\nGiven an array of integers A,", "\nUse Call-Based format\n\n\n    def countTriplets(self, A: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n    def countTriplets(self, A: List[int]) -> int:\n        \n\n\n\n\n1 & 1 & 1\n\n\n\n\n\n\n\n\n\n\n    Given an array of integers A,", "\nUse Call-Based format\n\n\n    A.countTriplets(self)\n        -> int\n\n\n\n\n\n   \n    print A\n\n\n\n\n    A.countTriplets(A)\n\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\n\u00a0\nNote:\n\n\n\n\n\n\n\n\n\n\ni = 0\n", "\nUse Call-Based format\n\n\n    def countTriplets(self, A: List[int]) -> int:\n\n\n\n\n\n\n\n    def countTriplets(self, A):\n       ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [0,0,0]\n\n\n\n\n\nGiven an array of integers A", "\nUse Call-Based format\n\n\n    def countTriplets(self, A: List[int]) -> int:\n\n\n\n\n\n\n\n\nA is a list of integers\n\n\n    def countTriplets(self, A):\n       ...\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\ni = 0\nj", "\nUse Call-Based format\n\n\n    A = [0, 1, 2, 3]\n\n\n\n\n\n        0 <= i < j < k < 3\n\n\n    A = [0, 1, 2]\n\n\n   \n       ...\n\n\n\n\n\n 1 & 2 & 3\n\n\n\n\n\n\n\n\n\n\n\n    Given an array of", "\n    def countTriplets(self, A: List[int]) -> int:\n\n\n\n\n\n\n\n\n    A = List[int]\n\n\n\n   \n        A = [1,2,3]\n        \n\n\n\n\n\n\n & 1 & 2\n\n\u00a0\nExample 2:\n\n\n\n\n\n\nGiven an array of integers A,", "\nUse Call-Based format\n\n\n    A = [2,3,4]\n\n\n\n\n\n   \n    A = [0,1,2,3]\n\n\n\n   \n    self.countTriplets(A)\n\n\n\n\n\n\n 1 & 2 & 3\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    A = [0]\n    B = [1]\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n 1 & 3 & 2\n\n\n\n\n\n\n1\n\n\n1 & 2 & 3\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    def countTriplets(self, A: List[int]) -> int:\n    \"\"\"\nUse Call-Based format\n\n\n\n\n\n\n   ...\n\n\n\n   \n   ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [2,3,4]\n\n\n\n\n\nA = [", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    A = [1,2,3]\n\n\n\n\n    return self.countTriplets(A)\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nA[i, j, k]\n\n\u00a0\n\n\nGiven", "\nUse Call-Based format\n\n\n    int countTriplets(self, A) -> int\n\n\n\n\n\n\n\n    A = [2,1,3]\n\n\n\n\n\u00a0\n\n    print A\n\n\n\u00a0\n\n\n\n 1 & 2 & 3\n\n\n\n\n\n\n\n        >>> A = [3]\n        >>>    Given", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n1 <= A[i] <= A[j] < 2^16\n\n\n\n\n\n\u00a0\n\n    A = [2,3]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 & 2 & 3\n\n\u00a0\nGiven an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n0 <= i < A.length\n0 <= j < A.length\n0 <= k < A.length\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nA[i,j,k] = 0\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n    def countTriplets(self, A):\n        return self.countTriplets(A)\n\n\n\n\n\n\n\n\n\n\n   \n    self.countTriplets(A)\n\n\n\n\n\n\n\n\n\n\nA = [0,1,2,3]\n\n\n\n\n\nGiven an array of integers"], "prompt": "\nQUESTION:\nGiven an array of integers A, find the number of\u00a0triples of indices (i, j, k)\u00a0such that:\n\n0 <= i < A.length\n0 <= j < A.length\n0 <= k < A.length\nA[i]\u00a0& A[j]\u00a0& A[k] == 0, where &\u00a0represents the bitwise-AND operator.\n\n\u00a0\nExample 1:\nInput: [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2\n\n\u00a0\nNote:\n\n1 <= A.length <= 1000\n0 <= A[i] < 2^16\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}