{"302": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nGiven the coordinates of four points in 2D space\n\n\n\nGiven the coordinates of four pointsGiven", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nGiven the coordinates of four pointsGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\nOutput: False\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nValid points are in the range [-10000, 10000]\n\n\nUse Call-Based format\n\n\n\nGiven the coordinates of four", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\nOutput: False\n\n\n\n\nUse Python-Based format\nUse Python-based format\nUse Call-Based format\n\n\n\nThis function returns True if the four points could construct a square.\n\n\n\n\n\n\n\nGiven the coordinates of four points in 2D", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nOutput: False\n\n\n\n\n\n\n\n\n\nOutput: False\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nGiven the coordinates of four points\n\n\nGiven the coordinates of", "\nUse Call-Based format\n\n\n\n\n\n\nOutput: False\n\n\n\n\n\n\n\nUse Python-based format\n\n\n\n\n\nUse Call-Based format\nUse Python-based format\nUse Python-based format\n\nUse Python-based format\n\nUse Python-based format\n\n\nUse Python-based format\n\n\n\nGiven the four points in 2Given", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nOutput: False\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nGiven the coordinates of four points in 2D", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\n\nCheck whether the input points could construct a square.\n\n\nOutput: False\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Python-based format\n\n\n\n\n\n\nUse Python-Based format\n\n\n\nGiven the coordinates of four points in 2D space", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \nUse Call-Based format\n\n\n\nOutput: False\n\n\n\nUse Call-Based format\nUse Python-Based format\nUse Python-based format\n\n\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\n\n\nGiven the coordinates of four points in 2D space\n\n\nGiven the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nOutput: False\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based formatUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nGiven the coordinates of four points in 2D space\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Python-based format\n\nGiven the coordinates of four points in 2D space, return whether the four points could construct a square.\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven the four points in 2D space\n\nGiven the coordinates", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nOutput: False\n\n\n\n\n\nOutput: True\n\n\n\n\n\n\nUse Python-Based format\nUse Python-based format\nUse Python Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Python-Based format\n\n\n\nGiven the coordinates of four points in", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \nUse Call-Based format\n\nThis function will return True if the four points could construct a square\n\nInput:\n        p1\n        p2\n        p3\n        p4\n\n                \n\n\n\n\n\n\n\n\nCall-Based format\n\n\n\nUse Python-based formatGiven the coordinates", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\nOutput: False\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nGiven the coordinates of four points in 2D", "\nUse Call-Based format\n\n\n\n\n\n\nOutput: False\n\n\n   \n\n\nThis function can be used in a class based format.\n\nOutput: False\n\n\n\n\nUse Call-Based format\nUse Python format\nUse Python call-based format\n\n\n\n\n\n\nUse Python call-based format\n\n\n\n\nGiven the coordinates of four pointsGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nValid points\n\nExample:\n\nInput:\n\nOutput: False\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven the coordinates of four points in 2D space\n\nInput:\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Python-based format\n\n\n\nOutput: False\n\n\n\n\n\n\nUse Python-Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Python-Call-Based format\n\n\nUse Python-Call-Based format\n\n\n\nGiven the four points inGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\nGiven the coordinates of four points in 2D space, return whether the four points could construct a square.\n\n   \n\nUse Call-Based format\nUse Call-Based format\nUse Python format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the four points in 2D space\n\nGiven the coordinates", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\nThis function returns whether the four points could construct a square.\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nGiven the coordinates of four points\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\nValid points\n\nOutput: False\n\n\n\nUse Call-Based format\nUse Python-based format\nUse Python-2 format\n\n\nUse Python-3 format\n\n\n\nUse Python-3 format\n\nReturn: True\n\n\nGiven the coordinates of"], "prompt": "\nQUESTION:\nGiven the coordinates of four points in 2D space, return whether the four points could construct a square.\n\nThe coordinate (x,y) of a point is represented by an integer array with two integers.\n\nExample:\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: True\n\n\n\n Note: \n\nAll the input integers are in the range [-10000, 10000].\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\nInput points have no order.\nclass Solution:\n    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}