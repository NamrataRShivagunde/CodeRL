{"2871": {"code": ["Use Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\nExample:\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge:\nChallenge:\nChallenge:\nChallenge:\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n```\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstartsWith:\n\n\n\n```\nif st == \"", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\ndef startswith(st, prefix):\n\t\nUse Call-Based format:\n:\n\n\n\n:\n\n\n\n\n:\n\n\n\"\"\")\n\n\n```python\n```\n# Ch", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturns:\n1 if \"string\" starts with \"prefix\", 0 if not\n0 if not\n\n:\n\n\n\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nChallenge:\nChallenge:\nChallenge:\nUse Call-Based format:\n:\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n```\n\n\n```\n\n>>> test = \"", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format:\n\n\n\n\treturn st.startswith(prefix)\n\t\nUse Call-Based format:\n:\n\n\n\n\n\n\n\n\n\n\nstartsWith:\n\n\n\n\n```\n# Challenge:\n", "\nUse Call-Based formatUse Call-Based format\n\n\n\n\n\n\n\nstarts_with:\nUse Call-Based format\n\nExample:\nstartsWith(st, prefix)\n\n\n:\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n```\n# If \"st", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturns:\n\nstarts_with(st, prefix)\n\nReturns:\n\n\n\n", "\nUse Call-Based formatUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\nExample:\n\t\nstarts_with(st, prefix)\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n```\nstring = \"a", "\nUse Call-Based formatUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\n\nReturns:\nstarts_with:\nReturn value:\n0\n\nExample:\n```\n\n\n\n\n:\n\n\n\n\n``", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\t\nUse Call-Based format\n```\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nReturns:\nstarts_with(st, prefix):\n:\n\n\n\n\t\nUse Call-Based format:\n:\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n```\n\nif st == \"hol", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nstartsWith:\nstartsWith:\nstring, prefix\nprefix\n\n:\n\n\n:\n\n\n\n\nstring:\nstring =", "\nUse Call-Based formatUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\nExample:\nstarts_with(st, prefix)\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n# If prefix is", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\nExample:\n\t\nfoo()\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\nst = st.", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\n\n\n\n\n\n\n\nstartsWith:\nstartsWith:\nstring:\nprefix:\n\n\n\n:\n\n\n```\n\nChallenge:\nChallenge:\nstartsWith:\nGiven two", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\nExample:\nstartsWith(st, prefix)\n:\n:\n\n\n\n\n:\n\n\n\n\n:\n\nstartsWith:\nstartsWith:\n\n\n\nChallenge:\nChallenge:\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\nExample:\nstarts_with(st, prefix):\n:\n\n\n\n\n\n\n\n:\n\n\n\nChallenge:\nChallenge:\nChallenge:\nGiven two", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nuse Call-Based format:\n:\n\n\n\n:\n\n\nTest:\n```\nstartsWith(\"hello\", \"hello!\");\n```\n\n\n\n:\n\n\n\n\n```", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nCheck:\n\nUse Call-Based format:\n\n\n\n\t\n:\n\n\n\n\t\n\n\nReturns:\n\n1:\n1:\n\n\nExample:\n```\n\n```\n:\n\n\n\n\n\n\n"], "prompt": "\nQUESTION:\nChallenge:\nGiven two null-terminated strings in the arguments \"string\" and \"prefix\", determine if \"string\" starts with the \"prefix\" string. Return 1 (or any other \"truthy\" value) if true, 0 if false.\n\nExample:\n```\nstartsWith(\"hello world!\", \"hello\"); // should return 1.\nstartsWith(\"hello world!\", \"HELLO\"); // should return 0.\nstartsWith(\"nowai\", \"nowaisir\"); // should return 0.\n```\n\nAddendum:\nFor this problem, an empty \"prefix\" string should always return 1 (true) for any value of \"string\".\n\nIf the length of the \"prefix\" string is greater than the length of the \"string\", return 0.\n\nThe check should be case-sensitive, i.e. startsWith(\"hello\", \"HE\") should return 0, whereas startsWith(\"hello\", \"he\") should return 1.\n\nThe length of the \"string\" as well as the \"prefix\" can be defined by the formula: 0 <= length < +Infinity\n\nNo characters should be ignored and/or omitted during the test, e.g. whitespace characters should not be ignored.\ndef starts_with(st, prefix):\n\t\nUse Call-Based format\nANSWER:\n"}}