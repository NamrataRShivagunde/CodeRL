{"1996": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    def eventualSafeNodes(self, graph):\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n", "\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def eventualSafeNodes(self, graph: List[List[int]):\n        return graph\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Note:\n\n    In", "\nUse Call-Based format\n\n\n    def eventualSafeNodes(self, graph: List[List[int]]):\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def eventualSafeNodes(self, graph):\n        return graph\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngoto start\n\n\n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n    pass\n        \n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a directed graph, we start at some node", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe starting node is eventually safe if we are starting", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n    self.eventualSafeNodes(graph)\n        \n\n    return graph\n        \n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe", "\nUse Call-Based format\n\n\n    def eventualSafeNodes(self, graph: List[List[int]):\n        # -> List[int]\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Notes", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\nUse Call-Based format\n\n\n   \n    eventualSafeNodes(self, graph)\n\n\n\n\n\n    pass\n\n\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n        [1]:\n\nA", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nNOTE:\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def eventualSafeNodes(self, graph: List[List[int]):\n        return graph\n\n\n\n\n\n   \n    pass\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n----- Examples\n\n\n\n\n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n    def eventualSafeNodes(self, graph):\n        return graph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n   \n    pass\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    (1) walk along a directed edge of graph.", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        #eventualSafeNodes(self, graph) -> List[int]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Input: graph\n**", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n    def eventualSafeNodes(self, graph):\n        return graph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples:\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n    def eventualSafeNodes(self, graph: List[int]):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    >>> graph = [[5,", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def eventualSafeNodes(self, graph):\n        return graph\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a directed graph, we start", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def eventualSafeNodes(self, graph):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \"\"\"\n\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n   \n    pass\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n    pass\n\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "prompt": "\nQUESTION:\nIn a directed graph, we start at some node and every turn, walk along a directed edge of the graph.\u00a0 If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.\nNow, say our starting node is eventually safe\u00a0if and only if we must eventually walk to a terminal node.\u00a0 More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.\nWhich nodes are eventually safe?\u00a0 Return them as an array in sorted order.\nThe directed graph has N nodes with labels 0, 1, ..., N-1, where N is the length of graph.\u00a0 The\u00a0graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.\nExample:\nInput: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\nOutput: [2,4,5,6]\nHere is a diagram of the above graph.\n\n\n\nNote:\n\ngraph will have length at most 10000.\nThe number of edges in the graph will not exceed 32000.\nEach graph[i] will be a sorted list of different integers, chosen within the range [0, graph.length - 1].\nclass Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}