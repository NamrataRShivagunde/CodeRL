{"2747": {"code": ["\n\n\n\n\n\nUse Call-Based format\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nANSWER:\n\nWe are given a sequence of coplanar points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of", "\n\nUse Call-Based format\n\n\n\nCall-Based format\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nANSWER:\n\nWe are given a sequence of coplanar points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nThe function will output ```0```.\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\ncount_rect_triang(points)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of coplanar points and see all possible combinations of three points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence", "\nUse Call-Based format\n\n\nCall-Based format\n\n\n\nUse Call-Based format\n\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of", "\nUse Call-Based format\n\ncount_rect_triang(points)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of coplanar points\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ncount_rect_triang()\n\n\n\nWe", "\n\n\n\n\n\n\n\npython\ncount_rect_triang(points)\n\nUse Call-Based format\nANSWER:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of coplan", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\nWe are given a sequence of coplanar points and we need to count all the possible triangles that may be generated.\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ncount_rect_triang\n\n\n\nWe are", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nANSWER:\n\nThe function should generate all possible triangles\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nThe following points are valid:\n\n```\n\n\n\n\n\n\nWe have", "\nUse Call-Based format\n\n\n\nCall-Based format\n\n\n\n\nThe count_rect_triang function uses a Call-Based format\n\n\n\n\n\n\n\n\nWe are given a sequence of coplanar points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of coplan", "\n\nUse Call-Based format\n\ncount_rect_triang(points)\n\nUse Call-Based format\n\n\n\n\n\nCall-Based format\n\n\n\n\n\t\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ncount_rect_triang\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nCall-Based format\n\n\n\n\npython\ncount_rect_triang(points)\n\nUse Call-Based format\nQUESTION:\n\nWe are given a sequence of coplanar points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence", "\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nQUESTION:\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ncount_rect_triang\n\n\n\nWe", "\n\npython\ncount_rect_triang(points)\n\nUse Call-Based format\n\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nANSWER:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of coplan", "\n\n\n\nUse Call-Based format\n\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nQUESTION:\n\nWe are given a sequence of coplanar points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ncount_rect_triang([]) == 3\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nQUESTION:\n\nWe are given a sequence of coplanar points\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence", "\n\n\ncount_rect_triang(points):\n\t\nUse Call-Based format\n\n\n\n\n\ncount_rect_triang(points)\n\nUse Call-Based format\nANSWER:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a sequence of coplanar", "\n\n\nUse Call-Based format\n\n\n\n\n\n\ncount_rect_triang\n\nUse Call-Based format\n\nThe following function is called for each point:\n\ncount_rect_triang(points)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCount the number", "\n\n\nUse Call-Based format\n\ncount_rect_triang(points)\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ncount_rect_triang([4, 1]) == 3\n\n\n\n\n", "\n\n\n\n\n\n\npython\ncount_rect_triang(points) == 3\n```\n\n\nThe function will output ```0```.\n\nIf no triangles may be generated:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ncount_rect_triang(points)\n\n\nWe"], "prompt": "\nQUESTION:\nWe are given a sequence of coplanar points and see all the possible triangles that may be generated which all combinations of three points.\n\nWe have the following list of points with the cartesian coordinates of each one:\n```\nPoints [x, y]\n   A   [1, 2]\n   B   [3, 3]\n   C   [4, 1]\n   D   [1, 1]\n   E   [4, -1]\n```\nWith these points we may have the following triangles: ```ABC, ABD, ABE, ACD, ACE, ADE, BCD, BCE, BDE, CDE.``` There are three special ones: ```ABC, ACD and CDE```, that have an angle of 90\u00b0. All is shown in the picture below:\n\n\n\nWe need to count all the rectangle triangles that may be formed by a given list of points.\n\nThe case decribed above will be:\n```python\ncount_rect_triang([[1, 2],[3, 3],[4, 1],[1, 1],[4, -1]]) == 3\n```\n\nObserve this case:\n```python\ncount_rect_triang([[1, 2],[4, -1],[3, 3],[4, -1],[4, 1],[1, 1],[4, -1], [4, -1], [3, 3], [1, 2]]) == 3\n```\nIf no rectangle triangles may be generated the function will output ```0```.\n\nEnjoy it!\ndef count_rect_triang(points):\n\t\nUse Call-Based format\nANSWER:\n"}}