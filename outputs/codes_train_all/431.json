{"431": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nA[i] = min(A[i])\n\u00a0\n\n   \n    pass\n\nUse Call-Based format1, 2, 4\n\n\nUse Call-Based format         1,\n\n\n\n\n\n\nGiven an array of integers A", "\nUse Call-Based format\n\n\n    def sumSubarrayMins(self, A: List[int]):\n\n\n\n\n\n   \n\n\n\n   \n       \nUse Call-Based format\n\nUse Call-Based format1, 2, 4\n\n\nUse Call-Based format\n\n,\n\n\n\n\u00a0\n\n\nGiven an array of integers A,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nA = [3,1,2,4]\n\n    def\n    pass\n\nUse Python-Based format\nUse Python-Call-Based format1, 2, 4\n\u00a0\n\n,\n\n\n\nA = [3,1]\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n   \n\n\nUse Call-Based format1,2,4\n\n                1\n\n\n\n\n\n\nA = [3,1,", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n   \n    pass\n    pass\n\nUse Call-Based format\nUse Call-Based format1, 2, 4\n\n\nUse Call-Based format\n,\n\n\n\n\nA = [3,1,2]\n\nGiven an array", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n   \n        pass\n\n1,2,4\n\n\n\n,\n\n\n\n\n\n\nA is an array of integers A\nGiven an", "\n\n\u00a0\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\n\n   \n    pass\n\nUse Call-Based format\n\nUse Call-Based format1, 2, 4, 3, 2, 4\n\n\n\n, 1, 2,\n\n\n\n\n\n\nGiven an array of integers A,", "\nUse Call-Based format\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n\n\u00a0\n\n\n   \n\n\n\n   \n    B = min(A)\nUse Call-Based format\nUse Call-Based format\n\n\n\n,\n\nExample 2:\n\n\n\n\n\n\n    Given an array of integers A", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nA = A + 1\nB = 2\n\nExample 2:\n    A = A + 2\n\n   \n        pass\n\nUse Call-Based format        \n\n\n,, 2, 1, 1\n\n\n\n\n\n\n    Given an array of integers A", "\nUse Call-Based format\n\u00a0\n\n    pass\n\n\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n        return min(A)\n\n\n\n\n   \n    pass\nUse Call-Based format        \u00a0\n\n\n,\n\u00a0\n\n\n\n1\n\u00a0\n\n\nA, B = np", "\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n        return min(A)\n\nUse Call-Based format\n\n\n\n   \n        \nUse Call-Based format1,2,4\n\n                2\n        \n        \n\nGiven an array of integers A", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\u00a0\n\n\nExample 2:\n\n   \n\n\n\n   \n    pass\n\n\n1,2,4\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\nUse Call-Based format\n 1, 2, 4\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n\n\nA[i] = A[i] + 1\n\u00a0\n\n   \n    pass\n\nUse Call-Based format\nUse Call-Based format1, 2, 4,\n        \n,\n\n\n\n\u00a0\n\n\n  1.  One is 2", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def min(self, B: int) -> int:\n   \n\n\n\n   \n    print(A)\nUse Python-Based format\n1, 2, 4, 3\n\n\nUse Call-Based format\n\n 1, 2, 4\n\n\n\n\n\n\nA, B =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n   \n    pass\n\n\nUse Python-Based format1,1\n\n,\n\n\n\n\u00a0\n\n\nA:\n    >>> A =", "\nUse Call-Based format\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n\nUse Call-Based format\n\n\n   \n\n\n\n   \n    pass\nUse Python 3.6+ format\nUse Python 3.7+ format\n\n\n\n,, 1, 2\n\n\n\n\n\n\nGiven an array of integers A", "\nUse Call-Based format\n\u00a0\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n\n\n\n\n\nExample 2:\n\n\n\n\n   \n\nUse Python-Based format\nUse Python-Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n    A:\n   ", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n   \n    pass\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format1, 2, 4,\n\n\n,, 1, 2, 4\n\n\n\n\n\nGiven an array of integers A, find", "\nUse Call-Based format\n\n\n    def sumSubarrayMins(self, A: List[int]) -> int:\n\n\n\n\n\n\nExample 2:\n\n\n\n\n   \n\nUse Call-Based format\nUse Python-based format1, 2, 4\n\n\n\n,\n\n\n\nA = [3,1,2]\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n    Use Call-Based format\n\n\n   \n    pass\n\nUse Python-based format\nUse Python-Call-Based format1, 2, 4\n\n\n\n, 1, 1, 1,\n\n\n\n\u00a0\n\nGiven an array of integers A, find the sum"], "prompt": "\nQUESTION:\nGiven an array of integers A, find the sum of min(B), where B ranges over\u00a0every (contiguous) subarray of A.\nSince the answer may be large, return the answer modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: [3,1,2,4]\nOutput: 17\nExplanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\u00a0 Sum is 17.\n\u00a0\nNote:\n\n1 <= A.length <= 30000\n1 <= A[i] <= 30000\nclass Solution:\n    def sumSubarrayMins(self, A: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}