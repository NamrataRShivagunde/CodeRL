{"134": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n,\n\n\n\u00a0\n\n\u00a0\n        return self.numDupDigitsAtMostN(N)\n        \n\n\u00a0\n\n        \n\n with       \n\n\u00a0\u00a0\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\nGiven a positive integer", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n,\n\n\n        return self.numDupDigitsAtMostN(N)\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n with       \n\n\n\n\n\n\n, 19, 20, and 80.\n\n\n\u00a0\n\n\n\n\n\nGiven a positive integer N,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\u00a0\n\n\u00a0\n\n              \n\n\n    with       \nThis function is used to solve the issue with Python's Python call-based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a positive integer N, return the", "\n\n\n\n\nUse Call-Based format\n\n,\n\n\n        return self.numDupDigitsAtMostN(N)\n\n\n\u00a0\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n with\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\nGiven a positive integer N, return", "\nUse Call-Based format\n\n\n\n\n,\n\n:\n        return self.numDupDigitsAtMostN(self, N)\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n with       \n\u00a0\n\n\u00a0\n\n\u00a0\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\ufffd", "\nUse Call-Based format\n\n\n\n\n\n\u00a0,\n\n\n\u00a0\n\n\u00a0\n\n        return 1\n\n\n\u00a0\n\n       \n\n    with       \n\n\u00a0\n\u00a0\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\nGiven a positive integer N,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n,\n\n\n\u00a0\n:\n              \n        return self.numDupDigitsAtMostN(N)\n\n\n\n\n\u00a0\n\n*       \n\n\u00a0\u00a0\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\n   \n\nGiven a positive", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n,\n\n\n        return self.numDupDigitsAtMostN(N)\n        \n\n\n\u00a0\n\n *       \n\u00a0\n\n\u00a0\n\n\n\n\n\n\n\n\nN < 1,\n\n\n\n\n\nGiven a positive integer N, return the number", "\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n        return self.numDupDigitsAtMostN(N)\n        \n\n\n\u00a0\n        \n\n\u00a0\n\n\n\u00a0\n\n *       \n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\n\n\nGiven a positive integer N, return the", "\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\u00a0\n\n              \n\n\n\u00a0\n\n\u00a0\n\n with       \n\n\n\u00a0\n\n\u00a0\n\u00a0\n\n\nUse Call-Based format\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a positive integer N", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n,\n\n\u00a0\n\n\n              \n\n\u00a0\n\n *       \n\n\nUse Python formatGiven a positive integer N, return the number of duplicate digits less than or equal to N.\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\nGiven a positive", "\n\n\n\nUse Call-Based format\n\n,\n\n\n        return self.numDupDigitsAtMostN(N)\n        \n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n\n*       \n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\n\n\nGiven a positive integer N", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n:\n              \n\n\n\n with       \n\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\n\nGiven a positive integer N,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n        return 0\n\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\n\n\n *       \n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a positive integer N, return", "\nUse Call-Based format\n\n\n\n\n,\n\n\n\u00a0\n\n\u00a0\n       \n        return self.numDupDigitsAtMostN(N)\n\n\n\u00a0\n\nUse Python-Based format\n       \n\n    *       \n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nGiven a positive integer N, return the", "\nUse Call-Based format\n\n\n\n\n,\n\n\u00a0\n        return N - 1\n\n\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n\n with       \nGiven a positive integer N, return the number of repeated digits.\n\u00a0\u00a0\n\n\n\n\n\n,\n\u00a0\u00a0\n\n\n\n\n\n\u00a0\n\nExample 1:", "\n\n\n\n\n\nUse Call-Based format\n\n,\n\n\n        return self.numDupDigitsAtMostN(N)\n\n\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n\n*       \n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\n\n   \n\nGiven a positive", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n,\n\n\u00a0\n:\n              \n\n\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\n *       \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\nN", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format,\n\n\n\u00a0:\n        return 1\n\n\u00a0\n\n\n\n\n\u00a0\n\n\u00a0\n\n numDupDigitsAtMostN(self, N: int):\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nGiven a positive", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n,\n\n\n        return N - 1\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n with       \n\u00a0\n\n\nN < 10^9\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\u00a0\n\n\n\n\nGiven a positive integer N,"], "prompt": "\nQUESTION:\nGiven a positive integer N, return the number of positive integers less than or equal to N that have at least 1 repeated digit.\n\u00a0\n\nExample 1:\nInput: 20\nOutput: 1\nExplanation: The only positive number (<= 20) with at least 1 repeated digit is 11.\n\n\nExample 2:\nInput: 100\nOutput: 10\nExplanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n\n\nExample 3:\nInput: 1000\nOutput: 262\n\n\n\u00a0\nNote:\n\n1 <= N <= 10^9\nclass Solution:\n    def numDupDigitsAtMostN(self, N: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}