{"257": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\nEXAMPLE:\n\n\n\n\n\n\n\n\n\n\nOutput:\n\n    float:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given an undirected weighted graph of n\u00a0nodes (0-indexed) and edges (0-indexed)\n\n\n\n\nOutput: 0", "\nUse Call-Based format\nUse Call-Based format\nEXPLANATION:\n\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb, start, end)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 0.000\n\nExplanation:\n\n\n\n\n\nn = 2\n", "\n    def maxProbability(self, n, edges, succProb, start, end):\n        return 0.000\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe answer is returned as a number of successes", "\nUse Call-Based format\nUse Call-Based format\nEXAMPLES:\n\u00a0\n\n\n\n\n\n\n\nUse Call-Based format\n\nExplanation:\n\nUse Call-Based format\n\nExample 1:\n\nInput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: n = 3\nedges = [", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExplanation:\n\n0 <= n <= n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn\u00a0\nExplanation:\n\n\n\n\nstart = 0\nend =", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExplanation:\n\u00a0\nExplanation:\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 0\nedges = []\nsuccProb = []\nstart = 0\nend = 0\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\nEXAMPLE:\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe maximum probability of a path from start to end is 0.5 * 0.5 = 0.25.\n\n\n\n\n\nThe maximum probability of", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExplanation:\n\u00a0Use Call-Based format\n\nExample 0:\n\nOutput: 0.0000\n\nExample 1:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    n = 0\n\n", "\nUse Call-Based format\nUse Call-Based format\nExplanation:\nend\n\n\n\n\n\n\n   \n    maxProbability(self, n, edges, succProb, start, end)\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n0.5\n\n\n\n\n\n\nOutput: 0.", "\nUse Call-Based format\nUse Call-Based format\nEXPLANATION:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb) -> float\n\n\n\n\n\n\n\n\n\n\n0.5 * 0.5 = 1.5\n\n\n\n\n\n\nn = 3", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nOutput:\n\n0.01\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb)\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n\n\n\n    n = 2\nedges = [0", "\n    def maxProbability(self, n, edges, succProb, start, end):\n        return 0.25\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n0.1\n\n\n\n\n\n\n\nOutput:\n\nn = n = n = 1", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nInput: n = 0\nEdges: n = 2\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 0.00000\n\n\n\n\n\nn = 0\nedges = [", "\nUse Call-Based format\nUse Call-Based format\nEXPLANATION:\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb, start, end)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe answer is returned as a float.\n\n\n\n\n\n\n\n\n    a, b, c, d,", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nEXAMPLES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given an undirected weighted graph of n\u00a0nodes (0-indexed) and edges (0-indexed)\n\n\n\n\n\n\nInput: n", "\nUse Call-Based format\nUse Call-Based format\nExplanation:\n\n\nUse Call-Based format\nEXAMPLES:\n\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb, start, end) -> float\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\nThe maximum probability of a path from\u00a0start", "\nUse Call-Based format\nUse Call-Based format\nExplanation:\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nOutput:\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb, start, end)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 1\nedges = [0,", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nYou are given an undirected weighted graph of n\u00a0nodes (0-indexed)\n\n\n\n\n\n\n\n\n\nThe answer is returned\n\n\n\n\n\nA path is found between n\u00a0nodes (", "\nUse Call-Based format\nEXPLANATION:\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\nExample 1:\n\nUse Call-Based format\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 4\nedges = [[0,1]]\n\n\nOutput", "\nUse Call-Based format\nUse Call-Based format\nEXAMPLE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n    maxProbability(self, n, edges, succProb)\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\nYou are given a undirected weighted graph of n\u00a0nodes (0-indexed)\n\n\n\n\n    Return ="], "prompt": "\nQUESTION:\nYou are given an undirected weighted graph of\u00a0n\u00a0nodes (0-indexed), represented by an edge list where\u00a0edges[i] = [a, b]\u00a0is an undirected edge connecting the nodes\u00a0a\u00a0and\u00a0b\u00a0with a probability of success of traversing that edge\u00a0succProb[i].\nGiven two nodes\u00a0start\u00a0and\u00a0end, find the path with the maximum probability of success to go from\u00a0start\u00a0to\u00a0end\u00a0and return its success probability.\nIf there is no path from\u00a0start\u00a0to\u00a0end, return\u00a00. Your answer will be accepted if it differs from the correct answer by at most 1e-5.\n\u00a0\nExample 1:\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation:\u00a0There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\n\nExample 2:\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000\n\nExample 3:\n\nInput: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation:\u00a0There is no path between 0 and 2.\n\n\u00a0\nConstraints:\n\n2 <= n <= 10^4\n0 <= start, end < n\nstart != end\n0 <= a, b < n\na != b\n0 <= succProb.length == edges.length <= 2*10^4\n0 <= succProb[i] <= 1\nThere is at most one edge between every two nodes.\nclass Solution:\n    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:\n        \nUse Call-Based format\nANSWER:\n"}}