{"1730": {"code": ["\n\n\n\n\n# The Chess\n\n# K == 1\n\n# K == 2\n\n# K == 3\n\n\n\n\n\n\n\n\n\n\n1    1    1   1   1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The Convention\n\n\n\n\n\n\n\n):\n\n# K == 1: only one color", "\n\n\n\n## The Bike\n\nK == 1\n\nK == 2\n\nK == 3\n\nK == 3\n\nK == 2\n\nK == 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Problems\n\n\n\n\n\n\n\n\n# All constraints\n\n) ==", "\n\n\n#####\n\n## Description\n\n#####\n\n#####\n\n##\n\n###\n\n###\n\n#####\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n):\n\n\n\n\n\n\n\n\n\n# Confidence\n\n```python\n\n\n\n\n\n):\n\n```python\n# K == 1", "\n\n\n####\n##\n####\n###\n###\n###\n###\n\n\n\n\n\n\n\n# Task\n\n\n\n2323\n\n\n\n# K == 1\n\n# K == 2\n\n\n\n):\n\n\n\n\n\n\n\n\n# The Fibonacci\n\n# Examples\n\n\n\n\n\n\n)\n# K == 1", "\n\n\n# Hard coded\n\n# Reviews\n\n#\n\n\n\n\n\n\n\n# K == 1\n\n# N == K == 2\n\n# K == K == 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Brazil\n\n# K == 2\n\n\n\n\n\n\n\n) -> N: # no more", "\n\n\n\n# Strength\n\nK == 2\n\n# K == 3\n\n# K == 2\n\n# K == 3\n\n# K == 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# N == K\n\n# N == K\n\n# K == 1)", "\n######\n\n## The Data\n\n\n\n\n\n\n\n\n\n# The Fibonacci\n\n# K == 2\n\n# N == K == 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n###############\n###############\n\n\n\n\n\n\n\n\n):\n\n##\n##\n# K == 1:", "\n\n\n\n###\n##\n###\n\n\n\n\n2    3    4    1    2    1    2\n\n###\n\n\n\n\n\n# Conversions\n\n```python\n\n\n\n\n\n)\n\n\n\n\n\n\n\n# K == 1\n\n# K == 2\n\n\n\n\n\n\n\n\n):\n    # K == 1", "\n\n\n\n\n\n# The Tiling\n\n# Examples\n\n# K == 1\n\n# K == 2\n\n# K == 3\n\n# K == 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Constraints\n\n# N <= K\n\n# K <= 1\n\n\n\n\n\n) == 1", "\n\n## Note\n\n\n\n\n\n\n\n\n# The Jack\n\n# Hang\n\n# K == 2\n\n# K == 3\n\n# K == 2\n\n# K == 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n):\n    # K = 1\n    # N", "\n\n\n\n\n\n\n\n\n# Hint\n\n# Tiling\n\n# K == 1\n\n# K == 2\n\n# K == 3\n\n# K == 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The CW\n\n\n\n\n\n\n\n\n# All constraints\n\n```python\n#) ==", "\n\n\n\n\n\n## The Tiling\n\n# Example\n\n# K == 3\n\n# K == 2\n\n# K == 1\n\n# K == 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Brakes\n\n# K == 2\n\n#\n\n\n\n\n\n) == 1\n\n# K", "\n\n\n## The Park\n\n# The Park\n\n# A Jones\n\n# K == 1\n\n# K == 2\n\n# K == 3\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# K == 1\n\n# K == 2\n\n\n) ==", "\n\n\n\n\n\n# The Braille\n\n# Braille\n\n# K == 3\n\n# K == 4\n\n# K == 5\n\n\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n# The Kob\n\n# K == 3\n\n# K == 2\n\n\n\n\n\n\n\n) == 2``", "\n\n\n####\n####\n####\n####\n####\n####\n\n####\n\n####\n\n####\n\n####\n\n\n## The Tiling\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Effects\n\n# K == 2\n\n# K == 3\n\n\n\n\n\n\n) == k\n", "\n\n\n\n\n\n\n\n\n\n\n## The Convention\n\n# Note\n\n# K == 2\n\n# K == 3\n\n# K == 2\n\n## K == 1\n\n# K == 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Hard\n\n):\n# K ==", "\n\n\n\n\n\n\n###\n###\n\n\n\n\n\n\n# Constraints\n\n```python\n\n# K == 1\n\n# K == 2\n\n# K == 3\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n# A Julia\n\n# K == 1\n\n\n\n\n\n\n\n) == 2\n\n#", "\n\n\n\n\n\n# The Fibonacci\n\n##\n\n##\n\n\n\n\n\n\n\n# Ability\n\n# K == 1\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# A Wet\n\n# K == 1\n\n# K == 2\n\n\n\n\n\n) ==", "\n\n\n\n\n\n\n# The Kraus\n\n# The Fibonacci\n\n# K == 1\n\n# K == 2\n\n# K == 3\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK == 2\n\n# K == 3\n\n\n): # yes yes\n``", "\n\n\n# A Blue\n\n# A Hue\n\n# A Hue\n\n# A Hue\n\n# A Hue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# K == 1\n\n# K == 2\n\n\n\n\n\n\n) == k\n# K == 1\n# N"], "prompt": "\nQUESTION:\n### Please also check out other katas in [Domino Tiling series](https://www.codewars.com/collections/5d19554d13dba80026a74ff5)!\n\n---\n\n# Task\n\nA domino is a rectangular block with `2` units wide and `1` unit high. A domino can be placed on a grid in two ways: horizontal or vertical.\n\n```\n## or #\n      #\n```\n\nYou have infinitely many dominoes, and you want to fill a board that is `N` units wide and `2` units high:\n\n```\n<---   N   --->\n###############\n###############\n```\n\nThe task is to find **the number of ways** you can fill the given grid with dominoes.\n\n# The Twist\n\nHowever, you can quickly find that the answer is exactly the Fibonacci series (and yeah, CW has already too many of them), so here is a twist:\n\nNow you have infinite supply of dominoes in `K` colors, and you have to fill the given grid **without any two adjacent dominoes having the same color**. Two dominoes are adjacent if they share an edge.\n\nA valid filling of a 2 x 10 board with three colors could be as follows (note that two same-colored dominoes can share a point):\n\n```\n1131223312\n2231332212\n```\n\nSince the answer will be very large, please give your answer **modulo 12345787**.\n\n# Examples\n\n```python\n# K == 1: only one color\ntwo_by_n(1, 1) == 1\ntwo_by_n(3, 1) == 0\n\n# K == 2: two colors\ntwo_by_n(1, 2) == 2\ntwo_by_n(4, 2) == 4\ntwo_by_n(7, 2) == 2\n\n# K == 3: three colors\ntwo_by_n(1, 3) == 3\ntwo_by_n(2, 3) == 12\ntwo_by_n(5, 3) == 168 # yes, the numbers grow quite quickly\n\n# You must handle big values\ntwo_by_n(10, 5) == 7802599\ntwo_by_n(20, 10) == 4137177\n```\n\n# Constraints\n\n`1 <= N <= 10000`\n\n`1 <= K <= 100`\n\nAll inputs are valid integers.\ndef two_by_n(n, k):\n\t\nUse Call-Based format\nANSWER:\n"}}