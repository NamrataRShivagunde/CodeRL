{"1425": {"code": ["\n\nData structures-----\nChef has no documentation\n\n-----Errors-----\n\n\n\n-----Constraints-----\n\n\n\n\n\n\n\n|L3|\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n-----Test Effects-----\n- The sum of all elements of array A starts with index i = 0\n-\n\n\n\n\n\n- Subtask #", "\n\n\n- Index start \u2264 TL \u2264 N\n- 1 \u2264 L\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Number of elements in array T \u2264 L \u2264 Li\n\n\n- 1 \u2264", "\n\n\n- Fdown(T)-1 \u2264 TL\n- 1 \u2264 N \u2264 Li\n\n-----Constraints-----\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\nTi\n-1 \u2264 TL\n-1 \u2264 N\n\n\n\n-", "\n\n\n\n\n\n\n\n\n- T \u2264 T \u2264 T\n- N \u2264 N\n- L \u2264 L\n\n-----Constraints-----\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n-----Notes-----\n\n\n\n\n\n\n\n-----Tests-----\n\n- Fdown(Ti)-1 ", "\n\n\nTstart = 0\nL2 = 0\nL3 = 0\n\n-----Workaround-----\n\nFor each test case:\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Test Parameters-----\n\n- 1 \u2264 T \u2264 106\n\n\n\n\n\n\n- Subtask #", "\n\n\n\n\n\n\n\n\nT0 \u2264 T1 \u2264 T2 \u2264 T3\n\nTi \u2264 N \u2264 TL\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Test case #1 (20 points):\n\n- 1 \u2264 TL", "\n\n\n\n\n\n\n- 1 \u2264 TL \u2264 L1 \u2264 L2 \u2264...\n- 1 \u2264 L3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Results-----\n\n\n\n\n\n\n\n-----Workaround-----\n\nHow many test cases:\n-", "\n\n\n\n\n\n\n\n\n\n\n- 1 \u2264 TL \u2264 T \u2264 N \u2264 106\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----TestCases-----\n\n\n\n\n\n- 1 \u2264 L \u2264 N \u2264 2\n\n-----Output-----\n", "\n\n-----Notes-----\n\n\n\n\n\n\n\n- 1 \u2264 TL \u2264 Ti\n\n-----Notes-----\n\n\n\n\n-----Constraints-----\n\nThe following constraints are used:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Results-----\n- Add all elements to array\n-\n- 1 ", "\n\n\n\n- End of subtasks-----\n\n\n\n\n-\n\n\n\n\n\n\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 1 \u2264 1\n\n-----Checks-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Calculate sum of all elements\n-\u2264 TL \u2264 1\n", "\n\n\n- Add some number of elements to T\n- Add some number of elements to L\n- Add some number of elements to L\n- Add some number of elements\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n-\u2264 L \u2264 0\n\n- Subtask", "\n\n\n\n\n\n\n- Astart \u2264 TL \u2264 1\n- L2 \u2264 1\n- L3 \u2264 1\n\n-----Notes-----\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n- Calculate sum of all elements\n-\u2264 1\n\n\n\n\n\n- 1 \u2264 L", "\n\n-----Notes-----\n\n\n\n\n-----Notes-----\n\n\n\n\n\nTstart\nT2\nT3\nT0\nT1\nT2\nT3\n\n-----Checks-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n-----Workaround-----\n\nThe first line is not empty\n\n- 1 ", "\n\n\n\n\nChef has a number of test cases:\n\n-\nTi = 0\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 1 \u2264 T \u2264 Ti\n\n-----Errors-----\n\n\n\n\n\n\n- 1 \u2264 T \u2264 TL\n-", "\n\n\n\n\n-----Description-----\n\nA test case for the Fenwick data structure\n\n- 1 \u2264 TL \u2264 N\n\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTi = T\nL = Lstart + 1\n\n-----Constraints-----\n\n-", "\n\n\n\n\n\n\n\n\n\n \n\n\n \n \n |\n\n  |L|\n\n  |L|\n\n  |N|\n\n\n \n\n\n\n\n\n\n\n- Calculate sum of all elements L1, L2,..., L3\n\n-----Errors-----\n\n\n\n\n\n\n- 1 \u2264 L", "\n\nSubtasks-----\n\nA\nAstart\nA2\nA3\n\n-----Functions-----\n\n- The function Fdown\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Number of elements \u2264 T \u2264 1000\n-\u2264 1\n\n- Subtask", "\n\n\n\n- 1 \u2264 L \u2264 N \u2264 TL\n\n\n\n\n\n\n\n\n- 1 \u2264 TL \u2264 T \u2264 0\n- 1 \u2264 N \u2264 TL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u2264 L \u2264 N", "\n\n\n\n\n\n\n\n\nT0 = 0\nT1 = 1\nT2 = 1\nT3 = 1\n\n-----Variables-----\n\nNumber of elements\n\nStart = 0\n\nLength = 1\n\n-----Counter-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u2264 L2| + |L", "\n\n\n\n\n\n\n- Start\n- Tstart - 1\n- L3 - 1\n\n-----Constraints-----\n\nThe first line is an integer T\n\n-\n\n-----Constraints-----\n\n\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 1 \u2264 T \u2264 0\n- 1"], "prompt": "\nQUESTION:\nChef has just learned a new data structure - Fenwick tree. This data structure holds information about array of N elements and can process two types of operations:\n\n- Add some value to ith element of the array\n- Calculate sum of all elements on any prefix of the array\n\nBoth operations take O(log N) time. This data structure is also well known for its low memory usage. To be more precise, it needs exactly the same amount of memory as that of array.\n\nGiven some array A, first we build data structure in some other array T. Ti stores the sum of the elements Astart, Astart + 1, ..., Ai. Index start is calculated with formula start = Fdown(i) = (i & (i + 1)). Here \"&\" denotes bitwise AND operation.\nSo, in order to find a sum of elements A0, A1, ..., AL you start with index L and calculate sum of TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1. Usually it is performed with cycle that goes from L down to 0 with function Fdown and sums some elements from T. Chef wants to verify that the time complexity to calculate sum of A0, A1, A2, ..., AL is O(log L). In order to do so, he wonders how many times he has to access array T to calculate this sum. Help him to find this out.\nSince Chef works with really big indices. The value of L can be very large and is provided to you in binary representation as concatenation of strings L1, L2 repeated N times and string L3.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains three non-empty strings L1, L2, L3 and an integer N. Strings will contain only characters 0 and 1. To obtain binary representation of index L concatenate L1 with L2 repeated N times and with L3. You are guaranteed that the index will be positive.\n\n-----Output-----\nFor each test case, output a single line containing number of times Fenwick tree data structure will access array T in order to compute sum of A0, A1, A2, ..., AL.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 300\n- 1 \u2264 Length(Li) \u2264 1000\n- 1 \u2264 N \u2264 106\n\n-----Subtasks-----\n- Subtask #1 (20 points): |L1| + |L2| * N + |L3| \u2264 60\n- Subtask #2 (30 points): 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100\n- Subtask #3 (50 points): No additional constraints\n\n-----Example-----\nInput:\n4\n001 100 011 4\n1000 1101 100 3\n1010 001 101 4\n010 101 000 4\n\nOutput:\n6\n12\n8\n10\nUse Standard Input format\nANSWER:\n"}}