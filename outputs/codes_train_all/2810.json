{"2810": {"code": ["\nUse Call-Based format\n~endif\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nendif:fortran\n\n\n\n\t\n~endif\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n```\n\n[A\",\"B\",\"C", "\nUse Call-Based format\n~endif\n\n\n\t\nUse Call-Based format\n\n\n\nelse:fortran\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n[A-Z]\n\n\n\n```\n\n[A-", "\n\nUse Call-Based format\n~else:fortran\n# Fortran-Specific Notes\n\n\nUse Call-Based format\n\n~else:fortran\n~endif\n\n\n\n\n\t\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n~~~else\n\n\n```\n\n\n\n\n\n\n```\n\n\n```\n\nif", "\nUse Call-Based format\n~endif\n\n\n\t\nUse Call-Based format\n\n\n\n\nelse:fortran\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\ndef\n\t\n\n\n~endif\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n\n\n```\n\n[1]\n#", "\nUse Call-Based format\n~else:fortran\n\nUse Call-Based format\n\n\n\n\nendif\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n```\n\n\n```\n\n\n\n\n```\n\n~else:fortran\n\n\n\n\n```\n\n# Solve using Kata", "\n\n\n\n\nUse Call-Based format\n\n\nelse:fortran\n## Fortran-Specific Notes\n\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n~~~else:fortran\n## Fortran-Specific Notes\n\n\n\n\n\n\n\n\n\n[a]\n# [b", "\nUse Call-Based format\n~else:fortran\n## Fortran-Specific Notes\n\n\nUse Call-Based format\n\n\nelse\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n```\n\n\n```\n\n\n\n\nelse:fortran\n## Fortran-Specific Notes\n\n\n\n\n```\n\n[3][", "\n\nUse Call-Based format\n\n~else\n\n\n\nUse Call-Based format\n\n\n\nelse\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n~else\n\n\n\n\n\n\n\n\n\n\n\n\n~endif\n\ndef\n\n\t\n\n```\n\n", "\n\nUse Call-Based format\n~else:fortran\n\n\nUse Call-Based format\n\n\nelse:fortran\n\n\n\n\t\nUse Call-Based format\n~else:fortran\n\n\n\n\n\n\n\n~endif\n\n\n\n\n```\n\n\n\n~endif\n\ndef solve(arr):\n\t\n\n\n[1]", "\nUse Call-Based format\n~else:fortran\n\n\n\nUse Call-Based format\n\n\n\n\nendif\n\n\n\n\n\nreturn arr\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n```\n\n\n```\n\n\n\n\nelse:fortran\n\n\n\n\n```\n\n[1][", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nelse:fortran\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\ndef solve(arr):\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:fortran\n###\n\n\n\n\n```", "\nUse Call-Based format\n~endif\n\n\nUse Call-Based format\n\n\nif:fortran\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n~~~else:fortran\n\n\n\n\n\n\n\n\n\n```\n\nif", "\n\n\n\n\nUse Call-Based format\n\n\n\nendif\n\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n~~~else\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\n\nif arr[0] is", "\nUse Call-Based format\n~else\n\n\n\nUse Call-Based format\n\n\n\nelse\n\n\n\ndef solve(arr):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n```\nif arr is an array:\n\n```\n\n```\n\n\n\n\n~endif\n\ndef\n\n\n``", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n~else:fortran\n\n~~~endif\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n# Fortran\n## Fortran-", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nelse:fortran\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~else:fortran\n\n\n\n\n\n\n\n\n\n\n\n```\nConsider the word `\"abode\"`.", "\n\nUse Call-Based format\n~else:fortran\n\n\n\nUse Call-Based format\n\n\n\n\nendif\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\n~endif\n\n\n\n\n\n```\n\nconsider the word `\"", "\n\n~else\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nelse:fortran\n\n\n\n\n\n~else\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\n\nA:\n\t#", "\n\nUse Call-Based format\n~else\n\n\n\n\n\n\n\n~~~if:fortran\n### Fortran-Specific Notes\n\n~~~if:fortran\n\n~~~end\n\n\n\n\n~endif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nendif\n\ndef\n\t\n# Solve\n\n\n", "\nUse Call-Based format\n~else:fortran\n\n\nUse Call-Based format\n\n\n\nend\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n~endif\n\n\n\n\n\n\n\n\n\n\n\n~endif\n\n\n\n\n```\n\n#!/bin"], "prompt": "\nQUESTION:\nConsider the word `\"abode\"`. We can see that the letter `a` is in position `1` and `b` is in position `2`. In the alphabet, `a` and `b` are also in positions `1` and `2`. Notice also that `d` and `e` in `abode` occupy the positions they would occupy in the alphabet, which are positions `4` and `5`. \n\nGiven an array of words, return an array of the number of letters that occupy their positions in the alphabet for each word. For example,\n```\nsolve([\"abode\",\"ABc\",\"xyzD\"]) = [4, 3, 1]\n```\nSee test cases for more examples.\n\nInput will consist of alphabet characters, both uppercase and lowercase. No spaces.\n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Last digit symmetry](https://www.codewars.com/kata/59a9466f589d2af4c50001d8)\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\n~~~if:fortran\n## Fortran-Specific Notes\n\nDue to how strings and arrays work in Fortran, some of the strings in the input array will inevitably contain trailing whitespace.  **For this reason, please [trim](https://gcc.gnu.org/onlinedocs/gcc-4.3.4/gfortran/TRIM.html) your input strings before processing them.**\n~~~\ndef solve(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}