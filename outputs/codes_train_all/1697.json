{"1697": {"code": ["\n# Description\n\n\n\n\n\n\n\n\n\n# Interactions\n\npython\nclass Nonogram(Nonogram):\n    pass\n```\n\n# Subinstructions\n\n# Description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples\n\n# Description\n\n# References\n\n# Description\n\n#\n\n\n\n    1 1", "\n\n\n\n\n\n\n# Methods\n\n# Methods\n\n# The method for the Nonogram\n\n# The method for the Nonogram\n\n# The method for the Nonogram\n\n#\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n |   |   |   |  ", "\n\n# Architecture\n\n\n\n\n\n\n# Summary\n\n# Examples\n\n# Description\n\n# References\n\n# Locations\n\n# Description\n\n# References\n\n# Description\n\n# Examples\n\n# Description\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   |   |   |  ", "\n\n\n# Description\n\nThis is the kata algorithm for the Nonograms algorithm\n\n# Description\n\n# Examples\n\nA Kata, Kata, Kata,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n |   |  ", "\n\n\n\n\n# Description\n\npython\n\n\n\n# Examples\n\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1\n\n\n\n\n\n\n\n\n\n\n\n\n# Travel\n\n\n\n\n# Solver\n\n\n\n\n\n\n\n   |   |   |  ", "\n\n# Example\n\n# Description\n\n# Preconditions\n\n\n\n\n\n\n\n# Problems\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Description\n\n# Details\n\n# Locations\n\n# Description\n\n# Codewars\n\n# Codewars\n\n\n\n\n\n\n\n\n\n   |   |  ", "\n# Instructions\n\n\n# Description\n\n# Notes\n\n#\n\n# Notes\n\n# Notes\n\n# The kata\n\n# Notes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n |   |   |   |  ", "\n\n\npython\n\n# Description\n\n# Instructions\n\n\n\n\n\n\n# Description\n\n# Arguments\n\n# Parameters\n\n# Arguments\n\n# Parameters\n\n# Parameters\n\n# Parameters\n\n# Parameters\n\n# Parameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   |   |   |   |", "\n\n# Description\n\n\n\n\n\n\n# Interactions\n\n# Reactions\n\n\n\n\n\n\n\n\n\n    # Description\n\n    # A simple nonogram\n\n    # Description\n\n    # Reactions\n\n# Reactions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   |   |  ", "\n\n\n\n# Examples\n\n# Description\n\n# Classes\n\n# Methodes\n\n# Methods\n\n# Methods\n\n# Methods\n\n# Methods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n```\n\n\n\n\n\n\n\n   |   |  ", "\n# Description\n\n\n\n\n# Methods\n\n#\n\n\n\n\n\n\n# Description\n\n# Method\n\n# Methods\n\n# Description\n\n# Examples\n\n# Description\n\n# Examples\n\n# Description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n\n    1", "\n# Description\n\n\n\n\n\n# Bugs\n\n# References\n\n# Description\n\n\n\n\n\n\n1 1 1 1 1 1 1 1 1 1 1 1\n\n1 1 1 1 1 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n\n   |   |  ", "\n\n# Example\n\n# Description\n\n\n\n\n# Information\n\n# The methods\n\n# Parameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n```if:java\nThe puzzle will be solved by trying to solve 5x5 Nonograms :)\n\n\n\n", "\n# Description\n\n\n\n\n\n# Locations\n\n# Example\n\n# The Nonogram class:\n\n# Kata\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# References\n\n\n\n\n\n\n\n\n\n\n```if:java\nThe class with the solved puzzle is:\n\n   \n\n`````", "\n\n\n\n# Summary\n\n# An example of a kata with a nonogram\n\n\n\n\n\n\npython\n```\n\n\n\n\n\n\n\n\n```if:java\nThe puzzle is an integer\n1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\n\n\n\n\n\n\n\n   |   |   |   |   |", "\n\n\n# Description\n\n# Classes\n\n# Functions\n\n# References\n\n# References\n\n# References\n\n# Documentation\n\n# Example\n\n# Description\n\n# References\n\n# Documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   |   |   |  ", "\n# Description\n\n\n\n\n\n\n\npython\n\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Solver\n\n\n\n\n    # Solver\n   \n\n```if:java\n\n", "\n# Description\n\n\n\n\n\n# Puzzles\n\n\n\n\n# Instructions\n\n# Locations\n\n# Description\n\n# Locations\n\n# Description\n\n# Instructions\n\n# Locations\n\n# Description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   |   |   |  ", "\n# Description\n\n\n\n\n# Method\n\n\n\n\n\n\n\n\n\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n   |   |   |   |  ", "\n\n\n# Description\n\nThe kata is a kata.\n\n# References\n\n# Description\n\n# Notes\n\n# References\n\n# Notes\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   |   |   |   |  "], "prompt": "\nQUESTION:\nOnce you complete this kata, there is a [15x15 Version](http://www.codewars.com/kata/15x15-nonogram-solver) that you can try.\nAnd once you complete that, you can do the [Multisize Version](https://www.codewars.com/kata/5a5519858803853691000069) which goes up to 50x50.\n\n# Description\n\nFor this kata, you will be making a Nonogram solver. :)\n\nIf you don't know what Nonograms are, you can [look at some instructions](https://www.puzzle-nonograms.com/faq.php) and also [try out some Nonograms here.](https://www.puzzle-nonograms.com/)\n\nFor this kata, you will only have to solve 5x5 Nonograms. :)\n\n# Instructions\n\nYou need to complete the Nonogram class and the solve method:\n```python\nclass Nonogram:\n\n    def __init__(self, clues):\n        pass\n\n    def solve(self):\n        pass\n```\n\nYou will be given the clues and you should return the solved puzzle. All the puzzles will be solveable so you will not need to worry about that.\n\n```if:python\nThe clues will be a tuple of the horizontal clues, then the vertical clues, which will contain the individual clues. For example, for the Nonogram:\n```\n\n```if:java\nThe clues will be a three dimensional array of the horizontal clues, then the vertical clues, which will contain the individual clues. For example, for the Nonogram:\n```\n\n```\n    |   |   | 1 |   |   |\n    | 1 |   | 1 |   |   |\n    | 1 | 4 | 1 | 3 | 1 |\n-------------------------\n  1 |   |   |   |   |   |\n-------------------------\n  2 |   |   |   |   |   |\n-------------------------\n  3 |   |   |   |   |   |\n-------------------------\n2 1 |   |   |   |   |   |\n-------------------------\n  4 |   |   |   |   |   |\n-------------------------\n```\nThe clues are on the top and the left of the puzzle, so in this case:\n```if:python\nThe horizontal clues are: `((1, 1), (4,), (1, 1, 1), (3,), (1,))`, and the vertical clues are: `((1,), (2,), (3,), (2, 1), (4,))`. The horizontal clues are given from left to right. If there is more than one clue for the same column, the upper clue is given first. The vertical clues are given from top to bottom. If there is more than one clue for the same row, the leftmost clue is given first.\n\nTherefore, the clue given to the `__init__` method would be `(((1, 1), (4,), (1, 1, 1), (3,), (1,)), ((1,), (2,), (3,), (2, 1), (4,)))`. You are given the horizontal clues first then the vertical clues second.\n\n```\n\n```if:java\nThe horizontal clues are: `{{1, 1}, {4}, {1, 1, 1}, {3}, {1}}`, and the vertical clues are: `{{1}, {2}, {3}, {2, 1}, {4}}`. The horizontal clues are given from left to right. If there is more than one clue for the same column, the upper clue is given first. The vertical clues are given from top to bottom. If there is more than one clue for the same row, the leftmost clue is given first.\n\nTherefore, the clue given to the `solve` method would be `{{{1, 1}, {4}, {1, 1, 1}, {3}, {1}},\n                    {{1}, {2}, {3}, {2, 1}, {4}}}`. You are given the horizontal clues first then the vertical clues second.\n\n```\n\n```if:python\nYou should return a tuple of the rows as your answer. In this case, the solved Nonogram looks like:\n\n```\n```if:java\nYou should return a two-dimensional array as your answer. In this case, the solved Nonogram looks like:\n\n```\n\n```\n    |   |   | 1 |   |   |\n    | 1 |   | 1 |   |   |\n    | 1 | 4 | 1 | 3 | 1 |\n-------------------------\n  1 |   |   | # |   |   |\n-------------------------\n  2 | # | # |   |   |   |\n-------------------------\n  3 |   | # | # | # |   |\n-------------------------\n2 1 | # | # |   | # |   |\n-------------------------\n  4 |   | # | # | # | # |\n-------------------------\n```\n\n```if:python\nIn the tuple, you should use 0 for a unfilled square and 1 for a filled square. Therefore, in this case, you should return:\n~~~\n((0, 0, 1, 0, 0),\n (1, 1, 0, 0, 0),\n (0, 1, 1, 1, 0),\n (1, 1, 0, 1, 0),\n (0, 1, 1, 1, 1))\n~~~\n\n```\n\n```if:java\nIn the two-dimensional array, you should use 0 for a unfilled square and 1 for a filled square. Therefore, in this case, you should return:\n~~~\n{{0, 0, 1, 0, 0},\n {1, 1, 0, 0, 0},\n {0, 1, 1, 1, 0},\n {1, 1, 0, 1, 0},\n {0, 1, 1, 1, 1}}\n~~~\n\n```\nGood Luck!!\n\nIf there is anything that is unclear or confusing, just let me know :)\ndef __init__(self, clues):\n\t\nUse Call-Based format\nANSWER:\n"}}