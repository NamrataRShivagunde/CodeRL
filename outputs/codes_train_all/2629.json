{"2629": {"code": ["\n\n\n\n\n---\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\n\n\n\n\n end tag   : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_starttag(tag,", "\n\n\n\n\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\n\n\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFound an empty tag  : html\n\n_starttag ", "\n\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\n\n\n\n\n end tag   : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n start tag  : html\nFound a start", "\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\nOutput\n\nFound a start tag  : html\n\n\n\n\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_starttag(tag", "\n\n\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\nFound an end tag   : html\n\nOutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFound\n\n\n\n\n_starttag  :", "\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound an end tag  : html\nFound an end tag   : html\n\n\n\n\n end tag  : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n    # code\n\n   ", "\n\n\n\n\n\nOutput\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\nOutput\n\n\n\nFound a end tag  : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_starttag  : <", "\n\nFunction Descriptions=====\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound an end tag  : html\nFound an end tag   : html\n\nOutput\n\n\n\n end tag   : html\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n end tag  : html\n", "\n\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound a start tag  : html\nFound an end tag   : html\n\n\n\n end tag  : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \"\"\"\n    return [\n", "\n\n\n\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound an end tag  : html\nFound an end tag   : html\n\n\n\n\n end tag   : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# handle end tag of an element", "\n\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound a start tag  : html\nFound a end tag   : html\n\n\n\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  : html\n\n\n\n    <", "\n\n\n\n\n\n\n\n\n   \n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound a start tag  : html\nFound a end tag   : html\n\n\n\n\n\n\n\nFound\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFound an end tag  :\n\n\n\n\n_start", "\n\n\n\n\n\n=====Syntax Statement=====\n\nSyntax Statement is given as an example:\n\n---\n\n\n\n\n\n\n\n\n\nFound an start tag  : html\nFound an end tag  : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n end tag  : html\n\nFound", "\n\n\n\n\n\n=====Problem Statement=====\n\n\nFound a start tag  : html\nFound a end tag  : body\nFound an end tag   : html\n\nOutput\n\n\n\n\n\n end tag   : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_starttag(tag, attrs):", "\n\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\nOutput\n\n\n\n end tag   : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n start tag  : html\nFound an end", "\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\n\n\n end tag   : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n end tag  : body\n\nFound an end", "\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\nOutput\n\n\n\n\n\n\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_starttag(tag,", "\n\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag  : html\nFound an end tag   : html\n\nOutput\n\n\n\n end tag  : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFound\n\n\n\n\n\n\n# create a subclass and", "\n\n\n\n\n\n\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\n\n\n\n\n end tag   : html\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n end tag  : html\n\n\n    The html", "\n\n\nFound a start tag  : html\nFound a end tag  : html\nFound an end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n end tag   : html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_starttag(tag)\n\n\n_starttag(tag,attrs)"], "prompt": "\nQUESTION:\n=====Function Descriptions=====\nHTML\nHypertext Markup Language is a standard markup language used for creating World Wide Web pages.\n\nParsing\nParsing is the process of syntactic analysis of a string of symbols. It involves resolving a string into its component parts and describing their syntactic roles.\n\nHTMLParser\nAn HTMLParser instance is fed HTML data and calls handler methods when start tags, end tags, text, comments, and other markup elements are encountered.\n\nExample (based on the original Python documentation):\n\nCode\n\nfrom HTMLParser import HTMLParser\n\n# create a subclass and override the handler methods\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print \"Found a start tag  :\", tag\n    def handle_endtag(self, tag):\n        print \"Found an end tag   :\", tag\n    def handle_startendtag(self, tag, attrs):\n        print \"Found an empty tag :\", tag\n\n# instantiate the parser and fed it some HTML\nparser = MyHTMLParser()\nparser.feed(\"<html><head><title>HTML Parser - I</title></head>\"\n            +\"<body><h1>HackerRank</h1><br /></body></html>\")\n\nOutput\n\nFound a start tag  : html\nFound a start tag  : head\nFound a start tag  : title\nFound an end tag   : title\nFound an end tag   : head\nFound a start tag  : body\nFound a start tag  : h1\nFound an end tag   : h1\nFound an empty tag : br\nFound an end tag   : body\nFound an end tag   : html\n\n\n.handle_starttag(tag, attrs)\n\nThis method is called to handle the start tag of an element. (For example: <div class='marks'>)\nThe tag argument is the name of the tag converted to lowercase.\nThe attrs argument is a list of (name, value) pairs containing the attributes found inside the tag\u2019s <> brackets.\n\n.handle_endtag(tag)\n\nThis method is called to handle the end tag of an element. (For example: </div>)\nThe tag argument is the name of the tag converted to lowercase.\n\n.handle_startendtag(tag,attrs)\n\nThis method is called to handle the empty tag of an element. (For example: <br />)\nThe tag argument is the name of the tag converted to lowercase.\nThe attrs argument is a list of (name, value) pairs containing the attributes found inside the tag\u2019s <> brackets.\n\n=====Problem Statement=====\nYou are given an HTML code snippet of N lines.\nYour task is to print start tags, end tags and empty tags separately.\n\nFormat your results in the following way:\n\nStart : Tag1\nEnd   : Tag1\nStart : Tag2\n-> Attribute2[0] > Attribute_value2[0]\n-> Attribute2[1] > Attribute_value2[1]\n-> Attribute2[2] > Attribute_value2[2]\nStart : Tag3\n-> Attribute3[0] > None\nEmpty : Tag4\n-> Attribute4[0] > Attribute_value4[0]\nEnd   : Tag3\nEnd   : Tag2\n\nHere, the -> symbol indicates that the tag contains an attribute. It is immediately followed by the name of the attribute and the attribute value.\nThe > symbol acts as a separator of the attribute and the attribute value.\n\nIf an HTML tag has no attribute then simply print the name of the tag.\nIf an attribute has no attribute value then simply print the name of the attribute value as None.\n\nNote: Do not detect any HTML tag, attribute or attribute value inside the HTML comment tags (<!-- Comments -->).Comments can be multiline as well.\n\n=====Input Format=====\nThe first line contains integer N, the number of lines in a HTML code snippet.\nThe next N lines contain HTML code.\n\n=====Constraints=====\n0<N<100\n\n=====Output Format=====\nPrint the HTML tags, attributes and attribute values in order of their occurrence from top to bottom in the given snippet.\n\nUse proper formatting as explained in the problem statement.\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nUse Standard Input format\nANSWER:\n"}}