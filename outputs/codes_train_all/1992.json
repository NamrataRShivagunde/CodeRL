{"1992": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nnext(); // returns \"ab\"\niterator.next(); // returns \"ab\"\niterator.hasNext(); // returns true\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    This example creates", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nnext() // returns \"a\"\n\n\n\n\n#\n# returns \"a\"\n\n\n\nnext()\n# return \"a\"\n#\n\n\n\n\n\n\n\n\n\nnext()\n# returns \"a\"\n\n\n\n\n  Use a function that returns", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nnext()\n\u00a0next()\n\u00a0next()\n\u00a0next()\n\n\u00a0\nConstraints:\n\n1 <= combinationLength <= 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnext()\n\n\n\n\n\n\n    I", "\nUse Call-Based format\nnext()\nnext()\nhasNext()\n\n\u00a0\n\nUse Call-Based format\n\n\n\nnext()\n\n\nnext()\n\u00a0hasNext()\n\n\n\n\n\nnext()\n# param_3 = obj.next()\n\n\n\n\n\n\n\n\n\n\n\nnext()\n\n\n\n\n\n\n    If", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nnext()\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n1 <= combinationLength <= 10^4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nnext()\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nnext()\niterator.next()\niterator.next(); // returns \"ab\"\niterator.hasNext(); // returns false\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse a constructor, which has", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nnext()\nhasNext()\n\nreturn\n\n\u00a0\n\nUse Call-Based format\n\n\n#\n#\n\n\n\n\n\n\n\n\nnext()\n\nUse Call-Based format\nDesign an Iterator class, which has:\n\n\n\n\n\n\nA function next()\u00a0", "\nUse Call-Based format\nnext()\nnext()\nnext()\n\n\n\nUse Call-Based format\n\n\n\nnext()\nnext()\nnext()\nnext()\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nnext(); // returns \"ab\"\n\n\n\n\n    This", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nnext()\nnext()\nnext()\nnext()\nnext()\nnext()\nnext()\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n\nnext(); // returns \"ab\"\n\n\n\n\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nnext(); // returns a string\niterator.next(); // returns a string\niterator.hasNext(); // returns True\n\n\u00a0\nConstraints:\n\n2 <= combinationLength <= 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Now you", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nnext()\n\n\u00a0\nConstraints:\n\n1 <= combinationLength <= 15\n\n1 <= combinationLength <= 16\n\n\n\n\n#\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nnext()\n# returns \"ab\"\n\n\n\n\n    Pre", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nnext(); // returns \"ab\"\n\n\u00a0\nConstraints:\n\n0 <= combinationLength <= 15\n\n\n\n\n\n\n\nnext()\n\n\n\n\n\nnext()\n\n\nUse Call-Based format\nUse a function iterator.\n\n\n\n\n\n\n    Use a class iterator,", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nnext()\n# return \"abc\"\n# return \"ab\"\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nnext()\n# returns \"ab\"\n\n\n\n\n", "\nUse Call-Based format\nnext()\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n1 <= combinationLength <= 2\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nnext()\n\n\u00a0\n\n\n\n\nnext()\n\n\u00a0\n\n\n\n\nnext()\n\n\n\n\n\n\n\n    If you", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nnext()\n\u00a0next()\n\u00a0next()\n\n\u00a0\nConstraints:\n\n1 <= character.length <= 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n\nnext()\n# returns \"ab\"\n\n\n\n\n    I", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nnext(self, \"ab\", 2)\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\nnext()\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nnext()\n\n\n\n\nA function hasNext()\u00a0", "\nUse Call-Based format\nnext()\nnext()\nnext()\nnext()\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n    next()\n        hasNext()\n\n\n\n\n\n\n\n\nnext()\n\n\n\n\nUse Call-Based format\n\n\n\nnext()\n\n\n\nA string character that has a", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nnext(); // returns \"ab\"\niterator.next(); // returns \"ab\"\niterator.hasNext(); // returns true\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnext()\n\n\n\n\n\n    \\b", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nnext()  // returns \"a\"\n\n\u00a0\nConstraints:\n\n1 <= combinationLength <= 15\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nnext()\n\n\n\n\n\n    The \"characters\" argument is", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nnext()\n\u00a0next()\n\u00a0next()\n\n\u00a0\nConstraints:\n\n1 <= combinationLength <= 15\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\nUse Call-Based format\n\n\nnext()\n\n\n\n\n\n# The following two lines are"], "prompt": "\nQUESTION:\nDesign an Iterator class, which has:\n\nA constructor that takes a string\u00a0characters\u00a0of sorted distinct lowercase English letters and a number\u00a0combinationLength as arguments.\nA function next()\u00a0that returns the next combination of length combinationLength\u00a0in lexicographical order.\nA function hasNext() that returns True\u00a0if and only if\u00a0there exists a next combination.\n\n\u00a0\nExample:\nCombinationIterator iterator = new CombinationIterator(\"abc\", 2); // creates the iterator.\n\niterator.next(); // returns \"ab\"\niterator.hasNext(); // returns true\niterator.next(); // returns \"ac\"\niterator.hasNext(); // returns true\niterator.next(); // returns \"bc\"\niterator.hasNext(); // returns false\n\n\u00a0\nConstraints:\n\n1 <= combinationLength <=\u00a0characters.length <= 15\nThere will be at most 10^4 function calls per test.\nIt's guaranteed that all\u00a0calls\u00a0of the function next\u00a0are valid.\nclass CombinationIterator:\n    def __init__(self, characters: str, combinationLength: int):\n    def next(self) -> str:\n    def hasNext(self) -> bool:\n# Your CombinationIterator object will be instantiated and called as such:\n# obj = CombinationIterator(characters, combinationLength)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()\nUse Call-Based format\nANSWER:\n"}}