{"357": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\nInput: seats = [1,2,3,3,4,4,1]\nOutput: 1\n\n\u00a0\n\n   \n       ...\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 1\n\n\u00a0\n\n\n\n\n\n    Output:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return maxDistToClosest(self, seats)\n    \n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: seats = [0,1]\nOutput: 2\n\n\n\nInput", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nseats = [1,0,0]\n\n\n\n#", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        return maxDistToClosest(self, seats)\n\n\n\n\n    pass\n\n\n\n\n\n\n\nInput: seats = [1,0]\n\n\n\n\n\n\nOutput: 4\n\n\n\n\n\nInput: seats", "\nUse Call-Based format\n\n\n\nYou are given an array representing an array representing a row of seats.\n\n\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you are given an", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return self.maxDistToClosest(seats)\n\n\u00a0\n\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n\n\n\n\n    You are given an", "\nUse Call-Based format\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        \n\n\n\n\n\n    return maxDistToClosest(self, seats)\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    seats = [1,2", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n    def minDistToClosest(self, seats: List[int]) -> int:\n        return 3\n\n\u00a0\nConstraints:\n\n   \n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\nseats = [0]\n\n\n\nInput", "\nUse Call-Based format\n\n\n\n\n\nInput: seats = [1,2,3,4,5,6,7,8,9]\nOutput: 1\n\nExplanation:\n\n\n   \n\n\n\n   :\n        pass\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: seats = [1", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n\n   \n        return maxDistToClosest(self, seats)\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: seats = [2,", "\nUse Call-Based format\n\n\n\n\n\nInput: seats = [1,0,0,0,0,0,0]\nOutput: 1\n\n\u00a0\nExplanation:\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\nThe answer is 3.\n\nExample 4:\n\n\n\n\n\n\nInput:", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n\nUse Call-Based format\n\nINPUT:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmaxDistToClosest = maxDistToClosest\n", "\nUse Call-Based format\n\n\n\n\n\nInput: seats = [1,0,0,0]\nOutput: 3\nExplanation:\n\nAlex sits in the first open seat.\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you are given an array representing a row of", "\nUse Call-Based format\n\n\n\n\n\nInput: seats = [1,0,0,1,0,0,1,0,0,1]\nOutput: 1\n\n\u00a0\n\n\n   \n\n\n\n\n   \n        pass\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nmaxDistToClosest:\n\nInput", "\nUse Call-Based format\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n   \n        return maxDistToClosest(self, seats)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmaxDistToClosest(self)\n\nOutput", "\nUse Call-Based format\n\n\n\n\n\n\n\nThe maximum distance to the closest person in the array is 3.\n\n\n\n    def maxDistToSeats(self, seats: List[int]) -> int:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmaxDistToClosest:\n\nOutput:", "\nUse Call-Based format\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n    \n\n\n\n\n\n\n\n\n\n\n   \n        return maxDistToClosest(self, seats)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    seats = [1,2,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nInput: seats = [1,1,1,1,1,1,1]\nOutput: 2\n\n\u00a0\n\n   :\n\n\n\n   :\n                \n        \n\n\n\n\n\n\n\n\n\n\n\nseats = [1]\n\n\n\nInput:", "\n\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n    \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\nOutput: 3\n\n\u00a0\n\n\n\n\n\n\n\nInput: seats = [0,1]\n\n\n\nInput:", "\nUse Call-Based format\n\n\n    def maxDistToClosest(self, seats: List[int]) -> int:\n    \n\n\n\n\n   \n        \n\n\n   \n        return maxDistToClosest(self, seats)\n\n        \n\n\n\n\n\n\n\n\nExplanation:\n\n\n2\n\n\n\nYou are given an array"], "prompt": "\nQUESTION:\nYou are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\u00a0\nReturn that maximum distance to the closest person.\n\u00a0\nExample 1:\n\nInput: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n\nExample 2:\nInput: seats = [1,0,0,0]\nOutput: 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n\nExample 3:\nInput: seats = [0,1]\nOutput: 1\n\n\u00a0\nConstraints:\n\n2 <= seats.length <= 2 * 104\nseats[i]\u00a0is 0 or\u00a01.\nAt least one seat is empty.\nAt least one seat is occupied.\nclass Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}