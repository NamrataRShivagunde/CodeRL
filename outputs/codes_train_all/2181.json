{"2181": {"code": ["\n\n-----Note-----\n\n\n\n\n-----Note-----\n\nThe first example Polycarp plans to test Fakebook under the general case.\n\n\n\n\n\nInput\n5\n2 1 2 1\n\nOutput\n1\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n", "\n\n\n1 4 2 3 2\n\n1 1 2 3\n\n1 1 2 2\n\n1 2 3 3\n\n1 2 3 3\n\n1 1 2\n\n1 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 2 3 4", "\n\n-----Notes-----\n\n\n\n\n-----Notes-----\n\n\n\n\n-----Output-----\n\n\n\n\n1 3 2 2 3 4 5\n\n1 2 3 3 2\n\n1 3 3 3 4 4 4\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n1 2", "\n\n\n\n-----Note-----\n\nThe first example Polycarp plans to test Fakebook under the special kind of load testing.\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n1 2 2 1\n", "\n\n-----Note-----\n\n\n\n\n-----Note-----\n\nYour task is described with the following information:\n\n-----Input-----\n\n\n\n\n-----Output-----\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n-----Notes-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 2 2", "\n\n\n\n-----Notes-----\n\nYour task is designed to use in some cases:\n\n-----Note-----\n\n\nYour task is designed to use for all cases:\n\n\n\n-----Notes-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 2 3 4 4", "\n\n\n\n\n\n-----Note-----\n\nNote:\n\n\n\n\n\n\n\n\n-----Input-----\n\nThe first example Polycarp plans to conduct Fakebook under the new project Fakebook.\n\nThe first line contains n integers a_1, a_2,..., a_{i}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n-----Note-----\n\n\n\n\n-----Note-----\n\nConducting a new project Fakebook.\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\nThe first example Polycarp plans to conduct Fakebook.\n\n\n\n\n\n\n\n1 2 3", "\n\n-----Note-----\n\n\n\n\n-----Output-----\n\nNote:\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n2 1 2 3 3 4 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n", "\n\n-----Note-----\n\n\n\n\n-----Input-----\n\nTechnical and actual\n\n\n\n\n\n\n\n-----Output-----\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 2 3 4 5", "\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n1\n\n2\n3 4 4 3\n\n3\n\n3\n\n1\n\n\n\n1\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n20\n\n", "\n\n-----Note-----\n\n\n\n\n-----Input-----\n\nThe number of requests at each moment in the second line\n\n1 2 3 2\n\n1 2 3 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n1 2 2", "\n\n\n\n-----Note-----\n\nYour task is not yet tested.\n\n-----Note-----\n\n\n\n\n-----Output-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\n", "\n\n-----Note-----\n\n\n\n\n-----Input-----\n\n\nNo more requests for the same time.\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n1\n\n2\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n1 2", "\n\n-----Notes-----\n\nInformation about the most recent version of Polycarp\n\n-----Notes-----\n\n\n\n\n\n-----Notes-----\n\n\n\n\n\n\n\n\n\n\n\n\n-----Notes-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Notes-----\n\n1 2", "\n\n\n\n-----Notes-----\n\nMore information about Polycarp\n\nThe note about the loading is:\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n-----Notes-----\n\n\n\n\n\n\n\n-----Notes-----\n\n", "\n\n-----Note-----\n\n\n\n-----Output-----\n\nThe number of additional requests from the same project Fakebook will be at the end of the current minute.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n1 2", "\n\n\n\n-----Notes-----\n\nNote:\n\nPolycarp plans to test Fakebook under a special kind of load testing\n\n-----Notes-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 2", "\n\n\n\n-----Note-----\n\nThis task will only be executed once and once per minute.\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n1\n\n", "\n\n\n\n-----Note-----\n\nYou can make a request at any time in the first example.\n\n\n\n\n\n\n\n-----Input-----\n\nThe first example Polycarp plans to test Fakebook under new project Fakebook.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Note-----\n\n2"], "prompt": "\nQUESTION:\nPolycarp plans to conduct a load testing of its new project Fakebook. He already agreed with his friends that at certain points in time they will send requests to Fakebook. The load testing will last n minutes and in the i-th minute friends will send a_{i} requests.\n\nPolycarp plans to test Fakebook under a special kind of load. In case the information about Fakebook gets into the mass media, Polycarp hopes for a monotone increase of the load, followed by a monotone decrease of the interest to the service. Polycarp wants to test this form of load.\n\nYour task is to determine how many requests Polycarp must add so that before some moment the load on the server strictly increases and after that moment strictly decreases. Both the increasing part and the decreasing part can be empty (i. e. absent). The decrease should immediately follow the increase. In particular, the load with two equal neigbouring values is unacceptable.\n\nFor example, if the load is described with one of the arrays [1, 2, 8, 4, 3], [1, 3, 5] or [10], then such load satisfies Polycarp (in each of the cases there is an increasing part, immediately followed with a decreasing part). If the load is described with one of the arrays [1, 2, 2, 1], [2, 1, 2] or [10, 10], then such load does not satisfy Polycarp.\n\nHelp Polycarp to make the minimum number of additional requests, so that the resulting load satisfies Polycarp. He can make any number of additional requests at any minute from 1 to n.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the duration of the load testing.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is the number of requests from friends in the i-th minute of the load testing.\n\n\n-----Output-----\n\nPrint the minimum number of additional requests from Polycarp that would make the load strictly increasing in the beginning and then strictly decreasing afterwards.\n\n\n-----Examples-----\nInput\n5\n1 4 3 2 5\n\nOutput\n6\n\nInput\n5\n1 2 2 2 1\n\nOutput\n1\n\nInput\n7\n10 20 40 50 70 90 30\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example Polycarp must make two additional requests in the third minute and four additional requests in the fourth minute. So the resulting load will look like: [1, 4, 5, 6, 5]. In total, Polycarp will make 6 additional requests.\n\nIn the second example it is enough to make one additional request in the third minute, so the answer is 1.\n\nIn the third example the load already satisfies all conditions described in the statement, so the answer is 0.\nUse Standard Input format\nANSWER:\n"}}