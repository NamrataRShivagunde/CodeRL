{"2471": {"code": ["\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nYour company is a professional robber planning to rob houses along a street\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nYou are a professional robber planning\n\n\n\n\nYou are a", "\nUse Call-Based format\nUse Call-Based format\n\n    def rob(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n       ...\n\n\n\n\n\nYou are a professional robber planning to rob houses\n\n\n\n\n\n\n\nYou are a prof", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n0 <= nums[i] <= 100\n\n   \n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\nYour amount you can rob is not known to you.\n\n\n\n\n\nYou are a profession", "\nUse Call-Based format\n\n\n    pass\n\n\n\nUse Call-Based format\n\n\n   \n        pass\n        \n\nYou are a professional robber planning to rob houses along a street\n\n   \n        pass\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n 2 + 3 + 1 = 12\n\n\n\nYou", "\nUse Call-Based format\n\nUse Call-Based format\n\n    @call_based_format\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\nYou are a professional robber planning to rob houses along a street\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nYou are a robber\n\n\n\n\nYou are", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\nYou are a professional robber planning to rob houses along a street.\n\n\n   \n        pass\n\n\n\n\n\n\n\n\nYou are a professional robber planning\n\n\n\n\n\nYou are a prof", "\nUse Call-Based format\nUse Call-Based format\n\n    def rob(self, nums: List[int]) -> int:\n            return 0\n\n\nUse Call-Based format\n\n\n\n   \n        return 0\n\n\n\n   \n\n\n\n\n\n\n\n\nYou have a stashed robber.\n\n\n\n\nYou are a stashed robber\n", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\nYou are a professional robber planning to rob houses along a street.\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\nYou are a", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nExplanation:\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n 1 + 7 + 1 = 12\n\n\nYou are a professional robber\n\n\n\n\nYou are a robber\n\n\n\n\nYou are", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\u00a0\n\n   \n        pass\n\n\n\u00a0\n 9 + 1 = 12\n\n\n\n\n\nYou are a professional robber planning to rob houses\n\n\n\n\nYou are", "\nUse Call-Based format\n\n\n    return 2\n\n\nUse Call-Based format\n\n\n\n\n    def rob(self, nums: List[int]):\n        return nums[i]\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are a prof", "\nUse Call-Based format\n\n\n    return 1\n\n\nThe following examples are available:\n\n\n\n\n    def stashed(self, nums: List[int]) -> int:\n        return 0\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nYou are a professional\n\n\n\n\nyou are a prof", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n0 <= nums[i] <= 100\n\n    def frob(self, nums: List[int]) -> int:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nYou can continue to use this program\n\n\n\n\nYou are a professional", "\nUse Call-Based format\nUse Call-Based format\n\n    def rob(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        pass\n\nYou are not a professional robber planning\n\n\n\n\n\n\n\n\nYou are a robber\n\n\n\nYou are a", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\n\n\n   \n        return self.max_rob(nums)\n\n\n\n\n\n\n\n\n\n\n\n\nYou are robber\n\n\n\n\nYou are a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\nYou have a stashed number of houses to rob.\n\n   \n        pass\n\n\n 1 + 5 + 1 = 12\n\n\n\n\n\n\n\n\n\n\n\nTotal amount you can rob = 1\n\n\n\nYou are", "\nUse Call-Based format\n\n\n    nums: List[int]\n\nUse Call-Based format\n\n\n\n0 <= nums[i] <= 100\n\n   \n\n\n\n        Max amount you can rob = 5 + 3 + 1\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTotal amount you can rob = 1\n\n\n\nYou", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nYou are a professional robber planning to rob houses along a street\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nYou are a professional robber planning.\n\n\n\n\nYou are", "\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def rob(self, nums: List[int]) -> int:\n\nUse Call-Based format\n\nConstraints:\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can rob\n\n\u00a0\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n0 <= nums[i] <= 4\n\nUse Call-Based format\n   \n    pass\n\n\n\n   \n        pass\n\n\n\nYou are a professional robber planning to rob houses\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are a prof"], "prompt": "\nQUESTION:\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n\u00a0            Total amount you can rob = 1 + 3 = 4.\n\nExample 2:\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n\u00a0            Total amount you can rob = 2 + 9 + 1 = 12.\n\n\u00a0\nConstraints:\n\n0 <= nums.length <= 100\n0 <= nums[i] <= 400\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}