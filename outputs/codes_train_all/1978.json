{"1978": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExample 2:\n\nUse Call-Based format\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n# Example 2:", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    pass\n\nExample 2:\n    use Call-Based format\n\n\n\nExample 2:\n\nInput: words = [\"abc\"], pattern = \"abc\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\nExample 3:\n\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    print \"Use Call-Based format\"\n\nExample 2:\n    print self.findAndReplacePattern(words, pattern)\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\nExample 3:\nList of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\nUse Call-Based format\n\nExample 2:\n\n\n\nExample 2:\n\nInput: words = [\"abc\",\"deq\",\"mee\",\"aqq\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou have a list of words", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    pass\n\nUse Call-Based format\n\n\n   \n    pass\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\"aaa\" matches the pattern\n\nExample 2:\n\n\n\n\nYou have a list of words", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    return self.findAndReplacePattern(words, pattern)\n\n\n\n\nExample 2:\n\n   \n    def findAndReplacePattern(self, words, pattern):\n        \n        \n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\n\n    words: List[str", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n    self.findAndReplacePattern(words, pattern)\n\n\n\n   \n    return self.findAndReplacePattern(words, pattern)\n\n\n\n\n\n\n\n\n\n\n\n\u00a0Example 2:\n\n\n\n\n\n\nA word matches the pattern", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    findAndReplacePattern(self, words, pattern)\n\nUse Call-Based format\n\n\n\nExample 2:\n   \n    pass\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse the same pattern, but with the same words.", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n       pass\n\nUse Call-Based format\n\nThe list of words and patterns are in Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nExample 2:\nOutput", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nExample 2:\n\n   \n    findAndReplacePattern(self, words, pattern)\n\n\n\n\nExample 2:\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA word matches the pattern if the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nExample 2:\n\nUse Call-Based format\nExample 3:\n\n\n\n\n\nExample 2:\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n    Let\u00a0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n    findAndReplacePattern(self, words, pattern)\n    \nUse Call-Based format\n\n\n\nExample 2:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe input is a list of words, pattern, and", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nExample 2:\n\nInput: words = [\"abcd\",\"dcd\"]\nOutput: words = [\"abcd\"]\n\n\n\n\n\nExample 2:\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\nYou have a list", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    pass\n\nExample 2:\n    pass\n\n\n\n\nExample 2:\n   \n    findAndReplacePattern(self, words, pattern)\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nWe have a list of words", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.findAndReplacePattern(words, pattern)\n\n\n\n\nExample 2:\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\na -> b -> c -> d -> e -> c\n\n\n\nIf words[i", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n   \n    def findAndReplacePattern(self, words, pattern: str):\n        return words\n\n\n\n\n\n\n\n\nExample 2:\n\nUse Call-Based format\n\n\n\n\n\n\n1 <= words.length <=", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    return findAndReplacePattern(self, words, pattern)\n\nUse Call-Based format\n\n\n\nExample 2:\n   \n    pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n    Words:\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    pass\n\n\n\n\u00a0\n\n    def findAndReplacePattern(self, words: List[str], pattern: str):\n        \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    The list of words in words and pattern", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nExample 2:\nInput: words, pattern\n\n\n\n\n\nExample 2:\n   \n    pass\n\n\n\n\nUse Call-Based format\n\n\n\nExample 2:\n\n\n\n\n\n\n\n    words = [\"abc", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    findAndReplacePattern(self, words, pattern)\n\n\n\n\nExample 2:\n\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\na -> b -> c\n\n\n    Example 2:\n"], "prompt": "\nQUESTION:\nYou have a list of\u00a0words and a pattern, and you want to know which words in words matches the pattern.\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\n(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)\nReturn a list of the words in words\u00a0that match the given pattern.\u00a0\nYou may return the answer in any order.\n\u00a0\n\nExample 1:\nInput: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\nOutput: [\"mee\",\"aqq\"]\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,\nsince a and b map to the same letter.\n\u00a0\nNote:\n\n1 <= words.length <= 50\n1 <= pattern.length = words[i].length\u00a0<= 20\nclass Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        \nUse Call-Based format\nANSWER:\n"}}