{"2500": {"code": ["\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        return len(s)\n\n\u00a0\n\nFunctions:\n\nUse Call-Based format\n\nUse Call-Based format\n\nOptions:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of", "\nUse Call-Based format\n\n\n    maxPower(self, s: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n   :\n\n\n\n\n\n\nGiven a string s, the power of the string is the maximum length of a non-empty substring.\n\n\n\n\n\n\n\nGiven a string s, the", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n        return self.maxPower(s)\n\n\u00a0\n\nFunctions:\n\n   \n\naaaaaaaaaaaaaaaaaaaaaaaaaa\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of", "\nUse Call-Based format\n\n\n    maxPower(self, s: str):\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n        return self.maxPower(s)\n        \n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string s, the power", "\nUse Call-Based format\n\n\n    maxPower(self, s: str) -> int:\n\n\n\n\n\n    maxPower(self, s: str) -> int\n\n\u00a0\n\n\nConstraints:\n\nUse Call-Based format\n\n\n\n\n   :        \n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power", "\nUse Call-Based format\n\n\n    maxPower(self, s: str) -> int:\n\n\n\n\n\u00a0\n\n   \n\n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of", "\nUse Call-Based format\nUse Call-Based format\n\n    maxPower(self, s: str) -> int:\n\n\n\n\n\n   \n\naaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  s = \"abcdcdde", "\nUse Call-Based format\n\n\n    maxPower(self, s: str) -> int:\n\nUse Call-Based format\n\n\n\n   \n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of the string", "\nUse Call-Based format\n\n    maxPower(self, s: str):\n\n\n\n\n\n   \n    return self.maxPower(s)\n\n\n\n\n   \n        return self.maxPower(s)\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of the string", "\nUse Call-Based format\n\n    maxPower(self, s: str) -> int:\n\n\n\n\n\n\n          \n\n\n\n\nExample 5:\n    def maxPower(self, s: str):\n        return 1\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of the", "\nUse Call-Based format\n\n    return self.maxPower(s)\n\n\n\n\n\n    return self.maxPower(s)\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\nExample:\n   \n\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s, the power", "\nUse Call-Based format\nUse Call-Based format\n\n    maxPower(self, s: str) -> int:\n\n\n\n\n\n\n   \n        return self.maxPower(s)\n\n\n\n   :\n        \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of the string", "\nUse Call-Based format\n\n    maxPower(self, s: str) -> int:\n\nUse Call-Based format\n\n\n\n\n   \n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n\n   :\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string s, the", "\nUse Call-Based format\n\n    maxPower(self, s: str):\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\nUsage:\n   \n\n\n\n\n\u00a0\n\n       ...\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a string s, the power of the", "\nUse Call-Based format\n\n    maxPower(self, s: str):\n\nUse Call-Based format\n\n\n\n\n   \n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\nGiven a string s", "\nUse Call-Based format\n\n    def maxPower(self, s: str) -> int:\n        \nUse Call-Based format\n\n\n\n   \n\n\n\n\nUse Call-Based format\n\nClass Solver:\n   \n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s, the power", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n          \n    pass\n\n\u00a0\n\nUsage:\nUse Call-Based format\naaaaaaaaaaaaaaaaaaaaaaaaaa\n\n   :\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power", "\nUse Call-Based format\n\n    maxPower(self, s: str):\n\nUse Call-Based format\n\n\n\n\n   \n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n   \n                \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, the power", "\nUse Call-Based format\n\n    maxPower(self, s: str) -> int:\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n   \n        return s.maxPower()\n\n\n\n\n\n\n\n\n\n\n\ns contains only unique characters.\n\n\n\n\nGiven a string s, the power of", "\nUse Call-Based format\n\n\n    maxPower(self, s: str) -> int:\n\n\n\n\n\n          \n    s = self.name\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a string s, the power of the string is:\n\n\n\n\n\nGiven a string s"], "prompt": "\nQUESTION:\nGiven a string s, the power of the string is the maximum length of a non-empty substring that\u00a0contains only one unique character.\nReturn the power\u00a0of the string.\n\u00a0\nExample 1:\nInput: s = \"leetcode\"\nOutput: 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.\n\nExample 2:\nInput: s = \"abbcccddddeeeeedcba\"\nOutput: 5\nExplanation: The substring \"eeeee\" is of length 5 with the character 'e' only.\n\nExample 3:\nInput: s = \"triplepillooooow\"\nOutput: 5\n\nExample 4:\nInput: s = \"hooraaaaaaaaaaay\"\nOutput: 11\n\nExample 5:\nInput: s = \"tourist\"\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 500\ns contains only lowercase English letters.\nclass Solution:\n    def maxPower(self, s: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}