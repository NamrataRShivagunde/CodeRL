{"384": {"code": ["\nUse Call-Based format\n\n\n    return self.sumSubseqWidths(A)\n\n\n\n\n\n   \n    pass\n\n\n\n\nExample 2:\n   \n    \"\"\"\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nA = [2,1,3]\n\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\nGiven an", "\nUse Call-Based format\n\n\n   ...\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nExample 2:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n\n                \n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExample 2:\nGiven an", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n   \n    pass\n\n\u00a0\nUse Call-Based format\n\n\n\n\u00a0\nUse Call-Based format\n\n    pass\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\nExample 2:\n\n\n\n\n\nGiven an array of integers A", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nExample 2:\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n    pass\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\nGiven an array of integers A, consider all", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\nExample 2:\n   \n       ...\n\n\nUse Call-Based format\n\n\n\n\n\nExample 1:\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\nGiven an array of integers A, consider all", "\n\n\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n   ...\n\nUse Call-Based format1, 2, 3,\n\n\nUse Call-Based format\n\n\n\n\nA[i,j]\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven an array of integers A, consider all non", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n   \n    pass\n\n\n\n\n\u00a0\nUse Call-Based format\n\nExample 2:\n    def sumSubseqWidths(self, A: List[int]):\n        \nUse Call-Based format\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\nA.sumSubseqWidths(A)\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\nExample 2:\n\n    pass\n\n\n\n\n\n\n\n\n\nThe sum of subsequences of A is 6\n\n\n\n\n\nGiven an array of integers A", "\nUse Call-Based format\n\n\n    sumSubseqWidths(self, A: List[int]) -> int\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\nExample 2:\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers A,", "\nUse Call-Based format\n\n\n    def sumSubseqWidths(self, A: List[int]):\n        return A[i]\n\n\n\n\n\n   \n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= A.length <= 20000\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n    sumSubseqWidths(self, A)\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\nExample 2:\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nA:\n    An", "\nUse Call-Based format\n\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Python 3 format\n\n    pass\n\n\n\n\n\n\n\n\n\u00a0\nUse Python-Based format\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n    A, B", "\nUse Call-Based format\n\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers A,", "\nUse Call-Based format\n\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers A, consider", "\nUse Call-Based format\n\n\n    #!python\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven an array of integers A, consider all", "\nUse Call-Based format\n\n\n    sumSubseqWidths(self, A)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\nExamples:\n\n\nUse Python format\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nGiven an array of integers A,", "\n\n\n\n   ...\n\n\nUse Call-Based format\n\n\n   \n   ...\n\n\n\n   \n    pass\nUse Call-Based format\n\n\n\n\n\nA < 2, and A < 3\n\n1, 2, 1, 2, 2, 1, 3, 2, 3, 3, 3, 3\n\n\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nExample 2:\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n1 <= A.length <= 20000\n\n\n\n\nGiven an array"], "prompt": "\nQUESTION:\nGiven an array of integers A, consider all non-empty subsequences of A.\nFor any sequence S, let the\u00a0width\u00a0of S be the difference between the maximum and minimum element of S.\nReturn the sum of the widths of all subsequences of A.\u00a0\nAs the answer may be very large, return the answer modulo 10^9 + 7.\n\n\u00a0\nExample 1:\nInput: [2,1,3]\nOutput: 6\nExplanation:\nSubsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n\n\u00a0\nNote:\n\n1 <= A.length <= 20000\n1 <= A[i] <= 20000\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}