{"1913": {"code": ["\nUse Call-Based format\n\n\n    def prevPerm(self, A: List[int]) -> List[int]:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n\nUse Python-based format\n\u00a0\n\n\n\nSwapping 1 and 3.\n\n\n\n\nSwapping 1 and 3.\n\nExample\n\nGiven an", "\nUse Call-Based format\n\n\n    def prevPerm(self, A: List[int]) -> List[int]:\n\n\n\n\n   \n\n\nSwapping 1 and 3.\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nSwapping 1 and 3.\n\n\n\n\n\n\nGiven an array A of positive integers A of positive", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n    def prevPermOpt(self, A: List[int]):\n       \n\n\nSwapping 1 and 2.\n\nExample 5:\n        \nUse Call-Based format\n\n\n\n\n\n\nSwapping 1 and 2.\n\n\n\n\n\n\n\nGiven an array A of positive integers (not", "\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n    def\n        pass\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\nUse Call-Based format\u00a0\n\n\n\n\n\n\n\nA is an array of positive integers\n\n\n\nGiven an array A of positive integers A", "\nUse Call-Based format\n\n\n    def prevPermOpt(self, A: List[int]) -> List[int]:\n\n\n\n\n   \n\n\nSwapping 1 and 3.\n\nExample 5:\n        \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nA is a list of positive integers\n\n\n\nGiven an array A", "\nUse Call-Based format\n\n\n    def prevPermOpt(self, A: List[int]) -> List[int]:\n        \n\n\n\n\n           \n\n\n   \n    return self.prevPermOpt1(A)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of positive integers (not", "\nUse Call-Based format\n\n\n    def prevPerm(self, A: List[int]):\n        return A[0]\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThe following is an example:\n\n\n\nGiven an array A of positive integers (not", "\nUse Call-Based format\nUse Call-Based format\n\n    def perm(self, A: List[int]) -> List[int]:\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n    Given an array A of positive integers", "\nUse Call-Based format\n\n\n    def prevPerm(self, A: List[int]):\n        \"\"\"\nUse Call-Based format\n\n\n\n          \n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nGiven an array A of positive integers:\n\nExample\nGiven an array", "\nUse Call-Based format\n\n\n    prevPermOpt1(self, A):\n        return A\n\n\n\n\n\n\n    def prevPermOpt2(self, A):\n        return A\n\n\n\u00a0\n\n\n\n   \n\n\n\n\n\n\n\nSwapping 1 and 3.\n\n\n\n\n\n\nGiven an array A of positive integers (not", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n\n\nSwapping 1 and 2.\n\nExample 5:\n    def prevPermOpt1(self, A: List[int]) -> List[int]:\n                       \n\n\n\n\n\n\n\n\nSwapping 1 and 3.\n\n\n\n\n\n    Input", "\nUse Call-Based format\n\n\n    def prevPermOpt(self, A: List[int]) -> List[int]:\n\n\n\n\n\n\n   \n\n\n\n   \n\nUse Call-Based format\nUse Call-Based format\u00a0\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\nSwapping 1 and 3.\n\nExample\n\nGiven an", "\nUse Call-Based format\n\n\n    prevPermOpt1(self, A):\n        return A\n\n\n\n\n\n   \n    pass\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\nA[i] <= A[j]\n\n\n\n\nGiven an array A of", "\nUse Call-Based format\nUse Call-Based format\n\n    def prevPermOpt(self, A: List[int]) -> List[int]:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA is a list of positive integers.\n\n\n\nGiven an array A of", "\nUse Call-Based format\n\n\n    def prevPermOpt(self, A: List[int]) -> List[int]:\n\n\n\n\n\n          \n\n\n   \n    return self.prevPermOpt1(A)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of positive integers (not", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n   \n    return self.prevPermOpt1(A)\n\n\n\n\n\u00a0\nUse Call-Based format\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA is a list of positive integers\n\n\n\nGiven an array A of", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n    def prevPermOpt(self, A: List[int]):\n   \n\n\n\n    def    \nUse Call-Based format\n\n\n\n\n\nSwapping 1 and 3.\n\n\n\n\nSwapping 1 and 3.\n\nExample 5:\n\nGiven", "\n\n\n\n    def prevPermOpt(self, A: List[int]) -> List[int]:\n        \nUse Call-Based format\n\n\n\n\n    def\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\nSwapping 1 and 3.\n\n\n\n\nSwapping 1 and 3.\n\nExample\nGiven an array", "\nUse Call-Based format\n\n\n    def prevPermOpt(self, A: List[int]) -> List[int]:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nSwapping 1 and 3.\n\nExample\nGiven an array", "\nUse Call-Based format\n\n\n        def prevPermOpt1(self, A):\n            return A[i]\n\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\nA is an array of positive integers\n\n\n\nGiven an array A of"], "prompt": "\nQUESTION:\nGiven an array A of positive integers (not necessarily distinct), return the lexicographically largest permutation that is smaller than A, that can be made with one swap (A swap exchanges the positions of two numbers A[i] and A[j]).\u00a0 If it cannot be done, then return the same array.\n\u00a0\nExample 1:\nInput: [3,2,1]\nOutput: [3,1,2]\nExplanation: Swapping 2 and 1.\n\nExample 2:\nInput: [1,1,5]\nOutput: [1,1,5]\nExplanation: This is already the smallest permutation.\n\nExample 3:\nInput: [1,9,4,6,7]\nOutput: [1,7,4,6,9]\nExplanation: Swapping 9 and 7.\n\nExample 4:\nInput: [3,1,1,3]\nOutput: [1,3,1,3]\nExplanation: Swapping 1 and 3.\n\n\u00a0\nNote:\n\n1 <= A.length <= 10000\n1 <= A[i] <= 10000\nclass Solution:\n    def prevPermOpt1(self, A: List[int]) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}