{"1848": {"code": ["\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n// Use Call-Based format\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    [1,2", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n# RandomizedCollection collection = new RandomizedCollection();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use Call-Based", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n// Set the collection of elements to an empty collection.\ncollection = RandomizedCollection()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Return 1\ncollection.insert(1);\n\n\n\n\n", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    insert(self, val):\n        \"\"\"\n        Inserts a value to the collection.\n        \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Collection:", "\n\nUse Call-Based format\n\n\n\n\n\n   ...\n\n\n\n\n\n\n\n\n\n\n\n   \n   ...\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n# Set a random element.\n\nparam_1:\n       \n\n\n\n\n\n\n\n\n\n\n\n    <A>", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    insert(1):\n        # Returns true if the collection did not contain 1.\n    remove(1):\n        # Returns true if the collection did not contain 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    I have", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nInsert an item to the collection.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninsert(1,2)\n\ninsert(2)\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRandomizedCollection\n    class RandomizedCollection:\n    __init__(self):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use a data", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    insert(1)\n    remove(1)\n    getRandom(1)\n    getRandom(2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    {\n", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n    insert(val) -> bool\n    remove(val): -> bool\n   \n\n\n\n\n\n// Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Inserts 1 to the", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    insert(self, val):\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    remove(self) -> bool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example 2", "\nUse Call-Based format\n\n\n\n\n\nRandomizedCollection(collection)\n\n\nReturns:\nint\n\n\n\n\n\ninsert(1,2)\n\nremove(1):\ninsert(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use Call-Based format:", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Inserts 1 to the collection. Inserts 2 to the", "\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\ninsert(1)\nremove(1)\nremove(2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \"\"\"", "\n    <EOS>\n\n\n    [1,2,3,4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    insert(1):\n       \n\n\n\n\n    [", "\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsert a random value to the collection.\n\nremove(val):\n    Returns true.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Inserts 1", "\n\n\n\n\n    RandomizedCollection()\n\n\nExample:\n\n    RandomizedCollection()\n\nExamples:\n\n\n// Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use a data", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n# This collection is a call-based collection.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Inserts 1 to the collection", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n# Set up your data structure\n\n# Set up your data structure\n\nRandomizedCollection collection = new RandomizedCollection()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use Call-Based format", "\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    insert(self, val: int)\n    remove(self, val: int)\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    for i in range("], "prompt": "\nQUESTION:\nDesign a data structure that supports all following operations in average O(1) time.\nNote: Duplicate elements are allowed.\n\n\ninsert(val): Inserts an item val to the collection.\nremove(val): Removes an item val from the collection if present.\ngetRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.\n\n\n\nExample:\n\n// Init an empty collection.\nRandomizedCollection collection = new RandomizedCollection();\n\n// Inserts 1 to the collection. Returns true as the collection did not contain 1.\ncollection.insert(1);\n\n// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\ncollection.insert(1);\n\n// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\ncollection.insert(2);\n\n// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\ncollection.getRandom();\n\n// Removes 1 from the collection, returns true. Collection now contains [1,2].\ncollection.remove(1);\n\n// getRandom should return 1 and 2 both equally likely.\ncollection.getRandom();\nclass RandomizedCollection:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n    def insert(self, val: int) -> bool:\n        \"\"\"\n        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n        \"\"\"\n    def remove(self, val: int) -> bool:\n        \"\"\"\n        Removes a value from the collection. Returns true if the collection contained the specified element.\n        \"\"\"\n    def getRandom(self) -> int:\n        \"\"\"\n        Get a random element from the collection.\n        \"\"\"\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()\nUse Call-Based format\nANSWER:\n"}}