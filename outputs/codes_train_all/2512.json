{"2512": {"code": ["\n    # TODO:\n        pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nExample 2:\n\nclass Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n    email = self", "\n    def numUniqueEmails(self, emails: List[str]):\n        return len(emails)\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\nExample 3:\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n1 <= i <= 100\nif", "\n    def isUniqueEmails(self, emails: List[str]) -> bool:\u00a0\n\n\n\n\n\u00a0\n\n\n\nExample 2:\n\nInput:\n\n    emails:\n   \n\n\n\n\nExample 2:\n\n\n    numUniqueEmails(self, emails)\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\nInput:", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        return len(emails)\n\n\n\n\n\n\n\n\n\nExample 2:\n\nUse Call-Based format\n\n   ...\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\n1 <= i < len", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        \"\"\"\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nExample 2:\n\ninput: emails\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\nfoo@bar@example.com\n\n\n", "\n    return self.numUniqueEmails(emails)\n\n\u00a0\u00a0\n\n\n\n\n\n\n   \n    numUniqueEmails(self, emails)\n\n\n\n   \n    numUniqueEmails(self, emails)\n\n\n\u00a0\n\n\n\u00a0\n\n\n\nExample 2:\n\nexample 1:\n\n\n\n\n\n\n    Emails are sent to", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        \n\n\n\n\n\n\n\n\nExample 2:\n\nInput:\n\n    emails: List[str]\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n%email@leetcode", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n\n\n\n\n\n\n\n\n   \n    numUniqueEmails(self, emails)\n\n\n\n\nExample 2:\n\n   \n\n\n\n\u00a0\n\u00a0\n\n\n\n\n\n\n\nexample 2:\n\n\nExample 2:\n\n\n\n1 <= i <= 100\n", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        \n\n\n\nUse Call-Based format\n\n\n\n\n\n\nExample 2:\n\n   \n\n\n\n\nExample 2:\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\nA list of emails are sent", "\n    @numUniqueEmails\n    @numUniqueEmails(self, emails: List[str]) -> int\n\u00a0\n\n\n\n\n\n\n\nExample 2:\n\nExample 3:\n\n   \n\n\n\n\nExample 2:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n1 <= i <= 100", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n       ...\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\nExample 2:\n\n   \n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n    Emails are unique to", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        \n\n\n\n\n\n\n\n\nExample 2:\n\ninput: [email]\nOutput: 1\n\nExample 3:\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\nsix.m", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        return len(emails)\n\n\n\n\n\n\n\n\n\nExample 2:\n\n    pass\n\n\n\n\nExample 2:\n\n    pass\n\n\n\u00a0\n\n\n\n\n\n\n\n\nExample 2:\n\nin email:\n\n\n\n\n\ni = 1", "\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        return len(emails)\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\nExample 2:\n\nInput:\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\nExample 2:\n\ntest@leetcode.com\n\n\n\nInput:", "\n    print(self.numUniqueEmails(emails))\n    \n\n\n\nUse Call-Based format\n\n\u00a0\n\n\nExample 2:\n\nInput: emails\n\nOutput: 1\n\n\nExample 3:\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\nInput: emails\n", "\n    # TODO:\n    # TODO:\n        # TODO:\u00a0\u00a0\u00a0\n\u00a0\n\n\n\n\n\u00a0\n\n\n\nExample 2:\n\n    self.numUniqueEmails(emails)\n\n\n\n\nExample 2:\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n    Emails will be forwarded to each local address", "\n    def numUniqueEmails(self, emails: List[str]):\n        \u00a0\u00a0\n\n\n\n\n\n\n\n\nExample 2:\n\n    numUniqueEmails(self, emails)\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= emails.length <= 100\n\nExample 2:\n\n\n\nList of", "\n    # Use Call-Based format\n    numUniqueEmails = 0\n\n\u00a0\n\n\n\n\n\n\n\nExample 2:\n\nclass Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\ni = 1\nInput", "\n    # TODO: implement this\n\n\n\n    class Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\nExample 2:\n\n\n\n\n\n\nExample 2:\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\nInput:", "\n    # TODO:\n        # TODO:\n        # TODO:\n\n\n\n\n\n\n\n# Note:\n\n\n\n   \n    # TODO:\n\n\n\n\n\nExample 2:\n\n   \n    # TODO:\n\n\n\u00a0\u00a0\n\n\n\n\n\n\n\n\n\nExample 2:\n\ntest@leetcode.com\n\n\nInput"], "prompt": "\nQUESTION:\nEvery email consists of a local name and a domain name, separated by the @ sign.\nFor example, in alice@leetcode.com,\u00a0alice is the local name, and leetcode.com is the domain name.\nBesides lowercase letters, these emails may contain '.'s or '+'s.\nIf you add periods ('.') between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.\u00a0 For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.\u00a0 (Note that this rule does not apply for domain names.)\nIf you add a plus ('+') in the local name, everything after the first plus sign will be\u00a0ignored. This allows certain emails to be filtered, for example\u00a0m.y+name@email.com\u00a0will be forwarded to\u00a0my@email.com.\u00a0 (Again, this rule does not apply for domain names.)\nIt is possible to use both of these rules at the same time.\nGiven a list of emails, we send one email to each address in the list.\u00a0\u00a0How many different addresses actually receive mails?\u00a0\n\u00a0\n\nExample 1:\nInput: [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation:\u00a0\"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails\n\n\u00a0\nNote:\n\n1 <= emails[i].length\u00a0<= 100\n1 <= emails.length <= 100\nEach emails[i] contains exactly one '@' character.\nAll local and domain names are non-empty.\nLocal names do not start with a '+' character.\nclass Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}