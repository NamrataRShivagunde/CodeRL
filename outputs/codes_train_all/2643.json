{"2643": {"code": ["\nsymmetric_difference()\n\nsymmetric_difference(set(\"Rank\"))\nset(['a', 'e', 'H'])\n\n\n.symmetric_difference()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference(\"Rank\")\n\nset(\"Rank\")\n\n\n\n\n\nset(['c',", "\nsymmetric_difference()\nsymmetric_difference()\nset([1, 2, 3, 4, 5])\n\n=Function Description=====\n\n\n\n\nset(\"Rank\")\nset(['a', 'e', 'H'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset(['a'])\n\n\n>>> print", "\nsymmetric_difference(set(\"Rank\"))\nset(['c', 'e', 'H', 'k'])\n\n\n\n\nset(['c', 'e', 'H', 'k'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset(\"Hacker\")\n\n\n\n\n\n\n\nset(['a', 'b',", "\nsymmetric_difference()\n\nsymmetric_difference({\"Rank\":1})\nset(['a', 'e', 'H', 'r', 'k'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference()\n\nset(\"Rank\")\nset(\"Rank\")\n\n\n\n\n\n\n\nset(['H', 'e", "\nsymmetric_difference()\nsymmetric_difference(set(\"Rank\"))\nset(['e', 'H', 'k'])\n\n\nFunction Description=====\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference()\n\nsymmetric_difference()\n\n\n\n\nsymmetric_difference()\n\n\n\n\n\nset(['a',", "\nsymmetric_difference()\n\n=====Usage Statement=====\n\n>>> print set(\"Hacker\")\nset(['Hacker'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference()\n\nset.symmetric_difference()\n\n\n\n\n\n\n\nset([0, 1])\nset([", "\nsymmetric_difference(set())\nset(['a', 'e', 'H', 'r', 'k'])\n\n=Function Definitions=====\n\n\n\n\n\n\n\n\n\n\n\nset(\"Hacker\")\n\n\n\n\n\n\n\n\nset()\n\nsymmetric_difference()\n\n\n\n\n\n\nset(['a', 'c',", "\nsymmetric_difference()\n\nNote:\nsymmetric_difference()\n\n=====Function Parameters=====\n\n\nsymmetric_difference()\n\nset(\"Hacker\")\nset(['Hacker'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Operator Description=====\n\n\n\n\n\n=====Output Format=====", "\n=====Function Description=====\nGeneral Usage:\nset.symmetric_difference()\n\n\n\n\n\n\n>>> s = set(\"Rank\")\nset(['a', 'c', 'e', 'H'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset(\"Hacker\")\n\nset([2", "\nsymmetric_difference\n\n=====Function Descriptions=====\nset([\"Rank\", \"Hacker\", \"French\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference()\n\nsymmetric_difference()\n\n=====Function Descriptions=====\n\n\n\n\n\n\nset(\"Rank\")\nset(['h", "\nsymmetric_difference()\n\nsymmetric_difference(set())\nset(['Hacker'])\n\nQUESTION:\n=====Function Description=====\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference()\n\n\n\nset(\"Hacker\")\n\n\n\n\n\n\n\nset(\"Rank\")\nset(['", "\nsymmetric_difference()\n\nsymmetric_difference(set(['a', 'b', 'c', 'e', 'H', 'r']))\nset([])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.symmetric_difference()\n\n>>> print set\nset\n\n\n\n\nset(['c',", "\nsymmetric_difference()\n\nsymmetric_difference()\nset([0, 1, 2, 3])\n\n=Function Definitions=====\n\n\nset(\"Hacker\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset(['a', 'b', 'c', 'k'])\n\n\n\n\n\n\n\n\n\nSAMPLE:", "\nsymmetric_difference()\n\nThe following sets are not immutable.\n\nsymmetric_difference()\n\nThe set is immutable.\n\n\n\n\n\n\n\nset(['c', 'e', 'H'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference()\n\n\n\n\n\n\n>>> print s.sym", "\nsymmetric_difference(set(\"Rank\"))\nset(['H', 'e', 'H', 'R'])\n\n\n\n\nset(\"Rank\")\nset(['H', 'e', 'H', 'k'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset(\"Rank\")\n\n\n\n\nset(['H', 'e", "\nsymmetric_difference()\n\nsymmetric_difference(\"Rank\")\nset(['a', 'e', 'H', 'k', 'H'])\n\n\n\n\n\n\n\n\n\n.symmetric_difference()\n\n\n\n\n\n\n\n\n\n\n\n\nset(\"Rank\")\nset(['Rank'])\n\n\n\n\n\n\n\n\n\n>>> print s", "\nsymmetric_difference(\"Rank\", \"French\", \"Hacker\")\nset(\"Rank\", \"Hacker\")\n\n\nFunction Description=====\n\nset(\"Rank\")\nset(\"Hacker\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset\nset\nset\n\n\n\nset\n\nset(['H', '", "\nsymmetric_difference()\n\nsymmetric_difference(\"Rank\", set(\"French\"))\nset(['H', 'e', 'H', 'r'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference(\"Rank\")\n\nset(\"Rank\")\n\n\n\n\n\n\n\n\n\nset(\"French\")\nset", "symmetric_difference()\nsymmetric_difference()\nsymmetric_difference()\n\nFunction Descriptions=====\n\n\nset(['a', 'c', 'e', 'H'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset(\"Hacker\")\n\n\n\n\n\n\nset(\"Rank\")\n\n\n\n\n>>> print s", "\nsymmetric_difference()\n\nsymmetric_difference(set(['a', 'b', 'c', 'd', 'b', 'd', 'c']))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsymmetric_difference(\"Rank\")\n\nset(\"Rank\")\n\n\n\n\n\n\n\nset(\"Hacker\")\nset(["], "prompt": "\nQUESTION:\n=====Function Descriptions=====\n.symmetric_difference()\n\nThe .symmetric_difference() operator returns a set with all the elements that are in the set and the iterable but not both.\nSometimes, a ^ operator is used in place of the .symmetric_difference() tool, but it only operates on the set of elements in set.\nThe set is immutable to the .symmetric_difference() operation (or ^ operation).\n\n>>> s = set(\"Hacker\")\n>>> print s.symmetric_difference(\"Rank\")\nset(['c', 'e', 'H', 'n', 'R', 'r'])\n\n>>> print s.symmetric_difference(set(['R', 'a', 'n', 'k']))\nset(['c', 'e', 'H', 'n', 'R', 'r'])\n\n>>> print s.symmetric_difference(['R', 'a', 'n', 'k'])\nset(['c', 'e', 'H', 'n', 'R', 'r'])\n\n>>> print s.symmetric_difference(enumerate(['R', 'a', 'n', 'k']))\nset(['a', 'c', 'e', 'H', (0, 'R'), 'r', (2, 'n'), 'k', (1, 'a'), (3, 'k')])\n\n>>> print s.symmetric_difference({\"Rank\":1})\nset(['a', 'c', 'e', 'H', 'k', 'Rank', 'r'])\n\n>>> s ^ set(\"Rank\")\nset(['c', 'e', 'H', 'n', 'R', 'r'])\n\n=====Problem Statement=====\nStudents of District College have subscriptions to English and French newspapers. Some students have subscribed to English only, some have subscribed to French only, and some have subscribed to both newspapers.\n\nYou are given two sets of student roll numbers. One set has subscribed to the English newspaper, and one set has subscribed to the French newspaper. Your task is to find the total number of students who have subscribed to either the English or the French newspaper but not both.\n\n=====Input Format=====\nThe first line contains the number of students who have subscribed to the English newspaper.\nThe second line contains the space separated list of student roll numbers who have subscribed to the English newspaper.\nThe third line contains the number of students who have subscribed to the French newspaper.\nThe fourth line contains the space separated list of student roll numbers who have subscribed to the French newspaper.\n\n=====Constraints=====\n0 < Total number of students in college < 1000\n\n=====Output Format=====\nOutput total number of students who have subscriptions to the English or the French newspaper but not both.\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nUse Standard Input format\nANSWER:\n"}}