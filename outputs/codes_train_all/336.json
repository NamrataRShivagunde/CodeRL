{"336": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n        minSteps(self, s, t)\n\n\u00a0\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\ns and t contain the same length\n\n\n\n\n\n\n\ns = \"b\"", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n    minSteps(self, s, t):\n\n   \n        return 0\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t.\n\n\n\n\n\nGiven two equal-size strings s and t", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n        return 5\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n        return 1\n\n\u00a0\nConstraints:\n\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def maxSteps(self, s: str, t: str) -> int:\n\n   \n    minSteps(self, s, t)\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = 'ab', 'b', '", "\nUse Call-Based format\n\n\n    def minSteps(self, s: str, t: str):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n    def maxSteps(self, s: str, t: str):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\nInputs:\n   \n\ns and t contain lower case English letters only.\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t. The first", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n\n   \n\n\n\n    def maxSteps(self, s: str):\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    If s is anagram of", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n\n   \n\n\n\n   \n    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t.\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    def maxSteps(self, s: str, t: str):\n\n    return self.minSteps\n\n\n\n   \n    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t. Use", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def maxSteps(self, s, t: str):\n        return 1\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t.", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    minSteps(self, s, t)\n\n\u00a0\n\nUse Call-Based format\n\nReturns:\n\n\n\n\n\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n \u00a0\n\n    :param s:", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n        return 1\n\n\u00a0\n\nConstraints:\n\nUse Call-Based format\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"ab\", \"bc\",", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n        return 2\n\n\u00a0\nConstraints:\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t.", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n    def maxSteps(self, s: str, t: str):\n\n   \n\n\n\n    def maxSteps(self, s: str, t: str):\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n    def maxSteps(self, s, t: str):\n        return s.length\n\nUse Call-Based format\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"b\", \"a\", \"e", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    minSteps(self, s, t)\n\n\u00a0\n\n\n\n\n\n   \n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t.\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n        return s.length\n\nUse Call-Based format\n\n\n\n\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven two equal-size strings s and t.\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def maxSteps(self, s: str, t: str):\n\n   \n    return self.minSteps\n\n\n\n   :\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\ns = \"a\"\nt = \"b", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def maxSteps(self, s: str, t: str) -> int:\n\n\u00a0\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe two strings s and t must be identical. Given"], "prompt": "\nQUESTION:\nGiven two equal-size strings s and t. In one step you can choose any character of t and replace it with another character.\nReturn the minimum number of steps to make t\u00a0an anagram of s.\nAn\u00a0Anagram\u00a0of a\u00a0string\u00a0is a string that contains the same characters with a different (or the same) ordering.\n\u00a0\nExample 1:\nInput: s = \"bab\", t = \"aba\"\nOutput: 1\nExplanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.\n\nExample 2:\nInput: s = \"leetcode\", t = \"practice\"\nOutput: 5\nExplanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.\n\nExample 3:\nInput: s = \"anagram\", t = \"mangaar\"\nOutput: 0\nExplanation: \"anagram\" and \"mangaar\" are anagrams. \n\nExample 4:\nInput: s = \"xxyyzz\", t = \"xxyyzz\"\nOutput: 0\n\nExample 5:\nInput: s = \"friend\", t = \"family\"\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 50000\ns.length == t.length\ns and t contain lower-case English letters only.\nclass Solution:\n    def minSteps(self, s: str, t: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}