{"1835": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\u00a0\nReturn all non-negative integers of length n\n\n\nReturns all non-negative integers of length n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nReturn all non-negative integers of length n", "\nUse Call-Based format\n\n\n\nReturn all non-negative integers of length n\n\nUse Call-Based format\n\n\n\n   \n    return [0]\n\nUse Call-Based format\n\n\n   \n        print(self)\n\nReturn all non-negative integers of length n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn all non-negative integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nReturn all non-negative integers of length n and k\n\nUse Call-Based format\n\n\n\n   \n\n\nReturn all non-negative integers of length n\n\n\n   \n\nReturn all non-negative integers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n    Return all", "\nUse Call-Based format\n\n\nUse Call-Based format\nReturn the number of consecutive digits that differ from k\n\n\n\n\nreturn numsSameConsecDiff(self, n, k)\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 2\nk = 3", "\n\n\n\n    return [n, k]\n\nUse Call-Based format\n\n\n\n\n\n\n1 <= n <= 3\n0 <= k <= 2\n1 <= k <= 3\n\n\u00a0\n\nUse Python-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nReturn all non-negative integers of length n\n\n\n\n\n\nReturn", "\nUse Call-Based format\n\n\nReturns:\n\nlist of integers\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\nreturn all non-negative integers\n\n\u00a0\n\n\nReturns:\n\n\n\n\n\n\n\n\n\nReturn all non-negative integers of length n\n\n\n\n\n\nReturn all non-negative integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\nOutput:\nReturn all non-negative integers of length n\n\n\u00a0\nConstraints:\n\n0 <= n <= 9\n1 <= k <= 9\n\nConstraints:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn all non-negative integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nReturn all non-negative integers of length n with the given k.\n\n\n\n\n   \n\nReturn all non-negative integers of length n\n\n\n   \n    pass\nReturn all non-negative integers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn all non-negative integers of length", "\nUse Call-Based format\n\n\n    return self.numsSameConsecDiff(n, k)\n\n\n\n\n   \nreturn self.numsSameConsecDiff(n, k)\n\n\u00a0\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nReturn all non-negative integers\n\n\u00a0\n\nReturn", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n    def numsSameConsecDiff(self, n, k: int):\n\n\u00a0\nConstraints:\n\n0 <= n <= 1\n\u00a0\n\nConstraints:\n\nk <= 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn all non", "\nUse Call-Based format\n\n\n    def numsSameConsecDiff(self, n, k):\n        return [n, k]\n\n\n\n\n\n   \n    return [n, k]\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nReturn all non-negative integers of length n\n\n\u00a0\n\nReturn", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    return self.numsSameConsecDiff(n, k)\n\nUse Call-Based format\n\n\n   \n    return numsSameConsecDiff(n, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturns all non-negative", "\n\nUse Call-Based format\n\n\nReturns:\n\n1 <= n <= 9\n1 <= k <= 9\n\n\n\n\nreturn numsSameConsecDiff(n, k)\n\n\u00a0\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\nReturn all non-negative", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n   \n    return numsSameConsecDiff(n, k)\n\n\n\nReturn all non-negative integers of length n and k\n\n\n   \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nReturn all non-negative integers of length n\n\n\n\nReturn all", "\n\n\n\n    def numsSameConsecDiff(self, n, k: int):\n        return [n - k + 1]\n\n\n\n\n\n\n\u00a0\nOutput:\n\n\u00a0\n\n\n\n\n\n   \n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nReturns:\n\n\n\n    n =", "\nUse Call-Based format\n\n\n    return self.numsSameConsecDiff(n, k)\n\n\n\n\n\nreturn self.numsSameConsecDiff(n, k)\n\n\u00a0\n\n\n\n\n   \n    return self.numsSameConsecDiff()\n\n\n\n\n\n\n\n\n\n\n\n\nReturn all non-negative integers\n\nReturn", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n\n\n\n\n   \n\nReturn all non-negative integers of length n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nReturn all non-negative", "\nUse Call-Based format\n\n\n\nReturn all non-negative integers of length n and k\n\n\n\n\n   \n    return self.numsSameConsecDiff(n, k)\n\n\u00a0\nReturn all non-negative integers of length n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn all non-negative integers of length n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nReturn all non-negative integers of length n\nUse Call-Based format\n\n\n\n   \nreturn self.numsSameConsecDiff(n, k)\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nReturn all non-negative integers of length", "\nUse Call-Based format\n\n\n\nReturn all non-negative integers of length n with the given k, including any leading zeroes.\n\n\n\n\n   \n\nReturn all non-negative integers of length n with the given k.\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\nReturn all non-negative integers\n\n\n\nReturn all non"], "prompt": "\nQUESTION:\nReturn all non-negative integers of length n such that the absolute difference between every two consecutive digits is k.\nNote that every number in the answer must not have leading zeros except for the number 0 itself. For example, 01 has one leading zero and is invalid, but 0 is valid.\nYou may return the answer in any order.\n\u00a0\nExample 1:\nInput: n = 3, k = 7\nOutput: [181,292,707,818,929]\nExplanation: Note that 070 is not a valid number, because it has leading zeroes.\n\nExample 2:\nInput: n = 2, k = 1\nOutput: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n\nExample 3:\nInput: n = 2, k = 0\nOutput: [11,22,33,44,55,66,77,88,99]\n\nExample 4:\nInput: n = 2, k = 1\nOutput: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n\nExample 5:\nInput: n = 2, k = 2\nOutput: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]\n\n\u00a0\nConstraints:\n\n2 <= n <= 9\n0 <= k <= 9\nclass Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}