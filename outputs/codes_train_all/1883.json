{"1883": {"code": ["\n\n\n2. (0,0,0)\n\u00a0\n\n\n\n2. (0,0,0,0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n:\n\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n\n: [[0,0,0,0],", "\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n:\n\n\n:\nInput: [2,2,2,2]\nOutput: 3\n:\n:\n\n\n\n\n\n0\n\n: [[0,0,0,0", "\n\n\n\n\n\n0,1,2,3,4,5,5\n\n\n0,1,1,2,3,4,5\n\n:\n:\n0,0,0,0]\nOutput: 2\n\n\n\n\n:\n\n\n\n\n\n\n0\n\n\n\n\nOutput: 4\n\n: [[1,0,0,", "\n\n\n\u00a0\u00a0\u00a0\n\n\n\n\n\u00a0\n\u00a0\n0 represents an empty grid.\n1 represents an empty grid.\n2 represents an empty grid.\n\u00a0\n\n:\n\n:\n: [[0,0,0]]\nOutput: 2\n:\n\n\n1\n\n\n\n\n\n: [[0,0,0,0],[", "\n\n\n1. (0, 0, 1, 0, 0, 0)\n2. (0, 0, 0, 0, 0)\n\u00a0\n\n\n\n\n\n\n\n\n:\n\n\n\n: [[1,0,0,0]]\nOutput: 1\n\n\n\n\n\n\n\n0\n\n\n: [[1,0,0,0],", "\n\n\n\n\n\n0,0,0,0,0,0,0,0,0,0,0\n\n\n\n\n\n:\n[0,0,0,0]]\nOutput: 2\n\nExplanation:\n\n\n:\n\n\n\n\n2\n\n\n0\n\u00a0\n\n\n\n: [[0,0,0,0],[", "\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n:\n\n\n\n: [[0,0,0,0]]\nOutput: 2\n:\n:\n\n\n1\n\n0\n\n0\n\n\n: [[0,0,0,", "\u00a0\u00a0\n\u00a0\n\n\n\n\n\n\n0,1,2,3,-1,1,2,3,3,3,1,2,2,2,2\n\n:\n:\n\n:\n:\n: [[1,0,0,0]]\nOutput: 4\n\n\n\n\n\n\n\n\n\n\n: [[0,0", "\n\n\n1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n\n\n\n\n\n\n\n:\n\n\n\n\n: [[0,0,0,0]]\nOutput: 3\n: []\n\n\n\n\n\n\n0,0\n\n:\n\n\n: [[0,0", "\u00a0\n\n\n\n\n\n2.\n1.\n2.\n3.\n2.\n2.\n3.\n2.\n1.\n2.\n3.\n2.\n2.\n\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n0,0,0,0\n\n\n\n: [[1,0,0,0", "\n\n\n\n\n\n1,2,3,4,5,6,7,6,7\n\n\n\n0,1,2,3,4,5\n\n:\n:\n0,0,0,0]\nOutput: 2\n\n\n\n:\n:\n\n\n\n\n\n0,2,3\n\n\n\n: [[1,0,0", "\n\n\n\n\n\n0,1,2,3,4,5,7\n\n\n\n\n:\n:\nInput: [[1,0,0,0]]\nOutput: 2\n\nExample:\nInput:\n0,1,2]\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n: [[1,0,0,0],[0", "\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\nInput: [0, 0, 0, 0]\nOutput: 0\n\n:\n:\n\n\n2\n\n\n\n\n\n\n: [[0,0,0,", "\n\n\u00a0\n\n\n\n\n\n1. 1. 1. 1. 1. 1.\n2. 2. 1. 1. 2.\n2. 1. 1. 1. 1.\n\n\n:\n\n\n\n:\n:\n\n\n\n0,0,0,0\n\n\n\n\n\n0,0,0,0\n\n: [[0,", "\n\nExample:\n\n\n\nExample:\n\nInput: \nInput: \nInput: [2,3,4]\nOutput: 3\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n0,0,0,0]\n\n\n\n\n0,0,0,0,0,0\n\n\n: [[0,0,0,", "\n\n\n\n\n\n\n1,2,3,2,3,3,4,4\n\n\n\n:\n: [0,0,0,0]\nOutput: 4\n\nExample:\nInput: [[0,0,0]]\nOutput: 2\n\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n: [[0,0,0", "\n\n\n\n\n\n0,1,2,3,4,4,5,5,5,5,5,6,6,5,6,5\n\n\n\n:\n\n\n\nOutput: 2\nExplanation:\n\n:\n\n\n\n\n\n\n\n0,0,0,0\n\n0,0\n\n\n: [[0,0,", "\n\n\u00a0\n\n\n\\n\\n\n\n\n2.\u00a0\n2. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\n\n\n:\n\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n: [[0,0,0,0", "\n\n\n\n\n\n0,0,0,0,0,0,0,0,0,0\n\n\n\n\n\n:\n0,0,0,0,0,0,0]\nOutput: 0\n\nExample 1:\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n: [[0,0,0,0],[0,", "\n\n\u00a0\n\n\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n\n\n:\n\n\n\n\n\n: [[0,0,0,0]]\nOutput: 2\n\n\n\n\n\n\n\n0\n\n\n\n\n\n: [[0,0,0"], "prompt": "\nQUESTION:\nOn a 2-dimensional\u00a0grid, there are 4 types of squares:\n\n1 represents the starting square.\u00a0 There is exactly one starting square.\n2 represents the ending square.\u00a0 There is exactly one ending square.\n0 represents empty squares we can walk over.\n-1 represents obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks\u00a0from the starting square to the ending square, that walk over every non-obstacle square\u00a0exactly once.\n\u00a0\n\nExample 1:\nInput: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n\nExample 2:\nInput: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n\nExample 3:\nInput: [[0,1],[2,0]]\nOutput: 0\nExplanation: \nThere is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\n\n\n\n\n\u00a0\nNote:\n\n1 <= grid.length * grid[0].length <= 20\nclass Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}