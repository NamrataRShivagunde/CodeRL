{"1764": {"code": ["\n\n\n\n\n\n\n\n\n\nThe function `solve` is called by the `emulator` object.\n\nThis is a very dishonorable problem.\n\nThe method `emulator` is not used!\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3: \n\nYou are given 3\n\n\n1: \n", "\nsolve:\nemulator.solve(0, 0, 0)\n\nEXAMPLE:\n\n\n\n\n\n\n\nExample 3:\n\nThe problem is solved!\n\nExample 4:\n\nYou are given 2 eggs and 10 drops. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n  1. `em", "\n\n\n\n\n\n\nemulator.solve(0,0)\nemulator.solve(0,0)\nemulator.solve(0,0)\n\nQUESTION:\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.\n\n1. `emulator.solve` \n\n1.\n 1", "\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nExample 3:\n\n \n \n \n  `emulator.break(n)` returns `True` if the number of drops you have been dropped above and below. \n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n \n\n\n \n\n 3. `emulator.re", "\n\n\n \n  `emulator.is_focused` is `False`\n\n\n\n \n\n\n \n\nTHIS is a generalization of the kata problem\n\n\n\n\n \n\n:\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nYou are given 3 drops. \n\n\n\n 1:", "\n\n\n\n\n\n\n\n\n\nExample 3:\n\nYour method is a very dishonorable problem.\n\nExample 4:\n\nYour method is a very dishonorable problem.\n\nExample 5:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3: \n\nYou are given 3 eggs\n\n\n1:", "\nkata:\nemulator.solve()\nkata:\nemulator.solve()\n\nKATA:\n\n\n\n\n\n  break \n  break \n\n \n\n  1. `emulator.drop(n)` returns `True` if all drops are left. \n\n  2.\n\n\n\n\n\n\n\n1: \n\n \n\n 3: ", "\n\n\n\n\n\n\n\nExample 1:\n\n \n\n  `emulator.solve`\n  `solve`\n \n\nExample 2: \n\n \n  `emulator.break`\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\nemulator.solve()\n\n1:\nemulator.drop()\n\n\n 1: ", "\n\n\n\n\n\n\n\n \n\n \n \n  break \n\n  3. `emulator.break(n)` returns `True` if you have reached the highest number of drops and break `n` above. \n \n \n\n\n\n\n\n\n\n\n\nemulator.solve()\n\n1:\n\n2:\n\nYou\n1: \n", "\n\n\n\n\n\n\n\n\nExample 3:\n\nYour problem is an example:\n\n  1. `emulator.solve` returns `True` \n\n  2. `emulator.solve(n)` returns `False`. \n\n  3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3: \n\n\n\nExample 4:\n\n1", "\n\n\n\n\n\n\n \n \n\n \n\n \n\n \n\n \n \n  `emulator.rewind(n)` returns `False` \n \n \n\n \n\n\n break\n \n \n\n\n\n\n\n\n\n\nExample 3: \n\nYou are given 1 eggs and 10 drops.\n\n\n\n 2: ", "\n\n\n\n\n\n\n\n\n\nThe `emulator` object has the following properties:\n\n  1. `emulator.num_eggs` returns number of eggs.\n  2. `emulator.drops` returns number of drops\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n `emulator.solve", "\n\n\n\n\n\n\n\n\nThe method of this kata is just a good idea:\n\nemulator.break(10)\n\nThe method of this kata is just a good idea:\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n1: \n  You are", "\n\n\n\n\n\n\n \n\n \n \n \n  break or lower\n\n  2. `emulator.break(n)` returns `False` if the number of drops is broken.\n  3. `emulator.break(n)` returns `True`. \n \n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n 1:", "\nsolve:\nsolve:\nsolve:\n \n\n\n\n\n1:\n\nYou are given 1 eggs and 10 drops.\n\nYou are given 2 eggs and 10 drops.\n\nYou are given 2 eggs and 10 drops.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n 1: \n\n ", "\n\n\n\n\n\n\n\n\n\n\n \n\n  break\n \n \n \n \n \n \n  invoke this method.\n\n \n \n \n\n\n\nTHIS IS NOT BEEN IMPLEMENTED.\n\n\nExample 3: \n\n \n\n\n\n\n\n\n\n\n\n2:\n\n \n\n\n  1.", "\n\n\n\n\n\n\n\nExample:\n\n \n\n\n \n \n\n\n \n \n \n\n  `emulator.rewind()`.\n\n\nExample 3:\n\n \n  `emulator.solve()`.\n\nExample 4:\n\n \n\n\n\n\n\n\n\n\n\n \n\n\n  1. `emulator.", "\n\n\n\n\n\n\n \n \n \n \n\n \n \n  `emulator.blow_down(n)` returns `True` if the number of drops you are given is lower or higher than the number of eggs.\n\n \n\n\n\n\n\n\n\n\n\n\n \n\nExample 3: \n\n\n\n 1: \n ", "\n\n\n  \n\n\n\n\n\n\n\n        `emulator.floor`\n\n      `emulator.floor`\n\n   \n\n\n\n\n \n\n    `emulator.rewind`\n\n\n\n\n\n\n\n\n\n\nemulator.solve(emulator)\n\n3: \nYou are given 1 eggs and\n 1:", "\n\n\n\n\n\n\n\n\n\n\nExample 0:\n\nYou are given 1 eggs and 10 drops.\n\nYou are given 2 eggs and 10 drops.\n\nYou are given 2 eggs and 10 drops. \n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\nExample 3:\n\nYou are given 1 eggs and 10 drops\n\n\n 1"], "prompt": "\nQUESTION:\nIn this kata you must determine the lowest floor in a building from which you cannot drop an egg without it breaking. You may assume that all eggs are the same; if one egg breaks when dropped from floor `n`, all eggs will. If an egg survives a drop from some floor, it will survive a drop from any floor below too. \n\nYou are given `num_eggs` eggs and are allowed to make a maximum of `num_drops` drops. If an egg does not break when dropped, it may be reused. You may assume that it is feasible to determine the floor with the given number of eggs and drops.\n\nExample 1: \nYou are given 1 egg and 10 drops. You start by dropping the egg from the first floor (floor numbering starts at 1). If it breaks, the answer is 1. If it does not break, you drop it from the second floor. If it breaks, the answer is 2. Otherwise you continue in the same manner until you reach a floor where the egg breaks. You may assume that you will reach that floor before you have exhausted your drops (i.e., in this example, the egg will break when dropped from floor 10 or lower).\n\nExample 2: You are given 2 eggs and 10 drops. The highest floor for which this problem has a solution is floor 55, so you may assume that the answer is floor 55 or a lower floor. You will have to determine how the number 55 is derived and generalize it for any number of eggs and drops.\n\nTo solve this problem, you need to write a function `solve` that takes an argument `emulator` and returns the lowest floor from which an egg will break if dropped. The `emulator` object has the following properties and method which you may invoke:\n\n  1. `emulator.eggs` returns the number of eggs you have left. You may use this property to detemine the number of eggs you are given initially.\n  2. `emulator.drops` returns the the number of drops you have left. You may use this property to detemine the number of drops you are given initially.\n  3. `emulator.drop(n)` returns `True` if an egg dropped from floor `n` breaks and `False` if it does not break. The number of times that you may invoke this method is limited to the number of drops you were given. If invoked after no drops are left, it will throw an exception. Same happens if you invoke this method after all your eggs are broken. \n\nYou are not allowed to access any other method or state attribute of the `emulator` object, even if you can. This is considered cheating and is a very dishonorable thing to do! Note that `emulator.__dict__` has been disabled. \n\nNote: [This kata](http://www.codewars.com/kata/faberge-easter-eggs-crush-test) is similar although not the same.\ndef solve(emulator):\n\t\nUse Call-Based format\nANSWER:\n"}}