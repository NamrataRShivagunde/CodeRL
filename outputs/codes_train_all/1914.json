{"1914": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nA company is planning to interview 2n people.\n\nExample 1:\n\nUse Call-Based format\n\n\n\n   \n       \n\n\n   \n\n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\nA company is planning", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nA company is planning to interview 2n people.\n\nUse Call-Based format\n\nExplanation:\n\n\n\n   \n       \n\n\n   \n        \n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\nA company is pl", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n2n == costs.length\n\n2n == costs.length\n\n\n    def twoCity(self, costs: List[int]) -> int:\n        \n\n\n\n\n   \n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA company is planning to", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n2n == costs.length\n2n == costs.length\n1 <= costs.length <= 100\n\n\u00a0\nExplanation:\n\n\n   \n\n\n\n   :\n\n\u00a0\n\n\n\n\n\n\nThe company is planning to interview 2n people.\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nCall-Based format:\n\n\n\n\n    def twoCity(self, costs: List[List[int]):\n    return 0\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\nA company is", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n    def twoCitySchedCost(self, costs: List[List[int]):\n        return self.costs[0]\n\n\nExplanation:\n\n\n\n\n\n   \n\n\n\u00a0\n\n\n\n\n\n\nA company is planning to interview\n\n\n\n\nA", "\nUse Call-Based format\n\n\n\n\n\nA company is planning to interview 2n people. A company is planning to interview 2n people.\n\n\n\n   \n        pass\n        \n\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\nA company", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def twoCity(self, costs: List[List[int]):\n        return 100\n\n\nReturns:\n   \n\n\n\n   :\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\nA company is planning to inter", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nOutput:\n\n\n\n\n\n\n\n   \n        return self.costs[0][0]\n\n\n\n   \n        return 0\n\n\n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\n\nA company is", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nA company is planning to interview 2n people.\n\nExplanation:\n\n\n\n   \n        pass\n\n\nA company is planning to interview 2n people.\n\n\n   :\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\nA company is planning to inter", "\nUse Call-Based format\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\n    def twoCitySchedCost(self, costs: List[int]) -> int:\n       \n\n\n\n   \n\n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\n\nA company", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def twoCitySchedCost(self, costs: List[List[int]]):\n        return 20\n\n   \n\n\n\n   :\n\n\n\u00a0\n\n\n\n\n\n\nA company is planning to interview 2n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nExplanation:\n\n\n\n\n   \n        return self.twoCitySchedCost(costs)\n\n\n\n    twoCitySchedCost(self, costs) -> int\n\n\n\u00a0\n\n\n\n\n\nA company is planning to interview 2n people\n\n\n\n\nA", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\n2n == costs.length\n\n\n\n\n\nA company is planning to interview 2n people.\n\n   :\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\nA company is planning to", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n2n == costs.length\n\n    def twoCitySchedCost(self, costs: List[List[int]):\n        return 0\n\nUse Call-Based format\n\nEXPL:\n\n\n\n\n\n   \n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\nA company is", "\nUse Call-Based format\n\n\n    Use Call-Based format\n\n\n2n == costs.length\nExplanation:\n\n2n == costs.length\n\nConstraints:\n\n\n\n   \n        pass\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\nA", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def twoCitySchedCost(self, costs: List[List[int]]):\n        return self.costs[costs[0]]\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nThe company is planning to interview 2n people\n\n\n\n\nA company", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nA company is planning to interview 2n people.\n\n\n\n   \n        return self.cost\n\n\n\nA company is planning to interview 2n people.\n\n   \n\n\n\n\n\n\n\n\n\n\nA company is interviewing 1n people\n\n\n\n\nA", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n\n\n\n   \n\n\n\n\n\n\nA company is planning to interview 3n people\n\n\n\n\nA company is planning\n\n\n\nA company is pl", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n2n == 2\n\nExplanation:\n\n\n\n\n   \n        pass\n\n\n\n\n   \n        pass\n\n\n\n\n50,80,80,80\n\n\n\n\n\n\n\n\nA company is planning to interview 2n people.\n\n\n\n\nA"], "prompt": "\nQUESTION:\nA company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti],\u00a0the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.\n\u00a0\nExample 1:\nInput: costs = [[10,20],[30,200],[400,50],[30,20]]\nOutput: 110\nExplanation: \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n\nExample 2:\nInput: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\nOutput: 1859\n\nExample 3:\nInput: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\nOutput: 3086\n\n\u00a0\nConstraints:\n\n2n == costs.length\n2 <= costs.length <= 100\ncosts.length is even.\n1 <= aCosti, bCosti <= 1000\nclass Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}