{"2523": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        return self.findShortestSubArray(nums)\n\n\n\n\n\n\n\n\nExample 3:\n\nExample 4:\n\nInput: [1, 2]\nOutput: 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative", "\n\n\n\nUse Call-Based format\n\n\n\n\n   \n       \n\n\n\nOutput: 6\n\n\n\nExample 3:\n\nInput: [1,2,3,4]\nOutput: 5\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers nums, the degree of", "\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return findShortestSubArray(self, nums)\n\n\n\n\n   \n    def findShortestSubArray(self, nums: List[int]) -> int:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers nums, with", "\nUse Call-Based format\n\n\n    def findShortestSubArray(self, nums: List[int]):\n        \nUse Call-Based format\n\n\n\n   \n\n\n\n\n\nExample 3:\n\nInput: [1,2,2,3]\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\nExample 3:\n\nInput: [1, 2, 3, 1, 4]\nOutput: 2\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nInput: [1]\nOutput: 4", "\nUse Call-Based format\n\n\n    def findShortestSubArray(self, nums: List[int]):\n       \nUse Call-Based format\n\n\n\n   \n\n\n\nOutput: 2\n\n\nExample 3:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of non-negative", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\nExample 3:\n\nInput: [1, 2, 2, 3, 1]\nOutput: 4\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor example,\n\n[1", "\nUse Call-Based format\n\n    def findShortestSubArray(self, nums: List[int]):\n\n\n\n\n\n   \n\n\n\n\n\n\n\nExample 3:\n\nInput: [1,2,3,1,4]\nOutput: 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 2\nExplanation: \n\n\n\nExample 3:\n\nInput: [1, 2]\n\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n       \n\n\n\n\nExample 3:\n\nExample 4:\n\nInput: [1, 2, 2, 3, 4, 4]\nOutput: 1\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    A task is to find the shortest sub", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        \nUse Call-Based format\n\n\n\n\n\nExample 3:\n\nInput: [1, 2, 2, 3, 1, 2, 3]\nOutput: 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\nInput:", "\nUse Call-Based format\n\n\n    def findShortestSubArray(self, nums: List[int]):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\nExample 3:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array", "\nUse Call-Based format\n\n\n    def findShortestSubArray(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n\nExample 3:\n\nExample 4:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of non-negative", "\nUse Call-Based format\n\n\n    def findShortestSubArray(self, nums: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n, [2, 2, 3, 1], [2, 2, 3, 1]\n\n\n\n\n\n\n\n\nGiven a non-empty array of non-negative", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\nOutput: 6\n\n\n\nExample 3:\n\nUse Call-Based format\n\nExample 4:\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\nThis is the shortest subarray length of a non-empty array of non-negative integers of the input array.\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers nums,", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n2\n\n\n\nUse Call-Based format\n], [1, 2, 3], [2, 2, 2], [1, 2, 3, 1], [2, 2]\n\n\n\n\n\n\n\nGiven an array of non-empty array of", "\nUse Call-Based format\n\n\n    def findShortestSubArray(self, nums: List[int]) -> int:\n    \n\n\n\n\n   \n\n\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nInput: [1,2,2,3,1,2,3]\nOutput: 3\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\nOutput: 6\n\n\n\n\n\nExample 3:\n\nExample 4:\n\nInput:\n\nOutput: 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    To find the length of a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\nOutput: 6\n\n\nExample 3:\n\nInput: [1,2,3,1]\nOutput: 4\n\n\nUse Call-Based format\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\nGiven a non-empty array of non-"], "prompt": "\nQUESTION:\nGiven a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\n\nExample 1:\n\nInput: [1, 2, 2, 3, 1]\nOutput: 2\nExplanation: \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.\n\n\n\n\nExample 2:\n\nInput: [1,2,2,3,1,4,2]\nOutput: 6\n\n\n\nNote:\nnums.length will be between 1 and 50,000.\nnums[i] will be an integer between 0 and 49,999.\nclass Solution:\n    def findShortestSubArray(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}