{"317": {"code": ["\nUse Call-Based format\nUse Call-Based format\n    def numPermsDISequence(self, S: str):\n    \"\"\"\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nWe are given S, n string of characters\n\n\n\nWe are", "\nUse Call-Based format\nUse Call-Based format\n\n    def numPermsDISequence(self, S: str):\n       \n\n\n\n\n\n\n\nWe are given S, a length n string of characters from the set 'D' and 'I'\n\n:\n\n\n\n\n\n\n\n\n\n\nWe are given S, n string of characters\n\n\nWe", "\n\nUse Call-Based format\n\n    def numPermsDISequence(self, S: str) -> int:\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nExample 2:\n   :\n\n\n\n\n\n\n\n\n\nWe are given S, n string of characters\n\n\n\nWe are given", "\nUse Call-Based format\nUse Call-Based format\n\n    def numPermsDISequence(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n numPermsDISequence(self, S: str):\n\n\n\n\n\n\n\n\n\n\n\nWe are given S, n string of characters.\n\n\n\nWe", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    S: str\n\nUse Call-Based format\n\n\n\n :\n\nWe are given S, a length n string of characters\n\n\n\n\n\n\n\nWe are given S, n string of characters\n\n\n\n\nWe are", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    return self.numPermsDISequence(S)\n\n\n\n    numPermsDISequence(self, S: str):\n\n\n\n\n\n\n\n\n\n\nWe are given S, n string of characters\n\n\n\n\nWe are given", "\nUse Call-Based format\n\n\n    def numPermsDISequence(self, S: str):\n       \nUse Call-Based format\n\n\n\n\n\n    self.S = S\n       \n\nUse Call-Based format\n\n\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nWe are given S, n\n\n\n\nWe are given", "\nUse Call-Based format\n\n\n    def numPermsDISequence(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nExample 2:\n   :\n\n\n\n\n\n\n\n\n\n\nWe are given S, n string of characters.\n\n\n\nWe are", "\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n    pass\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\nExample 2:\n    numPermsDISequence(self, S):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given S, a length n", "\nUse Call-Based format\n\n    def numPermsDISequence(self, S: str):\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   :\n        return self.numPermsDISequence(S)\n\n\n\n\n\n\n\n\n\nWe are given S, n string of characters\n\n\n\n\nWe are given S,", "\nUse Call-Based format\n\n\n    def numPermsDISequence(self, S: str):\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   :\n\n\n\n\nWe are given S, n string of characters\n\n\n\n\nWe are given S\n\n\n\n\nWe are given S, a", "\nUse Call-Based format\n\n\n    def numPermsDISequence(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nExample 2:\n   :\n\n\n\n\n\n\n\n\n\nWe are given S, a length n string of characters.\n\n\n\n\nWe", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n    S: string\n    P: int\n       \nUse Call-Based format\n\n\n\n\u00a0\nExample 2:\n    def numPerms(self, S: str) -> int:\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given S,", "\nUse Call-Based format\n\n    def numPermsDISequence(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\nExample 2:\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\nWe are given S, a length n string of characters.\n\n\n\n\nWe are given", "\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n    return self.numPermsDISequence(S)\n\nUse Call-Based format\n\n\n    numPermsDISequence(self, S)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given S, a length n", "\nUse Call-Based format\n\n\n    def numPermsDISequence(self, S: str):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\nExample 2:\n   :\n\n\n\n\n\n\n\n\nWe are given S, a length n string of characters\n\n\n\n\nWe are given", "\nUse Call-Based format\nUse Call-Based format\n\n    def numPermsDISequence(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\n:\n\n\n\n\nWe are given S, a length n string of characters.\n\n\n\n\n\n\n\n\nWe are given S, a length n", "\nUse Call-Based format\nUse Call-Based format\n\n    def numPermsDISequence(self, S: str) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExample 2:\n   :\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nWe are given S, a", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n    print(S)\n\nUse Call-Based format\n\n\n\n    numPermsDISequence(self, S) -> int:\n        \n\n\n\n\n\n\n\n\n\n\nWe are given S, a length n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    return self.numPermsDISequence(S)\n\n\n\n\n\n numPermsDISequence(self, S: str):\n\n\n\n\n\n\n\n\n\n\n\nWe are given S, n string of characters\n\n\nWe are"], "prompt": "\nQUESTION:\nWe are given S, a length n string of characters from the set {'D', 'I'}. (These letters stand for \"decreasing\" and \"increasing\".)\nA\u00a0valid permutation\u00a0is a permutation P[0], P[1], ..., P[n] of integers\u00a0{0, 1, ..., n}, such that for all i:\n\nIf S[i] == 'D', then P[i] > P[i+1], and;\nIf S[i] == 'I', then P[i] < P[i+1].\n\nHow many valid permutations are there?\u00a0 Since the answer may be large, return your answer modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: \"DID\"\nOutput: 5\nExplanation: \nThe 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n\n\u00a0\nNote:\n\n1 <= S.length <= 200\nS consists only of characters from the set {'D', 'I'}.\nclass Solution:\n    def numPermsDISequence(self, S: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}