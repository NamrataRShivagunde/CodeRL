{"1782": {"code": ["\n\n**C# Note**:\n\n\n\n\n\n\n\nToken Value\n--------------\n\ntext : The string to match\n\ntext : The string to match\n\ntext : The string to match\n\ntext : The string to match\n\ntext : The string\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n**Java Note", "\n\n\n\n\n**Java Note**\n\n\n\nThe Challenge\n-------------\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n**\n\n**Java Notes**\n\nThe Challenge\n----------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Challenge\n----------\n\n", "\n\n\n\n\n\n\n\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n-----------\n\nThe Challenge\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Java Notes**\n\nThe Challenge\n---------------\n\nThe Challenge\n--------------\n\n\n\n**", "\n\n\n\n\n**C# Notes**\n\n\n\n\n\nToken Grammar\n--------------\n\n\nKeyword\n-------------\n\nThe Challenge\n--------------\n\nThe Challenge\n----------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n---------------\n\ntext : The string to be matched.\n\ntype :\n\n    Text :", "\n\n\n\n\n\n\n\n\n\n\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n**C# Notes**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymbol\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n", "\n**C# Examples**\n\n\n\n\n\n\n\n\n\n\n\n\n\nText : The text of the lexer\n\ninteger : The number of the token\n\noperator : The operator\n\ntext : The text of the token\n\ninteger : The number of the token\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Grammar\n--------\n", "\n**C# Notes**:\n\n\n\n\n\n\n\n\n\nThe Challenge\n--------------\n\nThe Challenge\n-------------\n\nThe Challenge\n--------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n--------------\n\nThe Challenge\n--------------\n\nToken Grammar\n--------------\n\nThe Challenge\n----------------\n\n#", "\n\n\n\n\n\n\n\nToken Type\n--------------\n\nThe Token Grammar\n--------------\n\nThe Challenge\n----------------\n\nThe Challenge\n--------------\n\nThe Challenge\n**C# Notes**\n\nThe\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n--------------\n\n\n\nkeyword : The character that", "\n**C# Example**\n\n\n\n\n\n\n\n\n\n\nThe Challenge\n--------------\nThe Challenge\n----------------\n\nThe Challenge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Challenge\n---------------\n\nThe Challenge\n--------------\n\nThe Challenge\n-------------\n\nThe Challenge\n--------------\n\n\n\n\n\n\nkeyword : The", "\n\n\n\n\n\n\n\nToken Value\n--------------\n\nText : The text of the token value.\n\ntext : The text of the token value.\n\ntext : The text of the token value.\n\ntext : The text of the token value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Grammar\n-------------\n", "\n**Java format**\n\n**C# Syntax**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Challenge\n--------------\n\nThe Challenge\n----------------\n\nThe Challenge\n-----------\n\nThe Challenge\n--------------\n\nThe Challenge\n\n**Java format\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\nSimplexer\n-------------\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n**C# Notes**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n-------\n\ntext : The value of the token.\n\n\n\n\n\n# The Ch", "\n\n\n\n\n\n\n\nToken Generator\n-----------\n\nThe Generator\n------------\n\nThe Challenge\n-----------\n\nThe Challenge\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n--------------\n\nText\n--------------\n\nText\n--------------\n\n\n\n\n\ntext : The text of your", "\n\n\n\n\n\n\n\n\n\n\nSimplexer\n---------------\n\nThe Challenge\n----------------\n\nThe Challenge\n---------------\n\nThe Challenge\n----------------\n\nThe Challenge\n----------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n--------------\n\nA simplexer object\n--------------\n\n\n`text` :", "\n\n\n\n\n\n\n\n\n**Java Note**\n\nThe Challenge\n-------------\n\nThe Challenge\n----------------\n\nThe Challenge\n----------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n-----\n\n\n\n**Java Note\n----------------\n\n**String**\n\n**\n\n**\n\nstring : The string", "\n\n\n\n\n\n\n\n\n\n\n**Java Notes**\n\n**C# Notes**\n\nThe Challenge\n--------------\n\nThe Challenge\n-------------\n\nThe Challenge\n\n**C# Notes**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n--------------\n\n\n\n\n\n\n\ntext : The text that you'll", "\n\n\n\n\n\n\n\n\n\n**Java Notes**\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Value\n----------------\n\nToken Value\n----------------\n\n```\n\nToken Value : The number of", "\n\n\n\n\n\n\n\n\n\n\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n-------------\n\nThe Challenge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Java Notes**\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n-------------\n\n", "\n\n\n\n\n\n\n\n\n\n\nThe Challenge\n---------------\n\nThe Challenge\n--------------\n\nThe Challenge\n--------------\n\nThe Challenge\n\n\n\n\n\n\n\n\n\n\n\n\nToken Grammar\n----------------\n\nThe Challenge\n----------------\n\nThe Challenge\n----------------\n\n\n\n\n\n\n\n\n\n\n\n        **C# Notes**\n", "\n\n\n\n\n\n\n\n\nToken Challenge\n---------------\n\nThe Challenge\n---------------\n\nThe Challenge\n--------------\n\nThe Challenge\n**C# Notes**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToken Parser\n----------\n\nThe Challenge\n---------------\n\nThe Challenge\n--------------\n\n"], "prompt": "\nQUESTION:\nThe Challenge\n-------------\nYou'll need to implement a simple lexer type. It should take in an input string through the constructor (or the parameter, for Javascript), and break it up into typed-tokens (in python, C# and Java, you'll have to manage `null/None` input too, resulting in the same behavior than an empty string). You'll need to implement the necessary methods (aaccording to your language) to make the Simplexer object behave like an iterator, Meaning that it returns a token (assuming one is available) object each time it a `next` (`Current` field in C#) method would be called. If no tokens are available, an exception should be thrown (idealy: `StopIteration` in python, `InvalidOperationException` in C# and `NoSuchElementException` in Java).\n\nTokens are represented by Token objects, which define two properties as strings: `text`, and `type`. Constructor is `Token(text, type)`.\n\n**C# Notes**:\n`Iterator` is an extension of `IEnumerator` with default implementations for `Reset()`, `Dispose()` and `IEnumerator.Current` as these are not need to pass the challenge. You only need to override `MoveNext()` and `Current { get; }`.\n\nToken Types\n-----------\nThere are 7 tokens types that your lexer will need to produce: `identifier`, `string`, `integer`, `boolean`, `keyword`, `operator`, and `whitespace`. To create the token, you'd need to pass in the token value (the text) and the token type as strings, so for example, a simple integer token could be created with `new Token(\"1\", \"integer\")` (Note: no default values or default constructor are provided, so use `new Token(\"\",\"\")` if you want a default Token object).\n\nToken Grammar\n--------------\nHere's a table of the grammars for the various token types:\n```\ninteger : Any sequence of one or more digits.\n\nboolean : true or false.\n\nstring : Any sequence of characters surrounded by \"double quotes\".\n\noperator : The characters +, -, *, /, %, (, ), and =.\n\nkeyword : The following are keywords: if, else, for, while, return, func, and break.\n\nwhitespace : Matches standard whitespace characters (space, newline, tab, etc.)\nConsecutive whitespace characters should be matched together.\n\nidentifier : Any sequence of alphanumber characters, as well as underscore and dollar sign,\nand which doesn't start with a digit. Make sure that keywords aren't matched as identifiers!\n```\ndef __init__(self, expression):\n\t\nUse Call-Based format\nANSWER:\n"}}