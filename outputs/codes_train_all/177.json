{"177": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def minWindow(self, s: str, t: str):\n       \n\n   \n        pass\n\n\n\n\n   \n\n\n\n(1)\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nS = \"", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n       \n\n\n\n\n\n\n\n   \n\n\nUse Call-Based format\n\n\n(1)\n\nUse Call-Based format\n\n\n(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n  S = \"ADOBECODEBANC", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n   \n        pass\n\n\n\n\n\n\n   \n\n\n\n\n\n(1).\n\nUse Call-Based format\n\nUse Call-Based format\n\n(1).\n\n\n\n\n\n\n\n\n\n\n\n    S = \"ADOBE", "\n\n\n\n\n\n\n\n\n   \n\n   \n        pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n1)\n\nUse Call-Based format\n\n(n)\n\n\n\n\nS = \"ADOBECODEBANC\"\nT = \"ABC\"\n\n\n\n\n\nS = \"ADOB", "\n\n\n\n\n\n\n\n\n   \n   \n        return \"BANC\"\n\n\n\n\n\n    def\n\n\n\n\n\n(1)\n\nUse Call-Based format\n\nUse Function-Based format\n\n\n\n\nNB:\n\n\n\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODE", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n       \n\n\n\n\n\n\n   \n\n\nUse Call-Based format\n\n1).\n\n\n\n(1)\n\n\n\n\nThis is not the most efficient way to do this.\n\nUse Call-Based format\n\n\n\n\n\nGiven a string S", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n       \n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n(1)\n\n\nUse Call-Based format\n\n(1)\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODE\"\nT = \"ABC\"\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n       \n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n(n)\n\n\n(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBANC\"\nT = \"\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n\n1)\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = \"B\"\n\n\n\nNOTE:\n\n\n\n\n\n\nT =", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n       \n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  A string S = \"ADOBECODEBANC\",", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def min(self, s, t):\n        return self.minWindow(s, t)\n\n\nUse Class-Based format\n\n\n\n\n   \n\n\n\n(1)\n\n\n(n)\n\n\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBAN", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n(n)\n\nUse Call-Based format\n\nUse Call-Based format\n\n(1).\n\n\n\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBANC", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n        return \"BANC\"\n\n\n\n\n   \n\n\n\n\n\n(1)\n\nUse Call-Based format\n\n\n\n\n(1)\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBANC\",", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n   \n\n\n\nUse Call-Based format\n(1)\n\n\n(1)\n\n\n\n\nUsage:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a string S, and a string T", "\n\n\n\n\n\n\n\n\n\n\n\n   \n        return \"\"\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n1)\n\nUse Call-Based format\n\n\n(1)\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBANC\",", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n   \n\n\n\n\n\n\n2).\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n(n)\n\n\n\n\n\n\n\n\n\n\n\n\nInput: S = \"ADOBECODE\", T", "\n\n\n\n\n\n\n\n   \n   \n       \nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n\n1)\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBANC\"\nT = \"ABCD\"\n\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBANC", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\nUse\n\n\n\n\n\n\n(1)\n\n\nUse Call-Based format\n\n\n\n\nNote:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nS = \"ADOBECODEBANC\"\nT = \"ABC\"\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        \nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Class-Based format\n\n\n(1).\n\n\n\n\n(1).\n\n\n\n\n\n\n\n\n\n\nS = \"ADOBECODEBANC\"\nT = \"ABC\"\n\n", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    def minWindow(self, s: str, t: str) -> str:\n       \n\n\nUse Solution-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS = \"AD"], "prompt": "\nQUESTION:\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n\nExample:\n\n\nInput: S = \"ADOBECODEBANC\", T = \"ABC\"\nOutput: \"BANC\"\n\n\nNote:\n\n\n       If there is no such window in S that covers all characters in T, return the empty string \"\".\n       If there is such window, you are guaranteed that there will always be only one unique minimum window in S.\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}