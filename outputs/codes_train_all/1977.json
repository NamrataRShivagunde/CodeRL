{"1977": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a 2D grid consists of 2s and 1s,\nreturn the number of islands in gray and water.\n\n\n   \n\nGiven a 2D grid\n             \n\n\n\n\n\n\n\u00a0\n\n\n\n\nGiven a 2D\u00a0grid consists of", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\nGiven a 2D grid is completely connected by 0s and 1s, the number of islands is closed.\n\n   \n        pass\n        \n\nGiven a 2D grid             \n\n\n\n\n\n\n\n\n1 <= i <= 1 <= 2\n\n\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def island(self, grid: List[int]) -> int:\n        return grid[0].length\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n             \n\n\n\n\n\n\n\n\n\n0 <= grid[0][0] <= 1\n\n\n\nGiven a 2", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\nGiven a 2D grid consists of 0s and 1s and 0s and 1s.\n\n   \n        pass\n\n\nGiven a 2D grid\u00a0\n\n\n\n\n\n\n\nThe grid is not fully connected\n\n\n\nGiven a 2D grid", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def island(self, grid: List[int]) -> int:\n\n   \n\n\nGiven a 2D grid consists of 0s and 1s.\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D grid consists of 0s and", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    def island(self, grid: List[int]) -> int:\n   \n    \"\"\"\n\nGiven a 2D grid\n\n   \n    grid: List[List[int]]        \n             \n\n\n\n\n\n\nThe grid is not called.\n\n\n\n\n\n\nGiven a 2D grid", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def island(self, grid: List[int]) -> int:\n        return grid[0][0]\n        \n\n\n\n\n   \n        pass\nGiven a 2D grid             \n\n\n\n\n\n\n\nGiven a 2D grid.\n\n\n\n\nGiven a 2D", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n0 <= grid[0][0] <= 1\n0 <= grid[1][0] <= 1\n\nExplanation:\n\n\n   \n\n\n\n   \n\nGiven a 2D grid\n             \n\n\n\n\n\n\n\n\n\nGiven a 2D grid consists of 0s and 1s\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    grid: List[List[int]]\n\n\u00a0\nExample:\n\nGiven a 2D grid consists of 0s and 1s.\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nThe grid is not closed\n\n\n\n\nGiven a 2D grid", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def island(self, grid: List[List[int]):\n        return grid[0][0]\n\n\nExplanation:\n\n\n\n\n   :\n\n             \n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nGiven a 2D grid consists of 0s and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\ngrid[i][j]\n\n\u00a0\n\n\n\n\n   \n\n\nGiven a 2D grid consists of 0s and 1s.\n\n   \n\n\n\n\n\n\n\n\n\n\nThe grid is considered closed.\n\n\n\n\n\nGiven a 2D\u00a0grid consists of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    grid = [0,1,2,3,4,5]\n\n\u00a0\nGiven a 2D grid\n\n   \n        pass\n\n\u00a0\n\n\n\n\n\n\n\n\n\nThe number of islands in gray are closed\n\n\n\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def island(self, grid: List[int]) -> int:\n   \n\n\n\n   \n        pass\n\nGiven a 2D grid is a 2D grid\n             \n\n\n\n\n\n\n\n\nThe number of islands is closed\n\n\n\n\n\nGiven a 2", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nInput: grid\n\u00a0\n\n    def island(self, grid: List[int]) -> int:\n        return grid[i][j]\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D\u00a0grid", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return self.closedIsland(grid)\n\nGiven a 2D\u00a0grid consists of 0s and 1s, each of which is a closed island.\n\n\n   :\n\n             \n\n\n\n\n\n\n\nThe grid is not closed.\n\n\n\n\nGiven a 2D\ufffd", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\ngrid[0][0] == 1\ngrid[0][1] == 0\n\nExplanation:\n\n\n   \n\n\n\n   \n        pass\n        \nGiven a 2D grid\n             \n\n\n\n\n\n\n\nGiven a 2D grid\n\n\n\nGiven a 2D grid consists of", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\ngrid = [0,0,0,0]\n\n\u00a0\nExample 4:\n\nInput: grid = [1,2,2,2]\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D\u00a0grid consists", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def island(self, grid: List[int]) -> int:\n    return grid[i][j]\n\nUse Call-Based format\n\n\n\n   :\n\n             \n\n\n\n\n\n\n\n\n\nA island is closed.\n\n\n\n\n\nGiven a 2", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n       \n        grid[i][j]\n        \n\n\n\nGiven a 2D grid consists of 0s and 1s (water).\n\n   \n        pass\n\n             \n\n\n\n\n\n\n\nExample 4:\n\nGiven a 2D grid:\n\n\n\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def island(self, grid: List[List[int]]):\n        return len(grid)\n\n\nUse Call-Based format\n\n\n\n   \n\n\n             \n\n\n\n\n\n\nGiven a 2D\u00a0grid consists of 2s\n\n\n\n\nGiven a"], "prompt": "\nQUESTION:\nGiven a 2D\u00a0grid consists of 0s (land)\u00a0and 1s (water).\u00a0 An island is a maximal 4-directionally connected group of 0s and a closed island\u00a0is an island totally\u00a0(all left, top, right, bottom) surrounded by 1s.\nReturn the number of closed islands.\n\u00a0\nExample 1:\n\nInput: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\nOutput: 2\nExplanation: \nIslands in gray are closed because they are completely surrounded by water (group of 1s).\nExample 2:\n\nInput: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\nOutput: 1\n\nExample 3:\nInput: grid = [[1,1,1,1,1,1,1],\n\u00a0              [1,0,0,0,0,0,1],\n\u00a0              [1,0,1,1,1,0,1],\n\u00a0              [1,0,1,0,1,0,1],\n\u00a0              [1,0,1,1,1,0,1],\n\u00a0              [1,0,0,0,0,0,1],\n               [1,1,1,1,1,1,1]]\nOutput: 2\n\n\u00a0\nConstraints:\n\n1 <= grid.length, grid[0].length <= 100\n0 <= grid[i][j] <=1\nclass Solution:\n    def closedIsland(self, grid: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}