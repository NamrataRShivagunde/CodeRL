{"335": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n    return 2\n\n\n\u00a0\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\nUsage:\n    Billboard.install(self, rods)\n\n\n\n\n\n\n\n\n\n\n    In this case, you", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n        return self.tallestBillboard(rosds)\n\n\n\n   \n       \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    For example:\n\n   \n\n\n\n    In:\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n    tallestBillboard(self, rods: List[int]) -> int:\n\n\n\n\n\n\n\n\n   :\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\nNote:\n", "\nUse Call-Based format\nUse Call-Based format\n\n    def tallestBillboard(self, rods: List[int]) -> int:\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nThe billboard is installed.\n\n\n\nThe tall", "\nUse Call-Based format\n\n\n    return tallestBillboard(self, rods)\n\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\nYour billboard is not installed\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n    >>> rods = [1", "\nUse Call-Based format\n\n\n    def installBillboard(self, rods: List[int]) -> int:\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\u00a0\n\n    pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\n\n\n    The same amount of rods can be install", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n   \n        return tallestBillboard(self, rods)\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n    1 <= self.tallestBill", "\nUse Call-Based format\n\n\n    def tallestBillboard(self, rods: List[int]):\n        return 0\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n    0 <= i <= 2\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        return self.tallestBillboard(rosds)\n\n\n\n   \n       \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    1 <= rods[0] <= 6\n   ", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n\u00a0\n\n        return self.tallestBillboard(rosds)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n    >>> self.tallest", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n        return self.tallestBillboard(rosds)\n        \n\n\n\n   \n    pass\n\n\n\nYour billboard is already installed.\n\n\n\n\n\n\n\n\nYou are installing a billboard and want to install it.\n\n\n\n\nYou are", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n    return self.tallestBillboard(rosds)\n\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n    If you are installing", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        return self.tallestBillboard(rosds)\n\n\n\n   \n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n0 <= height <= 6\n\n10", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\n\n\u00a0\n\n\n\u00a0\n\n   \n\n\n\n\n\n\u00a0\n\n    tallestBillboard(self, rods)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nIf you are installing a billboard", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n   \n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\u00a0\n\u00a0\n\n\n\n\n\n    \"\"\"\n\n    # TODO", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return self.tallestBillboard(rosds)\n\n\nYou have a billboard with a supported amount of rods.\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0Note:\n\n", "\nUse Call-Based format\n\n\n    def tallestBillboard(self, rods: List[int]):\n        return 0\n\n\nUse Call-Based format\n\n\n\n   \n       \n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\nYour billboard is installed and available.\n\n\n\n\nNote:\n1 <=", "\nUse Call-Based format\nUse Call-Based format\n\n    def tallestBillboard(self, rods: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= i <= 2 <= n <= 3 <=", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\u00a0\n\n\n\u00a0\n\n    # TODO\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\n\n0 <= y <= 0 <= y <= 0\n", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n        pass\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n        pass\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    Billboard:\n    install(self)\n\n"], "prompt": "\nQUESTION:\nYou are installing a billboard and want it to have the largest height.\u00a0 The billboard will have two steel supports, one on each side.\u00a0 Each steel support must be an equal height.\nYou have a collection of rods which can be welded together.\u00a0 For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation.\u00a0 If you cannot support the billboard, return 0.\n\u00a0\nExample 1:\nInput: [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n\n\nExample 2:\nInput: [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n\n\n\nExample 3:\nInput: [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0.\n\n\n\u00a0\nNote:\n\n0 <= rods.length <= 20\n1 <= rods[i] <= 1000\nThe sum of rods is at most 5000.\nclass Solution:\n    def tallestBillboard(self, rods: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}