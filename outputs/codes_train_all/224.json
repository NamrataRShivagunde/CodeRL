{"224": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def numDistinct(self, s, t: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a string S and T:\n\n\n\n\nGiven a string S", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n^\nbabgbag\n^^^^ ^^\nbabgbag\n\n\n\n\n\n    def numDistinct(self, S, t):\n            return len(s)\n\n\n^\n\n\n^\n\n\n\nUse Call-Based format\n\n^\n\n\n\nGiven a string S", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nGiven a string S and T:\n\n\n\n\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string S and a string T, count the number of distinct subsequences of S and T which equals T\n\n\n^\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string S and T,", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n^\n\nUse Call-Based format\nGiven a string S and a string T, count the number of distinct subsequences of S and T\n\n^\n\n\n\n\n^\n\n\n\n\n\n\n\n\n\nbabgbag\n^\n\n\nGiven a string S and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n^^\n\n\n\nUse Call-Based format\n^\n\n\nGiven a string S and T, count the number of distinct subsequences of S and T\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n^\n\n^\n\n\nUse Call-Based format\n\n\n\n    def numDistinct(self, s, t):\n        return 0\n\n\n\n^\n\nUse Call-Based format\n\n^\n\n\n\n\n\n\n\nGiven a string S and T, count the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nGiven a string S and a string T, count the number of distinct subsequences of S and T which equals T\n\n\n\n\n\n\n\n\n\n\n\n^\n\n\n\n\nGiven a string S and T", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n^\n\n    numDistinct(self, S, t) -> int:\n\nUse Call-Based format\n\n\n^\n\n^\n^\n\n\nGiven a string S and T, count the number of distinct subsequences of S and T\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\nGiven a string S and a string T, count the number of distinct subsequences of S and T.\n\n\n^\n\n\n\n\n\n\n\n\n^\n\n\n\nGiven a string S and T", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n  ^^\n \n    def numDistinct(self, s: str, t: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string S,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n^\n    @class Subsequence:\n    def numDistinct(self, s, t):\n        \nUse Call-Based format\n\n\n^\n\n\n\n\n\nGiven a string S and T:\n\n\n\n\n\nGiven a string", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nGiven a string S and T, count the number of distinct subsequences of S and T\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n^\n\n\n   \n\nUse Call-Based format\n\n\n\n    def numDistinct(self, S, t):\n        \nUse Call-Based format\n\n\n\n\n\n\n^\n\n\n\n^\n\n\n\nGiven a string S,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n^\n\n\nbabgbag\n^^^^^^\nbabgbag\n^^^^^^\n\n\n\n\n\nUse Call-Based format\n\n^\n\n\n\nGiven a string S", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n^\n\n\n   \n\nUse Call-Based format\n\n^\n\nGiven a string S and T, count the number of distinct subsequences of S and T which equals T\n\n\n\n\n\n\n\n\n\n\n\n\n^\n\n\n\nGiven a string S and T", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a string S and T, count the number of distinct subsequences of S and T which equals T.\n\n^\n\n\n\n^\n\n\n\n\n\n^\n\n\n\n\nGiven a string S and T", "\nUse Call-Based format\n^\n\n\n\n\n\nUse Call-Based format\n\n  S   T\n  ^\n\n\n\n^\n\n    numDistinct(s, t) -> int\n\n\n\n^^\n\n\n\n\n\n\nUse Call-Based format\nGiven a string S and T, count the number of distinct subsequences of S\n\n\n\n\n", "\nUse Call-Based format\n^\nbabgbag\n^^^^ ^^\nbabgbag\n^^^^\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\nUse Call-Based format\n\n^\n\n\n\n\n\n\n\n\n^\n\n\n\n\n\n\nGiven a string S and T, count the number of distinct subsequences\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n^\n\n\n\nS = \"abcde\", T = \"abcde\"\n\nT = \"abcde\"\n\n^\n\n\n\n\n\n\n\n\n\nGiven a string S, T"], "prompt": "\nQUESTION:\nGiven a string S and a string T, count the number of distinct subsequences of S which equals T.\n\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\n\nExample 1:\n\n\nInput: S = \"rabbbit\", T = \"rabbit\"\nOutput:\u00a03\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n\n\nExample 2:\n\n\nInput: S = \"babgbag\", T = \"bag\"\nOutput:\u00a05\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\nclass Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}