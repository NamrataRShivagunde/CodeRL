{"1662": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\n\n    def tree_by_levels(node):\n\t\n\t\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    left = Node\n\n```\n\n", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    def tree_by_levels(node)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nclass Node:", "\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\ndef tree_by_levels(node):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n\n\n\n\n\n```", "\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nnode_by_levels(node)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    value = Node\n```\n\n\n", "\n\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\n\nExample 1 - following tree:\n\n    root = tree_by_levels(node)\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\n\n\n\n\n\n", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    value = 1\n```\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\nThe tree is sorted by levels\n\n\n\n\n\nYou are", "\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    def __init__(self, value)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n", "\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nreturn tree_by_levels(node)\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nif root is not", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    For a binary tree:\n\n    root = node\n\n    tree_by_levels(root)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn list with elements from binary tree:\n\n\n\n\n\n\n\nYou", "\n\n\n\n\n\n\n\n\n\n    root = tree_by_levels(node)\n\n\nShould return following list:\n\n    [1,8,3,4,5,7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\n\n\n\n", "\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\nUse Python-Based format\n\nExample:\n\n    >>> tree_by_levels(node)\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\n\n\n\n\n```", "\n\n\n\n\n\t\n\n\n\n\n\n\nUse Python-Based format:\n\n```python\ndef tree_by_levels(node):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\n\n\n\n", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\nUse Python-Based format\nYou are given a binary tree:\n\n```python\nclass Node:\n    class Node:\n    def tree_by_levels(node):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nReturn an empty list\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    __init__\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    This function works on binary tree:", "\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n   \n\n\n\n\n\nYou", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn empty list if root is `None`.\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n   \n\n\n\n\n\n```python", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print 'Node: node'\n\t\n\n\n\n\nYou are given a binary tree:\n\n```python\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\nThe first example:\n\n```python\nif not:python\nreturn []\n```\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    __init__(\n\n\n\n\n\n``", "\n\n\n\n\n\n\n\nUse Python-Based format\n\n\n  node = tree_by_levels(node)\n\n  if root is not None:\n    return [node]\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n```python\nif not root:", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a binary tree:\n\n```python\nclass Node:\n    value = 9\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```c"], "prompt": "\nQUESTION:\nYou are given a binary tree:\n\n```python\nclass Node:\n    def __init__(self, L, R, n):\n        self.left = L\n        self.right = R\n        self.value = n\n```\n\nYour task is to return the list with elements from tree sorted by levels, which means the root element goes first, then root children (from left to right) are second and third, and so on.\n```if:ruby\nReturn empty array if root is `nil`.\n```\n```if:haskell\nReturn empty list if root is `Nothing`.\n```\n```if:python\nReturn empty list if root is `None`.\n```\n```if:csharp\nReturn empty list if root is 'null'.\n```\n```if:java\nReturn empty list is root is 'null'.\n```\n\nExample 1 - following tree:\n\n                     2\n                8        9\n              1  3     4   5\n\nShould return following list:\n\n    [2,8,9,1,3,4,5]\n\nExample 2 - following tree:\n\n                     1\n                8        4\n                  3        5\n                             7\nShould return following list:\n\n    [1,8,4,3,5,7]\ndef tree_by_levels(node):\n\t\nUse Call-Based format\nANSWER:\n"}}