{"2716": {"code": ["\nUse Function-Based format\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\nUse String-Based format\n:\n\n\ndef decode(st):\n\t\nUse String-Based format\n\n\n:\n\n\n::\n\n\n:\n\n\ndef decode(st):\n\t\n\n:\n:\n\n\n:\n**Step 3:**", "\nUse Call-Based format\t\nUse Call-Based format\n\n\ndef decode(st):\n\t\nUse Call-Based format\n:\n\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\n:\n\n\n\n:\n:\n\n\n:\n\n\n```\n\n:\n**Step 3:**\n:\n\n:\n**Step", "\n:\n\t\nUse Call-Based format\ndef decode(st):\n\t\nUse Call-Based format\n\nExample:\n\n\t\n\n:\n\n\n\n\n:\n\n\n\ndef decode(st):\n\t\nUse Python format:\n:\n\n\n:\n\n```\n\n:\n**Step 3:**\n:\n\n\n:\n**Step 2", "\n:\n\t\nUse Call-Based format\ndef decode(st):\n\t\nUse Call-Based format\n\n\t\nUse C-Based format\n\nExample:\n\n\n:\n\t\n\n\n\n:\n\n\n\ndef decode(st):\n\t::\n\n\n\n:\n\n\n\n\n:\n**Step 3:**\n\n\n\n:\n**", "\n:\n\nUse Call-Based format\n\t\nUse Call-Based format\ndef decode(st):\n\t\nUse Call-Based format\t\n:\n\n\n\n\n\n:\n\n\n\ndef decode(st):\n\t\nUse Call-Based format::\n\n\n\n:\n\n\n\n:\n\n:\n\n\n:\n**Step 1:** Create a", "\t\nUse Call-Based format\t\nUse Call-Based format\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\t\n:\n\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n:\n\n\n:\n:\n\n\n:\n\n\n\n:\n\n**Step 3:**\n:\n\n\n:\n**Step", "\nUse Call-Based format\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\t\nUse Call-Based format:\n\n\n\n:\n\n\n\n\n:\n\t\n:\n\n\n\n:\n\n\n\n\n\n:\n\n:\n\n\n\n:\n**Step 3:** Create a function", "\nUse Call-Based format:\n\t\nUse Call-Based format\ndef decode(st):\n\t\nUse Call-Based format\n\nExample:\n\ndef encode(st):\n\t\nUse Call-Based format\n\n\n:\n\n\n\n:\n\n\n::\n\n\n:\n\n\n\n:\n\n:\n\n\n:\n**Step 2:** Create", "\nUse Call-Based format\t\nUse Call-Based format\n\ndef decode(st):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\t\n:\n\n\n\n:\n\n\n\ndef decode(st):\n\t:\n:\n\n\n\n:\n\n\n\n:\n\n:\n\n\n:\n**Step 1:** Create a function", "\n:\n\t\nUse Call-Based format\ndef decode(st):\n\t\nUse Call-Based format\n\nExample:\n\n\n\n:\n\n\n\n\n\nUse Function-Based format:\n\n\n\n\t\nUse Python-Based format:\n:\n\n\n:\n\n\n\n:\n**Step 3:**\n:\n\n\n:\n**Step 2:", "\nUse Base-Based format\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n:\n\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\n:\n\n\n::\n\n\n:\n\n\n:\n\n**Step 3:**\n:\n\n\n:\n**Step 2", "\nUse C-Based format:\n\nUse Call-Based format\n\n\ndef decode(st):\n\t\nUse C-Based format\n\n:\n\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n:\n\n\n\n::\n\n\n:\n\ndef decode(st):\n\t\n:\n:\n\n\n:\n**Step 1:", "\nUse String-Based format\t\nUse Call-Based format\n\ndef decode(st):\n\t\nUse Call-Based format\n\nExample:\n\n\n:\n\n\n\ndef decode(st):\n\t\n\n:\n\n\n:\n:\n\n\n:\n\n\n`\n\n\n:\n\n:\n\n\n:\n**Step 1:** Create a function called", "\nUse Call-Based format\t\nUse Call-Based format\n\n\ndef decode(st):\n\t\nUse Call-Based format\n:\n\n\t\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\n:\n\n\n::\n\n\n\n:\n\n\n\n:\n\n```\n\n:\n\n\n\n\n:\n\n**Step", "\nUse Call-Based format\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\n\n:\n\n\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\n:\n\n\n\n:\n\t:\n\n\n:\n\n```\n\n:\n\n**Step 3:**\n\n\n:\n**Step 2:**", "\nUse Python-based format\n\ndef decode(st):\n\t\nUse Python-Based format\n\nUse Call-Based format\n\nExample:\n\n\n\t\n\n:\n\n\ndef decode(st):\n\t\n\n:\n\n\n:\n:\n\n\n:\n\n\n\n\n:\n\n**Step 1:**\n:\n\n\n:\n**Step 2", "\nUse Call-Based format\n\ndef decode(st):\n\t\nUse Call-Based format\n\nExample:\n\ndef encode(st):\n\t\nUse Call-Based format\n\nExample:\n\n\n:\n\n\n\n\n:\n\n\n::\n\n\n:\n\n\n\n\n\n\n\n:\n\n\n\n:\n**Step 1:** Create a", "\nUse Call-Based format\n\ndef decode(st):\n\t\nUse Call-Based format\n\nExample:\n\t\nUse Call-Based format\n\nExample:\n\n\n:\n\n\n\n:\n\n\n\n\n:\n:\n\n\n\n:\n\n\n\n\n\n\n:\n\n**Step 3:**\n\n\n:\n\n**Step 3:**", "\nUse Call-Based format\n\n\ndef decode(st):\n\t\nUse Call-Based format\n\n\t\nUse String-Based format\n:\n\n\n\n\n\n\t\nUse Call-Unified format:\n\n\n\n\n:\n:\n\n\n:\n\n\n```\n\n\n:\n\n:\n\n\n\n:\n**Step 3:** Create a", "\nUse Call-Based format\t\nUse Call-Based format\n\ndef decode(st):\n\t\nUse Call-Based format\n:\n\n\n\ndef decode(st):\n\n\n:\n\n\n\ndef decode(st):\n\t\nUse Call-Based format::\n\n\n:\n\n\n:\n\n:\n\n\n:\n**Step 3:** Create a"], "prompt": "\nQUESTION:\n**Step 1:** Create a function called `encode()` to replace all the lowercase vowels in a given string with numbers according to the following pattern:\n```\na -> 1\ne -> 2\ni -> 3\no -> 4\nu -> 5\n```\n\nFor example, `encode(\"hello\")` would return `\"h2ll4\"`. There is no need to worry about uppercase vowels in this kata.\n\n**Step 2:** Now create a function called `decode()` to turn the numbers back into vowels according to the same pattern shown above.\n\nFor example, `decode(\"h3 th2r2\")` would return `\"hi there\"`.\n\nFor the sake of simplicity, you can assume that any numbers passed into the function will correspond to vowels.\ndef encode(st):\n\t\nUse Call-Based format\nANSWER:\n"}}