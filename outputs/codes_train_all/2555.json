{"2555": {"code": ["\n.remove(x)\n\n.remove(x)\n\n\n\n\n\n\nset([])\n\n.discard()\n\n.remove(x)\n\n.discard()\n\n.discard(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.discard(x)\n\n\n\n\nn = int(input())", "\nset([])\n\nremove(1)\n\n.remove(2)\n\n\n\n\n\n\n\nset([])\n\n.discard(1)\n\n\n\n\n\n>>> s = set([])\n print s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.discard(1)\n\n.discard(2)\n\n\n\n\n\nn", "\n\n.remove(x)\n\n.discard(x)\n\n\nremove(x)\n\n.discard(x)\n\n\n\n\n\n\n\n.discard(x)\n\n\n\n\n\n\n\n\n\n\n\nset([])\n\n\n\n\n\n\n\n\n\n\nset([])\n\n=====Result Format=====\n\n\nn = int(", "\nremove(x)\ndiscard(x)\n\n\n\nremove(x)\ndiscard(x)\ndiscard(x)\n\n.pop()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nremove(x)\n\n.discard(x)\n\n\n\n\n\n\n\n\n\nN = int(input())\nN =", "\nset([])\n\n\nset([])\n\n.discard()\n\n.discard(0)\n\n.discard(1)\n\n\n\n\n\n\n\nset([])\n\n\n\n\n\n\n\n\n\n\n\n\n.discard(1)\n\n\n\n\n\n\n\n\n\n\n.discard(1)\n\n\n\nn = 0\ns = set", "\nset([])\n\n\n\n\n\n\n\nset([])\n\n.discard()\n\n.remove(2)\n\n.discard(3)\n\n.discard(4)\n\n.discard(5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\n\n\n\nn = int(", "\n\n\nset([])\n\n.discard(x)\n\n.discard(x)\n\n.discard(x)\n\n\n\n\n\n\nset([])\n\n\n\n\n\n>>> s = set([])\n\n\n\n\n\n\n\n\n\n\n\ndiscard(0)\n\n\n\n\n\n\nn = int(input())\nn =\n\nn =", "\nremove(x)\ndiscard(x)\ndiscard(x)\n\n\n\n\n\n\n\n\nset([])\n\n.discard(x)\n\n\n\nset([])\n\n\n\n\n\n\n\n\n\n\nset([])\n\n.discard(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\nn", "\n\nremove(x)\n\nremove(x)\n\n.discard(x)\n\n\n\n\n\nset([1, 2, 3, 4])\n\n.discard(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset([])\n\n\n\n\n\n\nn = int(input())\nN = int(input())\n", "\n\nremove(x)\n\n\nremove(x)\n\n.discard(x)\n\n\n\n\n\n\ndiscard(x)\n\n.discard(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset([])\n\n\n\ndiscard(x)\n\n\n\n\n\n\n\nn = int(input())\nn = int(input())", "\n\n\nset([])\n>>> print s\nset([])\n\n.discard()\n\n.discard()\n\n.discard()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninput()\n\n\n\n\n\n\n\n\nset([])\n\n.discard(5)\n\n.discard(0)\n\n\n\n\n\n\n\n\nn = int", "\nset([])\n\n\n\nset([1])\n\n.discard(1)\n\n.discard(1)\n\n.discard(0)\n\n.discard(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop\n\nremove\ndiscard\n\ndiscard\n\n\n\n\n\n\nn = int(input", "\n.discard(x)\n\n\n\nremove(x)\n\n.discard(x)\n\n.discard(x)\n\n.discard(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\n\n\n\n\n\n\n\n\n\n\n\n.discard(x)\n\n\n\nn = int(input())\n", "\nremove(x)\n\ndiscard(x)\n\n\n\nremove(x)\n\ndiscard(x)\n\n\n\n\n\n\n\n\n\n.remove()\n\n\n\n\n\n\n\n\n\n\n\n\n.remove(x)\n\n\n\n\n\n\n\n\n\n\n.remove(1)\n\n\n\nn = set([])\ns = set", "\n\n\nset([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n.discard()\n\nExample:\n\n>>> s = set([])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>> s.add(1)\n>>> s.remove(2)\n", "\n\n\n.remove()\n\n.remove(x)\n\n.discard(x)\n\n\n\n\n\nset([])\n\n.discard(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.discard()\n\n.pop()\n\n.discard()\n\n.discard()\n\n\n\n\n\n\n\n\n>>> s = set([", "\n\nremove(x)\n\ndiscard(x)\n\n\n\nremove(x)\n\ndiscard(x)\n\ndiscard(x)\n\n\n\n\n\n\nremove(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nremove(1)\n\n\n\ninput()\n\n\n\n\nn = int(input())", "\n\nremove(x)\n\n\ndiscard(x)\n\n\n\n\n\n\nset([])\n\n.discard(0)\n\n.discard(1)\n\n.discard(2)\n\n\n\n\n\n\n\n\n\n\n\n\ndiscard(0)\n\n\n\n\n\n\n\n\n\n\nn = int(input())\ns = set([])\n", "\nremove()\n\n\ndiscard()\n\ndiscard()\n\nremove(x)\n\ndiscard(x)\n\ndiscard(x)\n\ndiscard(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset([1])\n\n\n\n\n\n\n\n\n\n\n.remove(x)\n\n\n\n\n\n\n\nn = int(input", "\n\n\nset([1])\n>>> print s\nset([2])\n>>> print s\nset([3])\n>>> print s\nset([])\n\nExample:\n\n>>> s = set([])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.remove(x)\n\n.discard(y"], "prompt": "\nQUESTION:\n=====Function Descriptions=====\n.remove(x)\n\nThis operation removes element x from the set.\nIf element x does not exist, it raises a KeyError.\nThe .remove(x) operation returns None.\n\nExample\n\n>>> s = set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> s.remove(5)\n>>> print s\nset([1, 2, 3, 4, 6, 7, 8, 9])\n>>> print s.remove(4)\nNone\n>>> print s\nset([1, 2, 3, 6, 7, 8, 9])\n>>> s.remove(0)\nKeyError: 0\n\n.discard(x)\n\nThis operation also removes element x from the set.\nIf element x does not exist, it does not raise a KeyError.\nThe .discard(x) operation returns None.\n\nExample\n\n>>> s = set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> s.discard(5)\n>>> print s\nset([1, 2, 3, 4, 6, 7, 8, 9])\n>>> print s.discard(4)\nNone\n>>> print s\nset([1, 2, 3, 6, 7, 8, 9])\n>>> s.discard(0)\n>>> print s\nset([1, 2, 3, 6, 7, 8, 9])\n\n.pop()\n\nThis operation removes and return an arbitrary element from the set.\nIf there are no elements to remove, it raises a KeyError.\n\nExample\n\n>>> s = set([1])\n>>> print s.pop()\n1\n>>> print s\nset([])\n>>> print s.pop()\nKeyError: pop from an empty set\n\n=====Problem Statement=====\nYou have a non-empty set s, and you have to execute N commands given in N lines.\nThe commands will be pop, remove and discard. \n\n=====Input Format=====\nThe first line contains integer n, the number of elements in the set s.\nThe second line contains n space separated elements of set s. All of the elements are non-negative integers, less than or equal to 9.\nThe third line contains integer N, the number of commands.\nThe next N lines contains either pop, remove and/or discard commands followed by their associated value.\n\n=====Constraints=====\n0 < n < 20\n0 < N < 20\n\n=====Output Format====\nPrint the sum of the elements of set s on a single line.\nn = int(input())\ns = set(map(int, input().split()))\nUse Standard Input format\nANSWER:\n"}}