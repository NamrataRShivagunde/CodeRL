{"1760": {"code": ["\n\n\n# Output\n\n  size:number\n  number\n  size:number\n  number\n  number\n  number\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n- `3` fixed testcases\n\n- `4` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n\n-`\n\n\n\n\n`\n\n", "\n# Example\n\n\n\n# Task\n\nThe task can count a number of chess squares in a chess board.\n\n# Note\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n```\n\n\n\n\n\n\n\n\n\n\n# Test\n\n- `1` fixed testcases\n\n-\n\n\n` small", "\n# Output\n# Task\n\n# Note\n\n# Task\n\n1,1,2,3,1,2,3,3,3,3,3,3,3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n` fixed testcases\n\n-\n` fixed", "# Example\n\n## Example\n\n\n\n\n\nif:chessboard\n- `2 <= chessBoard.Length <= 3`\n- `3 <= chessBoard.Length <= 3`\n```\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n`\n\n- `", "\n\n\n# Output\n\n- `1` empty chess board\n\n- `2` empty square\n\n- `3` empty square\n\n# Note\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n# Example\n\n\n`\n\n\n\n\n\n`\n\n`\n\n`\n\n- `4` the testcases\n", "\n\n\n# Output\n\n%chessBoard\n%chessBoard\n%chessBoard\n# square\n\n# number\n\n\n\n\n\n\n\n\n\n\n\n\n`\n`\n\n\n\n\n```\n\n- `1` fixed testcases\n\n- `1` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n\n` dynamic", "\n\n\n# Output\n\nchessBoard=[1,2,3,4,5]\n\n# Example\n\nchessBoard=[1,2,3]\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Test\n\n- `1` fixed testcases\n\n\n`", "\n\n\n# Description\n\n# Example\n\n# Task\n\n\nif there are 4 squares in the chess board:\n\n  [1,1]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n- `5", "\n# Description\n\n\n\n\n\nif:chessboard\n- `2 <= chessBoard.length <= 220`\n- `2 <= chessBoard.Length <= 220`\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n``\n\n\n\n\n\n\n- `10` fixed testcases\n\n- `15`\n`\n\n`", "\n# Example\n\n\n\n# Examples\n\n# Example\n\n# Task\n\n# Task\n\n# Example\n\n# Task\n\n# Example\n\n# Example\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n```\n\n\n- `3` fixed testcases\n\n\n\n\n`", "\n\n\n\n# Example\n\n# Task\n\n\n# Task\n\n\n1\n\n\n# Example\n\n# Task\n\n# Task\n\n- `4` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n- `5` fixed testcases\n\n- `100`\n`\n\n` fixed", "# Description\n\n\n# Example\n\n# Task\n\n  # Task\n\n  # Task\n\n  # Task\n\n  # Task\n\n  # Task\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n# Example\n\n`\n\n\n\n\n` fixed testcases", "\n\n\n# Example\n\n[1,2,3,4,5,6,6,6,7,7]\n\n\n\n\n\n\n\n\n\n\n\n- `5` fixed testcases\n\n- `5` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n`\n\n\n\n`\n\n- `", "\n# Description\n\n# Examples\n\n# Task\n\n# Task\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `1` fixed testcases\n\n- `2` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n# Test\n\n- `2`\n\n\n\n`", "\n\n# Output\n\nsize:number\n\n# Notes\n\n#\n\n# Notes\n\n# Examples\n\n# Example\n\n# Description\n\n# Description\n\n# Examples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `2` fixed testcases\n\n-\n\n\n\n`", "\n# Example\n\n\n\n\n\n\n# Example output\n\n\n# Note\n\n- `3` fixed testcases\n\n- `5` fixed testcases\n\n- `100` fixed testcases\n\n- `100` fixed testcases\n\n- `5` fixed testcases\n\n- `10` fixed testcases\n\n-\n\n\n\n\n\n\n```\n\n\n`\n\n`", "\n\n# Example\n\n1 x 1 x 1 x 1 x 1 x 1 x 1 x 1\n\n\n\n\n\n\n\n# Test\n\n\n\n\n\n\n- `2` fixed testcases\n\n- `4` fixed testcases\n\n- `3` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n`\n\n- `", "\n\n# Example\n\n\n[1,2,3]\n\n# Example\n\n# Task\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `3` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `5` testcases\n\n\n`\n\n`", "\n\n\n\n# Example\n\n# Task\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n- `5` fixed testcases\n\n- `100` fixed testcases\n\n- `100` fixed testcases\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n` testcases\n\n-", "\n\n\n# Output\n\n# Examples\n\n# Task\n\n- `5` fixed testcases\n\n- `5` fixed testcases\n\n- `5` fixed testcases\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `3`\n\n\n\n\n\n\n\n`"], "prompt": "\nQUESTION:\n# Task\n\nYou are given a `chessBoard`, a 2d integer array that contains only `0` or `1`. `0` represents a chess piece and `1` represents a empty grid. It's always square shape.\n\nYour task is to count the number of squares made of empty grids.\n\nThe smallest size of the square is `2 x 2`. The biggest size of the square is `n x n`, where `n` is the size of chess board. \n\nA square can overlap the part of other squares. For example:\n\nIf\n\n```\nchessBoard=[\n  [1,1,1],\n  [1,1,1],\n  [1,1,1]\n]\n```\n\n...there are four 2 x 2 squares in the chess board:\n\n```\n[1,1, ]  [ ,1,1]  [ , , ]  [ , , ]\n[1,1, ]  [ ,1,1]  [1,1, ]  [ ,1,1]\n[ , , ]  [ , , ]  [1,1, ]  [ ,1,1]\n```\n\nAnd one 3 x 3 square:\n```\n[1,1,1]\n[1,1,1]\n[1,1,1]\n```\n\nYour output should be an object/dict. Each item in it should be: `size:number`, where size is the square's size, and number is the number of squares. \n\nFor example, if there are four `2 x 2` squares and one `3 x 3` square in the chess board, the output should be: `{2:4,3:1}` (or any equivalent hash structure in your language). The order of items is not important, `{3:1,2:4}` is also a valid output.\n\nIf there is no square in the chess board, just return `{}`.\n\n# Note\n\n```if:javascript\n- `2 <= chessBoard.length <= 400`\n```\n```if:python\n- `2 <= chessBoard.length <= 120`\n```\n```if:ruby\n- `2 <= chessBoard.length <= 130`\n```\n```if:java\n- `2 <= chessBoard.length <= 250`\n```\n```if:haskell\n- `2 <= chessBoard.length <= 120`\n```\n```if:csharp\n- `2 <= chessBoard.Length <= 220`\n```\n\n- `5` fixed testcases\n\n- `100` random testcases, testing for correctness of solution\n\n- `100` random testcases, testing for performance of code\n\n- All inputs are valid.\n\n- Pay attention to code performance.\n\n- If my reference solution gives the wrong result in the random tests, please let me know(post an issue). \n\n# Example\n\nFor \n```\nchessBoard = [\n  [1,1],\n  [1,1]\n]\n```\n\nthe output should be `{2:1}`.\n\n\nFor \n```\nchessBoard = [\n  [0,1],\n  [1,1]\n]\n```\n\nthe output should be `{}`.\n\nFor \n```\nchessBoard = [\n  [1,1,1],\n  [1,1,1],\n  [1,1,1]\n]\n```\n\nthe output should be `{2:4,3:1}`.\n\nFor \n```\nchessBoard = [\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\n```\n\nthe output should be `{}`.\ndef count(chessBoard):\n\t\nUse Call-Based format\nANSWER:\n"}}