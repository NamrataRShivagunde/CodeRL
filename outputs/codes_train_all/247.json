{"247": {"code": ["\n\n\n   \n    minSumOfLengths(self, arr, target) -> int:\n\n\n\n\n\n    minSumOfLengths(self, arr, target) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn the minimum sum of the sub-array of arr.\n\n\n\n\n\n    Given an array", "\nUse Call-Based format\n\n\nExample 4:\n    minSumOfLengths(self, arr, target)\nReturn 1\n\n\u00a0\n\n\n\n\n\n\n\n   \n    sumOfLengths\n\n\u00a0\n\n\n\n\nExample 5:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given an array of integers arr and", "\nUse Call-Based format\nUse Call-Based format\n\n\n    minSumOfLengths(self, arr, target) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n1 <= sum = 3\n\n\nGiven an array", "\n\n\n\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n        return 1\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nSum of lengths of arr\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    def minSumOfLengths(self, arr, target):\n        return 1\n\n\n\n\n\n\n\u00a0\n\n\n\nGiven an array of integers arr and an integer target.\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= arr <= 10^5\n\n\nGiven an", "\nUse Call-Based format\n\n\n    def minSumOfLengths(self, arr: List[int], target: int):\n        return 10**8\n\n\n\n\n\n   \n    minSumOfLengths(self, arr, target)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given an array of integers arr and", "\nUse Call-Based format\n\n\n    arr, target = arr, target\n    \nUse Call-Based format\n\n\n\n\n\n1 <= arr <= 10^6\n1 <= target <= 10^4\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\n\n\u00a0\n\n    Given an array of integers", "\nUse Call-Based format\n\n   \n\nUse Call-Based format\n\n\n\n\n\n    sumOfLengths(self, arr, target) -> int\n\n\u00a0\nConstraints:\n\n1 <= target <= 10^8\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n    @UseCall-Based format\n\n   \n    arr: List[int]\n    target: int\n\n\n\n\n\n    minSumOfLengths(self, arr, target) -> int\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[2]\n\n\n\n\n    Given an array of integers arr", "\nUse Call-Based format\n\n   \n\n\n\n    minSumOfLengths(self, arr, target)\n\nReturns:\n\n1 <= sum <= target\n\n\n   \n    minSumOfLengths(arr, target)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= arr <= 10^9\n\n\n    Given", "\nUse Call-Based format\n\n\n    def minSumOfLengths(self, arr: List[int], target: int):\n        return 1\n\n\n\n\n\n   \n    return 1\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\narr and target are required to be of the same length\n\n\n\n\ngiven an", "\nUse Call-Based format\n\n\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n\n\n\n\n\n   \n\nExample:\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n    Given an array of integers arr and", "\nUse Call-Based format\n\n\n    def minSumOfLengths(self, arr: List[int], target: int):\n        return 0\n\n\n\n\n\n\n\n\nGiven an array of integers arr and an integer target.\n\n   \n\n\n\n\n\n\n\n\n\n\n\n1 <= arr <= 10^5\n\n\n\n\n    Given an array of integers", "\n\n\n    sumOfLengths(self, arr, target)\n    -> int:\n\n    target\n\n\n\n\n\n    minSumOfLengths(self, arr, target)\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nminSumOfLengths\n\nTarget:\n\n\n\n\n\n\n\n\n    arr = [2", "\nUse Call-Based format\n\n\n    arr, target\n\nUse Call-Based format\n\nGiven an array of integers arr and an integer target:\n\n\n\n\n\nGiven an array of integers arr and an integer target:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    sum = minSumOfLengths(arr, target)\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\n    def minSumOfLengths(self, arr, target):\n        return arr[i]\n\n\n\n\n\n\n\nGiven an array of integers arr and an integer target.\n\n   \n    return 0\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers arr and an integer target.\n\n\nGiven an", "\nUse Call-Based format\n\n\n    minSumOfLengths(self, arr, target)\n\nUse Call-Based format\n\n\n\n\n    minSumOfLengths(self, arr, target) -> int\n\nExample:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 3\n\nExplanation:\n\n\nGiven an", "\n\n\n\n    def minSumOfLengths(self, arr: List[int], target: int):\n        return arr[i]\n\n\n\n\n\n   \n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nThe array of integers arr and target.\n\n\n\n    Given an array", "\nUse Call-Based format\n\n\n    minSumOfLengths(arr, target) -> int:\n\nUse Call-Based format\n\n\n\n\n    minSumOfLengths(self, arr, target) -> int:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers arr and target.\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    def minSumOfLengths(self, arr, target: int):\n        return arr[target]\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= arr.length <= 10^8\n\n\n\n\n\n    Given an array of integers arr"], "prompt": "\nQUESTION:\nGiven an array of integers arr and an integer target.\nYou have to find two non-overlapping sub-arrays of arr each with sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\nReturn the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot\u00a0find such two sub-arrays.\n\u00a0\nExample 1:\nInput: arr = [3,2,2,4,3], target = 3\nOutput: 2\nExplanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\n\nExample 2:\nInput: arr = [7,3,4,7], target = 7\nOutput: 2\nExplanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\n\nExample 3:\nInput: arr = [4,3,2,6,2,3,4], target = 6\nOutput: -1\nExplanation: We have only one sub-array of sum = 6.\n\nExample 4:\nInput: arr = [5,5,4,4,5], target = 3\nOutput: -1\nExplanation: We cannot find a sub-array of sum = 3.\n\nExample 5:\nInput: arr = [3,1,1,1,5,1,2,1], target = 3\nOutput: 3\nExplanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 1000\n1 <= target <= 10^8\nclass Solution:\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}