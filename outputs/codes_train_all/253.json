{"253": {"code": ["\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n\n\n   \n       \n\n\n 1     2     3     3     3     2\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n    The first move is made by", "\nUse Call-Based format\n\n\n\n\nYou have n dresses on a line.\n\n\n\n\n\n\n\n\n    \n\nYou have n super washing machines on a line. \n\n\n\n\n       \n\n 1     1     2     2     3\n\n\n\n\n\n\n\n\n\n     0     0     0     0\n\n\n\nYou have", "\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n\n\n\n\n   \n\n\nUse Call-Based format\n\nYou have n super washing machines on a line\n\n\n\nExample4\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n\n\n   \nWe have 3 super machines", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou have n super washing machines on a line.\n\n\n\n\n1st move:    1     1     0     1     1     \n\n\n \n\n\n\n\n    \n\n\n\n\n    \n\n\n\n\n    In this case", "\nUse Call-Based format\n\n\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n 1     2     2     3    \n\n\n\n\n\n\n\n\n\n     1     2     1    \n\n\nYou have", "\nUse Call-Based format\n\n\n\n\nYou have n super washing machines on a line.\n\n\n\n    def findMinMoves(self, machines: List[int]):\n\n   \n\n\n\n\n findMinMoves(self, machines):\n\n\n\n\n\n\n\n\n\n\n\nYou have n super washing machines\n\n\n\n\nYou have", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n\n\nExample4:\n\n    findMinMoves(self, machines):\n\n\n\n\n\n\n     2\n\n\n\n\n\n\n\n\nYou have n super wash", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nYou have n super washing machines on a line. \n\nUse Call-Based format\n\nNote:\n\nNote:\n\n\n\n   \n\n\n\n   \n       \n\n\n\n\n     1     1     1    \n\n\n\n\n\n    \n\n\nYou have n super wash", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n\n\n       \n\n\n 2     2     3    \n\n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n    The first", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n findMinMoves(self, machines: List[int]):\n\n\n\n\n\n\n\n     1     2     2    \n\n\n\n\n\n\n\n\n\nYou have n super", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n    findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n\n\n     1     1\n\n\n\n\n\n\n\n\nYou have n super", "\nUse Call-Based format\nYou have n dresses number on a line.\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\nYou have n dresses number on a line.\n\n\n\n\n       \nYou have n dresses number on a line\n\n\n\n\n\n    \n\n\n\n\n    \n\n\n\n\nYou have n super w", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n    \n\n\n    \n\n\n\n    \n    findMinMoves(self, machines: List[int]) -> int:\n\n\n 1     2     2     2    \n\n\n\n     \n\n\n\n\n\n\nIf you have more than n super", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n    \n\n    def findMinDresses(self, machines: List[int]) -> int:\n\n\n\n\n    \n       \n\n    \n\n\n     2     2     2    \n\n\n\n\n\n\n\n\n\nIf you have m ", "\nUse Call-Based format\nYou have n super washing machines on a line.\n\n\n\n\n\n\n\n\n\nYou have n super washing machines on a line. \n\n\n    findMinMoves(self, machines: List[int]) -> int\n\n\n\n\n\n    \n\n\n\n\n\n     1     2     1    \n\n\n\nYou have", "\n\nUse Call-Based format\n\n    use Call-Based format\n\nNote:\n\n\n\n\n\n\n   \n        # TODO:\n       \n\n     1     2     3     1    \n\n\nNote:\n\n\n       \n\n 1     1     2     2    \n\n\n\n\n\n\n\n\n\n    \n\n    \n\n        You have n super", "\nUse Call-Based format\n\n\n\n\n\nYou have n dresses on a line\n\n\n\n\n\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n    \n\n\n\n \n\n   \n\n 1     2     3     2\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nYou have n super w", "\nUse Call-Based format\n\n\n\n\n\n\nn super washing machines on a line:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\n\n\n\n\n       \n\n 1     2     2     3 \n\n\n\n\n     1\n\n\n\n\n    \n\n\nYou have n super wash", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findMinMoves(self, machines: List[int]) -> int:\n\n\n\n\n    findMinMoves(self, machines: List[int]) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    0     1    \n\n\n\nYou have n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nYou have n dresses on a line.\n\n\n\n\n\n\n\nn dresses\n\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n    \n\n\n\n\n\n    \n\n\n\nYou have n super washing"], "prompt": "\nQUESTION:\nYou have n super washing machines on a line. Initially, each washing machine has some dresses or is empty. \n\n\nFor each move, you could choose any m (1 \u2264 m \u2264 n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines  at the same time .  \n\nGiven an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\n\nExample1\n\nInput: [1,0,5]\n\nOutput: 3\n\nExplanation: \n1st move:    1     0     1     1     4\n2nd move:    1     2     1     3    \n3rd move:    2     1     2     2     2   \n\n\nExample2\n\nInput: [0,3,0]\n\nOutput: 2\n\nExplanation: \n1st move:    0     1     2     0    \n2nd move:    1     2 --> 0    =>    1     1     1     \n\n\nExample3\n\nInput: [0,2,0]\n\nOutput: -1\n\nExplanation: \nIt's impossible to make all the three washing machines have the same number of dresses. \n\n\n\n\nNote:\n\nThe range of n is [1, 10000].\nThe range of dresses number in a super washing machine is [0, 1e5].\nclass Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}