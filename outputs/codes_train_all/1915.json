{"1915": {"code": ["\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n   \n    movesToStamp(self, stamp, target)\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nNote:\n\n\nExample 3:\n\n\n\n    Now you have target\ufffd", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    def movesToTarget(self, stamp: str, target: str):\n        return [0,1]\n\n\n\u00a0\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    ACTION:\n    if", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    return self.movesToStamp(stamp, target)\n\n\n\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou want to move a target\u00a0string of lowercase letters.\n\n\n\n\n\n\n    target = \"ab\";", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\nNote:\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n   \n    movesToStamp(self, stamp, target)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    A sequence of target of lowercase letters.", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= stamp.length <= target.length", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return [1,0]\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n    A sequence is possible to stamp, but", "\nUse Call-Based format\nUse Call-Based format\n\n\nExample 3:\n    self.movesToStamp(stamp, target)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    stamp = \"ab\"\n    target", "\n\n\n\nUse Call-Based format\n\n    movesToStamp(self, stamp, target)\n\nUse Call-Based format\n\n\n\n\n\n   \n    movesToStamp(self, stamp, target)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        target = [a,b,c", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return movesToStamp(self, stamp, target)\n\n\n\n\n\nNote:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\tA target was specified by the stamp.\n", "\nUse Call-Based format\n\n\n\n\nNote:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nNote:\n\nNote:\n\n", "\n\nUse Call-Based format\n\n    return movesToStamp(self, stamp, target)\n\n\n\n\n\n   \n    return movesToStamp(self, stamp, target)\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou want to form a target string of lowercase letters.\n\n\n\n\n\n    IN:\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    return movesToStamp(self, stamp, target)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        Example 3:\n\n   \n\n\n    >>> if target = \"ab\",", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n\n    return [0,1]\n\n\n\n\n\n\n\n\n   \n    return [3,2]\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1 <= target.length <= target", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    def movesToTarget(self, stamp: str, target: str):\n        return [0, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    >>> # DISABLE_DOCTEST", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    A sequence of target that is possible to stamp", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\u00a0\nNote:\n\n\n\n    def movesToTarget(self, stamp, target):\n       ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n1 <= stamp.", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\n\n\n\n \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Example 3:\n\n    >>> movesToStamp(\"ab\", \"ab\")\n\n\n   ", "\nUse Call-Based format\n\n   \n    movesToStamp(self, stamp, target)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n    movesToStamp(self, stamp, target)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    target = \"ab\";\n\n   ", "\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample 3:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    [0, 0, 0]"], "prompt": "\nQUESTION:\nYou want to form a target\u00a0string of lowercase letters.\nAt the beginning, your sequence is target.length\u00a0'?' marks.\u00a0 You also have a stamp\u00a0of lowercase letters.\nOn each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.\u00a0 You can make up to 10 * target.length turns.\nFor example, if the initial sequence is \"?????\", and your stamp is \"abc\",\u00a0 then you may make \"abc??\", \"?abc?\", \"??abc\"\u00a0in the first turn.\u00a0 (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)\nIf the sequence is possible to stamp, then return an array of\u00a0the index of the left-most letter being stamped at each turn.\u00a0 If the sequence is not possible to stamp, return an empty array.\nFor example, if the sequence is \"ababc\", and the stamp is \"abc\", then we could return the answer [0, 2], corresponding to the moves \"?????\" -> \"abc??\" -> \"ababc\".\nAlso, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within 10 * target.length\u00a0moves.\u00a0 Any answers specifying more than this number of moves\u00a0will not be accepted.\n\u00a0\nExample 1:\nInput: stamp = \"abc\", target = \"ababc\"\nOutput: [0,2]\n([1,0,2] would also be accepted as an answer, as well as some other answers.)\n\n\nExample 2:\nInput: stamp = \"abca\", target = \"aabcaca\"\nOutput: [3,0,1]\n\n\n\u00a0\nNote:\n\n\n\n1 <= stamp.length <= target.length <= 1000\nstamp and target only contain lowercase letters.\nclass Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}