{"1975": {"code": ["\n\n\n\n\n\n\n\n\n\n \u00a0\nInputs:\n\n[int x]\n \u00a0\n    k\n    val\n    increment\n    increment\n\n\u00a0\n\nExample 2:\n\n\n\n\n   \n   \n)\n)\n\n\n\n\n\n\n\n\n\n\n   (self):\n        //, size=1, increment=1", "\n\n\n\n\n\n\n\n\n\n\n    def __init__(self):\n        self.push(3);\n        self.pop();\n        self.inc(3);\n\nExample 2:\n\n   \n\n\n\n):\n):\n\n\n\n\n\n\n\n\n\n\n\n\n   (self):\n        self.push(3);\n\n  ,", "\n\n\n\n\n\n\n\n\n\n\n\n\u00a0Example 2:\n\nInput:\n\n[1,2,3,4,5,5]\n\n\n   \n   \n\n   \u00a0\n):\n   ...\n\n):\n becomes [1, 2]\n\n\n\n\n\n\n\n\n\n\n   :\n       ) {\n            self.pop();", "\n\n\n\n\n\n\n\n\n\n\n\u00a0Example 2:\n\nInput\n[1,2,3,4,5,5]\n\n\n   \n   \n        pass\n\n)\n        pass\n\n):\n        pass\n\n\n\n\n\n\n\n\n\u00a0 becomes [1, 2, 3]\n\nExample 2:\n\n   \n  , maxSize", "\n\n\n\n\nExample 1:\n\nInput\n[1,2,3,4,5,5]\n\n\n\n\n\nExample 2:\n\n\n\n):\n   ...\n\n\nExample 2:\n\n\n\n):\n       ...\n):\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n:\n       ):\n            self.", "\n\n\n\n\n\n\n\n\n\n    Create a stack with a custom stack size and a custom stack type and add the new elements.\n\n\u00a0Example 2:\n\nExample 1:\n\nInput:\n\n\n\n\n   \n\n):\n):\n\n\n\n\n\n\n\n\n\n\n\n   (self):\n        pass\n\n   ):\n        pass\n\n", "\n\n\n\n\n\n\n\n\n\n[1, 2, 3]\n\n\u00a0\nExample 2:\n\n[1, 2, 3]\n\n\u00a0\nExample 2:\n\nInput:\n\n[1, 2]\n\n\n,,,\n):\n):\n\u00a0\n\n\n\n\n\n\n\n\n   :\n       ):\n            self.push", "\n\n\n\n\n\n\n\n\n\n\n\u00a0\n    CustomStack(3);\n    CustomStack(3);\n    CustomStack(3);\n    CustomStack(3);\n\nExample 2:\n\n   \n   \n):\n        pass\n):\n\n\n\n\n\n\n\n\n\n\n\n\n   \n        val = 1;\n       ) {\n            self", "\n\n\n\n\n\n\n\n\nPush the stack and increment the stack.\nPop the stack and return the top of the stack.\n\n\u00a0\nExample 2:\n\nInput:\n\n[1,2,3]\n\n\n\n\n   \n   \n):\n):\n\u00a0\n\n\n\n\n\n\n\n\n\n   :\n       ):\n            self.push", "\n\n\n\n\n\n\n\n\n\n \u00a0\nExample 2:\n\nInput:\n[1,2,3]\n\nOutput:\n[1,2,3]\n\n\u00a0\n\n\n\n   \n   \n):\n       ...\n):\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n   :\n       ...\n\n):\n            self", "\n\n\n\n\nExample 2:\n\nInput\n[1,2,3,4,5,3,4,5]\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n   \n   \n):\n        self.push(1);\n\n):\n\n\n\n\n\n\n\n\n\u00a0 becomes [1, 2]\n\n\n  , size=", "\n\n\n\n\n\n\n\n\n\n\n\n\n    CustomStack(1,1,1,1,1,1,1,1,1,1)\n    CustomStack(3,1);\n\n\n   \n   \n):\n        return self\n):\n\n   \n\n\n\n\n\n\n\n\n   :\n        pass\n\n):\n        pass\n\n", "\n\n\n\n\n\n\n\n\n\n\u00a0\n\n   \n   \n        #)\n        # this is an example 1\n        # self.increment = 1\n        # self.pop = 1\n\n):\n        becomes [1, 2, 3]\n\n\n\n\n\n\n\n\n\n\n   (self) {\n        super(self)\n      , push,", "\n\n\n\n\n\n\n\n\n\t(1)\u00a0\n\t(1)\u00a0\n\t(1)\u00a0\n\t(1)\u00a0\n\n\n\n\n = new CustomStack();\n\nExample 2:\n\n\n   \n):\n)\n\t\n\n\n\n\n\n\n\n\n   (self, maxSize):\n        # stack is empty\n      ,", "\n\n\n\n\n\n\n\n\n\n    Simple constructor:\n    CustomStack(int maxSize)\n    CustomStack(int k)\n    CustomStack(int k)\n    CustomStack(1);\n\n\n\n   \n   \n):\n       ...\n)\n\n\n\n\n\n\n\n\n\n\n   (self)\n        return self\n\n\u00a0):\n       ", "\n\n\n\n\nExample 2:\n\nOutput\n[1, 2, 3, 4, 5, 2, 3]\n\n\n\n\n\n\n\n)\n    return [1, 2];\n\n\u00a0Example 2:\n\n\n   \n)\n)\n\n\n\n\n\n\n\n\n\n\n\n   ):\n        return self;\n\n\nExample 2:)", "\n\n\n\n\n\n\n\n\n\n\n\u00a0Example 2:\n\nInput\n[0,1,1,2,2,1,1,1,1,2,2,2,3]\n\n\n   \n   \n):\n        pass\n\n):\n\n\n\n\n\n\n\n\n\n\n\n   )\n):\n        self.pop(1);", "\n\n\n\n\nExample 2:\n\nExample 1:\n\nInput:\n[1,2,3,2,3]\n\nExample 2:\n\n\n\n\n\n\n\n\n)\n\n   \n   \n)\n    self.push(1);\n)\n\n\n\n\n\n\n\n\n\n\n\n   \n        return self\n\n, x: int)", "\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n\n   \n    def __init__(self)\n        self.__init__(self);\n\n   \n\n\nExample 2:\n\n    CustomStack\n\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n   \n        __init__(self)\n)\n        __init__(", "\n\nExample 0:\n\n\n\n\n\u00a0\nExample 2:\n\nUse CustomStack()\n\n\n\n\n\n\n\n)\n   ...\n\n\n   \n   \n       ...\n\n   ...\n\n)\n       ...\n\n)\n becomes []\n\n\n\n\n\n\n\n\n\u00a0 becomes [1, 2, 3]\n\n\n  , push,"], "prompt": "\nQUESTION:\nDesign a stack which supports the following operations.\nImplement the CustomStack class:\n\nCustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack or do nothing if the stack reached the maxSize.\nvoid push(int x)\u00a0Adds x to the top of the stack if the stack hasn't reached the maxSize.\nint pop()\u00a0Pops and returns the top of stack or -1 if the stack is empty.\nvoid inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, just increment all the elements in the stack.\n\n\u00a0\nExample 1:\nInput\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\nOutput\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack customStack = new CustomStack(3); // Stack is Empty []\ncustomStack.push(1);                          // stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\ncustomStack.push(2);                          // stack becomes [1, 2]\ncustomStack.push(3);                          // stack becomes [1, 2, 3]\ncustomStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4\ncustomStack.increment(5, 100);                // stack becomes [101, 102, 103]\ncustomStack.increment(2, 100);                // stack becomes [201, 202, 103]\ncustomStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\ncustomStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]\ncustomStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []\ncustomStack.pop();                            // return -1 --> Stack is empty return -1.\n\n\u00a0\nConstraints:\n\n1 <= maxSize <= 1000\n1 <= x <= 1000\n1 <= k <= 1000\n0 <= val <= 100\nAt most\u00a01000\u00a0calls will be made to each method of increment, push and pop each separately.\nclass CustomStack:\n    def __init__(self, maxSize: int):\n    def push(self, x: int) -> None:\n    def pop(self) -> int:\n    def increment(self, k: int, val: int) -> None:\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\nUse Call-Based format\nANSWER:\n"}}