{"1653": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\nUse Call-Based format\n\nHint 1:\n\nUse Call-Based format\nHint 2:\n\n    Use Call-Based format\n\nNOTE:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    fibfusc(2,", "\nUse Call-Based format\n\n\n\nCall-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\nThis kata is a continuation\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(1)\n\n\n\n\n\n\n\n\nfibfusc(2n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n)\n\n\n\n\n#", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nfibfusc(n)\n\nfibfusc(n)\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n)\n\n\n\n\n\n    The", "\nUse Call-Based format\n\n\n\nCall-Based format\n\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\nHint 1:\n\n\n\n\n\n\n   \n\n   \n\t\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#!/usr/bin/env", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\nHint 0:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n)\n\n\n\n\n\n\nfibfusc(", "\nUse Call-Based format\n\n\n\n\n\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\nhint 1: Use Call-Based format\n\nhint 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Note**:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\nHint 1:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(2, num_digits=None)\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nHINT:\n\nUse Call-Based format\n\nHINT:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHINT:\n\n   \n\n\n\n\nHINT:\n\n\n\n\n\n\n\n#", "\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nHint 0: Use a call-based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(0)\n\n\n\n\n\n\n\n\n\n1:", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n, num_digits=None):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(1, 2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nfibfusc(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n)\n\n\n    If you", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nfibfusc(n)\n\nfibfusc(n)\n\nfibfusc(n)\n\nHINT:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n)\n\n\n\n\n\n\n\n#!/", "\n\n\nCall-Based format\n\n\nUse Call-Based format\n\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\nHint 1:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    fibfusc(2, num", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n    fibfusc(n, num_digits=None):\n\nUse Call-Based format\n\nHINT:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nHint 1: Use Call-Based format\n\nHint 2:\n\n\n\n\n\n\n\n\n\n\n   \n   \n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nHint 1:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1:\n\n   (10) = (2, 2)\n\n\n\n\n\n\n\n\n\nThe kata is contin", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n, num_digits=None):\n\nUse Call-Based format\n\nHint 0:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n, 2)\n\n\n\n\n\n\n\n\n>>> kata", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nHint 1:\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis kata is a continuation\n\nHint 1:\n\n\n\n\n\n\n\n\n\n\n\n\n\nfibfusc(n)\n\n\n\n\n\n\n# NOTE: The `"], "prompt": "\nQUESTION:\nThis kata is a continuation of [Part 1](http://www.codewars.com/kata/the-fibfusc-function-part-1). The `fibfusc` function is defined recursively as follows:\n\n    fibfusc(0) = (1, 0)\n    fibfusc(1) = (0, 1)\n    fibfusc(2n) = ((x + y)(x - y), y(2x + 3y)), where (x, y) = fibfusc(n)\n    fibfusc(2n + 1) = (-y(2x + 3y), (x + 2y)(x + 4y)), where (x, y) = fibfusc(n)\n\nYour job is to produce the code for the `fibfusc` function. In this kata, your function will be tested with large values of n (up to 2000 bits), so you should be concerned about stack overflow and timeouts. Moreover, since the `fibfusc` function grows exponentially, your function should take an extra argument `num_digits` with a default value of `None`. When not `None`, `num_digits` takes a positive `int` value and the returned values shall be truncated to the last `num_digits` digits. \n\nFor example, let `n = 101`. With `num_digits` not set or set to `None`, `fibfusc` should return: \n`(-280571172992510140037611932413038677189525L, 734544867157818093234908902110449296423351L)`. If `num_digits = 12`, the function should return `(-38677189525L, 449296423351L)`. Notice in particular, that for any value of `n` greater than 1, `x` is negative, and the truncated value of `x` should also be negative.\n\nHint 1: Use modulo `10 ** num_digits` arithmetic to keep all intermediary results small.\n\nHint 2: Consider using an iterative [\"number climber\"](http://www.codewars.com/kata/number-climber) to avoid stack overflows.\ndef fibfusc(n, num_digits=None):\n\t\nUse Call-Based format\nANSWER:\n"}}