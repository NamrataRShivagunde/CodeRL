{"2887": {"code": ["\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis task is in the Call-Based format\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\nThe", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\n\n\n\n\n\n\n\n\nThe AdFly Task:\n\n```\n\n\n\n\n\n    The AdF", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n```\nCall-Based format\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe function has been called:\n\n```\n\n\nI personally", "\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe AdFly Task:\n\n```\n\n\n\n\n\n\n\n```\n\nThe AdFly Task:", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nINPUT:\n\n```\nUse Call-Based format\n```\nEncode the input.\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\n``", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nThe input format:\n\n```\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef\n\nThe first 2 int", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nNOTE:\n\nThe function to use Call-Based format\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\nThis task", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nINPUT:\n\n```\nUse Call-Based format\nReturn \"Invalid\" for invalid Strings\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\nEvery", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Task:\n\n```\n\n\n\n\n\n\nThis function does the same thing you would do when", "\nUse Call-Based format\n\n\n\n\n\n\nEncode text to ysmm value\nDecode ysmm value to ysmm value\n\nReturns:\n\nInvalid:\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Task to run AdFly on", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe AdFly Algorithm:\n\n```\n\n\n\n\n\n\n\n```\nThe AdF", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nEveryone", "\nUse Call-Based format\n\n\n\n\n\nEncode and Decode:\n\n```\n\nUse Call-Based format\nReturn \"Invalid\" for invalid Strings\n```\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\nANSWER:\n\n\t\tUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\n\t\tIf", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nNOTE:\nUse Call-Based format\n\nA Call-Based format\nA Task:\n\n\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\nThe following is an example:\n\n```\n\n\n\ndef\nEveryone", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef\n\n\n\n```\nThe first two", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nINPUT:\n\n```\nUse Call-Based format\nReturn \"Invalid\" for invalid Strings\n```\n\n\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\nThe following are valid input:\n\n```\n\n\n\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tThis function will take two random numbers off", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef adFly_encoder(sc):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput:\n\nysmm = 0\ncode1  = 0\ncode2 = 0\n\n\n"], "prompt": "\nQUESTION:\nEveryone Knows AdFly and their Sister Sites.\n\nIf we see the Page Source of an ad.fly site we can see this perticular line:\nBelieve it or not This is actually the Encoded url which you would skip to.\n\nThe Algorithm is as Follows:\n```\n1) The ysmm value is broken like this\n\nysmm   = 0 1 2 3 4 5 6 7 8 9  = \"0123456789\"\ncode1  = 0   2   4   6   8    = \"02468\"\ncode2  =   9   7   5   3   1  = \"97531\"\n\n2) code1+code2 is base64 Decoded\n\n3) The result will be of this form :\nhttps://adf.ly/go.php?u=\n\n4)  has to be further decoded and the result is to be returned\n```\n\nYour Task:\n\n```\nMake a function to Encode text to ysmm value.\n\nand a function to Decode ysmm value.\n```\n\nNote: Take random values for The first 2 int values.\nI personally hate trivial error checking like giving integer input in place of string. \n\n```\nInput For Decoder & Encoder: Strings\nReturn \"Invalid\" for invalid Strings\n```\ndef adFly_decoder(sc):\n\t\nUse Call-Based format\nANSWER:\n"}}