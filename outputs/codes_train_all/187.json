{"187": {"code": ["\n\n\n\n\n\n\n1. 4 customers arrive, 4 board and 4 wait for the next gondola and 6 wait\n2. 9 customers arrive, 4 board and 4 wait for the next gondola\n3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 5\nExplanation:\n board and", "\n\n\n\n\nExample 1:\n\nInput: customers = [10,9,11,12,16,18,18]\nOutput: 7\n\n\n\n\n\n\n\n\n\n board and 4 wait for the next gondola\nOutput: 6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n1. 1 customers arrive, board", "\n\n\n\n\n\n\n\n\n1. 10 customers arrive, 4 board and 6 wait\n1. 9 customers arrive, 4 board and 6 wait\n2. 3 customers arrive, 4 board and 6 wait\n3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.\n1. 6 customers arrive, 4 board and 4 wait\n1 board", "\n\n\n\n\n\n\n\n\n\n boardingCost = 4,\nrunningCost = 4\nExplanation:\n1. boardingCost = 4,\nrunningCost = 4\nOutput: 5\nExplanation:\n\n\n boardingCost = 5,\n\n\n\n\n\n\n\n\n1.\n1. 2 customers arrive, 4 board and 4 wait\n\n\n board and", "\n\n\n\n\n\n\n\n\n\nOutput: 4\nExplanation:\n1. 0 customers arrive, 4 board and 4 wait\n2. 1 customers arrive, 4 board and 4 wait\n3.\n\n\n\n\n\n, 5, 6\n\n\n\n\n\n\n\n\n\n\n1. 2 customers arrive, 4 board and 4 wait\n\n2. board and", "\n\n\n\n\n\n\n\n\n\n\n\nInput: customers = [10,9,11,12]\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola and 6 wait\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 7\n\n\nExplanation:\n1. board and 4 wait for", "\n\n\n\n\nExplanation:\n\nOutput: 7\n\n\n\n\nOutput: 7\nExplanation:\n\n\n\n\n board and 4 wait for the next gondola\n\nOutput: 8\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n1.\n board and 4 wait for the next g", "\n\n\n\n\n\n\n\n\n\n\n\nInput: customers = [9,7,8,9,6]\nOutput: 7\nExplanation:\n\n\n\n boardingCost = 5, runningCost = 6\n\n\n\n\n\n\n\n\n\n\n1. 2 customers arrive, 4 board and 4 wait\n\n\n\n board and 4 wait for the next gond", "\n\n\n\n\n\n\n\n\n\n, boardingCost, runningCost, profit,\n\nExplanation:\n\n\n\n\n\nExplanation:\n\nExplanation:\n\n\n board and 4 wait for the next gondola\n\n\n\n\n\n\n\n\n\n0 * $5 = $7\n\n\n\n\nExplanation:\n\n board and 4 wait", "\n\n\n\n\nInput: customers = [10,9,6,7]\nOutput: 5\nExplanation:\n\n\u00a0\n\n\n\n\n\nOutput: 7\n\n\n\n\n board and 4 wait for the next gondola\n\n\n\n\n\n\n\n\n\n1.\n\n1. 3 customers arrive, 4 board and 4 wait\n\n board and", "\n\n\n\n\n\n\n\n\n\n boardingCost = 6\noutput: 7\nExplanation:\n\n\n\n boardingCost = 5\noutput: 7\nExplanation:\n\n\n\n\n\n1. The final 6 customers arrive, 4 board and 4 wait\n\n1. The final 6 customers arrive, 4 board and 4 wait\n\n\n\n\n\n\n board and", "\n\n\n\n\n\n\n\nBoardingCost = 5\nRunningCost = 6\n\nExplanation:\n\n\n\n\n\n board and wait for the next gondola\n\n\n board and wait for the next gondola\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n1. 5 customers arrive, 4 board and 4 wait\n boarding", "\n\nExample 1:\n\n\n\nInput: customers = [8,3,9,10,11,9,12,15,12,12]\nOutput: 11\n\n\n\n\n\n\n\n\n boardingCost = 5, runningCost = 6\n\n\n\n\n\n\n\n\n1.\n\n1.\n1. board and 4 wait for the next gondol", "\n\n\n\n\n\n\n\n\n\nInput: customers = [10,11,15,18,19]\nOutput: 7\nExplanation:\n\n\n\n boardingCost = 5, runningCost = 6\nOutput: 7\n\n\n\n\n\n\n\n\n\n\n\nOutput: 7\nExplanation:\n1. 1\n2.\n board and 4 wait for the next", "\u00a0\n\n\n\n\n\n\n\n\nBoardingCost = 2\nRunningCost = 3\n\nExplanation:\n\n1. The number written on the gondolas is 6\n2.\n\n\n\n\n\n board and 4 wait for the next gondola\n\n\n\n\n\n\n\n1.\n1.\n\n board and 4 wait for the next gond", "\n\n\n\n\n\n\n\n\n\nExplanation:\n1. 0 customers arrive, 4 board and 6 wait (2 originally waiting, 9 newly waiting, 2 newly waiting)\nThe final 6 customers arrive, 4 board and 5 wait (2 originally waiting)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n1. board and 4", "\n\n\nOutput: 8\nExplanation:\n1. 0 customers arrive, 4 board and 6 wait\n2. wait\n\n\u00a0\n\n\n\n\n\n\n\n\nOutput: 7\nExplanation:\n1. 0 customers arrive, 4 board\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 3\n\nExplanation:\n1.\n board and 4", "\n\n\n\n\nExplanation:\n\nInput: customers = [10,9,3,7,8,9,6,7]\nOutput: 7\n\n\u00a0\n\n\n\n\n\n\n\n boardingCost = 6\nOutput: 7\n\n\n\n\n\n\n\n\n\n$\n\n\n\n$\n\n board and 4 wait for the next gondola", "\n\n\n\n\n\n\n\n\n\nInput: customers = [8,9], boardingCost = 5, runningCost = 6\nOutput: 5\nExplanation:\n\n\n\n\n\n\n boardingCost = 5, runningCost = 6\nOutput: 7\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n1. board and 4 wait for the next gond", "\n\nExplanation:\n boardingCost = 5, runningCost = 6\n\nExplanation:\n\n\n\n\u00a0\n\n\n\n\n board and runningCost = 8,\n\n\n\n board and runningCost = 4\nOutput: 7\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 7\n\nExplanation:\n1.\n board and 4 wait for the"], "prompt": "\nQUESTION:\nYou are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.\nYou are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\nYou can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.\nReturn the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.\n\u00a0\nExample 1:\n\nInput: customers = [8,3], boardingCost = 5, runningCost = 6\nOutput: 3\nExplanation: The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times.\nExample 2:\nInput: customers = [10,9,6], boardingCost = 6, runningCost = 4\nOutput: 7\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\nThe highest profit was $122 after rotating the wheel 7 times.\n\n\nExample 3:\nInput: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92\nOutput: -1\nExplanation:\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\nThe profit was never positive, so return -1.\n\nExample 4:\nInput: customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8\nOutput: 9\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.\n2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.\n3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.\n4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.\n5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.\n6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.\n7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.\n8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.\n9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.\n10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.\nThe highest profit was $36 after rotating the wheel 9 times.\n\n\u00a0\nConstraints:\n\nn == customers.length\n1 <= n <= 105\n0 <= customers[i] <= 50\n1 <= boardingCost, runningCost <= 100\nclass Solution:\n    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}