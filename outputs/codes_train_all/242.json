{"242": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxEqualFreq(self, nums: List[int]) -> int:\n       \n\n       \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums of positive integers,", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    maxEqualFreq(self, nums) -> int:\n\n   \n        return self.maxEqualFreq(nums)\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array nums of positive integers,", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        return self.maxEqualFreq(nums)\n\nUse Call-Based format\n\n\n    maxEqualFreq(self, nums)\n\nUse Call-Based format\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums of positive integers, return the longest", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def maxEqualFreq(self, nums: List[int]):\n        return 1\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums\u00a0of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    maxEqualFreq(self, nums: List[int]) -> int:\n\nUse Call-Based format\n\nConstraints:\n\n1 <= nums.length <= 10^5\n\nConstraints:\n\n\n\n\n\n   \n\n        \n\n\n\n\n\n\n\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    maxEqualFreq(self, nums: List[int]) -> int\n    \nUse Call-Based format\n\nConstraints:\n\n10^5 <= nums.length <= 10^5\n\n\n\n\n   \n                \n\n        \n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxEqualFreq(self, nums: List[int]) -> int\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nExample\nGiven an", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n        return 1\n\n\n\n\n\n\n   \n        return 1\n\nUse Python-Based format\n\nUse Call-Based format2,3,4,6,5,6,7\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven an array nums of positive integers, return", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxEqualFreq(self, nums) -> int:\n   \n\n\n\n   \n        pass\n\n\n\nUse Call-Based format2,3,5,4,5\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven an array nums\u00a0of", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n    def minEqualFreq(self, nums: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\nGiven an array nums\ufffd", "\nUse Call-Based format\n\n\n    maxEqualFreq(self, nums) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n        return 1\n        \n\n\n\n   \n        return self.maxEqualFreq(nums)\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\nGiven an array nums of positive", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\n    maxEqualFreq(self, nums)\n\n\u00a0\nUse Call-Based format\n\n\n   \n        pass\n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums\u00a0of positive integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        return self.maxEqualFreq(nums)\n\nUse Call-Based format\n\n\n    maxEqualFreq(self, nums):\n        \n\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums\u00a0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    maxEqualFreq(self, nums)\n\nUse Call-Based format\n\nExample 1:\n   \n\n\n\n    def\n        pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an array nums of positive integers", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n    maxEqualFreq(self, nums) -> int:\n\n   \n\n\n\n    def maxEqualFreq(self, nums: List[int]) -> int:\n        \n\n       ...                \n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums of positive integers,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        return self.maxEqualFreq(nums)\n\n\n\n    maxEqualFreq(self, nums)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nGiven an array nums of", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def maxEqualFreq(self, nums: List[int]) -> int:\n\n   \n        pass\n\n\n\n    def max(self, nums: List[int]) -> int:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an array nums", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    maxEqualFreq(self, nums: List[int]) -> int:\n\nUse Call-Based format\n\nReturns:\n\n10^5\n\n\n\n   \n        pass\n                        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums of positive integers, return the", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def minEqualFreq(self, nums: List[int]) -> int:\n        return 0\n\n\u00a0\n\n\n\n\n   \n        pass\n\nRemove all occurrences of the same number\n\n\n\n\n\n\n\n\n\n\n\n\n\nnums = [1,2,3,4]\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    maxEqualFreq(self, nums: List[int]) -> int:\n    \nUse Call-Based format\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 10^5\n\n\n\n\n   :                \n\n        \n\n\n\n\n\n\n\n\nGiven an array"], "prompt": "\nQUESTION:\nGiven an array nums\u00a0of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).\n\u00a0\nExample 1:\nInput: nums = [2,2,1,1,5,3,3,5]\nOutput: 7\nExplanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.\n\nExample 2:\nInput: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\nOutput: 13\n\nExample 3:\nInput: nums = [1,1,1,2,2,2]\nOutput: 5\n\nExample 4:\nInput: nums = [10,2,8,9,3,8,1,5,2,3,7,6]\nOutput: 8\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5\nclass Solution:\n    def maxEqualFreq(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}