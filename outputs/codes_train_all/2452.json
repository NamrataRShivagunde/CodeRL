{"2452": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nNOTE:\n\nUse Call-Based format\nANSWER:\n\n\n\n\n\n\n   \n    return self.lastStoneWeight()\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones and its weight\n\n", "\nUse Call-Based format\n\n\n    lastStoneWeight(self, stones: List[int]) -> int\n\n\n\n\n\n   \n    weight = x\n       \n\n\n   \n        weight = y\n        i = x\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones.\n\n\n\n\n\nWe have a collection of st", "\nUse Call-Based format\n\n\n    lastStoneWeight(self, stones: List[int]) -> int\nUse Call-Based format\n\n\n\n   \n\nWe have a collection of stones with positive integer weights\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\n\nWe have a collection of st", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\nWe have a collection of stones\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nWe have two stones\n\n\n\n\n\nWe have 2\u00a0stones", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return 0\n\n\n\n\n   \n\n\n\n\n\nReturns:\n\n1\n\n\n\nWe have a collection of stones\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\n\nWe have a collection", "\nUse Call-Based format\n\n\n    lastStoneWeight(self, stones: List[int]) -> int\n\n\n\n\n    def lastStone(self, stones: List[int]) -> int:\n\n   \n\n\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones.\n\n\n\nWe have", "\nUse Call-Based format\n\nUse Call-Based format\nExplanation:\n\nUse Call-Based format\nANSWER:\n\n\n\n\n\n\n   \n\n\nWe have a collection of stones with positive integer weights\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\nWe have a collection of", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return 1\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n   ...\n\n\nWe have a collection of stones\n\n\n\n\n\n\n\n\nWe have 2 stones\n\n\n\n\nWe have 2 stones and", "\nUse Call-Based format\nUse Call-Based format\n\n\n    stones: List[int]\n\nUse Call-Based format\n\n\n\n\n   \n\n    stone: int\n        stone: int\n\n\n\n\n   \n        lastStoneWeight\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones,", "\nUse Call-Based format\n\n    Use Call-Based format\n\nExamples 1:\n    Use Call-Based format\n\n\n\n\n\n\n\n\n\nWe have a collection of stones with positive integer weights\n\n\n\n\n        weight = 1\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\n\nWe have a collection of", "\nUse Call-Based format\n\n\n\nWe have a collection of stones, each stone has a positive integer weight.\n\n\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n       \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\n\nWe have 2", "\nUse Call-Based format\n\n\n    lastStoneWeight(self, stones: List[int]) -> int\n\n\n\n\n   \n\n\nWe have a collection of stones with positive integer weights.\n\n\nclass\n    pass\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones, each stone has a positive integer weight\n\n\nWe", "\nUse Call-Based format\n\n\n\nWe have a collection of stones and smash them together\nUse Call-Based format\n\n\n   \n    return stones[-1]\n\nWe have a collection of stones and smash them together\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\nWe have", "\nUse Call-Based format\nUse Call-Based format\n\n    self.lastStoneWeight(stones)\n\n\n\n\n\n   \n    self.lastStoneWeight(stones)\n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones with positive integer weights\n\n\n\n\nWe have a collection of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nWe have a collection of stones, each stone has a positive integer weight.\n\n\n\n\n   \n\n\n\n\u00a0\nUse Call-Based format\n\nExamples 1:\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n1\n\u00a0\n\n\nWe have a collection of st", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n\n\n\n\n\n   \n\nUse Call-Based format\nWe have a collection of stones\n\n\n   \n       ...\n        \n\n\n\n\n\n\n\n\n\n\n\n1 <= x <= y <= 1\n\n\n\n\nIf we", "\nUse Call-Based format\n\n\nUse Call-Based format\nWe have a collection of stones and a positive integer weight\n\n\n\n\n    def createStone(self, stones: List[int]) -> int:\n       \n\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones,", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return 1\n\n\n\n\n\n   \n\n\n\n\n\u00a0\nUse Call-Based format\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n1\n\n\n\nWe have a collection of stones", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nWe have a collection of stones and smash them together.\n\n\n\n\n   \n\n\n\n\n   \n        return self.lastStoneWeight()\n\n\n\n\n\n\n\n\n\u00a0\n\nWe have a collection of stones with positive integer weights\n\n\n\n\n\nWe have a collection", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n    return 1\n\n\n\n\n\n   \n    return 1\n\nExample 0:\n\n\n   \n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\nWe have a"], "prompt": "\nQUESTION:\nWe have a collection of stones, each stone\u00a0has a positive integer weight.\nEach turn, we choose the two heaviest\u00a0stones\u00a0and smash them together.\u00a0 Suppose the stones have weights x and y with x <= y.\u00a0 The result of this smash is:\n\nIf x == y, both stones are totally destroyed;\nIf x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.\n\nAt the end, there is at most 1 stone left.\u00a0 Return the weight of this stone (or 0 if there are no stones left.)\n\u00a0\nExample 1:\nInput: [2,7,4,1,8,1]\nOutput: 1\nExplanation: \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.\n\u00a0\nNote:\n\n1 <= stones.length <= 30\n1 <= stones[i] <= 1000\nclass Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}