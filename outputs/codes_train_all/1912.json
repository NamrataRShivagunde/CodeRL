{"1912": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n    # returns 0\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven many words, words[", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nGiven many words, words[i] has weight i.\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\nGiven many words, words[i]", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n\n    f(String prefix, String suffix)\n\n\n\n#\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\nGiven many words, words", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven many words, words[i].\n\n\n\n\n\nGiven many words", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nGiven many words, words[i] has weight i.\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n#\n\n\n\n\n\n\nGiven many words\n\n\n\n\n\n\nGiven many words, words", "\nUse Call-Based formatGiven many words, words[i] has weight i.\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n#\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\nGiven many words", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nThe word with given prefix and suffix has maximum weight i.\nUse Call-Based format\n\n\n\n\nThe word with given prefix and suffix has maximum weight i.\n\n\n\n\n\n\n#\n\n\nGiven many words,\n\n\n\nGiven many words,\n\n\n\n\nGiven many words, words[", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven many words, words", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nGiven many words, words[i] has weight i.\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n#\n\n\n\n\n\n\n\n\nGiven many words,\n\n\n\n\nGiven many words", "\nUse Call-Based formatGiven many words, words[i] has weight i.\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n#\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven many words, words[", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n    f(String prefix, suffix)\n\n\n\n\n#\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\nOutput:\n\n\n\n\n\n#\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\nGiven many words", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n#\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n\nGiven many words, words[i", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n    f(String prefix, suffix)\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven many words, words[i]", "\nUse Call-Based formatGiven many words, words[i] has weight i.\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven many words\n\n\n\nGiven many words, words", "\nUse Call-Based formatGiven many words, words[i] has weight i.\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n#\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven many words,", "\nUse Call-Based formatGiven many words, words[i] has weight i.\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n#\n\n\n\n\n\n\nGiven many words, words[i].\n\n\n\n\n\nGiven many", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nGiven one word, words[i] has weight i.\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n\n\n\n\n\n\n\n\n\nGiven many words,\n\n\n\nGiven many words", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nGiven many words, words[i] has weight i.\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven many words, words[i] has weight i.\n\n#\n\n\n\n\n\n\nGiven many words,\n\n\n\n\n\nGiven many words,", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nGiven many words, you can use a call-based format\n\n\n\n\nGiven many words, you can use a call-based format\n\n\n\n\n\n#\n\n\n\n\n\n\nGiven many words, words[i].\n\n\n\n\n\nGiven many words, words["], "prompt": "\nQUESTION:\nGiven many words, words[i] has weight i.\n\nDesign a class WordFilter that supports one function, WordFilter.f(String prefix, String suffix).\nIt will return the word with given prefix and suffix with maximum weight.  If no word exists, return -1.\n\n\nExamples:\n\nInput:\nWordFilter([\"apple\"])\nWordFilter.f(\"a\", \"e\") // returns 0\nWordFilter.f(\"b\", \"\") // returns -1\n\n\nNote:\n\nwords has length in range [1, 15000].\nFor each test case, up to words.length queries WordFilter.f may be made.\nwords[i] has length in range [1, 10].\nprefix, suffix have lengths in range [0, 10].\nwords[i] and prefix, suffix queries consist of lowercase letters only.\nclass WordFilter:\n    def __init__(self, words: List[str]):\n    def f(self, prefix: str, suffix: str) -> int:\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(prefix,suffix)\nUse Call-Based format\nANSWER:\n"}}