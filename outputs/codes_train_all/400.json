{"400": {"code": ["\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing each bar height where", "\n\n\n\n    def largestRectangleArea(self, heights: List[int]):\n        return self.maximumRectangleArea(heights)\n\n\n\n\n\n   \n       \n\n\n\nclass\n\n    >>> largestRectangleArea()\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven n non-negative integers representing", "\n\n\n\n\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n\nclass:\n\n\nThis is the preferred call-based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven n non-negative integers representing each", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n:\n   \n\n\n\n\n\n\nclass\n    pass\n\n\n\nExample:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven n non-negative integers representing each bar height", "\n\n\n\n\n\n\n\n:\n   \n        return self.largestRectangleArea(heights)\n        \n\n\n\nclass\n\n\n\n\n\nExample:\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven n nonnegative integers", "\nUse Call-Based format\n\nUse Call-Based format\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n\nclass:\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing each bar height", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n:\n   \n\n\n\n\n\n\nClass\n    pass\n\n\nGiven n non-negative integers representing a histogram's bar height, find the area of largest rectangle in the histogram.\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven n non-", "\nUse Call-Based format\n\n\n\n    def largestRectangleArea(self, heights: List[int]):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n    pass\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n nonnegative integers representing", "\nUse Call-Based format\n\n\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\nclass\n       ...\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing each", "\n\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n\n\n\n   \n       ...\n\n\n\n   \n\nReturns area of largest rectangle in the histogram\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven n nonnegative integers representing each", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n       \n        pass\n\n\n\n\n\n\nclass:\n\n\nThe largest rectangle area is the area of largest rectangle in the histogram.\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing each bar height where", "\n\nUse Call-Based format\n\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven n nonnegative integers representing each bar", "\nUse Call-Based format\n\n\n\n    def largestRectangleArea(self, heights: List[int]):\n\n\n\n\n\n\n   \n\n\n\n\nclass\n       ...\n\nExample:\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven n nonnegative", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n:\n   \n        \n\n\n\n\nclass\n\n\n\n\n\n  A histogram containing two bar heights of the largest rectangle is shown in shaded area of largest rectangle.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing n non", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n:\n   \n       ...\n\n\n\n\n\nUse Class-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing each bar height where", "\nUse Call-Based format\n\n\n    __init__(self)\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\nclass:\nGiven n non-negative integers representing the histogram's bar height, find the area of largest rectangle in the histogram.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing", "\nUse Call-Based format\n\n\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n\nclass\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven n nonnegative", "\n\n\nUse Call-Based format\n\n\n    def largestRectangleArea(self, heights: List[int]):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\nclass\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven n nonnegative", "\n\nUse Call-Based format\n\n\n    def largestRectangleArea(self, heights: List[int]):\n       \n\n\n\n\n\n   \n        \n\n\n\n\n       ...\nReturns area of largest rectangle in histogram\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven n nonnegative integers representing", "\n\n\nUse Call-Based format\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n\nclass\n\n\nOutput: 10\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nGiven n non-negative integers representing each bar"], "prompt": "\nQUESTION:\nGiven n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n\n\nAbove is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\n\n\u00a0\n\n\nThe largest rectangle is shown in the shaded area, which has area = 10 unit.\n\n\u00a0\n\nExample:\n\n\nInput: [2,1,5,6,2,3]\nOutput: 10\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}