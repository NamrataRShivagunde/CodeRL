{"1660": {"code": ["\n\n)__\n\n__N.B.__\nUse Call-Based format\n---\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n---\n\n\n---\n\n__N.B.__\n\n\n\n\n\n__N.B.__\n\n---\n\n__N.B", "\n\n)__\n\n)__\n\n__N.B.__ to simplify string\n\n\n:\n\n\n\n__N.B.__ to simplify string\n\n\n\n---\n\n\n\n\t\n\n\n---\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n---\n\n\n\n\n\n# ---\n\n\n\n# ---\n\n__N.B", "\n\n__N.B.__ to simplify mathematical expressions\n\n\n\n\n\n\n\n\n__N.B.__ to keep the call-Based format\n---\n\nUse Call-Based format\n\n---\n\nUse Call-Based format\n\n\n\n():\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n---\n\n__N.B.__", "\n\t\t>>> print(poly)\n\t\t---\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n__N.B.__ To do the simplification :)__\n\n---\n\n(poly)\n\n\n\t\n\n\n---\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n---\n\n__N.B.__", "\n__N.B.__ to make your function call-based format\n)__\n\n__N.B.__ to make your function call-Based format\n\n\n:\n\n\n\n\n\n---\n\n\n\n\t\n:\n\n---\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n__N.B.__ to keep a", "\n\nUse Call-Based format\n---\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n---\n\n(poly)\n\n\n\t\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n---\n\n__N.", "\n\n)__\n\n__N.B.__ to keep the call-Based format :)__\n\nUse Call-Based format\n\n\n---\n\n\n\n\n\n\n\n\n---\n__N.B.__ to keep the call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n__N.B.__ to keep the call-", "\n\n    __N.B.__:\n\t\n\n\n\nUse Call-Based format\n\n\n__Good Work :)__\n\n\n\n\n\n\n\n\n\n  \n\n\t\n\n\n---\n\n\n\n\n\n---\n\n__N.B.__:\n\n\n\n\n\n\n\n\n\n\n\n\n---\n__N.B.__:\n__", "\n)__\n\n__N.B.__ To simplify a string of input\n\n\n\n__N.B.__ To simplify a string of input\n\n:\n\n\n\n\n---\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n---\n\n\n\n\n\n\n\n\n---\n\n\n---\n\n\n\n\n---\n\n__N.B.__ to", "\n\nUse Call-Based format\n)__\n\n---\n\nUse Call-Based format\n\n\n\n__N.B.__ to use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n---\n\n\n\n---\n\n\n\n\t\n\n\n\n\n\n---\n\n\n\n\n\n\n\n---\n\n__N.B.__ to keep", "\n\n)__\n\n\n\nUse Call-Based format\n\n---\n\nUse Call-Based format\n---\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n---\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n---\n__N.B.__\n\n\n\n\n---\n\n", "\n)__\n\n\n\n__N.B.__ to use Call-Based format\n\n\n---\n:\n\n\n\n\n\n\n---\n\n__N.B.__ to use Call-Based format\n---\n\n\n---\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n__N.B.__ to keep the same variable*", "\n)__\n\n\n\n\nUse Call-Based format\n\n\n\n__N.B.__ to keep call-Based format\n\n\n\n\n\n\n\n\n\n---\n\n__N.B.__ to keep call-Based format\n\n---\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n---\n\n__N.", "\n\n\n\n\nUse Call-Based format\n\n\n\n__N.B.__ to make a function :)__\n\nUse Call-Based format\n---\n\nUse Call-Based format\n\n\n\n\n\n---\n\n\n\n\n\n---\n\n__N.B.__ to keep the original expression\n\n\n\n\n\n\n\n\n\n\n\n---\n__N.", "\n\n__N.B.__ to simplify mathematical expressions\n__\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n---\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n---\n\n__N.B.__ to simplify\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n---\n\n__N.B", "\n\n\n\n__N.B.__ to simplify a string\n__N.B.__ to simplify a string\n\n\n\n\n\n\n\n__N.B.__ to simplify a string\n\n---\n\n\n\n\n\n\t\n\n\n\n\n\n\n---\n\n\n\n\n---\n\n\n\n\n\n\n---\n\n\n\n\n---\n\n__N.B.__", "\n\n__N.B.__ to simplify a string in call-Based format\n---\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\ndef\n# Example\n\n\n\n---\n\n__N.B.__ to simplify an expression\n\n\n\n\n\n\n\n\n---\n\n\n\n# Performance:\n\n---\n\n", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n__N.B.__ to get a string in output\n\n---\n\nUse Call-Based format\n\n---\n\nUse Call-Based format\n\n\n\n():\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n__N.B", "\n\n---\n\n\n\n\n\n__N.B.__ to make this simplest :)__\n\nUse Call-Based format\n\n---\n\nUse Call-Based format\n\n---\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n---\n\n__N.B.__ to keep", "\n\n---\n\n\n\nUse Call-Based format\n---\n\nUse Call-Based format\n\n---\n\n\n\n\n\n---\n\n__N.B.__ to preserve a string-Based format\n\n\n\n\n\n\t\n---\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n---\n\n\n---\n\n__N.B"], "prompt": "\nQUESTION:\nWhen we attended middle school were asked to simplify mathematical expressions like \"3x-yx+2xy-x\" (or usually bigger), and that was easy-peasy (\"2x+xy\"). But tell that to your pc and we'll see! \n\nWrite a function: `simplify`, that takes a string in input, representing a *multilinear non-constant polynomial in integers coefficients* (like `\"3x-zx+2xy-x\"`), and returns another string as output where the same expression has been simplified in the following way ( `->` means application of `simplify`):\n\n- All possible sums and subtraction of equivalent monomials (\"xy==yx\") has been done, e.g.: `\"cb+cba\" -> \"bc+abc\"`, `\"2xy-yx\" -> \"xy\"`, `\"-a+5ab+3a-c-2a\" -> \"-c+5ab\"`\n\n- All monomials appears in order of increasing number of variables, e.g.: `\"-abc+3a+2ac\" -> \"3a+2ac-abc\"`, `\"xyz-xz\" -> \"-xz+xyz\"`\n \n- If two monomials have the same number of variables, they appears in lexicographic order, e.g.: `\"a+ca-ab\" -> \"a-ab+ac\"`, `\"xzy+zby\" ->\"byz+xyz\"`\n  \n- There is no leading `+` sign if the first coefficient is positive, e.g.: `\"-y+x\" -> \"x-y\"`, but no restrictions for `-`:  `\"y-x\" ->\"-x+y\"`\n\n---\n\n__N.B.__ to keep it simplest, the string in input is restricted to represent only *multilinear non-constant polynomials*, so you won't find something like `-3+yx^2'. **Multilinear** means in this context: **of degree 1 on each variable**.\n\n**Warning**: the string in input can contain arbitrary variables represented by lowercase characters in the english alphabet.\n\n__Good Work :)__\ndef simplify(poly):\n\t\nUse Call-Based format\nANSWER:\n"}}