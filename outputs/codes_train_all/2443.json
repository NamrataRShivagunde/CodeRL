{"2443": {"code": ["\nUse Call-Based format\n\n    pass\n\n\n\n\n\n        return 1\n\n\u00a0\n\n\n\n\u00a0\n\nUse Call-Based format\n\nOutput:\n\n\n\n\n   :\n\nUse Call-Based format\n\n\n\n\n\n\n\nText is a string\n\ntext\u00a0is a string\n\n\n\nGiven a string\u00a0text,", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        return 0\n\n\u00a0\n\n\n\u00a0\nClass Definition:\n\n\n\n\n   :\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a string\u00a0text, you", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n        return self.maxNumberOfBalloons(text)\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\nConstraints:\n\nUse Call-Based format\n\u00a0\n\nConstraints:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        return 3\n\n\u00a0\n\n\nClass:\n   \n\n\n\n   :\n        \n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\ntext\u00a0must be of a valid string\n\n\n\n\n\nGiven a string\u00a0", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return self.maxNumberOfBalloons(text)\n\n\n\u00a0\n\nOutput:\n\n\u00a0\n\n\u00a0\n\n\n\n\n   :\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string\u00a0text, you want", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n        return len(text)\n\n\n    return 1\n\nUse Call-Based format\n\nclass Solution:\n    def maxNumberOfWords(self, text: str):\n        return 1\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string text, you want to", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return self.maxNumberOfBalloons(text)\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\nCall-Based format\n\n\u00a0\nConstraints:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string\u00a0", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        return maxNumberOfBalloons(text)\n\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\nConstraints:\n\n\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string\u00a0", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return 1\n\n\n\u00a0\n\nFunctions:\n\n\nuse Call-Based format\n\n\n\n\n   :\n        return 1\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a string\u00a0text, you want to", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n       pass\n\n\u00a0\n\n\n\n    maxNumberOfBalloons(self, text: str) -> int\n\n\u00a0\n\n:\n    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nText\u00a0is not a string.\n\nExamples", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n        pass\n\n   \n        pass\n\n\n\u00a0\n\n\n    -> int:\n    return self.maxNumberOfBalloons(text)\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\ntext\u00a0can be:\n\n\n\nGiven a string\u00a0text", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n    pass\n\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n\n\n\n   :\n        \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\ntext.length <= 10^4\n\n\n\nGiven a string", "\n\n\n\n    pass\n\n\nUse Call-Based format\n\n\u00a0\n\n        return 0\n\n\u00a0\n\nUse Call-Based format\n\nInput:\n   \n\n\n\n   :\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string text, you want to use", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n    return maxNumberOfBalloons(self, text)\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\nOutput:\n\n\u00a0\n\nConstraints:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string\u00a0", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n        return len(text)\n\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n\n\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string\u00a0text, you want to use", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n   \n        return 1\n        \n\nUse Call-Based format\n\n\n   :\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nGiven a string text, you want to use the character\u00a0text:\n\n\n\nGiven a string\ufffd", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return self.maxNumberOfBalloons(text)\n\n\u00a0\n\nUse Method-Based format\n\u00a0\n\nConstraints:\n\n\n\n\n   :\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\ntext:\n\n\n\nGiven a string\u00a0text,", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        return self.maxNumberOfBalloons(text)\n\n\u00a0\n\nMethod:\n\n\n\n\n   :\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string text, you want to use the", "\nUse Call-Based format\n\n    pass\n\n\nUse Call-Based format\n\n\n        return self.maxNumberOfBalloons(text)\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\nFunctions:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string\u00a0text, you want to", "\nUse Call-Based format\n\n    pass\n\n\nUse Call-Based format\n\n\n          \n\n\n\n    maxNumberOfBalloons = 10\n\nclass Token:\n   :\n        \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n1 <= text <= 10^5\n\n\nGiven a string\ufffd"], "prompt": "\nQUESTION:\nGiven a string\u00a0text, you want to use the characters of\u00a0text\u00a0to form as many instances of the word \"balloon\" as possible.\nYou can use each character in text at most once. Return the maximum number of instances that can be formed.\n\u00a0\nExample 1:\n\nInput: text = \"nlaebolko\"\nOutput: 1\n\nExample 2:\n\nInput: text = \"loonbalxballpoon\"\nOutput: 2\n\nExample 3:\nInput: text = \"leetcode\"\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= text.length <= 10^4\ntext\u00a0consists of lower case English letters only.\nclass Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}