{"368": {"code": ["\nUse Call-Based format\n\n\n\n\nA chef is in the call-based format.\n\nUse Call-Based format\n\n\n\n   \n    maxSatisfaction(self, satisfaction: List[int])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA chef has collected data.\n\n\n\n\nA chef can take", "\n    return maxSatisfaction(self, satisfaction)\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    maxSatisfaction(self, satisfaction)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA chef has collected data on the satisfaction level of n dishes\n\n\n\n", "\n\n\n\n    int maxSatisfaction(self, satisfaction: List[int]) -> int\n\n\n\n\n\n   \n    maxSatisfaction(self, satisfaction) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn == 0\n\nn == 1\n\n\n3\n\n\n\n\n    n =", "\n    @Call-Based format\n\n\n    \u00a0\nUse Call-Based format\n\n\n\n\nn == n\n\nn == n\nn == n\n\n\u00a0\nConstraints:\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA chef can get a maximum value of the chef.\n\n\n\n\nA ch", "\nUse Call-Based format\nn == 100\n\u00a0n == 100\n\u00a0n == 100\n\u00a0n == 100\n\u00a0\n\n\n\n\n\n\n   \n    return maxSatisfaction\n\n\n\n   \n\n\n\n\n\n\n1\n\n\n\nA chef has collected data on the satisfaction level of n\n\n\n\n\n   ", "\nUse Call-Based format\n\nn > 5\n\n\n\n\n\n\n    maxSatisfaction(self, satisfaction) -> int:\n\n\u00a0\n\n\n\n\n\n\n\n\n\nThe chef can take a time of a time.\n\n\n\n\n\n\n\n\nA chef has collected data\n\n\n\n\nA chef has collected", "\n\n\n\n    _satisfaction_from_satisfaction(self, satisfaction)\n\n\n\n\n\n\n    maxSatisfaction(self, satisfaction)\n    \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nA chef has collected data on his satisfaction level.\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nThe chef can be used to find the maximum value of a chef.\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nThe chef can have collected data on the satisfaction level.\n\n\n\n\nThe ch", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nA chef has collected data on a satisfaction level of his\u00a0n dishes.\n\n\n\n   \n\n\n\n\n    return maxSatisfaction\n\n\n\n\n\n\n\n\n\n\nA chef has collected data.\n\n\n\n\nThe chef can obtain", "\n    maxSatisfaction(self, satisfaction) -> int\n\n\n\n\n\n\nUse Call-Based format\n\n\n   \n    maxSatisfaction(self, satisfaction) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 1\n\nmaxSatisfaction:\n\n\n   ", "\nUse Call-Based format\n\n\n    raise RuntimeError('A chef must be called before using Call-Based format')\n\n\n\n\n\n   \n    maxSatisfaction(self, satisfaction)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA chef has collected data on the satisfaction level.\n\n\n\n\nThe", "\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    maxSatisfaction(self, satisfaction)\n        \n\n\n\n\n\n\n\n\n\nA chef can be cooked on some satisfaction level\n\n\n\n\nn", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nA chef can be used to get the maximum satisfaction level.\n\n\n\n   \n\n\n\n\n    maxSatisfaction(self, satisfaction)\n\n\n\n\n\n\n\n\n\n\nA chef has collected data.\n\n\n\n\nA chef", "\nUse Call-Based format\n\n\n    maxSatisfaction(self, satisfaction: List[int]) -> int\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\nA chef has collected data on the satisfaction level of his n dishes\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        maxSatisfaction(self, satisfaction)\n\n\n\n\u00a0\n\n\n    maxSatisfaction(self, satisfaction)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    chef_max_sat", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\n\n\n\n   \n    maxSatisfaction(self, satisfaction) -> int\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\n\n\nThe chef can cook any dish in 1 unit of time.\n\n\n\n\nA chef can", "\nUse Call-Based format\n\n\n\nA chef has collected data on the satisfaction level of his n dishes\n\n\n\n\n   \n    maxSatisfaction(self, satisfaction)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-1 <= time <= 10^3\n\n\nA chef can", "\nUse Call-Based format\n\n\n    'n' = 3\n\n\nn == 1\nn == 3\nn == 2\nn == 2\nn == 3\nn == 4\nn == 4\nn == 5\nn == 3\nn == 5\nn == 5\nn == 2\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n", "\n\n\n\n    <n>\n\nUse Call-Based format\n\n\n\n\n\n    maxSatisfaction(self, satisfaction) -> int\n\n\u00a0\n\n\n\n\n\n\n\nA chef has collected data on his satisfaction level.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA chef has collected data on his", "\nUse Call-Based format\nA chef can have collected data on the satisfaction level of his\u00a0n dishes.\n\n\n\n\n\n\n\n   \n    maxSatisfaction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA chef can get the maximum dishes\n\n\n1\n\n\n\nA chef"], "prompt": "\nQUESTION:\nA chef\u00a0has collected data on the satisfaction level of his\u00a0n dishes.\u00a0Chef can cook any dish in 1 unit of time.\nLike-time coefficient\u00a0of a dish is defined as\u00a0the time taken to cook that dish including previous dishes multiplied by its satisfaction level \u00a0i.e.\u00a0 time[i]*satisfaction[i]\nReturn\u00a0the maximum sum of\u00a0Like-time coefficient that the chef can obtain after dishes preparation.\nDishes can be prepared in any order and the chef can discard some dishes to get this maximum value.\n\u00a0\nExample 1:\nInput: satisfaction = [-1,-8,0,5,-9]\nOutput: 14\nExplanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.\nExample 2:\nInput: satisfaction = [4,3,2]\nOutput: 20\nExplanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)\n\nExample 3:\nInput: satisfaction = [-1,-4,-5]\nOutput: 0\nExplanation: People don't like the dishes. No dish is prepared.\n\nExample 4:\nInput: satisfaction = [-2,5,-1,0,3,-3]\nOutput: 35\n\n\u00a0\nConstraints:\n\nn == satisfaction.length\n1 <= n <= 500\n-10^3 <=\u00a0satisfaction[i] <= 10^3\nclass Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}