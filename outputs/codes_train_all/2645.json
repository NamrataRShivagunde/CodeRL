{"2645": {"code": ["\n\n\n1<k\u2264len(S)\nUse Standard Input format\n\nUse Standard Input format\n:\n\n\n\n\n\n=Function Descriptions=====\nitertools.combinations_with_replacement(iterable, r)\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.repeat\n\n\n\n\n=====", "\nUse Standard Input format\n\n\n\nUse Standard Input format\n\n:\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\niter", "\n\n\n1<k<=r\n1<k<=r\n1<k<=r\n1<k<=r\n1<k<=r]\n\n\n:\n\n\n\n\n\n=\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n", "\n\n\n1<k\u2264len(S)\n1<k\u2264len(r)\n1<k\u2264len(r)\n\n\n:\n\n\n\n\n\n=Function Descriptions=====\n\n\n\n\n=Function Descriptions=====\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.com", "\n\n\n\n\n:\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, 2)\nUse Standard Input format\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n=====", "\n\n\n\n\n:\n=====Usage Description=====\nUse Standard Input format\n\n\n\n=====Description Description=====\nA function description\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n\n\n\n\n=====Function Descriptions====", "\nUse Standard Input format\n\n\n\n:\n=====Function Descriptions=====\nitertools.combinations_with_replacement\nUse Standard Input format\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n\n\n=====", "\n\n\n\n\nUse Standard Input format\n:\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, r)\n\nUse Standard Input format\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n====", "\nUse Standard Input format\n\n\n\n:\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\nitertools.combinations_with_replacement(iterable, r)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations\n\n\n\n\n=====", "\n\n\n\nUse Standard Input format\n\n:\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, r)\nUse Standard Input format\n\n\n\n\n=Function Descriptions=====\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations\n\n\n\n\n=====Function", "\n\n\n\nUse Standard Input format\n\n:\n=====Input Format Description=====\nUse Standard Input format\nUse Standard Input format\n\n\n\n\n=====Input Format Description=====\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n====", "\n\n\n1<k<5>\n\nUse Standard Input format\n\n:\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, r)\n\n\n\n\n\n\n\n\n\n\n1<r\n1<k\n1<r\n\n\n\n\n\n\n\n=====Function Descriptions====", "\n\n\n\nUse Standard Input format\n:\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, r)\n\n\n\n\n\n\n\n\n=====Input Description=====\nitertools.combinations_with_replacement(iterable, r)\n\n\n\n\n\n\n\n\n=====Function Descriptions====", "\n=====Standard Input format\n\n\n\n:\n=====General Usage=====\n\nUse Standard Input format\n\n\n\n=====General Usage=====\n\nUse Standard Input format\n\n=====General Usage=====\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n====", "\nUse Standard Input format\n\n\n\n:\n\n\n1<len(iterable)<=k<=r\n1<k<=r>\n1<k<=r>\n1<k>\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\ncombinations_with_replacement\n\n\n\n\n====", "\n\n\n\nUse Standard Input format\n\n:\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, r)\nUse Standard Input format\n\n\n\n\n\n\n\n\n\n\n\n\n1,2,3,4,5,5\n\n\n\n\n\n\n=====Function Descriptions=====\n=====", "\n\n\n\nUse Standard Input format\n:\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, k)\n\n\n\n\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n\n=====", "\n\n1, 2, 3, 4, 5, 6\n\nUse Standard Input format\n\n:\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations\n\n\n\n\n=====", "\n# Use Standard Input format\n\n\n\n:\n\n\n\n\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, k)\nUse Standard Input format\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\ncombinations_with_replacement\ncombinations_with_replacement\n\n\n\n", "\n\n\n1<len(iterable)\n1<len(r)\n1<len(r)\n2<len(r)\n1<len(r)\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n=Function Descriptions=====\nitertools.combinations_with_replacement\n\n\n\n\n\n\n\n\n\n\n\n=====Function"], "prompt": "\nQUESTION:\n=====Function Descriptions=====\nitertools.combinations_with_replacement(iterable, r)\nThis tool returns\n\nlength subsequences of elements from the input iterable allowing individual elements to be repeated more than once.\n\nCombinations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.\n\nSample Code\n\n>>> from itertools import combinations_with_replacement\n>>> \n>>> print list(combinations_with_replacement('12345',2))\n[('1', '1'), ('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '2'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '3'), ('3', '4'), ('3', '5'), ('4', '4'), ('4', '5'), ('5', '5')]\n>>> \n>>> A = [1,1,3,3,3]\n>>> print list(combinations(A,2))\n[(1, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (3, 3), (3, 3), (3, 3)]\n\n=====Problem Statement=====\nYou are given a string S.\nYour task is to print all possible size k replacement combinations of the string in lexicographic sorted order.\n\n=====Input Format=====\nA single line containing the string S and integer value k separated by a space.\n\n=====Constraints=====\n0<k\u2264len(S)\nThe string contains only UPPERCASE characters.\n\n=====Output Format=====\nPrint the combinations with their replacements of string S on separate lines.\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nUse Standard Input format\nANSWER:\n"}}