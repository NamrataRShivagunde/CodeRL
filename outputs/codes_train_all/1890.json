{"1890": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n        1   2   3   4   5   6\n        7   8   7\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n \\\n\n\n\n\n  1:\n\n", "\nUse Call-Based format\n 1   3   4   5   6\n\n\n\nUse Call-Based format\n\n\n\n \n\n\n\n\n\n\n  \n    findBottomLeftValue(self, root)\n    \n\n\n\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n \n\n\n\nExample 3:\n\n\n\n    If", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n \n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n        4\n    5   6\n    \n\n\n    \n\n\n\n\nUse Call-Based format\n\n\n \n\n\nExample 3: \n\nGiven a", "\nUse Call-Based format\n\n \n\nUse Call-Based format\n\n\n\n\n \n\n\n\n   / \\\n  2   3\n\n\n\n\n\nUse Call-Based format\n\n   1   3   4   5   6\n\n          \n\n\n\n\n\nGiven a binary tree, find the bottom left value\n\n \n\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   / \\\n\n  / \\\n\n\n\n\n\n\n\n\n\n        2   3\n        4   5\n        6   7\n        \n\n\nExample 3: \n\n\n\n\n\n\n\n\n\n\n\n\n\n  2   3\n \n\n\n\n\n    Given", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   / \\\n\n  \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n     \n        4   5   6\n    \n\n        # Definition of a binary tree node\n\n\n\n\n\n\n\n\n\n\n   \n\n\nExample 3:\n\n\n    Input:", "\nUse Call-Based format\n\n    1   2   3\n   \n    2   3\n    \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n    3   4   5   6\n      7\n    \n\n\n   \n   \n    pass\n\n\n\n\n\n\n\n\n\n \\\n  2   3\n\n\n\n\n\n# Example", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n \n\n\n\n \n\nUse Call-Based format\n\n\n\n\n\n\n\n        1\n\n        2\n        3\n        \n\n       \n    def findBottomLeftValue(self, root: TreeNode) -> int:\n\n\n\n\n\n\n\n \\\n\n\n\n\n\n    Given a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    /   / \\\n\n\n\nUse Call-Based format\n\n\n\n    \n\nUse Call-Based format\n\n\n        1   2   3\n       \n\n    pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n \n\n\nExample 3:\n\n  ", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   / \\\n\n\n\n\n\n   \n    4   5   6\n    7   8   9\n\n\n    1\n    \n   \n   \n    \"\"\"\n\n\n\n\nUse Call-Based format\n\n\n\n \n\n\n\n\n\n\nExample 1:\n\nInput:", "\nUse Call-Based format\n\n\n\n\n\n\n  / \\\n \n\n\nUse Call-Based format\n\n\n\n\n   \n        \n\n\n\n\n\n    1   2   3\n   \n   \n    def findBottomLeftValue(self, root: TreeNode) -> int:\n        \n\n\n\n\n\n\n\n \\\n\n\n\n\n\n   ", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   / \\\n\n\n\n\n\n        10\n   \n       \n        # Example\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n \\\n\n\n\nExample 3:\n\n\n    Given", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   /   / \\\n\n\n\n\n\n  /   2   3\n  /   / \\\n\n\n\n\n      1   3\n \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   2   3\n  \n\n\n\n\n\nExample 1:", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a binary tree, find the leftmost value in the last row of the tree.\n\nUse Call-Based format\n   \n\n\n\n\n\n\nGiven a binary tree, find the bottom left value\n\n\n\n\n   ", "\nUse Call-Based format\n\n        1\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    findBottomLeftValue(self, root: TreeNode) -> int:\n        \nUse Call-Based format\n\n   \n\n\n\n\n\n\n\n\n\n\n \n\n\nExample 3: \n\n\n   ", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n        return self.val\n\n\n        pass\n\n\n\n\n    2   3\n\n    3   5   6\n    \n\n\n\n\n\n\n\n\nExample 3:\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n  Example 1: \n\n   \n\n\n    findBottomLeftValue(self, root)\n\n\n\n\n\n\n\n\n\n \\\n  2   3\n\n\n\n\n   ", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n \n \n   /\n\n\n\n\n\n\n\n    findBottomLeftValue(self, root)\n\nUse Call-Based format\n\n   \n   \n\n\nGiven a binary tree, find the rightmost value in the last row of the tree. \n\n\n\n\n \n\n\n\n   ", "\nUse Call-Based format\n \n\nUse Call-Based format\n\n\nUse Call-Based format\n\n    / \\\n \n\n\nUse Call-Based format\n\n\n   \n    \n\n\n\n   \n        return 1\n    \n\n\n\nGiven a binary tree, find the leftmost value in the last row of the tree.\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n \n\n\n\n\n   1   2   3   4   5   6\n\n        return root.val\n\n\n    def __init__(self):\n        pass\n\n\n\n\n\n\n\n\n \n\n\n\nExample 3:\n\n\n  Input:"], "prompt": "\nQUESTION:\nGiven a binary tree, find the leftmost value in the last row of the tree. \n\n\nExample 1:\n\nInput:\n\n    2\n   / \\\n  1   3\n\nOutput:\n1\n\n\n\n  Example 2: \n\nInput:\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\nOutput:\n7\n\n\n\nNote:\nYou may assume the tree (i.e., the given root node) is not NULL.\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: TreeNode) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}