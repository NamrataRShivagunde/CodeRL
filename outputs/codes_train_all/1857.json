{"1857": {"code": ["\n\n\n\nUse Call-Based format\n\n\nn = 3\n\nn = 2\n\nn = 4\n\nExplanation:\n\nExample 1:\n\nInput: n = 3\nOutput: 3\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 10\n\n\n\n\n# n = 3\n", "\n\nn\u00a0\n\n\n\nUse Call-Based format\n\nn\u00a0\n\n\n\nn = 10\n\n\u00a0\nConstraints:\n\n1 <= n <= 10\n\nOutput: 2\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA cinema has n rows of seats.\n\n\n\n\n1", "\n\nn\u00a0=4\n\n\n\n\n\n\n\nn = 4\n\nConstraints:\n\n1 <= n <= 10^9\n1 <= n <= 10^4\n\nExplanation:\n\n\n\n\n   \n\n\nn = 4\n\n\n\n\n\n\n\n\n\n\nn = 4\n\n\n1\n\n\n\n\n1 <= n <= 10^", "\nUse Call-Based format\n\nExample:\n    def maxNumberOfFamilies(self, n, reservedSeats: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 6\n\nExample 4:\n\nThe number of rows of seats in n = 10\n\n\n\n\n\n\n\nn = 3", "\nUse Call-Based format\nn = 5\n\n\u00a0\nUsage:\n    import call_based\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def maxNumberOfSeats(self, n: int, reservedSeats: List[int]):\n\n\n\n\n\n\n\n\n\n\n\nn = 10\n\n\n\nn = 10\n\n# n", "\nUse Call-Based format\n\nn\u00a0 = 4\n\n\n\n\n\nn\u00a0 = 4\n\n\n\n\n\n\n\n\nn\u00a0 = 4\n\n\n\n\n\nn = 3\n\n\n1\n\n\n\n\n1 <= n <= 10^9\n1 <= n <= 10^4\n\n\n\n\n\n\n\n\nThe number of rows of", "\n\nn = 10\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nn = 10\n\nExample 1:\n\nInput: n = 10\nOutput: 10\n\nExample 2:\n\nInput: n = 10\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 10\n", "\nUse Call-Based format\nn\u00a0= 10\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nn\u00a0= 10\n\n\nn = 10\n\n\n\n\n\n\nn = 3\n\n\u00a0\n\n\n\nn = 5\n\n\u00a0\n\n\n\n\nn = 5\n\n\u00a0\n\n\n\nn = 3\n\n", "\nUse Call-Based format\n\nn = 3\n\nreturns:\nOutput:\n\nExample 1:\n\nOutput: 2\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 3\n\n\n\n\n\n\n\nn = 3\n\n\n\nn = 2\n\nOutput: 3\n\nExample 1:\n\n\n\n\n1 <=", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nn = 4\nreservedSeats = [4,8]\n\n\u00a0\nConstraints:\n\nn = 3\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA cinema has n rows of seats\n\n\n\n\n\n1", "\n\nUse Call-Based format\n\n\n\nCall-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nExplanation:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe cinema has n\u00a0rows of seats.\n\n\n\n\n\n\nn = 10^9", "\nUse Call-Based format\n\n\n\n\nA cinema has n rows of seats, numbered from 1 to 10, numberled from 1 to 10\n\n\n\n\n\n\n\n\n\n    maxNumberOfFamilies(self, n, reservedSeats)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA cinema has n rows of", "\n\n\n\nUse Call-Based format\n\n\nA cinema has n rows of seats\n\nExplanation:\nn > 10^8\n\n\n\n\n\n\n\n\n\n    n = 5\n\n\n\n\n\n\n\n\nn = 3\n\n\n\n\n\n\n\n1 <= n <= 10^9\n\n\n\n\nn = 3\n\n", "\nUse Call-Based format\nn = 10\n\nUse Call-Based format\n\n\n\n\nn = 10\n\nExample 1:\n\nOutput: 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 3\n\n\u00a0\nExplanation:\n\n\n\n\n\nn = 10\n\nExample", "\n\nn\u00a0 = 10^4\n\u00a0\n\nUse Call-Based format\n\nExample 1:\n\nInput: n = 4\nOutput: 2\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 10^4\n\n\n\n\n\n\n\nn = 10^4\n", "\n    class CallBasedFormat:\n        pass\n\n\n\n\nUse Call-Based format\n\nn = 10\n\nExample 1:\n\nInput: n = 6\nOutput: 6\n\nExample 2:\n\nInput: n = 7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 3\n\n\n\n\nn = 10\n", "\n\nn = 3\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    self.maxNumberOfFamilies(n, reservedSeats)\n\n\n\n\n\n\n\n\n\n\nA cinema has n rows of seats\n\n\n\n\nA cinema", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nn = 6\n\n\nn = 6\n\nConstraints:\n\n1 <= n <= 10^8\nOutput: 2\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 3\n\n\nn = 6\n\n\n\n\nn = 3\n", "\nUse Call-Based format\nn = 4\n\nUse Call-Based format\n\n\n\n\nn = 4\n\n\n\n\n\n\n\n\n\n\n    self.maxNumberOfFamilies(n, reservedSeats)\n        \n\n\n\n\n\nn = 4\n\nExample 4:\n\n\n\n\n\n1 <= n <= 10\n\n\n\nn = 3\n\n", "\n    Use Call-Based format\n\n\n\nUse Call-Based format\n\n\nA cinema has n\u00a0rows of seats\n\nOutput: 3\n\n\n\n\n\n\n\n\n\n\n\n\nn = 4\n\n\n\n\n\n\n\nA cinema has n\u00a0rows of seats\n\n\n\n\n\nA cinema"], "prompt": "\nQUESTION:\nA cinema\u00a0has n\u00a0rows of seats, numbered from 1 to n\u00a0and there are ten\u00a0seats in each row, labelled from 1\u00a0to 10\u00a0as shown in the figure above.\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8]\u00a0means the seat located in row 3 and labelled with 8\u00a0is already reserved.\nReturn the maximum number of four-person groups\u00a0you can assign on the cinema\u00a0seats. A four-person group\u00a0occupies four\u00a0adjacent seats in one single row. Seats across an aisle (such as [3,3]\u00a0and [3,4]) are not considered to be adjacent, but there is an exceptional case\u00a0on which an aisle split\u00a0a four-person group, in that case, the aisle split\u00a0a four-person group in the middle,\u00a0which means to have two people on each side.\n\u00a0\nExample 1:\n\nInput: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n\nExample 2:\nInput: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2\n\nExample 3:\nInput: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^9\n1 <=\u00a0reservedSeats.length <= min(10*n, 10^4)\nreservedSeats[i].length == 2\n1\u00a0<=\u00a0reservedSeats[i][0] <= n\n1 <=\u00a0reservedSeats[i][1] <= 10\nAll reservedSeats[i] are distinct.\nclass Solution:\n    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}