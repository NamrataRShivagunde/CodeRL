{"2470": {"code": ["\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes):\n        return 1\n\n\n\n\n\n\n\n\n\n\n    # TODO\n\nUse Call-Based format\n\nUse Call-Based format\ndominoes[i] = [a, b]\n\n\n\n\n\ndominoes\n\n\n\ndominoes =", "\n\nUse Call-Based format\n\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Python format\n\nUse Python-based format\n\ndominoes = []\n\n\n\ndomino", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes)\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n   ...\n        \n\nUse Python-Based format\n\nUse Python-Call-Based format\n\n\nUse Python-based format\n\ndominoes = [1]\n\nGiven", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n\n\n\n\n\n\n\n\n\n\n    pass\n\nUse Python-based format\nUse Python-Call-Based format\n\n\nUse Python-Call-Based format\n\n\n\n\n\n\nGiven a list of dominoes", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes: List[List[int]]) -> int\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\na==b==c==d\n\n\nGiven a list", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(dominoes: List[List[int]]) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n\n    @numEquivDominoPairs\nUse Python Call-Based format\nUse Python Call-Format\n\n\n\n\n\n\n\n\n\n\nGiven a list of dominoes,", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes) -> int:\n\n\nUse Call-Based format\n\n\n\n\nUse Python-Based format\n\n\n\n    pass\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nGiven a list of dominoes", "\nUse Call-Based format\n\n\n    dominoes: list of dominoes\n\n\nUse Call-Based format\n\n\n\nInput: dominoes = [a,b,c,d]\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Python 3 format\n\n\n\nThe number of domino pairs\n\n\nGiven a list of domino", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Python Call-Based format\n\n\n\n\n\n\nUse Python Call-Based format\nInput: dominoes = [[a,b,c,d]]\n\n\n\n\n\n\nUse Python Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\ndominoes = [[a", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(dominoes)\n\n\n\n\n\n\nInput: dominoes = [1,2,3,4,5,6]\n\n\n\n\n   ...        \nUse Python-Based format\n\n\nUse Python-based format\n\n\n\n\ndominoes = [[a]]\n\nGiven a", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes) -> int\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n   ...\n\n\nUse Python Call-Based format\n\n\nUse Python Call-Based formatdominoes[i][j] = [a, b]\n\n\n\n\n\n\ndominoes", "\n\n\n\n    numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n\n\nUse Python-based format\n\n\n\n\n\n\n\n    pass\n\n\nUse Python Call-Based format\n\nUse Call-Based format\n\nUse Python Call-Based format\n\n\n\n\n\n\nGiven a list of dominoes,", "\nUse Call-Based format\n\n\n\n\nUse Call-Based formatdominoes[i][j]\n\n\n\n    dominoes = [a,b,c,d]\n        \n\n\n\n    pass\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Python format\n\n\n\n\na, b, c, d\n\nGiven a", "\n\nUse Call-Based format\n\n\n    #...\n\n\nInput: dominoes = [1,2,3,4,5]\nOutput: 1\n\n\u00a0\n\n\n\n    #...\n\n\n\n\n\n\n\nUse Python-based format\n\n\nUse Python-based format\n\n\n\n\n\ndominoes = [[1,2]]Given", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Method-Based format\nUse Python 2.7 format\n\n\nUse Python 3.6 format\n\nUse Python 2.7 format\n\ndominoes = [a, b]\n\nGiven a", "\nUse Call-Based format\n\n\n    dominoes = [1,2,3,4,5]\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   ...\nUse Python 3 format\n\n\n\nUse Python 3 format\n\nUse Python 2 format\nUse Python 3 format\n\n\n\nGiven a list of dominoes, a", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes)\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    dominoes: [list[int]]\n\nUse Python-based format\n\n\nUse Python-based format\n\n\nUse Python-based format\n\n\n\n1 <= i <= j <= 3\n", "\nUse Call-Based format\n\n\n    numEquivDominoPairs(self, dominoes) -> int:\n\n\nUse Call-Based format\n\n\n\n\n\n\n1 <= dominoes[i][j] <= 3\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Python format\n\n\n\n\nGiven a list of dominoes", "\nUse Call-Based format\nUse Call-Based format\n\n    self = self\n       \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    numEquivDominoPairs(self, dominoes) -> int:\n\n\nUse Python format\n\n\nUse Python format\n\nUse Python format\nUse Python format\n\n\n\n\nGiven a list of domino", "\nUse Call-Based format\n\n\n    #...\n\nUse Call-Based format\n\n\n\n\n\n\n\nInput: dominoes\nOutput: dominoes\n\n\u00a0\n\n1 <= i < j < dominoes.length\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of dominoes"], "prompt": "\nQUESTION:\nGiven a list of dominoes,\u00a0dominoes[i] = [a, b]\u00a0is equivalent to dominoes[j] = [c, d]\u00a0if and only if either (a==c and b==d), or (a==d and b==c) - that is, one domino can be rotated to be equal to another domino.\nReturn the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and\u00a0dominoes[i] is equivalent to dominoes[j].\n\u00a0\nExample 1:\nInput: dominoes = [[1,2],[2,1],[3,4],[5,6]]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= dominoes.length <= 40000\n1 <= dominoes[i][j] <= 9\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}