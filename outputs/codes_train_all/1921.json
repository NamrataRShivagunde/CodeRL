{"1921": {"code": ["\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost non-empty stack with size less than capacity.\n\n\n\u00a03 \u00a05 \u00a03 \u00a05\n\n\u00a0\n\n\n\n\n\n\n\u00a01 \u00a02 \u00a03\n\n\n\u00a03", "\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\n\n\n\u00a03 \u00a05 \u00a05 21 21 21 21 21 21 21 21\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05 \u00a05", "\n\n\n\n\n\n\n\n\n\n\n\n1 \u00a01 \u00a01 \u00a01 \u00a01 \u00a01 \u00a01 \u00a01 \u00a01 \u00a01 \u00a01 \u00a01\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a05\n\n\u00a03 \u00a05 \u00a0", "\n\n\n\n\n\n\n\n\n\n\n\n\nDinnerPlates(int capacity)\n[1,2,3,4,5,20,21,5,21,4,2]\n\n\u00a01 \u00a02 \u00a03\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a03 \u00a05 \u00a0", "\n\n\n\n\n\n\n\n\n\n\n\n\n\npush\",\"push\",\"push\",\"push\",\"push\",\"push\",\"push\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n\n\n\n\u00a05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05\n                                           \ufffd", "\n\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\npop()\u00a0Popes the given positive integer val.\n\n\n\n\u00a03 \u00a05\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a03 \u00a05 \ufffd", "\n\n\n\n\n\n\n\n\n\npush(1)\n\npush(3);      // The stacks are now:     3 3\npush(2);         // The stacks are now:     2 3\npush(3);      // The stacks are now:     2 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05 \ufffd", "\n\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\n\n\u00a03 \u00a05 \u00a04 \u00a05\n\u00a05\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05\n                                           \ufe48", "\n\n\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\n\n\u00a05 \u00a03 \u00a05 21 21 21 21 21 21 21\n\n\n\n\n\n\n\n\n\n\n\u00a0\u00a05\n\n\u00a03 \u00a05\n                                ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0push(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\n\n\u00a0push(int val)\u00a0Pushes the given positive integer val into the leftmost stack.\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      \u00a0Pushes the given positive integer into the leftmost non-empty stack with the given size less than capacity.\n\n\u00a03 \u00a05\n\u00a05 \u00a05\n\n\n\n\n\n\n\n\n\n\n\n                                           \ufe48 \u00a05\n\u00a03 ", "\n\n\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\n\n\u00a03 \u00a05 \u00a04 \u00a05\n\n\u00a0\n\n\n\n\n\n\n\n\u00a03 \u00a05\n\n\n\u00a03 \u00a05 ", "\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\n\n\n\u00a03 \u00a05 \u00a04 \u00a05 \u00a04 \u00a05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05 \ufffd", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00a01 \u00a02 \u00a03 \u00a05\n\n\u00a03 \u00a05\n\n\u00a03 \u00a05\n\u00a03 \u00a05\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\u00a0\u00a05\n\n\u00a03 \u00a05", "\n\n\n\n\n\n\n\n\n\n\n\n\npush(int val)  // Pushes the given positive integer val into the leftmost non-empty stack and pops it from the rightmost stack.\n\n\u00a02 \u00a03 \u00a05\n\n\u00a0\n\n\n\n\n\n\u00a0\u00a05\n\n\n\n\u00a03 \u00a05 \ufffd", "\n\n\n\n\n\n\n\n\n\npush(1);\npush(1);\npush(2);\npush(3);\npush(2);\npush(3);\n\n\n\n\n\n\n\u00a03 \u00a05\n\u00a03 \u00a05\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05\n                                           \ufffd", "\n\n\n\n\n\n\n\n\n\n\n\npush(int val)  // Pushes the given value into the leftmost stack with size less than capacity.\npush(int val)  // Pushes the given value into the rightmost stack with size less than capacity.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a03 \u00a05 \u00a0", "\n\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost non-empty stack with size less than capacity.\n\n\n\u00a03 \u00a05\n\u00a03 \u00a05\n\n\n\n\n\n\n\n\n\u00a01 \u00a02\n\n\n\n\u00a03 \u00a05", "]\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                           1 \u00a03 \u00a05\n                                           2 \u00a03 \u00a05\n\n\n\u00a03 \u00a05\n\u00a03 \u00a05\n\u00a0\n\n\n\n\n\n\u00a0\n\u00a03 \u00a05\n\n\n\n\u00a03 \u00a0", "\n\n\n\n\n\n\n\n\n\n\npush(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\n\n\n\u00a03 \u00a05 \u00a04 \u00a05\n\u00a05\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\u00a03 \u00a05\n                                          "], "prompt": "\nQUESTION:\nYou have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same\u00a0maximum capacity.\nImplement the DinnerPlates class:\n\nDinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks.\nvoid push(int val)\u00a0Pushes the given positive integer val into the leftmost stack with size less than capacity.\nint pop()\u00a0Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all stacks are empty.\nint popAtStack(int index)\u00a0Returns the value at the top of the stack with the given index and removes it from that stack, and returns -1 if the stack with that\u00a0given index is empty.\n\nExample:\nInput: \n[\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\nOutput: \n[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\n\nExplanation: \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2 \u00a04\n\u00a0                                          1 \u00a03 \u00a05\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 2.  The stacks are now:    \u00a04\n            \u00a0                                          1 \u00a03 \u00a05\n                                                       \ufe48 \ufe48 \ufe48\nD.push(20);        // The stacks are now: 20  4\n\u00a0                                          1 \u00a03 \u00a05\n                                           \ufe48 \ufe48 \ufe48\nD.push(21);        // The stacks are now: 20  4 21\n\u00a0                                          1 \u00a03 \u00a05\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n             \u00a0                                          1 \u00a03 \u00a05\n                                                        \ufe48 \ufe48 \ufe48\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n             \u00a0                                          1 \u00a03 \u00a05\n                                                        \ufe48 \ufe48 \ufe48 \nD.pop()            // Returns 5.  The stacks are now:      4\n             \u00a0                                          1 \u00a03 \n                                                        \ufe48 \ufe48  \nD.pop()            // Returns 4.  The stacks are now:   1 \u00a03 \n                                                        \ufe48 \ufe48   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        \ufe48   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks.\n\n\u00a0\nConstraints:\n\n1 <= capacity\u00a0<= 20000\n1 <= val\u00a0<= 20000\n0 <= index\u00a0<= 100000\nAt most 200000\u00a0calls will be made to push, pop, and popAtStack.\nclass DinnerPlates:\n    def __init__(self, capacity: int):\n    def push(self, val: int) -> None:\n    def pop(self) -> int:\n    def popAtStack(self, index: int) -> int:\n# Your DinnerPlates object will be instantiated and called as such:\n# obj = DinnerPlates(capacity)\n# obj.push(val)\n# param_2 = obj.pop()\n# param_3 = obj.popAtStack(index)\nUse Call-Based format\nANSWER:\n"}}