{"2894": {"code": [":\n:\n\n\n\n:\n\n\n\n, four):\n\t\n\n:\n\n(one, two, three):\n\t\n\n\t\n:\n# Transparent\n:\n# Use Call-Based format\n\n\n:\n# One-letter\n# Two-letter\n# Three-letter\n\n\ndef\n\n:\n\n\n# Triple Trouble\n", ":\n:\n\n\n\nUse Call-Based format\n:\n\n\n):\t\n\t\n\n:\n\n(one, two, three):\n\t\n\n:\n# Triple Trouble\n:\n# Call-Based format\n,\n:\n\nUse Call-Based format\n\n,\n\n\n\n\n\n\n\n# Triple Trouble\n\nCreate a function that", ":\n\t\nUse Call-Based format:\n\n\n:\n\t\nUse Call-Based format:\n\t\nUse Call-Based format\n\n,:\n\t:\n\n(one, two, three):\n\t\n:\n:\n\n\n\n\n:\n\n\n\n\n\n# Triple Trouble\n\n\n:\n\n\n\n# Triple Trouble\n\n", "::\n\n\n\nUse Call-Based format\n:\n\n\n,\n:\n\n(one, two, three):\n\t\n\n:\n:\n\n\n\n:\n\n\n\nReturns:\n\n# Triple Trouble\n\nCreate a function that will return a string\n\n:\n# Triple Trouble\nION:\n\n\n\n# Trouble\n\n", ":\n:\n\n\n\t\nUse Call-Based format\n:\n\n\n\n,\n:\n\n(one, two, three):\n\t\n\t\n:\n# Triple Trouble\n\nExample:\n\t\nUse Call-Based format:\n\n,\n:\n\n\n\n# Triple Trouble\n\n:\n\n\n\n\n# Triple Trouble\n\n", "::\n\n\n\n:\n\n\n):\n\t\n\n:\n\n\n(one, two, three):\n\t\n\t\n:\n\n:\n\n\n\n\n\n:\n# Use Call-Based format\n\n\nCreate a function that will return a string that combines all of the letters of the three inputed strings in groups\n:\n\n:\n\n\n\n# Triple", "::\n\n\n\nUse Call-Based format\n:\n\t\nUse Call-Based format\n\n, four):\n\t\n:\n\t:\n\n(one, two, three):\n\t\n\n:\n:\n\n\n\n\n:\n# Use Call-Based format\n\n\n\n\n\n\n\n# Triple Trouble\n\n\n\n# Triple Trouble\n", ":\n:\n\n\n\n:\n\nUse Call-Based format\n\n):\n\t\n\n:\n\n(one, two, three):\n\t\n\n:\n\n:\n# All as usual\n\n\n\n:\n\n\n\n\n\nRETURN:\n# Triple Trouble\n\n\n\n# Triple Trouble\n\n:\n\n\n\n# Triple Trouble", ":\n:\n\n\n\nUse Call-Based format\n:\n\n\n):\n\n\t\n:\n\n(one, two, three):\n\t\n\n:\n# Triple Trouble\n\nUse Function-Based format:\n\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n# Triple Trouble\n\nCreate a function", ":\n:\n\n\n\n\nUse Call-Based format:\n\n):\n\t\n\n:\n\n(one, two, three):\n\t\n\n:\n\n\n# Triple Trouble\n:\n\nUse Call-Based format\n,\n:\n\n# Triangle trouble\n\n\n\n\n:\n\n\n:\n\n\n\n# Trouble\n\n", ":\n\t\nUse Call-Based format:\n\n\n\t\nUse Call-Based format::\n\n\n):\n\t\n\n:\n\n(one, two, three):\n\t\n\n:\n# Triple Trouble\n:\n\n\n\t\n:\n\n\n\n\nReturns:\n# Trouble\n:\n\n:\n\n\n\n# Triple Trouble", ":\n:\n\n\n\n:\n\nUse Call-Based format\n\n, four):\n\t\n\n:\n\t\nUse Call-Based format\n,\n:\n:\n# Triple Trouble\n\n\nUse Call-Based format\n,\n:\n\n\n\n\n\n\n# Triple Trouble\n\n:\n\n\n\n\n# Triple Trouble\n\nCreate", ":\n:\n\ndef triple_trouble(one, two, three):\n\t\nUse Call-Based format\n::\n\n\n):\n\t\n\n:\n\n):\n\t\n:\n:\n\n\n\t\nUse Call-Based format\n\t:\n\n\n\nExample:\n\n\n\n\n:\n\n\n\n\n# Triple Trouble\n\nCreate", "::\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n):\n\t\n\n:\n\n,\n\t\n:\n:\n\n\n\t\n\t\nUse Call-Based format:\n# Use Call-Based format\n\n\n\nRETURN:\n# Three\n\n\n# Triple Trouble\n\n:\n\n\n\n# Triple T", "::\n\n\n\nUse Call-Based format\n:\n\n\n):\n\t\n\n:\n\n\n(one, two, three):\n\t\n\t\n:\n\n# Triple Trouble\n:\n# Use Call-Based format\n,\n:\n\n\n(one, two, three)\n:\n:\n\n\n\n\n\n# Triple Trouble\n\n", ":\n:\n\n\n\n:\n\n\n):\n\t\n\n:\n\n,\n\n:\n\n# Triangle Trouble\n\n\nUse Call-Based format:\n\n# Triple Trouble\n\n\n,\n:\n\nUse Call-Based format\n\n\nCreate a function that will return a string\n\n\n:\n\n\n# Triple Trouble\n\n", ":\n\t\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n:\n\t\nUse Call-Based format\n\n):\n\t\n:\n:\n\t\n):\n\t\n\n:\n\t# Triple Trouble\n:\n\n,\n\n:\n\nUse Call-Based format\n,:\n\n:\n\n\n# Triple Trouble\n", ":\n:\n\n\n\nUse Call-Based format\n:\n\n\n):\n\t\n\n:\n\n(one, two, three):\n\t\n\n:\n# Triple Trouble\n\nUse Function-Based format:\n\n,\n\t:\n\nUse Call-Based format\n,\n\n\n\n# Triple Trouble\n\n\n# Triple Trouble\n\n", ":\n\t\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n:\n\n):\n\t\n:\n:\n\n(one, two, three):\n\t\n\n:\n:\n\n\n\n\n:\n\n\n\n\t\n\n# Triple Trouble\n\nUse Call-Based format\n:\n\n\n\n# Triple Trouble\n\n", ":\n\t\nUse Call-Based format:\n\t\nUse Call-Based format\n\n::\n\n, four)\n\n:\n\t:\n\t\n,\t\n:\n:\n\t\n# Triple Trouble\n\n\n,\n\n:\n\nUse Call-Based format\n\n\n\n\n\n:\n# Triple Trouble\n\n\n# Triple Trouble"], "prompt": "\nQUESTION:\n# Triple Trouble\n\nCreate a function that will return a string that combines all of the letters of the three inputed strings in groups.  Taking the first letter of all of the inputs and grouping them next to each other.  Do this for every letter, see example below!\n\n**E.g. Input: \"aa\", \"bb\" , \"cc\" => Output: \"abcabc\"** \n\n*Note: You can expect all of the inputs to be the same length.*\ndef triple_trouble(one, two, three):\n\t\nUse Call-Based format\nANSWER:\n"}}