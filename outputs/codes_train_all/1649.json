{"1649": {"code": ["\n\n\n# State of the FSM:\n\n### States:\n\nNEW_STATE:\n\n### Action:\n\n### Event:\n\n###\n\n\n\n\n\n\n\n## Action of the FSM:\n\n### Action of events:\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action", "\n\n\n\n### State of FSM:\n\n### Event of state:\n\n### Event of state: EVENT\n\n### Action of FSM: EVENT\n\n### Action of state: EVENT\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action of an array", "\n\n\n\n# Return\n\nESTABLISHED:\n\nFIN_SENT:\n\nCLOSE_WAIT:\nTIME_WAIT\n\n### Action:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Action of events:\n\n###\n\n\n\nWAIT\n", "\n\n### Actions:\n\n### Passthrough\n\n### State Machines:\n\n###\n\n### Action of events:\n\n###\n\n### Action:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Action of the next state:\n\n```\n\n\nWAIT\n\n", "\n\n### States\n###\n\n\n\n\n\n\n\n\n\n## Actions\n\n### Action of events\n\n### Actions of events\n\n### State\n\n### Event:\n\nNEW_STATE\n\n### Action of events\n\n### Event\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action", "\n\n\n\n### State of FSM:\n\n\n### Initial State\n\n### State of FSM:\n\n\n### Event of FSM:\n\n### Event of FSM:\n\n### Event of FSM:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n```", "\n\n\n\n### State:\n\nState of the FSM:\n\n### State of the FSM\n\n### Action:\n\nState of the FSM\n\n### Action:\n\n\n\n\n\n\n\n\n## Events\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action of the", "\n\n\n\n\n### State of FSM\n\n\n\n\n\n### Action of FSM\n\n### State of events\n\n### Action of FSM\n\n### Action of FSM\n\n### Action of FSM\n\n### Action of FSM\n\n### Action of FSM\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n```", "\n\n\n\n### Event of a state:\n\n```\nINITIAL_STATE          -> NEW_STATE\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Event for an event:\n\n```\nINITIAL_STATE: EVENT\n```\n\n\n\n\n\n\n\nWAIT\n\n### Action of an", "\n\n\n\n\n### Example\n\n\n\n\n### Action:\n\nSTARTING:\n\n### The FSM\n\n### The FSM will traverse the FSM to the current state\n\n### Action:\n\nINITIAL_STATE: EVENT\n\n### Action\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n## Action", "\n\n\n\n### State of an FSM:\n\n## Event of an FSM:\n\n### State of an FSM:\n\n### Event of an FSM:\n\n### Event of an FSM:\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n## State of", "\n\n\n\n### Actions of the FSM:\n\n### State of events:\n\n### Event of events\n\n### State of events\n\n### State of events\n\n### State of states\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action of the", "\n\n\n\n### Actions\n\n### Events:\n\nNEW_STATE: EVENT -> NEW_STATE\n\n### State: EVENT -> NEW_STATE\n\n### Action: EVENT -> NEW_STATE\n\n### Action:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action of the", "\n\n\n\n\n\n\n\n### Actions:\n\n### State:\n\n### Event of each state:\n\n### Event of each event:\n\n### Action of each event:\n\n###\n\n### State transition\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n```\n", "\n\n\n\n### Actions:\n\n### State: EVENT -> NEW_STATE\n\n### Action: EVENT -> NEW_STATE\n\n### Action: EVENT -> NEW_STATE\n\n### Action: EVENT -> NEW_STATE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action of an", "\n\n\n\n### State of FSM:\n\nINITIAL_STATE -> NEW_STATE\n\n### State of FSM:\n\nINITIAL_STATE -> NEW_STATE\n\n### Action:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action of an", "\n\n\n\n### State of FSM:\n\n### Event of FSM:\n\n### Event of FSM:\n\n### State of FSM:\n\n### Event of FSM:\n\n### State of FSM:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n```\n\n", "\n\n\n\n### States:\n\n------------------------------\n\n### Event states:\n\n### Event states\n\n### State states\n\n### Event states\n\n### State states\n\n### State states\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n### Action of an", "\n\n### State of an FSM:\nCLOSE\n\n### Action of an FSM:\n\n### Event:\n\n### Event\n\n### State of an FSM:\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n## State of an FSM:\n", "\n\n\n\n### State of an FSM:\n\n## Event of an FSM:\n\n## State of an FSM:\n\n### State of an FSM:\n\n## Event of an FSM:\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWAIT\n\n```\n\n"], "prompt": "\nQUESTION:\nAutomatons, or Finite State Machines (FSM), are extremely useful to programmers when it comes to software design. You will be given a simplistic version of an FSM to code for a basic TCP session.\n\nThe outcome of this exercise will be to return the correct state of the TCP FSM based on the array of events given.\n\n---------------------------------\n\nThe input array of events will consist of one or more of the following strings:\n\n```\nAPP_PASSIVE_OPEN, APP_ACTIVE_OPEN, APP_SEND, APP_CLOSE, APP_TIMEOUT, RCV_SYN, RCV_ACK, RCV_SYN_ACK, RCV_FIN, RCV_FIN_ACK\n```\n\n---------------------------------\n\nThe states are as follows and should be returned in all capital letters as shown:\n\n```\nCLOSED, LISTEN, SYN_SENT, SYN_RCVD, ESTABLISHED, CLOSE_WAIT, LAST_ACK, FIN_WAIT_1, FIN_WAIT_2, CLOSING, TIME_WAIT\n```\n\n---------------------------------\n\nThe input will be an array of events. Your job is to traverse the FSM as determined by the events, and return the proper state as a string, all caps, as shown above.\n\nIf an event is not applicable to the current state, your code will return `\"ERROR\"`.\n\n### Action of each event upon each state:\n(the format is `INITIAL_STATE: EVENT -> NEW_STATE`)\n\n```\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\nLISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN: APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD: RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT: RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED: APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1: RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE    -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n```\n\n![\"EFSM TCP\" ](http://theangelfallseries.com/img/EFSM_TCP.png)\n\n## Examples\n\n```\n[\"APP_PASSIVE_OPEN\", \"APP_SEND\", \"RCV_SYN_ACK\"] =>  \"ESTABLISHED\"\n\n[\"APP_ACTIVE_OPEN\"] =>  \"SYN_SENT\"\n\n[\"APP_ACTIVE_OPEN\", \"RCV_SYN_ACK\", \"APP_CLOSE\", \"RCV_FIN_ACK\", \"RCV_ACK\"] =>  \"ERROR\"\n```\n\n \n\nThis kata is similar to [Design a Simple Automaton (Finite State Machine)](https://www.codewars.com/kata/design-a-simple-automaton-finite-state-machine), and you may wish to try that kata before tackling this one.\n\nSee wikipedia page [Transmission Control Protocol]( http://en.wikipedia.org/wiki/Transmission_Control_Protocol)\nfor further details.\n\nSee http://www.medianet.kent.edu/techreports/TR2005-07-22-tcp-EFSM.pdf page 4, for the FSM diagram used for this kata.\ndef traverse_TCP_states(events):\n\t\nUse Call-Based format\nANSWER:\n"}}