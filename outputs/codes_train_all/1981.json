{"1981": {"code": ["\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nReturns:\nint\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\nReturns:\nInteger\n\nExplanation:\n\nOutput: 47\n\nExplanation:\n\n\n\n\nWe have", "\n\nUse Call-Based format:\n\n\n\n\n\n\n\n   \n\n\nWe have an array of integers, nums, requests, and a valid range of integers.\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\nRequest sums\n\nExplanation:\n\u00a0\n\n\n\n\nThe number of rows in the input array", "\n    Return the maximum total sum of requests.\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format:\n\nn > 5\n\n\n\n\n\n\n\n\n\n\n nums.length\n\u00a0n\n\nExplanation:\n\u00a0\n\n\n\n\n\n\n\n\n\n    We have an array of integers, nums", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nWe have an array of integers, nums, and requests\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\nReturns the maximum total sum of the array of integers, requests,\n\n\n\n\nWe have an array", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n0 <= n\u00a0<= n\n0 <= n\u00a0<= n\n\nExplanation:\n\nn == n\u00a0<= n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\nExplanation:\n\n\n\n\n\nWe have an array of integers, nums", "\n\n\n\n\n\n\n\n\nInput: nums = [0, 1, 2, 3, 4, 5, 6, 7]\nOutput: 0\n\nExplanation:\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nnumRequests = numRequests(self, nums, requests)\n\nExamples:\n\n\n", "\nUse Call-Based format\n\nn == n\n\u00a0n == n\u00a0n\n\n\n\n\nn == n\n\u00a0n == n\n\u00a0n == n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nWe have a list of integers, nums, and requests.\n\n\n\n\n\nWe have an array of integers, nums", "\n\n\n\nUse Call-Based format\n\n\n\n0 <= n <= 105\n0 <= starti <= endi <= 105\n0 <= endi <= 105\n1 <= n <= 105\n1 <= starti\u00a0<\u00a0n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n    Return the maximum total sum of the permutation of", "\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nn == 1\nn == 1\nn == 1\u00a0n == 1\u00a0n\u00a0n\nn == 1\u00a0n\u00a0n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n1 <= n < 105\n0 <= n < 105\n\n\n\nWe have a array", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nn == n\n\nn == n\n\nn == n\n\nn == n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nWe have an array of integers, nums, and requests.\n\n\n\n\nWe have an array of", "\n\n\n\n\n\n\n\n\n\n\nWe have an array of integers, nums, requests, and a number of requests.\n\n\n\n\nOutput: 52\nExplanation: 52 + 7 = 1\n\nExample 3:\n\n\n\n\n\n\n\n\u00a0n\n\n\n\n\nnums = [1,2,3,4,5]\n\n\n\nIf the", "\n\nUse Call-Based format:\n\nn = 10\n\nUse Call-Based format:\n\n\n\nn == 10\n\n\n\n\n\n\nWe have an array of integers, nums, requests\n\n\n\n\n\n\u00a0n\n\n\n\u00a0n\n\n\n\nWe have an array of integers, nums, and requests\n\n\n\n\nWe have an array of", "\nUse Call-Based format\n\n\n\n\n\n\nn == len(nums)\nn == len(requests)\nn == len(requests[0])\nn == len(requests[1])\n\nReturns:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= n <= 105\n\n0\n\n\n\n\nWe have an array of integers", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWe have an array of integers, nums, requests, and the number of requests.\n\n\n\u00a0n == 1\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmaxSumRangeQuery(self, nums, requests)\n\n\n\n\n\n\n\nn = 1\n\n#", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    we have an array of integers, nums, requests, and a set of requests.\n\nConstraints:\n\n\n\n\nExplanation:\n\nReturn the maximum total sum of the requests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    nums = [1,2,", "\n\n\u00a0n == n\n\u00a0n == n\n\u00a0n == n\n\u00a0n == n\n\u00a0n == n\n\u00a0n == n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\u00a01\n\u00a01\n\u00a01\n\u00a01\n\n\n\n\n\n\n\n\nIf the number of", "\n\nUse Call-Based format\n\n\n\n\n\n\nn == n\nn == n\u00a0<\u00a0n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        We have an array of integers, nums, requests, and the max sum of the request sums in the array of integers.\n\nOutput:\n\nn", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nOutput:\n\n\n\n\n\n\n\nWe have an array of integers, nums, requests, and the number of iterations\n\n\n\n\n\n\n\n\n\n\n1\u00a0<= n\n\n\n\n\n\nnumRequests = len(nums)\nnumRequests = len(requests)\n\n\nn", "\nUse Call-Based format\n\n\u00a0n == 10\n\n\n\n\n\n\nn = 10\n\nUse Call-Based format\nUse Call-Based format\nExplanation:\n\nn == 10\n\n\n\n\n   \n\n\n\n\n\n\u00a0n\n\n\n\n\n\n\n\n\n\nOutput:\n\nExplanation:\n\n\n\tnum = 0\n", "\nUse Call-Based format\n\n\n\n\nn = 10\n\nExplanation:\nUse Call-Based format\n\nInput: nums = [0, 1]\nOutput: 10\n\nConstraints:\n\nn == 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 + 1 + 2 + 3 = 0\n\n\nWe have an array"], "prompt": "\nQUESTION:\nWe have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.\nReturn the maximum total sum of all requests among all permutations of nums.\nSince the answer may be too large, return it modulo 109 + 7.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\nOutput: 19\nExplanation: One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.\n\nExample 2:\nInput: nums = [1,2,3,4,5,6], requests = [[0,1]]\nOutput: 11\nExplanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].\nExample 3:\nInput: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\nOutput: 47\nExplanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 105\n0 <= nums[i]\u00a0<= 105\n1 <= requests.length <=\u00a0105\nrequests[i].length == 2\n0 <= starti\u00a0<= endi\u00a0<\u00a0n\nclass Solution:\n    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}