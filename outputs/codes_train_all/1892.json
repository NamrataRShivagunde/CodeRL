{"1892": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n 9\n\nUse Call-Based format\n\n 6   2   3\n\n\n\n\nUse Call-Based format 3   4   8\n  6   3   2   4\n],\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary tree and a sum", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n \n3\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n 2   3\n  2   2  3\n\n\n    def sum(self, root, sum: int):\n        \nUse Call-Based format\n\n\n\n\n\n \\\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n 1   2   3\n\n\nUse Call-Based format\n\n 2,\n   4\n\n    def pathSum(self, root: TreeNode, sum: int):\n        \nUse Call-Based format\n\n\n\n\n\n \\\n\n\n\nGiven a binary tree and a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\u00a0\n5\n    4   5\n    2   3\n\n\nUse Call-Based format\n\n\n\n\n\n 2   3\n\n\n    pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n1    4   7\n2   3\n\n\n\n#", "\nUse Call-Based format\n\n\n\n\n\n\n \n\nUse Call-Based format\n\n 2\n   4\n   8\n\n\n\nUse Call-Based format\n 2\n\n\n    def pathSum(self, root: TreeNode, sum: int):\n        \nUse Call-Based format\n\n\n\n\n\n \\\n \\\n11  13  4\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n 3  4  2\n\n\nUse Call-Based format\n 4   8   10\n  3  2   2   1\n\n    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n \\\n\n\n\n# Definition for a binary tree", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n 4   6\n\n\nUse Call-Based format\n\n 11 13 4\n   \n\n\n 3\n\n\n        # Use Call-Based format\n\n  # sum = 2\n  # sum = 3\n\n\n# Definition for a leaf\n\n\n\n\n\n\n\n\n  # root\n", "\n\n\n\n\nUse Call-Based format\n\n\n 5   4   8  9  7  2\n\n\nUse Call-Based format\n\n 3   2   3\n\n# Definition for a binary tree node.\n\n\n,\n\n\n\n    pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n \\\n \\\n\n\n  # Given a binary", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n 3  4  5\n\nUse Call-Based format\n\n \\\n\n\nUse Call-Based format\n\n 4\n\n\n        pass\n# Use Call-Based format\n\n\n5\n11  13  4\n5   1\n\n# Use Call-Based format\n\n\n\n\nGiven a", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n 4   11  2\n\n\nUse Call-Based format\n 4   2   2\n\n\n    def __init__(self):\n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n \\\n \\\n\n\n    Given a", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n \\\n \\\n\n\n\n 1  3  4\n\n\n\n 9 3\n\nUse Call-Based format\n        # Use Call-Based format\nUse Call-Based format\n\n\n\n\nGiven a binary tree and a sum, find all paths in the tree\n\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n 2  4   4\n\n\nUse Call-Based format\n\n\n\n\n   [5,4,11,2]\n\nUse Call-Based format    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a binary tree and a sum", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n 2  3  4\n\n\n\n\n 2   2   3\n 1   2\n\n\n    def sum(self, root: TreeNode, sum: int) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n \\\n \\\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n 2  9  2\n\n\n\nUse Call-Based format\n\n\n\n    def sum(self, root, sum: int):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a binary tree and a sum, find", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n 2  2  3\n\n\nUse Call-Based format\n\n 2  2  7\n\n\n\n 10  11  12\n\n\n# Definition for a binary tree node.\nUse Call-Based format\n\n\n\n\n\n\n\n \\\n  4  2  2\n\n\n\n#", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n 2  4   11  12\n\n# Definition for a binary tree node.\n\n\nUse Call-Based format\n \\   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n 2  2  2\n\n\n\n 11  13  2\n\n\n    def __init__(self, val=0):\n        self.val = val\n\n\n\n\n\n\n\n5   11 13 13 4\n5   2\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n \\\n\n\nUse Call-Based format\n\n 2    3\n\n\nUse Call-Based format\n\n 6\n\n    def pathSum(self, root, sum: int):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a binary tree and a sum,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n \\\n  2  3  1  2\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n    def __init__(self, root: TreeNode, sum: int):\n\n\n\n\n\n\n\n\n5  4  11 11\n8\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n 9\n\nUse Call-Based format\n\n 2  1  3\n\n\n\n\n 2\n11\n    12  12\n    4   2\n\n    pass\n\n\n\n\nUse Call-Based format\n\n\n\n4  5  2\n\nGiven a binary"], "prompt": "\nQUESTION:\nGiven a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\n\nNote:\u00a0A leaf is a node with no children.\n\nExample:\n\nGiven the below binary tree and sum = 22,\n\n\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n\n\nReturn:\n\n\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}