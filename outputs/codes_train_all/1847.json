{"1847": {"code": ["\n\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n\",\"\",\"getValue\"]\n\n\u00a0[0,0]]\n\n\u00a0[0,0]]\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[0,0]]\n\nExample 3", "\n\n\u00a0\n\u00a0\u00a0\n\n\n\u00a0\n\n1.\u00a0updateSubrectangle(4,3,2,5);\n\u00a0\n\n\n\u00a0\",\"updateSubrectangle\",\"getValue\"]\n\n\n\u00a0\n[0,0]]\n\n\n[]\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[1,1],", "\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\n\u00a0\n1.\u00a0getValue(int row, int col, int newValue);\n\n\u00a0\n\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n\n[0,0]]\n[[\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[1,1],[2", "\n\ngetValue(1,2,3); // return 2\n\n\u00a0\n\n\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\u00a0\n\",\"\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[0,0]]\n\n\u00a0\n[0,0]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[0,0]]\n", "\n\n\u00a0updateSubrectangle(int row1, int col1, int row2, int col2, int col2, int newValue)\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n[3,0]]\n]\n[1,1]]\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n[0,0]]", "\n\u00a0\n\u00a0\n\n\u00a0\n1.\u00a0getValue(int row, int col, int row, int col, int newValue);\n\n\u00a0\n\n\n\u00a0\n\n\n\n[0,0]]\n\n\u00a0[0,0]]\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n[0,0,0,0]]\n", "\u00a0\u00a0\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n1.\u00a0\nupdateSubrectangle(3, 4, 2, 10);\n\n\u00a0\n\n\n\n\n[0,0]]\n\n\u00a0[1,1]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1,1]]\n[[[[1,", "\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n1,1,1,1,1,2,3,3,3,3,1,2]\n\n\n\n[]\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[1,1", "\n\n\u00a0updateSubrectangle(int row, int col, int newValue)\n\n\n\u00a0\n\u00a0\n\n\u00a0\n\n\n\u00a0\n\u00a0\n\",\"\n\n\u00a0\n[0,0]]\n\n\u00a0\n[0,0]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1,1]]\n\nExample 3:\n", "\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n// 0 0 0\n// 0 0 0\n// 0 0 0\n// 0 0 0\n// 0 0 0\n// 0 0 0\n\n\u00a0\n\n\n[0,0]]\n[[\n\n\n\n\n\n\n\n\n\n[0,0,0,0]]\n]]\n", "\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\"\u00a0\n// TODO\n\n\u00a0\n\u00a0\n[1,1]]\n\n\u00a0\n[1,1]]\n\n\n\n\n\n\n\n\n\n\n\n\n// return 10\n\n\u00a0\n[1,1", "\u00a0\u00a0\u00a0\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n1.\u00a0updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n\n\n\n\n\n[1,1]]\n[1,1]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[1,1", "\n\n\n\n\n\n\n\u00a0\n//\u00a0updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n\n\u00a0\n\n\",\"\n[1,1]]\n\n\u00a0\n[1,0]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[0,0]]\n\n", "\n\n\u00a0\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\u00a0\n1.\u00a0\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\",\"updateSubrectangle\",\"getValue\"]\n\n\u00a0\n\n[0,0]]\n[1,1]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[2,2]]", "\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\n\n\n\u00a0\n1\n\n\u00a0\n\u00a0\n\n\",\"\",\"[0,0]]\n\n\u00a0[1,1]]\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n[1,1]]", "\u00a0\n\u00a0\n\u00a0\n\n\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\",\"getValue\",\"\",\"getValue\"]\n\n\u00a0[1,0]]\n\n\u00a0[1,0]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[1,1],[", "\n\n\u00a0\n\n\n\n\u00a0\n\u00a0\n\n\n\n\n\u00a0\n\u00a0\n1.\u00a0getValue(int row, int col);\n\n\u00a0\n\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n\n\u00a0\n\n[0,0]]\n\n[]]\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[1,1]]", "\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n\u00a0\n\u00a0\n1.\u00a0updateSubrectangle(0,0,0,1,2,5);\n\n\n[1,1]]\n\n[0,1]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0[0,0]]\n", "\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n1.\u00a0\nUpdate the values of the subrectangle (4x3) of the rectangle.\n\n\u00a0\n\n\n\n\n[0,0]]\n\n[0,0]]\n[\"\n\n\n\n\n\n\n\n\n\n\n\u00a0\n[1,1", "\u00a0\u00a0\n\u00a0\n\n\u00a0\n\u00a0\n1.\u00a0\nGet the value of the whole rectangle.\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n\n\n[1,1]]\n\n[1,1]]\n\n\n\n\n\n\n\n\n\n\n\n\n[1,1]]\n"], "prompt": "\nQUESTION:\nImplement the class SubrectangleQueries\u00a0which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:\n1.\u00a0updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n\nUpdates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).\n\n2.\u00a0getValue(int row, int col)\n\nReturns the current value of the coordinate (row,col) from\u00a0the rectangle.\n\n\u00a0\nExample 1:\nInput\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\nOutput\n[null,1,null,5,5,null,10,5]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5\n\nExample 2:\nInput\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\nOutput\n[null,1,null,100,100,null,20]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20\n\n\u00a0\nConstraints:\n\nThere will be at most 500\u00a0operations considering both methods:\u00a0updateSubrectangle and getValue.\n1 <= rows, cols <= 100\nrows ==\u00a0rectangle.length\ncols == rectangle[i].length\n0 <= row1 <= row2 < rows\n0 <= col1 <= col2 < cols\n1 <= newValue, rectangle[i][j] <= 10^9\n0 <= row < rows\n0 <= col < cols\nclass SubrectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n    def getValue(self, row: int, col: int) -> int:\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\nUse Call-Based format\nANSWER:\n"}}