{"314": {"code": ["\nUse Call-Based format\n\n\n    s = \"01011\"\n\n\n\n\n\n        return self.numSub(s)\n\nUse Call-Based format\n\nclass Call:\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nGiven a binary string\u00a0s:\n\n\n\n\nGiven a binary string\u00a0s", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n        return s.count('1')\n\n\nUse Call-Based format\n\nclass Substring:\n   \n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary string s:\n\n\n\n\n\n\nGiven a binary string s\u00a0", "\nUse Call-Based format\n\n\n\n\n\ns = '011'\n\ns = '11'\n\n\u00a0\n\n\n\n        return 1\n\n   :\n        \n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\ns = \"111111111\"\n\n\n\n\n\n\n\nGiven a binary string", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n        return self.numSub(s[i])\n\nUse Call-Based format\n\nclass Substring:\n   \n        return 1\n\n\n\n   \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven a binary string s:\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n        return len(s)\n\n\nUse Call-Based format\n\nclass Substring:\n   \n\n\n\n    def\n    pass\n\n\n\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\nGiven a binary string s:\n\n\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    return self.numSub(s)\n\nUse Call-Based format\n\nclass Substring:\n   \n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\ns\n\n\nGiven a binary string\u00a0s\u00a0", "\nUse Call-Based format\n\n\n\n\n\ns[i] = '0'\ns[i] = '1'\n\n\n\n   :\n        return 0\n\n\n\n   \n        pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\ns = \"0110111\"\n\n\n\n\n\nGiven a binary string\u00a0s(", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def sub(self, s: str) -> int:\n        return s.find(s[i])\n\nUse Call-Based format\n\n\n\n\n\n   :                \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nGiven a binary string", "\nUse Call-Based format\n\n\nInput:\n    s:\n        \nUse Call-Based format\n\n\n\n\n\n   :\n        return len(s)\n\n\nGiven a binary string s:\n\n   :\n        return 1\n\n\n\n\n\n\n\n\n\n\nThe answer should be the number of substrings\n\n\n\n\nGiven a binary string s", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\ns = '1'\n\u00a0\n\n\n   \n        return len(s)\n\n\n\n   \n        return len(s)\n        \n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a binary string\u00a0s:\n\n\n\n\nGiven a binary string\u00a0s", "\nUse Call-Based format\n\n\n    s[i] = 1\n        i = i + 1\n\nUse Call-Based format\n\n\n\n\n\n   \n        return self.numSub(s)\n\n\n\n   \n        return s.numSub()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary string\u00a0s", "\nUse Call-Based format\n\n\n\n\ns = \"0001\"\nOutput: 0\n\n\u00a0\n\n\n   :\n        return self.numSub(s)\n\n\n\n   \n        return self.numSub(s)\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\ns = \"01\"\n\n\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n    s = \"0110111\"\n\nUse Call-Based format\n\ns[i] = '1'\n\n\n\n\n   :\n        \n\n\n\n   :\n        return 0\n        \n\n\n\n\n\n\n\n\n\nGiven a binary string s:\n\n\n\n\nGiven a binary string s\u00a0(a", "\nUse Call-Based format\n\n\n    s[i] = '1'\n\n\ns[0] == '1'\ns[1] == '1'\n\n\n\n   :\n        pass\n\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\nGiven a binary string s\u00a0:\n\n\n\n\n\nGiven a binary string s", "\nUse Call-Based format\n\n\n    s = '01011'\n\nUse Call-Based format\n\n\n\n\n   \n        return len(self)\n\n\nGiven a binary string s:\n\n   \n        pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ns = \"011111\"\n\n\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\ns = '01111111'\n\nMax:\ns = 10**3\n\nExplanation:\n\n\n\n   :\n\n\n\n\nclass\n    pass\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a binary string\u00a0s", "\nUse Call-Based format\n\n\n\n\n\ns.index = 0\ns.length = 0\n\n\n\n\n        return self.numSub(s)\n\n\nclass Call-Based:\n   \n\n\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n\ns = \"111111\"\n\n\n\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\ns.isdigit()\n\n\n   \n        return len(s)\n\nGiven a binary string s:\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\ns = \"0101011\"\n\n\n\n\n\n\nGiven a binary string s\ufffd", "\nUse Call-Based format\n\n\n    return len(s)\n\n\n\ns = 1\n\n\u00a0\n\n\n        return self.numSub(s)\n\n\nUse Call-Based format\n\nclass Substring:\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\ns = \"010111\"\n\n\n\n\nGiven a", "\nUse Call-Based format\n\n\n    return self.numSub(s)\n\n\n\ns = \"01111111\"\n\n\u00a0\n\n\n\n   \n        \n\n\n\n\nclass\n        pass\n\n\n\n\n\n\n\n\n\n\n\ns = \"01111111\"\n\n\n\ns = \"111111\"\n\n\n\n\nGiven a"], "prompt": "\nQUESTION:\nGiven a binary string\u00a0s\u00a0(a string consisting only of '0' and '1's).\nReturn the number of substrings with all characters 1's.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: s = \"0110111\"\nOutput: 9\nExplanation: There are 9 substring in total with only 1's characters.\n\"1\" -> 5 times.\n\"11\" -> 3 times.\n\"111\" -> 1 time.\nExample 2:\nInput: s = \"101\"\nOutput: 2\nExplanation: Substring \"1\" is shown 2 times in s.\n\nExample 3:\nInput: s = \"111111\"\nOutput: 21\nExplanation: Each substring contains only 1's characters.\n\nExample 4:\nInput: s = \"000\"\nOutput: 0\n\n\u00a0\nConstraints:\n\ns[i] == '0' or s[i] == '1'\n1 <= s.length <= 10^5\nclass Solution:\n    def numSub(self, s: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}