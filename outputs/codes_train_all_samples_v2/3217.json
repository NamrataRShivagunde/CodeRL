{"3217": {"code": ["\"\"\")\n\n\n\n\n### Example:\n\n### Input:\n\n\n```\nlst = [ [1, 2], [1, 3] ] \n\n### Output:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n- 1/", "\n\n### Example:\n\n\n\n\n\n\n\n### Example:\n\n### The following example is for the following examples:\n\n### Input:\n\n\n\n\n\n\n\n\n\n\n\n### The final example:\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n\n\n\n\n\n### Example", "\n\n\n\n### Example:\n\n### Example:\n\n### Input:\n\n\n    lst = [ [1, 2] ]\n\n### Output:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n### Example:\n\n- 1", "\n\n\n[1/2]\n- `[1/2]`\n- `[1/2]`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2  +  1/2\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 1/2", "\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n### Example:\n\n### Example:\n\n### Example:\n\n### Example:\n\n\n- `\"\"` in Kotlin \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `[N,", "\n```\n\n\n\n\n### Example:\n\n### Input:\n\n\n\n### Input:\n\nlst = [ [1, 2], [1, 2],... ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n- 1/2", "\n\n\n\n\n\n### Example:\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n- `N/D` in C\n- `\"\"` in C\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example\n\n\n\n\n\n\n\n +  1/2 ", "\n\n\n\n\n\n\n\n\n\n1/2  +  1/3\n\n### Example:\n\n\nlst = [ [ 1, 2, 3, 4, 7, 8 ] ]\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n### Example 2\n\n\n\n +  1/3  + ", "\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n[1/2, 1/3]\n\n### Example:\n\n### Example:\n\n\n\n\n\n\n\n\n### Example:\n\n### Example:\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Examples:\n\n[1", "\n\n\n\n\n### Example:\n\n```\n\n\n\n\n\n\n\n\n### Example:\n\n### Example:\n\n### Example:\n\n\n### Examples:\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+  1/2", "\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n1  +  1/2  +  1/3  +  1/4  +  1/2  +  1/3\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n\n\n\n\n-\n\n\n\n\n\n+  2/3  +", "\n\n\n\n### Example:\n\n### Example:\n\n### Example:\n\n### Example:\n\n### Example:\n\n\n### Example:\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n-\n\n\n\n\n\n- 1/", "\n\n### Example:\n\n\n\n\n\n### Example:\n\n### Example input\n\n\n\n\n\n\n\n\n\n\n\n\n- `[1, D]` in Rust\n- `\"\"` in Rust\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+  1/2  +", "\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n### Example:\n\n### Example\n\n\n\n\n- `[1, 1]` in C\n- `[1, 1]` in R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n- 1/2  +  1", "\n\n### Example:\n\n\n\n\n\n### Parameters:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n```\n\n\n\n\n### Example:\n\n\n- `[N, D]` in C\n- `\"\"` in C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example:\n", "\n\n### Input:\n\nlst = [ [1, 2], [1, 2],... ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- [1/2]\n- `[1/2]`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n+  1/4  + ", "\n\n\n\n\n### Example:\n\n### Input:\n\nlst = [ [1, 2], [1, 2],... ]\n\n\n\n### Output:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n1  +  1/2\n\n\n\n- `[", "\n\n### Example:\n\n\n\n\n\n\n\n\n### Example:\n\n### Example:\n\n### Examples:\n\n### Example:\n\n### Example:\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n +  2  +  3 ", "\n\n### Example:\n\n\n\n\n\n\n### Example:\n\n### The list of rationals\n\n\n\n\n\n\n\n\n\n\n\n\n- `\"\"` in Kotlin \n\n### Examples:\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 2  +  1", "\n\n\n\n\n### Example:\n\n### Example:\n\n## Input:\n\n\n```\nlst = [ [1, 2],..., [1, 2] ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n### Example 2"], "prompt": "\nQUESTION:\nYou will have a list of rationals in the form\n\n```\nlst = [ [numer_1, denom_1] , ... , [numer_n, denom_n] ]\n```\nor\n```\nlst = [ (numer_1, denom_1) , ... , (numer_n, denom_n) ]\n```\n\nwhere all numbers are positive integers. You have to produce their sum `N / D` in an irreducible form: this means that `N` and `D` have only `1` as a common divisor.\n\nReturn the result in the form:\n\n- `[N, D]` in Ruby, Crystal, Python, Clojure, JS, CS, PHP, Julia\n- `Just \"N D\"` in Haskell, PureScript\n- `\"[N, D]\"` in Java, CSharp, TS, Scala, PowerShell, Kotlin\n- `\"N/D\"` in Go, Nim\n- `{N, D}` in C++, Elixir\n- `{N, D}` in C\n- `Some((N, D))` in Rust\n- `Some \"N D\"` in F#, Ocaml\n- `c(N, D)` in R\n- `(N, D)` in Swift\n- `'(N D)` in Racket\n\nIf the result is an integer (`D` evenly divides `N`) return:\n\n- an integer in Ruby, Crystal, Elixir, Clojure, Python, JS, CS, PHP, R, Julia\n- `Just \"n\"` (Haskell, PureScript)\n- `\"n\"` Java, CSharp, TS, Scala, PowerShell, Go, Nim, Kotlin\n- `{n, 1}` in C++\n- `{n, 1}` in C\n- `Some((n, 1))` in Rust\n- `Some \"n\"` in F#, Ocaml,\n- `(n, 1)` in Swift\n- `n` in Racket \n\nIf the input list is empty, return \n\n- `nil/None/null/Nothing` \n- `{0, 1}` in C++\n- `{0, 1}` in C\n- `\"0\"` in Scala, PowerShell, Go, Nim\n- `O` in Racket\n- `\"\"` in Kotlin\n\n\n### Example:\n\n```\n[ [1, 2], [1, 3], [1, 4] ]  -->  [13, 12]\n\n    1/2  +  1/3  +  1/4     =      13/12\n```\n\n### Note\nSee sample tests for more examples and the form of results.\ndef sum_fracts(lst):\n\t\nUse Call-Based format\nANSWER:\n"}}