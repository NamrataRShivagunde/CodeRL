{"3520": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n- `g` --> [0, 1]\n\n- `n` --> [0, 1]\n\n- `step` --> [0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2, 2, 3] to `", "\n\n\n\n\n#Examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- [2-5] --> [2, 5]\n\n- [1] --> [1]\n\n- [1] --> [2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[2 2]` or `[", "\n\n\n\n\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n\n- `step(m, n)` --> [m, n] --> [m, n]\n\n- `step(g, 107)`\n\n\n\n\n\n\n\n [", "\n#Notes:\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n- `m`\n\n- `n`\n\n- `g`\n\n- `n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [11, 14, 17]\n\n", "\n\n\n\n\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- [3, 2, 5, 7] --> [3 2, 5]\n\n- [3 2, 5] --> [3 1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2, 4] and", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `step(m, n)` --> [m, n] or [m, n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2, 5]\n\n- [2, 5] --> [2, 5]", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n- `g`\n\n- `n`\n\n- `m`\n\n- `g`\n\n- `n`\n\n- `step`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2, 1]` [3]", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstep(2, 5, 7, 1) --> [2, 5]\n\nstep(2, 5, 7, 1) --> [2, 5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[2, 5, 7", "\n\n\n\n\n\n\n\n\n\n\n\n- `gap`\n\n- `step`\n\n- `step(g)`\n\n- `step(g)`\n\n- `step(g)`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[1, 2]` or", "\n\n\n\n- Examples:\n\n- `step(2, 5, 7)` --> [2, 5, 7] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstep(5, 7, 130, 103) --> [5, 7]\n\n\n\n [", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[3, 5, 7] --> [3, 5, 7] or [3, 5, 7]\n\n[3, 5, 7] --> [3, 5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2, 2, 7]", " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- \n\n\nstep(2, 5, 7) --> [5, 7] or [5, 7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[2, 5, 7]` \n\n- `", "\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n- [3]\n\n- [5]\n\n- [5]\n\n- [5]\n\n- [5]\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [0, 0] and [0", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `g` --> [5, 5]\n- `m` --> [5, 5]\n- `n` --> [5, 5]\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [3, 5, 7]\n\n- `g", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- [2, 5, 7] --> [2, 5] or [2, 5] or [2, 5]\n\n- [3, 5] --> [3, 5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2, 2, 3] etc", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng` --> [5] or [5] or [5] or [5]\n\n- `n` --> [5]\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `[2, 5, 7]", "\n\n\n\n\n\n\n\n\n\n\n\n\n- `m` --> [0] or [0] or [0]\n\n- `n` --> [0] or [0]\n\n- `g` -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2, 2, 3] to `", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n- `gap`\n\n- `m`\n\n- `n`\n\n- `m`\n\n- `g`\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [0 0 0 0 0 0 0 0 0 0", "\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n\n\n\n[1 0 0 0 0 0 0 0 0]\n\n- `g` --> [3 0 0 0 0 0 0 0 0 0 0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [2 2] or [3 0", "\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n- Example:\n\n\n\n\n\n- `step(2, 5, 7)` --> [5, 7] or [5, 7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \"step\" with the same `m`"], "prompt": "\nQUESTION:\nThe prime numbers are not regularly spaced. For example from `2` to `3` the step is `1`.\nFrom `3` to `5` the step is `2`. From `7` to `11` it is `4`.\nBetween 2 and 50 we have the following pairs of 2-steps primes:\n\n`3, 5 - 5, 7, - 11, 13, - 17, 19, - 29, 31, - 41, 43`\n\nWe will write a function `step` with parameters:\n\n- `g` (integer >= 2) which indicates the step we are looking for,\n\n- `m` (integer >= 2) which gives the start of the search (m inclusive),\n\n- `n` (integer >= m) which gives the end of the search (n inclusive)\n\nIn the example above `step(2, 2, 50)` will return `[3, 5]` which is the first pair between 2 and 50 with a 2-steps.\n\nSo this function should return the **first** pair of the two prime numbers spaced with a step of `g`\nbetween the limits `m`, `n` if these g-steps prime numbers exist otherwise `nil` or `null` or `None` or `Nothing` or `[]` or `\"0, 0\"` or `{0, 0}` or `0 0`(depending on the language). \n\n\n#Examples:\n\n- \n\n\n`step(2, 5, 7) --> [5, 7] or (5, 7) or {5, 7} or \"5 7\"`\n\n`step(2, 5, 5) --> nil or ... or [] in Ocaml or {0, 0} in C++`\n\n`step(4, 130, 200) --> [163, 167] or (163, 167) or {163, 167}`\n\n- **See more examples for your language in \"RUN\"**\n\n\n- Remarks:\n\n([193, 197] is also such a 4-steps primes between 130 and 200 but it's not the first pair).\n\n`step(6, 100, 110) --> [101, 107]` though there is a prime between 101 and 107 which is 103; the pair 101-103 is a 2-step.\n\n\n#Notes: \nThe idea of \"step\" is close to that of \"gap\" but it is not exactly the same. For those interested they can have a look\nat . \n\nA \"gap\" is more restrictive: there must be no primes in between \n(101-107 is a \"step\" but not a \"gap\". Next kata will be about \"gaps\":-).\n\nFor Go: nil slice is expected when there are no `step` between m and n.\nExample: step(2,4900,4919) --> nil\ndef step(g, m, n):\n\t\nUse Call-Based format\nANSWER:\n"}}