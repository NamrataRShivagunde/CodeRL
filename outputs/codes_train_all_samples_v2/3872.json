{"3872": {"code": [":\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\t\n\n\n\nWrite a function that accepts two parameters, i) a string, ii) a list of words and ii) a number\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n```javascript \nimport numpy", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\nUse Call-Based format\n\n```ruby \nfunction sortIt(list_, n)\n```python \n\n:\n:\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n\n```javascript:", ":\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\nUse Call-Based format\nexample:\n```ruby \nfunction sort_it(list_, n)\n```\n\n\n\n:\n\n\n::\n\n\n:\n\n\n\n:\n\n\n\nWrite a function that accepts two parameters, i)", ":\n\nUse Call-Based format\n\n\n\n:\n\nUse Call-Based format\n\nExample:\n\nlist_ = sort_it(list_, 2)\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n:\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\nThe function takes a `list_` and", ":\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\nExample:\n\nexample:\n```javascript \nfunction sortIt(list_, n)\n```\n\n\n\n:\n\n\n\n::\n\n\n:\n\n\n\n\n\n\n\nWrite a function that accepts two parameters", ":\nUse Call-Based formatUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n:\n\n\n\t\nUse Call-Based format\n:\nUse Call-Based format\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\nWrite a function that accepts two parameters, i) a string (cont", ":\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format:\n\n\n```javascript`\n```ruby`\n```python`\n\n:\n:\n\nUse Call-Based format\n```python``\n\n```\n:\n\n\n\n\n\n\n\n\n    This is a function that", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\nExample:\n```javascript \nfunction sort_it(list_, 2)\n```\n\n\n\n:\n\n\n\n:\n:\n\n\n\n:\n\n\n\nUse Call-Based format\n:\n\n\n\n\nUse Python:\n\n``", ":\nUse Call-Based formatUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\nExample:\n\nlist_ = sort_it(list_, 3)\n\nUse Call-Based format\n\n\n\n:\n\n\n::\n\n\n:\n\n\n\n\n\n\n\nWrite a function that accepts two", ":\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\nUse Call-Based format\n\nexample:\n```ruby \nfunction sort_it(list_, n):\n\nUse Call-Based format\n\n\n\n:\n\n\n::\n\n\n:\n\n:\n:\n\n\n\n\n```", ":\nUse Call-Based format\nUse Call-Based format\n\n\n:\nUse Call-Based format\nExample:\n`sort_it(list_, 3)\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\t:\n:\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n\nThe function will be called for each of the `", ":\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n:\nWrite a function that accepts two parameters\n\n\n\n:\n\n\n\n\nUse Call-Based format:\n\n\n\n:\n\n\nfunction sort_it(list_, n):\n\n\n\n```javascript", ":\nUse Call-Based formatUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n:\nWrite a function that accepts two parameters\n\n\nexample:\n```python \n\n:\n:\n\n\nexample:\n\n\n:\n\n\n\n\n:\n\n\n\n\nUse Call-Based format\n```javascript", ":\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n```javascript \nfunction sort_it(list_, n)\n```\n\n:\n:\n\n\n\n:\n\n\n\n\n:\n\n```python \n\n```ruby \n\n\n```", ":\nUse Call-Based formatUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\nExample:\n\nUse Call-Based format\n:\n\n:\n:\n\n\n\n:\n:\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that accepts two parameters, i", ":\nUse Call-Based formatUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nExample:\nUse Call-Based format\n\nexample:\n```javascript \n\n\n:\n\n\n\n:\n:\n\n\n\n:\n\n\n\n\n:\n\n```js`\n\n```ruby`\n\n\t", ":\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\nExample:\n\n\n\n:\n\n\n\n\t\nUse Call-Based format:\n:\n\n```ruby \n`\n\n:\n\n\n```python \n\n\n:\n\n\n\n\n```javascript:", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nExample:\n\n\nExample:\n\n:\n\n\n\n\t\nUse Call-Based format:\n:\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that accepts two parameters, i", ":\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\nexample:\n\n\n:\n\n\n\n\t\n\n:\nUse Call-Based format\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that accepts two parameters, i) a string (", ":\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\nExample:\n\nlist_ = sort_it(list_, 3)\n\nUse Call-Based format\n:\n\n\n:\n\n\n\n\t\n\n:\n\n\n\n:\nUse Call-Based format\n\n\n\n:\n\n\n\n\nlist_ = ['zag', '"], "prompt": "\nQUESTION:\nWrite a function that accepts two parameters, i) a string (containing a list of words) and ii) an integer (n).  The function should alphabetize the list based on the nth letter of each word.\n\nThe letters should be compared case-insensitive. If both letters are the same, order them normally (lexicographically), again, case-insensitive.\n\nexample:\n```javascript \nfunction sortIt('bid, zag', 2) //=> 'zag, bid'\n```\n```ruby \nfunction sortIt('bid, zag', 2) //=> 'zag, bid'\n```\n```python \nfunction sortIt('bid, zag', 2) #=> 'zag, bid'\n```\n\nThe length of all words provided in the list will be >= n.  The format will be \"x, x, x\". In Haskell you'll get a list of `String`s instead.\ndef sort_it(list_, n):\n\t\nUse Call-Based format\nANSWER:\n"}}