{"4418": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\t\t\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nThis is follow-up from my previous Kata which", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n:\n\n\n\n\n\n:\n\n\n\n\n:\n\nUse Call-Based format\nget_function(sequence) => f(x)\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```python\nif sequence.ndim ==", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n:\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\t\n\n:\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\nget_function(sequence)\n\n\nThis is follow-up from my", "\n:\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n:\n\nUse Call-Based format\n\n\n\nUse Function-Based format\n:\n\n\n\n\n\n\n\n\n\n\nThis is a follow-up from my", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\t\n:\n\n\n\n\n\n\t:\n\n:\n\nUse Call-Based format\nget_function([0]) => 0\n```\n\n\n\n:\n\n\n\n\n\n\n\n\n\nThis is a follow-up from my previous", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n:\n\n\n\n\n:\n\nUse Call-Based format\nget_function(sequence) => 5\nget_function(sequence) => 5\n\n\n:\n\n\n\n\n\n\n\n\n\n```python\nif [0, 1", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\t\nUse Call-Only format\n\t\n\n\n\n\n:\n\n\n:\n\n\n\n\n\n\n\n\n\n:\n\nThis is follow-up from my previous Kata which", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n:\n\n\n\n\n:\n\nUse Call-Based format\n\n\n:\n\n\nget_function(sequence)\n\n\n\n\n\n\nThis is a follow-up from my previous Kata which is", "\nUse Call-Based format\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\t\nUse Function-Based format\n\t\n:\n\n\n\n\n\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n:\n\n\tsequence = [x]\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n:\n\n```python\nfor x in sequence:\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\n\n\n:\n\nUse Call-Based format\nget_function(sequence) => 4\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n```python\nif sequence.ndim!= 2 or sequence", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\t\nUse Call-Based format\n\n:\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n:\n\nThis is a follow-up from my previous Kata", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n:\n\n:\n\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\nget_function([sequence])\n => 3\n\n\n\n:\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\t\n:\n\n\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```python\nif len(sequence)!=", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\t\n:\n\n\n\n\t\n\n:\n\nget_function([0, 1]) => 5\nget_function([1, 2]) => 5\n\n\n:\n\n\n\n\n\n\n\nThis is a follow-up from my previous Kata", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n:\n\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n\n:\n\n\n```python\nget_function([0", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\t\n:\n\n\n\n\n:\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\nThe following code is similar to:\n\n```python\nif [", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\t\n:\n\n\n\n\n\n\t\n:\n\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n```python\nget_function([0", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\n:\n\nUse Call-Based format\nget_function([0, 1, 2, 3, 4]) => 0\n\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n:\n\nThis is", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\n\t\n:\n\nUse Call-Based format\n\n\n:\n\n\nget_function(sequence):\n\t\nUse Call-Based format\n\n\n\n\n\nThis is"], "prompt": "\nQUESTION:\nThis is a follow-up from my previous Kata which can be found here: http://www.codewars.com/kata/5476f4ca03810c0fc0000098\n\nThis time, for any given linear sequence, calculate the function [f(x)] and return it as a function in Javascript or Lambda/Block in Ruby.\n\nFor example:\n\n```python\nget_function([0, 1, 2, 3, 4])(5) => 5\nget_function([0, 3, 6, 9, 12])(10) => 30\nget_function([1, 4, 7, 10, 13])(20) => 61\n```\n\nAssumptions for this kata are:\n```\nThe sequence argument will always contain 5 values equal to f(0) - f(4).\nThe function will always be in the format \"nx +/- m\", 'x +/- m', 'nx', 'x' or 'm'\nIf a non-linear sequence simply return 'Non-linear sequence' for javascript, ruby, and python. For C#, throw an ArgumentException.\n```\ndef get_function(sequence):\n\t\nUse Call-Based format\nANSWER:\n"}}