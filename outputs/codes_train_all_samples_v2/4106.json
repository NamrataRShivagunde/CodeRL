{"4106": {"code": ["\n\n### Converge values\n###\n\n\n\n\n\n\n\n\nConverge values  \n### Example\n`1234`  ->   `4`\n```\n\n1.\n\n\n\n\n### Example\n### Example\n\n\n\n\n\n### Example\n###\n\n\n\n\n1.\n3.\n\n\n78 - 278 =  696 /", "\n\n### Testing\n### Example\n### Example_1\n### Example_2\n### Example_3\n### Example_4\n### Example_5\n\n\n\n\n\n\n\n\n\n\n\n\n\n - 225 /   \n\n\n\n\n\n\n\n\n\n\n\n### Example\n`4`  ->   `5`\n```\n1.\n72 -", "```\n\n\n\n\n# Step 1\n\n### Converge values \n\n### Example\n# Step 2\n\n1.\n\n\n\n\n\n\n\n\n\n - 279 /   \n\n### Example\n`1234`  ->   `3````\n\n\n\n\n\n\n\n\n\n\n\n\n### Example\n`1234`  ->   `472", "```\n\nConverge values  \n### Recursion values  \n### Converge values  \n\n\n\n\n\n\n\nConverge values\n### Recursion\n\n\n\n\n\n### Example\n`1234`  ->   `4`\n\n \n\n\n### Example\n\n\n\n\n\n\n\n\n72 - 279 =  693 /   \n4", "\n\n\n\n\n\n\n\n1. Check if number is greater than 3 digits.\n2. Check if number is less than 4 digits.\n3. Check if number is greater than 4 digits.\n\n3.\n\n\n\n\n\n\n###\n\n\n\n\n\n\n```\n\n\n\n\n\n\n### Example\n`414`  ->   `4`72", "```\n\n\n\n\n### Converge values\n### self_converge\n### self_converge\n### self_converge\n\n\n\n\n\n\n\n```\n\n1 =  693 /   \n\n### Example\n\n\n\n\n### Example\n\n###\n\n\n\n\n\n\n\n72 - 279 =  693 /   \n", "```\n\nConverge values  \n```\n\n\n\n\n\n[Kaprekar]: [KaprekarRoutine] http://mathworld.wolfram.com/KaprekarRoutine.html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example\n\n\n73 - 279", "```\n\n\n### Converge values  \n### Converge values\n### Converge values\n### Converge values\n\n### Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n - 1 / \n\n### Example\n - 2 / \n\n### Example\n\n\n\n\n\n\n\n\n\n\n\n\n### Example\n`1234`  ->  72", "\n\n\n\n\n\n\n[Kaprekar]: http://mathworld.wolfram.com/KaprekarRoutine.html\n\n### Example\n### self_converge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example\n\n\n\n\n### Example\n`1234`  ->  \n\n\n72 - 279", "```\n\n\n\n\n\n\n\n\n### Example\n\n# Converge values\n### self_converge\n### Example\n\n1. Take all three digits from the current iteration counter.\n\n2. Take all three digits from the current iteration counter. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.\n\n\n73 - 278 =", "\n\n\n\n### Converge values\n###\n\n\n\n\n\n\n\n\n1. 0 - 1 / 2 =  1 /  1 /   \n2. 2 - 1 =  1 /   \n\n\n### Converge values\n### Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n72 - 279 =  693 /   \n4", "```\nConverge values  \n\n### Example\n`1234`  ->   `4`\n\n\n\n\n\nConverge values  \n\n\n\n - 4 =  274 /   \n - 7 =  772 /   \n\n### Example\n`\n\n\n\n\n\n\n\n\n```\n\n### Example\n`123`  ->   `4`", "\n\n\n\n\n\n\n1. Check if n is a multiple of 3 digits.\n2. Check if n is a multiple of 3 digits.\n3. Check if n is a multiple of 3 digits.\n\n1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n### Example\n`1234`  ->  4`\n73 - 375", "\n\n\n\n\n### Example\n\n### Converge values  \n### Converge values\n### Converge values    \n### Converge values  \n\n\n\n\n\n\n\n\n73 - 269 =  695 /   \n\n\n\n\n### Example\n###\n\n\n\n\n\n\n\n77 - 280 =  7895 /   \n4.", "```\nConverge values  \n```\n\n\n\n\n\n[Kaprekar]: http://mathworld.wolfram.com/KaprekarRoutine.html\n\n### Example\n### self_converge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n78 - 272 =  693", "\n\n\n\n\n\n\n\n\nConverge values\n### Example\n`1234`  ->   `3````\n\n\n\n\n72 - 1467 =  696 /   \n\n### Example\n`414`  ->   `5````\n\n\n\n\n\n\n\n\n\n\n### Example\n`1234`  ->   `4`\n72", "```\n\n### Converge values  \n### Converge values\n### Converge values  \n### Converge values    \n```\n\n\n\n\n\n0.\n\n\n\n\n\n\n\n - 1 /   \n\n### Example\n\n\n\n\n### Example\n\n\n\n\n\n\n\n\n73 - 269 =  692 /   \n4", "\n\n\n\n### Example\n### self_converge\n### self_converge_values\n### self_converge_values\n### self_converge_values\n\n\n\n\n\n\n\n\n\n\n72 - 378 =  6376 /   \n\n### Example\n\n\n\n\n\n\n\n3.\n\n\n56 - 259 = ", "\n\n### Converge values  \n### Example\n### Example\n### Example\n### Example\n### Example\n### Example\n### Example\n### Example\n### Example\n### Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n###\n\n\n\n### Example\n\n\n\n\n\n\n\n\n\n### Example\n`1234`  ->   `5`\n73", "\n\n\n\n```\n\nConverge values  \n```\n\n\n\n\n\n\n1. Count the number of iterations\n2. Count the number of iterations\n3. Count the number of iterations \n\n```\n\n\n\n\n\n### Example\n\n\n\n\n\n\n```\n\n\n1. =  678 /   \n\n\n73 - 279"], "prompt": "\nQUESTION:\n### self_converge\n`Goal`: Given a number (with a minimum of 3 digits), return the number of iterations it takes to arrive at a derived number that converges on to itself, as per the following [Kaprekar][Kaprekar] routine. As a learning exercise, come up with a solution that uses recursion. The\nfollowing steps would be applicable to a number that originally had\nexactly 4 digits.\n\n0. Initialize a counter to count the number of iterations\n1. Take any four-digit number `n`, using at least two different digits.\n2. Arrange the digits in descending and then in ascending order to get two four-digit numbers, adding leading zeros if necessary. \n    - Add as many zeroes so that the width of the original number is maintained.\n3. Subtract the smaller number from the bigger number. Let us call this `nseq`.\n4. Check if `nseq` (the remainder) from Step 4 equals the previous value of `n`. If not, increment the iteration counter and go back to step 2 and perform it on the `nseq`. \n\nIf the number of digits to start with was more than 4, convergence occurs on to a `cycle` of numbers. Therefore in Step 5, detect this cycle by comparing to not only the previous value, but to all previous values of `n`.\n  - If there is a match, then return the count of iterations\n  - If the sequence_number collapses to zero, then return -1 \n\n[Kaprekar]: http://mathworld.wolfram.com/KaprekarRoutine.html\n\n### Converge values  \nWhile 3-digit numbers converge to the same unique number `k` which is also 3 digits long, all 4-digit numbers also converge to the same unique value `k1` which is 4 digits long. However, 5 digit numbers converge to any one of the following values: `53955, 59994, 61974, 62964, 63954, 71973, 74943, 75933, 82962, 83952`.\n\n### Example\n`1234`  ->   `4`\n```\n1. 4321 - 1234 =  3087 /   \n2. 8730 - 378  =  8352 /   \n3. 8532 - 2358 =  6174 /   \n4. 7641 - 1467 =  6174 // same as previous\n```\n`414` -> `5`\n```\n1. 441 - 144 =  297 /   \n2. 972 - 279 =  693 /   \n3. 963 - 369 =  594 /\n4. 954 - 459 =  495 /\n5. 954 - 459 =  495 // same as previous\n```\n`50000` -> `4`\n```\n1. 50000 - 5      =  49995 /   \n2. 99954 - 45999  =  53955 /  # first \n3. 95553 - 35559  =  59994 /\n4. 99954 - 45999  =  53955 /  # 2nd time\n```\ndef self_converge(number):\n\t\nUse Call-Based format\nANSWER:\n"}}