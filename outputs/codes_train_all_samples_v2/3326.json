{"3326": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```python\n\nif kata.kata(\"h(el)lo\") == \"h(el)\":\n\n\n", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nreverse_in_parentheses(string)\n\n\n\n\n\n\n\n\n```python\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nreverse_in_parentheses(string)\n\n\n\n\n\n\n\n\n\n```python\nif text.endswith(\"h", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#\nreverse_in_parentheses(\")\")\n\n\n\n\n``", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nreverse_in_parentheses(string)\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nreverse_in_parentheses(\"", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#python\nreverse_in_parentheses(string)\n\n\n\n```", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n# kata:\n# kata.kata\n# kata.kata\n\n\n\n\n\n\n``", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```python\nreverse_in_parentheses", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n:\n\n\n\n\t\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nreverse_in_parentheses(string)\n\nUse Call-Based format\n\n\n\n\n\n\n\n```python\n\n", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nkata:\n\n\n\t\n\n\n```python\nfor text in string:\n\t\n\n\n\n```python\n\n# k", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n```python\nreverse_in_parentheses(string)\n```\n\n\n\n\n\n\n\n``", "\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n:\n\n\n\t\n\t\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```python\nif (not string).\nif (not string).\n\n\n\n\n\n```", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nreverse_in_parentheses(\"h(el", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreverse_in_parentheses(\"a (b c d e)) == \"a b c d e\"\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n```python\nreverse_in_parentheses(string)\n\n\n\n\n\n```", "\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nreverse_in_parentheses(string)\n\n\n\n\n```", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n# kata", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreverse_in_parentheses(string)\n\n\n\n```python\n# k", "\n\n\nUse Call-Based format\n\nInput text and valid parentheses\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nreverse_in_parentheses(\"h("], "prompt": "\nQUESTION:\nIn this kata, you will be given a string of text and valid parentheses, such as `\"h(el)lo\"`. You must return the string, with only the text inside parentheses reversed, so `\"h(el)lo\"` becomes `\"h(le)lo\"`. However, if said parenthesized text contains parenthesized text itself, then that too must reversed back, so it faces the original direction. When parentheses are reversed, they should switch directions, so they remain syntactically correct (i.e. `\"h((el)l)o\"` becomes `\"h(l(el))o\"`). This pattern should repeat for however many layers of parentheses. There may be multiple groups of parentheses at any level (i.e. `\"(1) (2 (3) (4))\"`), so be sure to account for these.\n\nFor example:\n```python\nreverse_in_parentheses(\"h(el)lo\") == \"h(le)lo\"\nreverse_in_parentheses(\"a ((d e) c b)\") == \"a (b c (d e))\"\nreverse_in_parentheses(\"one (two (three) four)\") == \"one (ruof (three) owt)\"\nreverse_in_parentheses(\"one (ruof ((rht)ee) owt)\") == \"one (two ((thr)ee) four)\"\n```\n\nInput parentheses will always be valid (i.e. you will never get \"(()\").\ndef reverse_in_parentheses(string):\n\t\nUse Call-Based format\nANSWER:\n"}}