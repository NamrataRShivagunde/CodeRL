{"3841": {"code": ["::\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n:\n\n\", \"cbab\", \"cbac\", \"cbabb\", \"cbacb\", \"cbac\", \"cbb\", \"cba\"]\n\n\n::\n\n::\n\n\n\n\n\n:\n\", \"cbaba\", \"\n:\nGiven a", "::\n\n\n\nUse Call-Based format\n:\n\n, count=10\n\n:\n\n\", \"cbab\", \"cbac\", \"cbba\"]\n\t\n\n:\n:\", \"abbc\", \"cab\", \"bcbc\"]\n\n\n:\n\n\n\n\n\n:\n\nabb\", \"cbac\", \"cbca\",\n\n:\n", "::\n\n\n:\n\n\n\t\n\n\t\nUse Call-Based format:\n\n\", \"cbab\", \"cbac\", \"cbba\"]\n\n\t:\n:\n\", \"cab\", \"cba\", \"cbb\"]\n\n\nUse Call-Based format\n:\n\n\n\nUse Call-Based format\n:\n\", \"\n:\nGiven a hash", "::\n\nUse Call-Based format\n:\n\n,\n:\n\n\", \"cbab\", \"cbac\", \"cbba\" ]\n\n\t\nUse Python-based format:\n:\n\n\", \"ab\", \"bc\", \"bc\"\n\n\n:\n\n\n\n\nUse Call-Based format\n\n:\nab\", \"cbabb\",\n:\nGiven", "::\n\n\n\nUse Call-Based format\n:\n\n\n\n:\n\n\", \"bab\", \"cbab\"]\n\n\t\nUse Python-Based format:\n:\n\n\", \"bac\", \"bba\", \"cab\", \"cabb\", \"cbabb\"]\n\n::\n\n:\n:\n\", \"\n:\nGiven a hash of", "::\n\n\nUse Call-Based format\n:\n\n,\n:\n\n\", \"cbab\", \"cbac\", \"cbba\", \"cbba\", \"cbcab\"\n\n::\", \"bac\", \"bab\", \"cab\", \"cbabb\", \"cba\"]\n::\n\n:\n:\n\", \"\n:\n\n    You must", "::\n\n\nUse Call-Based format\n:\n\n, count_of_times=1\n\n:\n\n\", \"cbab\", \"cbaba\", \"cbba\"]\n\n\n::\", \"abb\", \"abc\"]\n\n\n:\n\n\n\nUse Call-Based format\nRecreate all possible anagram combinations\n:\n\n\n:\nGiven a", "::\n\n\nUse Call-Based format\n:\n\n\n\t\n\n:\n\n\", \"cbab\", \"cbcb\"\n\t\n::\", \"abba\", \"acba\"]\n\n\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nRecreate all of the possible anagram combinations\n:\n\n\n:\nGiven a hash of", "::\n\nUse Call-Based format\n:\n\n,\n:\n\n\", \"babc\", \"cbaba\", \"cbcba\"]\n\n\t\n:\n:\", \"bacb\", \"cabb\", \"cbbc\", \"cbabb\"]\n\n\n:\n\n\n\nUse Call-Based format\n:\nb\n:\nGiven a hash of", "::\n\n\n\nUse Call-Based format\n:\n\n,\n:\n\n\", \"abab\", \"abcab\", \"abcab\", \"bcbab\", \"cabb\", \"cbaba\"]\n\t:\n:\n\n\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\", \"\n:\nGiven a", "::\n\nUse Call-Based format\n:\n\n\n\n:\n\nb\", \"cba\", \"cbb\", \"cbc\", \"cbb\"]\n\n\n::\n\", \"cbab\", \"cbca\", \"cbb\", \"cbabb\"]\n\n\n:\n\n\n\n\n\n:\nbab\", \"cbabb\"\n\n\n:\n", "::\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n,\n:\n\n\", \"cbab\", \"cbac\", \"cbba\", \"cbabb\", \"cbacb\"]\n\t\n::\n\n\nUse Call-Based format:\n\n\n\nUse Call-Based format\n:\n\", \"cbab\", \"\n:\nGiven", "::\n\n\n:\n\n\n\n\n\t\nUse Call-Based format:\n\n\", \"cbab\", \"cbac\"]\n\n\n:\n:\", \"bac\", \"bc\", \"bcab\", \"cabb\", \"cbaba\"]\n\n\nUse Call-Based format:\n\n\n\nRecreate all of the possible anagram combinations\n:\n\n:", "::\n\nUse Call-Based format\n:\n\n\n\n\n:\n\", \"babb\", \"cabb\", \"cbabb\", \"cbba\"]\n\n\t\nUse Call-based format::\", \"cbbc\", \"cbbc\", \"cbbc\", \"cbbc\"]\n\n\n:\n\n\n\n\n:\n\", \"\n:\nGiven a hash", "::\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n:\n\n\", \"bcbab\", \"cbac\", \"cbabb\", \"cbacb\"]\n\t::\n\n\nUse Call-Based format\t:\n\n\n\nUse Call-Based format\n:\n\", \"\n:\nGiven a hash of letters and", "::\n\n\n:\n\nUse Call-Based format\n\n,\n:\n\n\", \"cbab\", \"cbabb\", \"cbabb\"]\n\n\t\nUse Python-based format::\", \"abb\", \"cbb\", \"cbb\", \"cba\", \"cba\"]\n::\n\n\n\n:\n\", \"\n\n:\n\n\tGiven", "::\n\n\n\nUse Call-Based format\n:\n\n\n\n:\n\nab\", \"abcb\", \"abca\", \"cbcba\", \"cbcbb\", \"cbbab\", \"cbcbb\", \"cbcbb\"]\n\n::\n\n\n:\n\n\n\n\n\nUse Call-Based format\n:\n\", \"\n\n:\nGiven a", "::\n\n\nUse Call-Based format\n:\n\n\n\n:\n\n\", \"cbab\", \"cbabb\", \"cbac\", \"cbbab\", \"cbacb\", \"cbca\"]\n\t::\", \"ababb\", \"abca\", \"cbabb\"\n::\n\n\n\n:\n\", \"\n:\n\n  * hash_", "::\n\n\n\n:\n\n\n\n\n\t\nUse Call-Based format:\n\n\", \"babab\", \"cbabb\", \"cbabb\", \"cabb\", \"cbbab\", \"cbaba\"]\n\n::\n\n::\n\n\n\n\nUse Call-Based format\n\n:\n\", \"\n:\nGiven a hash of letters", "::\n\n\nUse Call-Based format\n:\n\n,\n:\n\n\", \"cbab\", \"cbca\"]\n\n\n\t\nUse Hash-Based format:\n:\", \"abbbb\", \"cbbbb\"]\n\n\n\nUse Call-Based format:\n\n\n\n\n\n:\n\", \"babab\", \"bcabb\",\n:\nGiven"], "prompt": "\nQUESTION:\nGiven a hash of letters and the number of times they occur, recreate all of the possible anagram combinations that could be created using all of the letters, sorted alphabetically.\n\nThe inputs will never include numbers, spaces or any special characters, only lowercase letters a-z.\n\nE.g. get_words({2=>[\"a\"], 1=>[\"b\", \"c\"]}) => [\"aabc\", \"aacb\", \"abac\", \"abca\", \"acab\", \"acba\", \"baac\", \"baca\", \"bcaa\", \"caab\", \"caba\", \"cbaa\"]\ndef get_words(hash_of_letters):\n\t\nUse Call-Based format\nANSWER:\n"}}