{"4035": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\nUse Call-Based format\n\n\n\n\n#Rules:\n\n\n\n\n#Notes:\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n\n#Notes:\n \n\n", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n#Example:\n\n#Input:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you will get the substring that appears in the two strings.\n\n#Rules:\n\n\n\n\n\nGiven 2 strings, you will", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you can call substring_test()\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    #Input:\n  - A", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you can use the call-based format\n\n\n\n\n\n\n\n\n\n\n#Rules:\n\nUse Call-Based format\n\n\n\n\n\n\n### Examples:\n\n#Input", "\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you can use call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n#Rules:\n\n*String:\n*Input:\n*Input:\n*Output:\n*Output:\n\n\n#Output:\n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven 2 strings, you can use the function substring_test()\n\n#Use Call-Based format\n\n\n\n\n\n\n\n\nGiven 2 strings, you can do the following:\n\n\n\n\n\nGiven 2 strings,", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you can use a method to find out if the substring is common to the two strings.\n\n\n\nUse Call-Based format\n\n\n\n\nGiven 2 strings, you can find out if the substring is common.\n\n\n\n\nGiven 2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n#Format:\n\n\n#Rules:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\ngiven 2 strings with a common substring. You will return true if the substring appears in both strings.\n\n\n\n\n\nGiven 2 strings with a", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n#Examples:\n\n\t\n\n\n\n\n\nGiven two strings, you can use Call-Based format\n\n\n\n\n\n\n\n\n#Rules:\nUse Call-Based format\nGiven 2 strings, you have to be called with a call-based format\n\n\n\n\nGiven", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings and a call-based format\n\n#Example:\n\n#Rules:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Example:\nGiven 2 strings\n\n#Rules:\n\n````\n\n\n\nGiven 2 strings\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n#Output:\n\n\n\n\n\n\n\n\n## Examples:\n\n#Rules:\n\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you want to count the substring that appears in both strings.\n\n\n\n\nGiven 2 strings, you want to find out if", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\nUse Call-Based format\n\n\n\n#Rules:\nUse Call-Based format\n\n#Inputs:\n\n\n\n\n\n\n\n\n\n\n\n#Notes:\n\n\n\n```\n\n\n### Examples\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n#Example:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you need to find out if there is a substring that appears in both strings.\n\n\n\n\nGiven 2 strings,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you can use the following function:\n\n\n\n\n\n\n\n\n#Rules:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n#Rules:\n\n*Input:\n  One string", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n#Functions:\n\n#Output:\n\n\n\n\n\n\n#Rules:\n\n\n\n\n#Output:\n\n\n\n\n\n\n\n\n\n\n#Output:\n\n````\n\nGiven 2 strings, you will be", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven 2 strings and 2 strings, you can use the substring test method.\n\n\n\nUse Call-Based format\n\n#Examples:\n\n\n#Rules:\n\n\n\n\n#Notes:\n\n\n\n\n\n\nGiven 2 strings,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two strings, you will find out if the substring appears in both strings.  \n\n\n\n\n\n\n\n\n\n#Rules:\nUse Call-Based format\n\n\n\n\n\nGiven 2 strings, you will find out if there is a", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings and 2 strings, you can use the following methods:\n\n\n\n\n#Examples:\n\n\n\n\n\n#Examples:\n\n#Rules:\n\nUse Call-Based format\n\n\n\n\n\n\n\n#Rules:\n\n*Example", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n#Use Call-Based format\n\n\n\n\nGiven 2 strings, you can use Call-Based format\n\n\n\n\n#Usage:\nUse Call-Based format\n\n\n\n\n#Example:\n\n#Output:\n\n\n\n\n\n\n\n#Input:\n\n*Example 1*\n ", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n#Example:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven 2 strings, you are trying to find out if the substring appears in both strings.\n\n\n\n\nGiven 2 strings"], "prompt": "\nQUESTION:\nGiven 2 strings, your job is to find out if there is a substring that appears in both strings. You will return true if you find a substring that appears in both strings, or false if you do not. We only care about substrings that are longer than one letter long.\n\n#Examples:\n\n````\n*Example 1*\nSubstringTest(\"Something\",\"Fun\"); //Returns false\n\n*Example 2*\nSubstringTest(\"Something\",\"Home\"); //Returns true\n````\nIn the above example, example 2 returns true because both of the inputs contain the substring \"me\". (so**ME**thing and ho**ME**)  \nIn example 1, the method will return false because something and fun contain no common substrings. (We do not count the 'n' as a substring in this Kata because it is only 1 character long)\n\n#Rules:\nLowercase and uppercase letters are the same. So 'A' == 'a'.  \nWe only count substrings that are > 1 in length.  \n\n#Input:\nTwo strings with both lower and upper cases.\n#Output:\nA boolean value determining if there is a common substring between the two inputs.\ndef substring_test(str1, str2):\n\t\nUse Call-Based format\nANSWER:\n"}}