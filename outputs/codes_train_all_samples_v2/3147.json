{"3147": {"code": ["\n\npython\n\n## Example\n\n(0, 0)\n\n# Primes in the range [0, 1]\n\n# Primes in the range [0, 1]\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Summary\n\n\n\n\n\n\n\n## Summary\n\n## Summary\n\n\n*", "\n\n\n\n## Primes\n\ntotal_primes(a, b):\n\nTotal Primes\n\n####\nNote:\n*\n\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n\n\n\n## Example\n```\n* This", "\n\n\n\n\n## Primes\n\n# TODO\n\n\n\n\n\n## References\n\n#\n\n\n\n\n## Primes\n\n# TODO\n\n\n\n\n\n\n\n\n\n\n\n\n# End of tasks\n\n---\n\n## Examples\n\n---\n\n## Total Primes\n\n###\n\n\n\n\n\n\n## Examples\n\n*\n", "\n\n\n\n## Examples\n\n- A\n\n\n\n# Pre-Based\n\npython\n#\n\n\n\n\n## References\n\n---\n\n## Conversions\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Primes\n\n## Total Primes\n\n\n\n\n\n\n\n\n#\n# :-)\n#\n", "\n\n#\n\n\n## Main\n\n\n#\ntotal_primes\n\nTotal Primes\n\ntotal_primes\n\n####\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Primes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## References\n\n### Primes\n\n\n*", "\n\n\n\n\n\n\n## Example\n\n### Primes\n\n\n\n\n\n\n*This is a function that returns the number `a` and `b`\n\n### Example\n\n\n\n\n\n\n\n\n\n## Summary\n\n## Example\n\n## Examples\n```\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n## Examples\n``", "\n\n\n\n\n## Global\n\n\n\n\n\n## Summary\n\nThe function that will get the total primes\n\n---\n\n## Data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example\n\n## Primes\n\ntotal_primes\n\n\n\n\n\n\n\n\n\n\n* This is the *other*", "\n\n\n\n\n## Multiple\n\n## total primes\n\n# A list of all primes in the range (a, b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Another Task\n\n# Example\n\n## One-digit primes\n\n## Example\n\n\n\n\n\n\n\n\n\n## Examples\n", "\n\n\npython\n\n## Convenience\n\n# The number `a` is the smallest prime that can be sliced into `61` and `7`\n\na, b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Primes\n\n## Functions\n\n\n\n\n\n\n## Summary\n\n\n* This is not", "\n\n\n\n\n## Example\n\n*NOTE:*\n\n\n\n\n\n\n\n\n# Use Call-Based format\n#\nPRIMES = [617, 7]\n\n###\n\n\n\n## Call-Based\n\n\n\n\n\n\n---\n\n\n\n\n```\n\n\n\n\n\n## Task\n\n\n\n\n*This function is called", "\n\n\npython\n# Codewars:\n# Use Call-Based format\n\n# Summary\n#\n\n\n\n\n\n\npython\n\n\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Summary\n\nNote:\n* This is a general-friendly function.\n\n\n\n\n\n\n\n\n\n## Calls\n\n\n\n", "\n\n\npython\n\n### Primes\n\n--\n\n## Data\n\n\n\n\n\n\n\n## Example\n\n\n\n\n\n### Primes\n\n```\n\n\n\n\n\n\n\n## Functions\n\n## Primes\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Task\n\n\n## Primes\n\n\n*", "\n\n\n\n\n\n## Basic\n\n## Summary\n\n## Example\n\n## Primes\n\n###\n\n\n\n\n\npython\n\n\n## Call-Based\n\n## Primes\n\n####\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n---\n\n\n\n\n\n\n\n\n## Examples\n```\n\n*", "\n\n\n\n\n\n\n\n\n## Primes\n\nTotal Primes\n\n# The tasks\n\nPRIMES\n\n#\n\n###\n\n0\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n## Summary\n\n```\n\nTotal Primes:\n\n\n\n\n* This is an advanced format:", "\n\n## The Simple Usage\n\n### PRED_PRIMES\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n---\n\n\n\n\n### POWER\n\n\n\n\n\n\n\n\n\n\n\n\nif:python\n\n\n---\n\n\n\n\n\n## Primes\n\n#####\n\n\n\n\n## Primes\n", "\n\n\npython\n\n\n\n### Suggestions\n\n#\n\n# Summary\n\n# Primes\n\n---\n\n## Conversions\n\n## Primes\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Primes\n\n\n```\n\n\n\n\n\n\n\n## Functions\n\n## Primes\n\n\n*", "\n\n\npython\n\n## Example\n\n## Total Primes\n\n# The above code is for the general purpose of the kata module.\n\nPRONTS:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Test\n\n## All\n\na \u2264", "\n\n\npython\n\n## Functions\n\n# Total primes\n\n# Total primes\n\n# Total primes\n\n# Primes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Summary\n\n## Summary\n\n### Primes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* This is the `total_primes", "\n\n\n\n## Primes\n\nTotal primes\n\ntotal_primes(a, b):\n\n### POWERS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Primes\n\n\n\n\n\n\n\n\n\n\n\n\n## Primes\n\n## Example\n\n\n\n\n\n\n##", "\n\n\n\n## Primes\n\n```\ntotal_primes(a, b)\n\n\n\n\n\n\n\n\n\n\n## Call-Based\n\n\n\n\n\n\n\n\n\n---\n\n## Primes\n\n```\n\n\n\n\n\n---\n\n# Runs\n\n\n\n\n\n\n\n\n## Example\n\n*\n# The"], "prompt": "\nQUESTION:\n*This is the advanced version of the [Total Primes](https://www.codewars.com/kata/total-primes/) kata.*\n\n---\n\nThe number `23` is the smallest prime that can be \"cut\" into **multiple** primes: `2, 3`. Another such prime is `6173`, which can be cut into `61, 73` or `617, 3` or `61, 7, 3` (all primes). A third one is `557` which can be sliced into `5, 5, 7`. Let's call these numbers **total primes**.\n\nNotes:\n* one-digit primes are excluded by definition;\n* leading zeros are also excluded: e.g. splitting `307` into `3, 07` is **not** valid\n\n\n## Task\n\nComplete the function that takes a range `[a..b]` (both limits included) and returns the total primes within that range (`a \u2264 total primes \u2264 b`).\n\nThe tests go up to 10^(6).\n~~~if:python\nFor your convenience, a list of primes up to 10^(6) is preloaded, called `PRIMES`.\n~~~\n\n\n## Examples\n```\n(0, 100)  ==>  [23, 37, 53, 73]\n\n(500, 600) ==> [523, 541, 547, 557, 571, 577, 593]\n```\nHappy coding!\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n#### *Translations are welcome!*\ndef total_primes(a, b):\n\t\nUse Call-Based format\nANSWER:\n"}}