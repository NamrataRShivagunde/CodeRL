{"4764": {"code": ["\nUse Function-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\nrotateClockwise(matrix)\n```if:ruby,python\n`rotateClockwise(matrix)`\n```if:ruby,python\n`rotateClockwise(matrix)`\n\n\n:\n\n\n\n\n\n\n\n\n\n\n    matrix = list(matrix", "\nUse Function-Based format\n\n\n\n\n##...\n\n\n\t\n\n\t\n\n\n\n\n\n\t\n\n\n\nrotateClockwise(matrix)\nrotateClockwise(matrix)\n```\n\n:\nUse Call-Based format\n.\n\n```\n#......#\n#......#\n\n\n\n\n\n\n\n\nGiven a matrix represented", "\nUse Function-Based format\n\n\n\nUse Call-Based format\n:\n###.\n\nUse Call-Based format\n\n\n \n\n\n\t\n\n:\n\n\n\n\n:\n\n\nUse Function-Based format`rotateClockwise(matrix)`\n\n\n\n:\n\n\n\n\n\n\n\n\nGiven a matrix represented as a list of string, such as", "\nUse Function-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\nUse Python format\n#......#\n#......#\n\n\n\n:\n\n\n\n\t\n:\n:\n`rotateClockwise(matrix)`\n\n\n:\n\n\n\n\n\n\n\n\n#\nGiven a matrix represented as a list of string, such", "\nUse Function-Based format\n\n\n\nUse Call-Based format\n\n\n##...\n\nUse Call-Based format\n##...\n\n\n\n\n\n\n\n\n\t\n\n\n\nrotateClockwise(matrix)\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a matrix represented as a list of string, such as\n``", "\nUse Function-Based format\n\n\n\n\n\n\n   \n\n   \n\t\n\n\n\n\n\n\n\n\t\n\n\nrotateClockwise(matrix)\n\n\n\n\n#......#\n#......#\n#......#\n#......#\n#......#\n\n\n\n\n\n\n\nGiven a matrix represented as a list of string, such", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n#......#\n#......#\n\n\n\n\n\n\n\n\n\t\n\n\nrotateClockwise(matrix)\n\n\n:\n\nrotateClockwise(matrix)\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n```\n#......#\n#......", "\nUse Function-Based format\n\n\n\n\n\n\n\n\n#  /!\\  You must write a function\nwrite a function\n#\n\n\n\n\n\n\t\nUse Function-Based format\n\n`rotateClockwise(matrix)`\n```endif`\n\n\n:\n\n\n\n\n\n\n\n\n\n\n   rotateClockwise(matrix)\n\n   return", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n:\nUse Function-Based format\n#......#\n#......#\n\n\n\n\n\n\n\n\n\n\nrotateClockwise(matrix)\n\n\n:\n....\n\n\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n###\n#\n#\n######\n#", "\nUse Function-Based format\n\n\n\nUse Call-Based format\n\n##...\n\n\n\n\t\n\n\n\n\n\n\n\nrotateClockwise(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n#......#\n#......#\n#......#\n#......#\n#......#\n#......#", "\nUse Function-Based format\n##...\n\n\n\n\nuse Call-Based format\n\n\n\n\n\nGiven a matrix represented as a list of string, such as\n```\n#......#\n#\n\n:\n\n`rotateClockwise(matrix)`\n```\n\n:\n\n\n\n\n\n\n\n\n\n\"\"\"\n    if isinstance(matrix, list):", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Function-Based format\n\n\n\n:\n\n\nrotateClockwise(matrix)\n:\n:\nrotateClockwise(matrix)\n\n\n:\nUse Call-Based format\n.\n\n\n\n\n\n\n\n#!/python\n\n\n```\n#......#\n#....", "\n\nUse Call-Based format\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\nrotateClockwise(matrix)\n\nUse Function-Based format\n\nUse Python-Based format\n\n\nrotateClockwise(matrix)\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n```\n#......#\n#", "\nUse Function-Based format\n###...\n\n\n\n\n\n\n\n\n\n\n\nRotate-Clockwise format\n\nUse Function-Based format\n\n```if:javascript`\nwrite a function\n```if:python`\n\n\n:\n:\n(\n\n:\n\n\n\n\n\n\n\n\nGiven a matrix represented as a list of string, such as\n", "\nUse Call-Based format\n\n\nUse Function-Based format\nUse Function-Based format\n\n#\n\n\n\n\n\t\n\n\n\nGiven a matrix represented as a list of string, such as\n```\n#......#\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n```\n#......#\n#", "\nUse Call-Based format\n\n\n\nUse Function-Based format\n\n:\n#...\n\n\n\n\n:\n\n\n\n\t\nUse Function-Based format\n\nUse Function-Based format\n\n\n\n`rotateClockwise(matrix)`\n```\n\n\n:\n\n\n\n\n\n\n\n\n\nGiven a matrix represented as a list of string, such as", "\nUse Call-Based format\n\n\n\n\n\n#......#\n#......#\n#......#\n\n\n\t\nUse Function-Based format\n\n\n\n\n\n\n\t\n\n\nrotateClockwise(matrix)\n```if:ruby,python`\n\n\n:\n\n\n\nUse Function-Based format\n\n\n\n\nGiven a matrix represented as", "\nUse Python-Based format\n\n\n\nUse Call-Based format\n\n\n#......#\n\n\n\t\n\n\t\n\n\n\n\n\n\t\n\n\n\nrotateClockwise(matrix)\n```if:bash\n`rotateClockwise(matrix)`\n```if:python\n\n\n:\n\n\n\n\n\n\n\n\nGiven a matrix represented as a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\nUse Function-Based format\n#......#\n#......#\n\n\n\n\n:\n\n\n\n\t\n\n`rotateClockwise(matrix)`\n```if:ruby,python`\n\n\n:\n\n\n\n\n\n\n\n\n\nGiven a matrix represented as a list of", "\nUse Function-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Python-Based format\n\nReturns:\n\t\nUse Python-Based format\n\nrotateClockwise(matrix)\n```if:bash,bash```\n\n\n:\n\n\n\n\n\n\n\n\nGiven a matrix represented as a list of string, such"], "prompt": "\nQUESTION:\nGiven a matrix represented as a list of string, such as\n```\n###.....\n..###...\n....###.\n.....###\n.....###\n....###.\n..###...\n###.....\n```\nwrite a function\n```if:javascript\n`rotateClockwise(matrix)`\n```\n```if:ruby,python\n`rotate_clockwise(matrix)`\n```\nthat return its 90\u00b0 clockwise rotation, for our example:\n\n```\n#......#\n#......#\n##....##\n.#....#.\n.##..##.\n..####..\n..####..\n...##...\n```\n>  /!\\  You must return a **rotated copy** of `matrix`! (`matrix` must be the same before and after calling your function)  \n> Note that the matrix isn't necessarily a square, though it's always a rectangle!  \n> Please also note that the equality `m == rotateClockwise(rotateClockwise(rotateClockwise(rotateClockwise(m))));` (360\u00b0 clockwise rotation), is not always true because `rotateClockwise([''])` => `[]` and `rotateClockwise(['','',''])` => `[]` (empty lines information is lost)\ndef rotate_clockwise(matrix):\n\t\nUse Call-Based format\nANSWER:\n"}}