{"3592": {"code": ["\n\n\ngreatest(2, 3, 5)\ngreatest(2, 3, 5)\ngreatest(2, 3, 6)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> The number above and below n should be the same.\n\n\n\n\n\ngreatest(2, 3", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n> Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngreatest(x, y, n):\n\t# greatest(", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n### Examples:**\n\ngreatest(x, y, n)\n\n\n\n\nf\n\n\n\n\ngreatest(2, 3, 20)\n\n\ngreatest(2", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n**Arguments:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf44834d000050\n\n\n\n\n\n\nsmallest(x, y, n) => 4444\n\n\n\n\n> `greatest(x", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n> The `greatest` function will return the smallest and greatest number above or below the given `x` and `y`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\ngreatest(x, y)\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\nReturns the greatest number.\n\n\n\n\n\n\t\n\n\nf8f4f6f4f\n\n\n\n\n\n\n\n\n> `greatest(x", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n## Examples\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nsmallest\ngreatest\n\n\n\n\n\ngreatest(2", "\nUse Call-Based format\n\n\n\n\n\n\ngreatest(x, y, n)\n\nReturns:\nx, y, n\n\n### Examples:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\n\n\n\n\n\n\nsmallest(x, y, n)\n\n\n\n\ngreatest(", "\n\n\ngreatest(x, y, n):\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nff1\n\n\n\n\n\n\n\n\n\ngreatest(1, 2, 3) => 1", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nf536c5c3\n\n\n\n\n\nsmallest(10, 3)\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\ngreatest(x, y, n)\n\ngreatest(x, y, n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Examples```python\n\ngreatest(2,", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n## Examples:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Examples```python\n\ngreatest(3)\n\n>", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\ngreatest(x, y, n)\n\nUse Call-Based format\n\n**Example:**\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\ngreatest(3, 3, 4)\n\n\ngreatest(", "\nUse Call-Based format\n\n\n\n\n\n\n\n\ngreatest(1, 2, 3) => 0\n\nsmallest(1, 2, 3) => 7\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nf44834d000050\n\n\n\n\n\n\n\n\n\ngreatest(4, 3,", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n1. you can use a call-based format\n2. you can use a call-based format\n\n\n\n\n\n\n\n\n\n\nf8c56e7d9c\n\n\n\n\n\n\n\n\ngreatest(2, 3, 20)", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n0. no numbers will be returned, 1. no numbers will be returned\n\n1. you should be able to return 0.\n2. you are in the same format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngreatest()\n\n\n\n\ngreatest(", "\n\n\n\n\nUse Call-Based format\n\n\n\ngreatest(2, 3, 20)\ngreatest(3, 2, 20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTHREE:\n\n\n\n\n\n\ngreatest(n)\n\n\n\n\n\ngreatest(2, 3", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\nf064f1fbf1f44834d000050\n\n\n\n### Examples\n```python\n\n\n\n\n\n\ngreatest(2,", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngreatest(1, 3, 2)\ngreatest(2, 3, 4)\n\n\n\n\n\n\n\n\n\n\n\n\ngreatest(2,", "\nUse Call-Based format\n\n\n\ngreatest(x, y, n)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\ngreatest(x, y, n)\n\n\n\n\n\n\n\n### Examples```python\n\ngreatest(2"], "prompt": "\nQUESTION:\nGiven an `x` and `y` find the smallest and greatest numbers **above** and **below** a given `n` that are divisible by both `x` and `y`.\n\n### Examples\n```python\ngreatest(2, 3, 20) => 18   # 18 is the greatest number under 20 that is divisible by both 2 and 3\nsmallest(2, 3, 20) => 24   # 24 is the smallest number above 20 that is divisible by both 2 and 3\n\ngreatest(5, 15, 100) => 90\nsmallest(5, 15, 100) => 105\n\ngreatest(123, 456, 789) => 0   # there are no numbers under 789 that are divisible by both 123 and 456\nsmallest(123, 456, 789) => 18696\n```\n\n**Notes:** \n\n1. you should never return `n` even if it is divisible by `x` and `y` always the number above or below it\n2. `greatest` should return 0 if there are no numbers under `n` that are divisible by both `x` and `y`\n3. and all arguments will be valid (integers greater than 0).\n\n### Note for Haskell users\n\n>Please take a look at [bkaes comment](http://www.codewars.com/kata/when-greatest-is-less-than-smallest/discuss#56418f0fbf1f44834d000050) and give us your opinion\ndef greatest(x, y, n):\n\t\nUse Call-Based format\nANSWER:\n"}}