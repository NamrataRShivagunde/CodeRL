{"4657": {"code": ["\n\n\n# number of permutations:\n 1    2    3    0    1    0\n~~~\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n\nYou will be given an array of positive integers.\n\n\n\n\n\n\n\n\n\n\n\n\n# number of permutations:\n 1    1    1    1    1\n\n\n\n``", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\n\n\t\n\n\n\n\n\n\nThe order of the output will be:\n\n    1    1    0    0    0    0    0\n0    0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- The array of positive integers\n``", "\n\n\n# number of permutations:    3    1    1    0    0\n~~~\n# number of permutations:    1    1    0    0\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n# number of permutations:    3    1    0    0\n\n\n```python", "\n\n\n\n\n\n\nThis function will return the sorted array.\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\t\n\n\n\n\n\n\n\n\n\n# number of perfect squares:                 3    1    2    1    0    0    0    0\n\n\n\n\n\n\n\n\n\n\n    This is a very similar format to", "\n\n\n\n\nUse Call-Based format\n\n\n\nUse Ruby and JS\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n---\n\n\n\n\n\n\n    1    0    1    0\n\n\n\n\n\n\n\n```python\n# number of perfect squares:              1    1    0    0\n\n\n\n\n#", "\n\nUse Call-Based format\n\n\n\n\n\nUse Python code\n\n\n\n\n\n\n\n\n\n\n\nUse Python code\n\n### sort_by_perfsq\n\n\n\n\n\n\n\n\n\n    1    2    0    0   0    0\n```\n\n\n\n\n\n\n\n\n\n# This is the end of the example\n", "\n\n\n\n\n\nUse Call-Based format\n\n\nThe sort_by_perfsq function will generate the output from a python array of positive integers.\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n    0    0    0    0\n\n\n\n\n\n# sort by permutations\n\n\n```python\n# 136", "\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\n\t\nUse Python-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n    1    1    0    1    0    0    0    0\n0\n\n\n\n\n\n\n#\n\n\n```python\n# number   Per", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nThe output is a list of positive integers\n\n\n\n\n\n\n    2    0    0    0    0    0\n\n\n\n\n\n# number of permutations\n\n\n\n```python\n#", "\n\n\n\n\n\n\n\n\n\n# number of permutations\n\n\n\n\n\n\n\n\n\nUse python, jython, javascript\n# number of permutations\n# number of permutations\n\n\n\n\n\n\n\n\n\n\n\n# number of permutations\n    1    1    1    1    0    0    0\n\n\n\n\n\n\n\n\n\n```python", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe sort_by_perfsq function is called to sort the array of digits.\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# sort by the amount of permutations\n\n\n\n\n\n```\n# The original array is now an", "\n\t\nUse Call-Based format\n\n\n\n\nUse python, js, ruby\n\nUse python, js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n    1    2    3    0    0    0    0    0    0\n\n\n\n\n\n\n\n\n\n\nNote:\n\nA", "\n\n\n\n\n\n\n\n\n\n# number of permutations:  7    2    3    1    1    1\n0    1    1    0    0\n0    1\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n# number of permutations:  7    2    1    0\n\n\n# number", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Python-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n        1    1    1    1    1    1    0    0    0     0   0   0    0\n\n\n\n\n\n\n\n\n## Examples:\n\n# The array of positive", "\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function is called from a python script\n\n```python\n\n\n\n\t\nUse Python Call-Based format\n```python\n\n\n\n\n\n\n\n\n\n\n\n    1    2    2    1    0    0    0\n\n\n\n\n\n\n\n\n    :param arr:\n\t", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\nUse Python3 format\n\nUse Ruby, JavaScript, Javascript, etc.\n\n\n\t\n\n\n\n\n\n\n    0    0    0    0\n\n\n\n\n\n# number of permutations:     2    1    0    0\n\n\n```", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\nUse Python-Based format\n\n\n\n\n\n----------------------------------------------------------------------------\n\n\n\n\n\n\n    1    0    0    0    0    0    0    0    0\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n# number of permutations:  0    1    2    1    2    1    0    0\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe array will be sorted by the amount of permutations.\n\n\n\n\n\n\nYou will given", "\n\n\n# number of permutations:           2    1    0   0   0    0   0   0   0\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe array should be in positive integers.\n\n```python\n\n\n\n# sort by permutations\n\n\n\n```python", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n# number of permutations:\n3    2    1    2    1    1    1    1    1    1    0\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# number of permutations: 3    0    1    0    0\n\n\n#"], "prompt": "\nQUESTION:\nYou will be given an array of positive integers. The array should be sorted by the amount of distinct perfect squares and reversed, that can be generated from each number permuting its digits.\n\nE.g.: ```arr = [715, 112, 136, 169, 144]``` \n``` \nNumber   Perfect Squares w/ its Digits   Amount\n 715                -                       0\n 112               121                      1\n 136               361                      1\n 169           169, 196, 961                3\n 144             144, 441                   2\n``` \nSo the output will have the following order:\n```[169, 144, 112, 136, 715]``` \n\nWhen we have two or more numbers with the same amount of perfect squares in their permutations, we sorted by their values.\n\nIn the example given above, we can see that 112 and 136 both generate a perfect square. So 112 comes first.\n\nExamples for this kata:\n```python\nsort_by_perfsq([715, 112, 136, 169, 144]) == [169, 144, 112, 136, 715]\n# number of perfect squares:                   3    2    1    1    0\n``` \nWe may have in the array numbers that belongs to the same set of permutations.\n```python\nsort_by_perfsq([234, 61, 16, 441, 144, 728]) == [144, 441, 16, 61, 234, 728]\n# number of perfect squares:                      2    2    1   0   0    0\n```\n\nFeatures of the random tests:\n~~~if:ruby,python\n- Number of tests: 80\n- Arrays between 4 and 20 elements\n- Integers having from 1 to 7 digits included\n~~~\n~~~if:js\n- Number of tests: 30\n- Arrays between 4 and 16 elements\n- Integers having from 1 to 7 digits included\n~~~\n\nEnjoy it!!\ndef sort_by_perfsq(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}