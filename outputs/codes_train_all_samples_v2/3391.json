{"3391": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nEXAMPLE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflatten('a', 2, 3) # returns 2\n\n\n\n\nflatten('\n\n\n``", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nThis method will be called from the caller.\n\nUse Call-Based format\n\nUSAGE:\n\n```python\nflatten('a', 'b', 3)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nflatten('\n\n\n``", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\nThis function is called from the ``flatten`` function.\n\n\n\n\n\n\n\n\n\n\n\n\nThis exercise you will create a global method.\n\n\nflatten('\n\n\n``", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nflatten('a', 1, 2, 3, 4, 5, 7)\n\n\n\n\nflatten('\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\nThe global method is defined in the global scope of the global namespace.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nif [", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nThis function will flatten all objects in an array\n\n\n\n\nUse Call-Based format\n\n\nThis method will recursively flatten the passed in arguments\n\n\n\n\n\n\n\n\n\n\nflatten('a')\n\n\n\n\nflatten('a') # returns\n\n\n``", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nThis is a global function that takes in a single number of arguments\n\n```python\n\nimport json\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nflatten('a', 2, 3, None, 4)\n\n\n\n\nflatten('\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\nEXAMPLE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflatten('a', 'b', 'c', 'd', None, 4, 'c')\n\n\n\n\n\n\nflatten('\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nThis exercise also works for functions that are in call-based format.\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nflatten('a', 'b') #\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nflatten('a', 4)\n\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nThis function is called recursively to flatten the results of the given function\n\n\n\n\n\n\n\n\n\n\nflatten('a', 'b', 'c')\n\n\n\n\n\n\nflatten('a')\n\n\n\n```", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nEXAMPLE:\n\nUse Call-Based format\nNOTE:\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\nflatten('a', [1, 2, 3])\n\n\n\n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nimport sys\nimport os\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflatten('a', 'b', 'c', 'a')\n\n\n\n\n\n\n\nflatten('\n\n\n``", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\nThis function takes an array of arguments\n\n```python\n\nflatten(2, 3) # returns 2\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis exercise is created by creating a", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n```python\nimport sys\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThis exercise will give you a single result:\n\n\n\nflatten('\n\n\n``", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nimport sys\nimport sys\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nflatten('a', 'b')\n\n\n\n```python", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nEXAMPLE:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Python format\n\n\n\n\n\n\n\n\n\nThis exercise is intended to be used as an exercise\n\n\nflatten('\n\n\n```", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\nflatten(a, b, 3)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThis exercise has been created with the global flatten", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nEXAMPLE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflatten('a', ['b', 'c']) # returns ['a']\nflatten('b') #\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nThis function is called by the user to do the same thing as the `flatten` function.\n\nUse Call-Based format\nEXAMPLE:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\nflatten('a') # returns 'a'\n\n\n\n\nflatten('\n\n\n``"], "prompt": "\nQUESTION:\nFor this exercise you will create a global flatten method. The method takes in any number of arguments and flattens them into a single array. If any of the arguments passed in are an array then the individual objects within the array will be flattened so that they exist at the same level as the other arguments. Any nested arrays, no matter how deep, should be flattened into the single array result.\n\nThe following are examples of how this function would be used and what the expected results would be:\n\n```python\nflatten(1, [2, 3], 4, 5, [6, [7]]) # returns [1, 2, 3, 4, 5, 6, 7]\nflatten('a', ['b', 2], 3, None, [[4], ['c']]) # returns ['a', 'b', 2, 3, None, 4, 'c']\n```\ndef flatten(*args):\n\t\nUse Call-Based format\nANSWER:\n"}}