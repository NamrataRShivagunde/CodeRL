{"3633": {"code": ["\n```python\n#ignore this part\n#output is 3\n\n\n\n\n#\n\n\n\n\n\n#\n\n#\n\n\n\n#ignore this part\n\n2\\.\n\n\n\n`\n```\n\n\n## The Method\n\n#ignore this part\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Use the arrow function\n", "```\n\n\n\n\n\n\n\n## The Expression\n\n---\n\n\n\n\n\n\n\n\n\n#ignore this part\n`\n\n## The Expression\n\n```python\n\n`\n\n#ignore this part\n```\n\n## The Array\n\n##\n\n\n\n\n#\n```\n\n\n\n\n##\n\n\n\n\n```python", "```\n\n\n#\n\n\n\n\n\n\n```python\n#ignore this part\n#output is 6\n\n#ignore this part\n\n```python\n#ignore this part\n\n\n\n\n\n\n`\n\n```\n\n## The Function\n\n##\n\n\n\n\n#\n\n#\n\n\n\n## The Function\n\n\n\n\n#output", "\n\n\n#ignore this part\n#ignore this part\n\n1\\.\nprint\n\n\n\n\n#ignore this part\n\n#ignore this part\n\n#ignore this part\n\n```python\n#ignore this part\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n## The Expression\n\n\n\n\n\n\n\n#keep this", "```\n\n# The SubExpression\n#\n\n\n## The SubExpression\n\n#\n\n\n\n\n#\n\n\n\n\n\n\n`\n```\n\n## The Function\n\n```python\n#ignore this part\n#output is 5\n\n\n## The Function\n\n\n\n\n\n\n\n\n\n\n\n## The Method\n\n#\n\n\n``", "\n\n#\nprint obj\nprint obj\n\n#golint\n\n#golint\n\n## The Function\n\n\n\n\n\n\n#golint\n\n#golint\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n#\n`\n\n\n\n\n## The Function\n\n\n\n\n\n", "\n```python\nprint obj\n\n```python\n\n\n\n#\n\n\n\n\n\n\n## The Method\n\nThe method is an example of the method:\n\n```python\nprint obj\nprint obj\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n#\n\n#\n#\n\n\n\n#if it", "\n\n\n\n\n## The Expression\n\n```python\n\n\n\n\n\n#ignore this part\n\nprint str(obj) #output is 1\nprint str(obj) #output is 2\n\n#ignore this part\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## The Replace\n\n\n\n\n\n##\n\n\n\n\n```", "\n```python\n\n\n\n\n\n\n#\n\n#ignore this part\n\n#ignore this part\n\npython\n\nprint plus(...) #output\n\n#ignore this part\n\n```python\n\n\n\n`\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n#\n\n\n\n\n\n## The Function\n\n#\n\n\n\n", "\n```python\n\n1\\.\n#output is 5\n\n\n\n\n\n\n\n```python\nprint obj\n\n\n\n\n#ignore this part\nprint obj\n\n#ignore this part\n\n\n`\n`\n\n\n#ignore this part\n\n\n\n\n## The Replace\n\n##\n\n#\n\n\n\n##\n\n\n\n#ignore this part", "```\n\n---\n\n\n\n\n#\n\n\n#ignore this part\n\n#ignore this part\n\n#ignore this part\n\n#ignore this part\n\n```python\n#ignore this part\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n## The Function\n\n\n\n\n\n\n\n\n\n#ignore this", "```\n\n\n#ignore this part\n#ignore this part\n\n#output\n\n#output\n\n#output\n\n#output\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n```\n\n## The Function Call\n\n\n\n\n#\n```\n\n\n\n\n#\n\n\n\n\n##\n\n\n\n```python", "\n\n#\nprint obj\nprint obj\n\n# The Expression\n\n#output\n\n```python\nprint obj\nprint obj\n#output\n\n\n\n\n\n\n\n#\n\n#\n\n\n\n\n\n\n\n`\n\n\n\n#ignore this part\n\n\n\n## The Expression\n\n\n\n\n\n\n\n\n\n##\n\n\n```python", "\n```python\n\n\n#ignore this part is just JS\nprint obj\n\n```python\n#ignore this part is just JS\n\noutput\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n```python\n\n#ignore this part\n\n\n\n\n\n\n\n\n###\n\n\n\n```python\n", "\n\n#\n\n\n\n\n\n#ignore this part is just for JS\n\nprint obj[2]\nprint obj[3]\n\n## The Expression\n\n#ignore this part is just for JS\n\n\n\n\n\n\n\n\n`\n\n\n\n#```\n\n\n\n## The Expression\n\n\n\n\n\n\n##\n\n\n\n`python\n#", "\n```python\nprint str(obj) #output is 1\n\n```python\n\n\n\n### The Simple Expression\n\n###\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n`\n\n```python\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n\n\n#ignore this", "\n\n#\n\n\n## The Replacement\n\n#ignore this part\n\n#output is 15\n\n\n\n\n\n## The Expression\n\n#output is 15\n\n\n\n\n\n\n\n\n\n```\n\n## The Function\n\n\n\n\n```python\n#ignore this part\n\n\n\n\n\n\n\n\n##\n\n\n\n#output is 5", "\n```python\n\n\n#ignore this part\n\n1\\.\n\n3\\.\n\n1\\.\n\n```python\n\n2\\.\n\n\n```python\n\n\n\n#\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n#\n\n\n\n#\n\n##\n\n#\n\n``", "\n```python\nprint plus(1,2) #output is 2\n\n\n\n\n\n\n\n\n## The Regular Expression\n\npython\nprint\n\n\n\n\n\n\n```python\n\n`\n\n```python\n\n\n\n```python\n\n\n```python\n\n\n\n\n\n\n##\n\n\n\n\n\n\n\n```python\n", "```\n\n\n#\n\n\n\n#ignore this part\n\n\n\n```python\n#ignore this part\n```\n\n\n\nprint```\n\n\n```\n\n## The Function\n\n#ignore this part\n\n\n\n\n```python\n\n#ignore this part\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n```"], "prompt": "\nQUESTION:\nOK, my warriors! Now that you beat the big BOSS, you can unlock three new skills. (Does it sound like we're playing an RPG? ;-)\n\n## The Arrow Function (JS only)\n\nThe first skill is the arrow function. Let's look at some examples to see how it works:\n\n```python\n#ignore this part, it is just for JS\n```\nAs you can see, its syntax is:\n\n```python\n#ignore this part, it is just for JS\n```\nIf only one parameter exists on the left side of the arrow, the bracket can be omitted. If only one expression exists on the right side of the arrow, the curly braces can also be omitted. The example below shows a function with the () and {} omitted.\n\n```python\n#ignore this part, it is just for JS\n```\nIf the right side of the arrow is a complex statement, you must use curly braces:\n\n```python\n#ignore this part, it is just for JS\n```\nSo far, our examples have used function assignment. However, an arrow function can also be used as a parameter to a function call, as well. When used as a parameter, the arrow function does not require a name. Let's rewrite the string.replace() example we saw from a previous training using our new skill:\n\n```python\n#ignore this part, it is just for JS\n```\nString.replace takes a regular expression and a function. The function is invoked on each substring matching the regex, and return the string replacement of that match. In this case, the arrow function takes the matched string as the parameter ```x```, and returns the upper cased value of ```x```.\n\nIn the soon to learn the arrayObject and its methods, there are many applications on the arrow function, which is the reason we first learn the arrow function. The arrow function has more complex usage and usage restrictions, but we don't need to learn to be so deep, so we only learn the contents of the above.\n\n## The Spread Operator\n\nThe second skill is the ```spread operator```. The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.\n\nIt looks like this: ...obj. It can be used in three places:\n\n1\\. In function calls:\n\n```python\ndef plus(a,b,c,d,e): return a+b+c+d+e\n\narg1=[1,2,3,4,5]\narg2=[2,3]\nprint plus(...arg1) #output is 15\nprint plus(...arg2) #output is 5\n```\n```...arg1``` spreads all the elements in arg1 into individual parameters to plus(). \nIn Javascript, it's also possible to use the spread operator in the middle of a parameter list, as was done with ```...arg2```.\n\n2\\. Creating array literals (JS and Ruby):\n```python\n#ignore this part, it is just for JS and Ruby\n```\n```...a``` spreads out the array's elements, making them individual elements in b.\n\n3\\. Used for ```deconstruction```. destructuring is also a new member of ES6. It is the third skill we learn in this training.\n\nFirst, let's look at a simple example of destructuring:\n```python\na,b=[1,2] #or [a,b]=[1,2]\nprint a #output is 1\nprint b #output is 2\n```\nDestructuring allows us to assign variables in a sentence-like form. Here's a slightly more complicated example:\n```python\na,b=[1,2] #or [a,b]=[1,2]\n#old way to swap them:\n#c=a; a=b; c=b\nb,a=[a,b] #or [b,a]=[a,b]\nprint a #output is 2\nprint b #output is 1\n```\nWith destructuring, we don't need a temporary variable to help us exchange the two values.\n\nYou can use the spread operator for destructuring like this:\n\n```python\n#ignore this part, it is just for JS\n```\nPlease note: the spread operator must  be the last variable: ```[...a,b]=[1,2,3,4,5]``` does not work.\n\n```a``` was assigned to the first element of the array, and``` b ```was initialized with the remaining elements in the array.\n\nJavascript note: If you see an ellipse ... in the argument list in a function declaration, it is not a spread operator, it is a structure called rest parameters. The rest parameter syntax allows us to represent an indefinite number of arguments as an array, like this:\n\n```python\ndef plus(*num):\n  rs=0\n  for x in num: rs+=x\n  return rs\nprint plus(1,2) #output is 3\nprint plus(3,4,5) #output is 12\n```\nThe rest paramater must be the last argument in the function definition argument list.\n\nIn the next example, we use a rest parameter to collect all the values passed to mul() after the first into an array. We then multiply each of them by the first parameter and return that array:\n```python\ndef mul(a,*b):\n  b=list(b) #default type would be tuple\n  for i in xrange(len(b)): b[i]*=a\n  return b\nprint mul(2,1,1,1) #output is [2,2,2]\nprint mul(2,1,2,3,4) #output is [2,4,6,8]\n```\n\nOk, the lesson is over. Did you get it all? Let's do a task, now.\n\n## Task\n\nCreate a function ```shuffleIt```. The function accepts two or more parameters. The first parameter arr is an array of numbers, followed by an arbitrary number of numeric arrays. Each numeric array contains two numbers, which are indices for elements in arr (the numbers will always be within bounds). For every such array, swap the elements. Try to use all your new skills: arrow functions, the spread operator, destructuring, and rest parameters.\n\nExample:\n```\nshuffleIt([1,2,3,4,5],[1,2]) should return [1,3,2,4,5]\nshuffleIt([1,2,3,4,5],[1,2],[3,4]) should return [1,3,2,5,4]\nshuffleIt([1,2,3,4,5],[1,2],[3,4],[2,3]) should return [1,3,5,2,4]\n```\n\n[Next training (#23 Array Methods) >>](http://www.codewars.com/kata/572af273a3af3836660014a1)\n    \n## [Series](http://github.com/myjinxin2015/Katas-list-of-Training-JS-series)\n\n( \u2191\u2191\u2191 Click the link above can get my newest kata list, Please add it to your favorites)\n\n - [#1: create your first JS function helloWorld](http://www.codewars.com/kata/571ec274b1c8d4a61c0000c8)\n - [#2: Basic data types--Number](http://www.codewars.com/kata/571edd157e8954bab500032d)\n - [#3:  Basic data types--String](http://www.codewars.com/kata/571edea4b625edcb51000d8e)\n - [#4:  Basic data types--Array](http://www.codewars.com/kata/571effabb625ed9b0600107a)\n - [#5:  Basic data types--Object](http://www.codewars.com/kata/571f1eb77e8954a812000837)\n - [#6:  Basic data types--Boolean and conditional statements if..else](http://www.codewars.com/kata/571f832f07363d295d001ba8)\n - [#7:  if..else and ternary operator](http://www.codewars.com/kata/57202aefe8d6c514300001fd)\n - [#8: Conditional statement--switch](http://www.codewars.com/kata/572059afc2f4612825000d8a)\n - [#9: loop statement --while and do..while](http://www.codewars.com/kata/57216d4bcdd71175d6000560)\n - [#10: loop statement --for](http://www.codewars.com/kata/5721a78c283129e416000999)\n - [#11: loop statement --break,continue](http://www.codewars.com/kata/5721c189cdd71194c1000b9b)\n - [#12: loop statement --for..in and for..of](http://www.codewars.com/kata/5722b3f0bd5583cf44001000)\n - [#13: Number object and  its properties](http://www.codewars.com/kata/5722fd3ab7162a3a4500031f)\n - [#14: Methods of Number object--toString() and toLocaleString()](http://www.codewars.com/kata/57238ceaef9008adc7000603)\n - [#15: Methods of Number object--toFixed(), toExponential() and toPrecision()](http://www.codewars.com/kata/57256064856584bc47000611)\n - [#16: Methods of String object--slice(), substring() and substr()](http://www.codewars.com/kata/57274562c8dcebe77e001012)\n - [#17: Methods of String object--indexOf(), lastIndexOf() and search()](http://www.codewars.com/kata/57277a31e5e51450a4000010)\n - [#18: Methods of String object--concat() split() and its good friend join()](http://www.codewars.com/kata/57280481e8118511f7000ffa)\n - [#19: Methods of String object--toUpperCase() toLowerCase() and replace()](http://www.codewars.com/kata/5728203b7fc662a4c4000ef3)\n - [#20: Methods of String object--charAt() charCodeAt() and fromCharCode()](http://www.codewars.com/kata/57284d23e81185ae6200162a)\n - [#21: Methods of String object--trim() and the string template](http://www.codewars.com/kata/5729b103dd8bac11a900119e)\n - [#22: Unlock new skills--Arrow function,spread operator and deconstruction](http://www.codewars.com/kata/572ab0cfa3af384df7000ff8)\n - [#23: methods of arrayObject---push(), pop(), shift() and unshift()](http://www.codewars.com/kata/572af273a3af3836660014a1)\n - [#24: methods of arrayObject---splice() and slice()](http://www.codewars.com/kata/572cb264362806af46000793)\n - [#25: methods of arrayObject---reverse() and sort()](http://www.codewars.com/kata/572df796914b5ba27c000c90)\n - [#26: methods of arrayObject---map()](http://www.codewars.com/kata/572fdeb4380bb703fc00002c)\n - [#27: methods of arrayObject---filter()](http://www.codewars.com/kata/573023c81add650b84000429)\n - [#28: methods of arrayObject---every() and some()](http://www.codewars.com/kata/57308546bd9f0987c2000d07)\n - [#29: methods of arrayObject---concat() and join()](http://www.codewars.com/kata/5731861d05d14d6f50000626)\n - [#30: methods of arrayObject---reduce() and reduceRight()](http://www.codewars.com/kata/573156709a231dcec9000ee8)\n - [#31: methods of arrayObject---isArray() indexOf() and toString()](http://www.codewars.com/kata/5732b0351eb838d03300101d)\n - [#32: methods of Math---round() ceil() and floor()](http://www.codewars.com/kata/5732d3c9791aafb0e4001236)\n - [#33: methods of Math---max() min() and abs()](http://www.codewars.com/kata/5733d6c2d780e20173000baa)\n - [#34: methods of Math---pow() sqrt() and cbrt()](http://www.codewars.com/kata/5733f948d780e27df6000e33)\n - [#35: methods of Math---log() and its family](http://www.codewars.com/kata/57353de879ccaeb9f8000564)\n - [#36: methods of Math---kata author's lover:random()](http://www.codewars.com/kata/5735956413c2054a680009ec)\n - [#37: Unlock new weapon---RegExp Object](http://www.codewars.com/kata/5735e39313c205fe39001173)\n - [#38: Regular Expression--\"^\",\"$\", \".\" and test()](http://www.codewars.com/kata/573975d3ac3eec695b0013e0)\n - [#39: Regular Expression--\"?\", \"*\", \"+\" and \"{}\"](http://www.codewars.com/kata/573bca07dffc1aa693000139)\n - [#40: Regular Expression--\"|\", \"[]\" and \"()\"](http://www.codewars.com/kata/573d11c48b97c0ad970002d4)\n - [#41: Regular Expression--\"\\\"](http://www.codewars.com/kata/573e6831e3201f6a9b000971)\n - [#42: Regular Expression--(?:), (?=) and (?!)](http://www.codewars.com/kata/573fb9223f9793e485000453)\ndef shuffle_it(A,*T):\n\t\nUse Call-Based format\nANSWER:\n"}}