{"4760": {"code": ["\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n \\ \\\n\n\n\n\n\n\n \\\n\n\n\t\n\n\n\n    5   7   9\n    1   3   9\n\n\n    9   7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n\n\n\n\n\n    This is an", "\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n \\\n\n\n\nA binary tree is a binary search tree\n \\   \\\n\n\n  \n\nA binary tree is a binary search tree \\\n\t\n\n\n\n\n\n\n\na [binary tree] is a binary tree\n\n\n\n\n    1\n    5\n    3", "\n\n\nUse Call-Based format\n\n\n\n\n\n\n \\\n      3   2   5   7   9\n\n\n\n\n\n\n\n \\\n\n\n\nvalue = None\n\n\n\n\n\n\n\n\n\n\n\n\nA [binary tree](https://en.wikipedia.org/wiki/Binary_tree) is a binary tree\n\n\n\n\n", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n \\\n    1   2   3   5   7   9\n    5   7   9\n\n\n\n\n\n\n:\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1\n      3\n      7\n\n\n      5\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n \\\n      2   3   5\n      7   2\n\n\n   \n\n \\\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nA [binary tree] is a binary tree that is ordered in logarithmic time operation\n:\n\n\n\n\n    value = 1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n \\\n\n \\\n    1   2   3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA [binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree)\n\n\n\n", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n \\\n    1   5   3   7\n     / \\   \\\n    1   3   9\n\n\n\n,\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n    1\n\n    2\n    3\n\n\n   \n\n\n    In", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n \\\n\n\t\nUse Call-Based format\n\n \\\n\n\n\t\n\n\nA [binary tree](https://en.wikipedia.org/wiki/Binary_tree) is a binary tree\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n        [binary search tree](https", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    1   2   3\n   4   5   7\n    3   5\n     / \\   \\     1   6   7\n\n\n   \n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n      3\n      7\n\n    \n\n   ", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n \\\n\n\t\n\n\n    1   2   3   6   5   7   9\n\n\n\n:\n\t\n\n\n\n\n\n\n\n\n\n\n        1   2   3   4   5   6   7\n\n   \n\n\n\n    _,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n \\\n\n\t\nUse Call-Based format\n\nNOTE:\n\n    value\n\t\n \\\n\n\n\t\n\n\n\t\n\n\n\n\n\n\n\n\n\n    A binary tree is a binary tree with a binary search tree that is ordered\n\n   \n   \n\n\n    A [", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n  \\    2   3   9\n  \\\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\nA [binary tree](https://en.wikipedia.org/wiki/Binary_tree) is a binary tree\n\n\n\n\n\n    *", "\nUse Call-Based format\n\n\n\n\n\n \\\n \\\n\n\n\n#\n \\   \\\n\n\n\t\tvalue\n\t\t\n\n\n\n\n\n\n    1   2   3   5   7   9\n    9   3   5\n\n   \n\n:\n\n\n\n\nA binary tree is ordered\n\n\n\n\n\n    >>> tree =", "\n\n\n\nUse Call-Based format\nA [binary tree] is a binary tree\n\n\n\n \\\n\n\n\n\n \\\n\n\n\n\n\n    1   2   3   7\n    5   2   3   9\n    7   3   9\n\n\n\n\n:\n\n\n\n\n\n\n   \n\n\n\n\n\n    >>> value = 1", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n \\\n\n\n\t\nUse Call-Based format\n\n \\\n    1   3   5\n    2   3   9\n\n\n:\n\n\n\n\n:\n\n\n\n\n\nA binary tree is a binary search tree\n\n\n   \n\n    self.left = []", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n \\\n\n\n\nUse Call-Based format\n \\\n\n\n\t\n\n\n\n\t\n\n\n\n\n\n\n\nA [binary tree] is a binary tree.\n\nThe binary tree is a binary tree that is ordered\n\n     \n\n\n    >>> 1", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nA [binary tree](https://en.wikipedia.org/wiki/Binary_tree) is a binary tree\n\n\n\n\n\n\n\t\n\n:\nA binary tree\n\n\n\n\n\n\n\n\n     2   3   5   7   9\n\n\n    This is", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n    1   2   3   4   5   6   7   8   9\n\n\n\n\n\n \\\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n    1   2   3   7\n    5   9   3\n\n   \n\n\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    - The tree is in sorted order\n\n    - The tree is binary\n    - The tree is binary\n\n    - The tree is binary search\n\n   \n\n\n\n\n\n:\n:\n\n\n:\n\n\n\n\n\n\n\n\n\n    if left is None: left = [", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n \\\n\n\n\n\n\n \\\n    3   5\n    1   2\n     \\\n    5   7\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\nA [binary tree](https://en.wikipedia.org) is\n\n\n\n    The"], "prompt": "\nQUESTION:\nA [binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree) is a binary tree that is ordered. This means that if you were to convert the tree to an array using an in-order traversal, the array would be in sorted order. The benefit gained by this ordering is that when the tree is balanced, searching is a logarithmic time operation, since each node you look at that isn't the one you're searching for lets you discard half of the tree.\n\nIf you haven't worked with binary trees before or don't understand what a traversal is, you can learn more about that here: https://www.codewars.com/kata/binary-tree-traversal.\n\nIn this kata, you will write a function that will validate that a given binary tree is a binary search tree. The sort order is not predefined so it should work with either.\n\nThese are valid binary search trees:\n\n        5\n       / \\\n      2   7\n     / \\   \\\n    1   3   9\n\n\n      7\n     / \\\n    9   2\n\n\nwhile these are not:\n\n      1\n     / \\\n    2   3\n\n\n      5\n     / \\\n    2   9\n     \\\n      7\n\nThere are several different approaches you can take to solve this kata. If you're not as comfortable with recursion I'd recommend practicing that.\n\nNote: no test case tree will contain duplicate numbers.\ndef __init__(self,value,left=None,right=None):\n\t\nUse Call-Based format\nANSWER:\n"}}