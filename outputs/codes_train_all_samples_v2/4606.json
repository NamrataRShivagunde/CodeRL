{"4606": {"code": ["\n## Description\n\n## Examples\n\n## Description\n\n## Examples\n\n## Examples\n\n### Examples\n\n## Examples\n\n## Examples\n\n## Examples\n\n\n\n### Examples\n\n## Examples\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\",\",```\n\", \"\",\",\n\n\n\n\n\n\n\n\n\n\n\"] ==", "\n## Example\n\n## Test\n\n## Example 2\n\n## Example 3\n\n## Example 4\n\n## Example 5\n\n\n\n\n\n\n\n## Test 2\n\n\n\n\n\n\n\", \"\", \"MMMM\", \"MMMM\"]\n\n```\n\n\", \"\"]\n\",\n\n\n\n\n\n\n\n\n\n\n\n### Example 2\n\n\",", "\n## Description\n\n\n\n## Description\n\n## Example\n\n## Example\n\n## Examples\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n\n\n\n\n\n\n\", \"\", \"```\n\", \"\"]\n```\n\n\n\n\n\n\n\n\n### Example\n\n\n\n\n\n###\n\nI\n\n\", \"C\",", "\n## Effects\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n\n\n\n\n\n## Other\n\n\n\n\n\n\n\", \"\", \"MMMM\", \"MMMM\"]\n\n\n\", \"\"]\n\n\n\n\n\n\n## Validation\n\n##\n\n\n###\n\n\n\n\", \"MMMM", "\n## Description\n## Example\n\n## Example (1)\n\n## Example (2)\n\n## Example (3)\n\n## Example (4)\n\n\n\n\n\n\n\n\n\n\n\n\", \"\", \"MMMM\", \"```\n\n\", \"\"]\n\", \"\n\n\n\n\n###\n\n\n\n###\n\n\n\n\", \"MMMM\", \"", "\n## Description\n##\n\n\n## Suggestion:\n\n## A word\n\n## Bike\n\n## Roman numerals\n\n## Bike\n\n##\n\n\n\n\n\n##\n\n\n\n\n\n\", \"```\n\", \"\"]\n```\n\n\n\n\n\n\n\n\n## Example\n\n\n\n\n\n\n\n\"]\n```", "\n## Description\n## Example:\n\n## Examples\n\nI: 1\nI: 5\nI: 10\nI: 10\nI: 100\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Task\n\n\", \"```\n\n\", \"\"]\n\n\n\n\n\n\n\n\n\n## Example:\n\n\n\n\n\n\n\n\", \"D\",", "\n## Description\n## Examples\n\n### Examples\n\n[0, 3]\n\n\n\n\n## Description\n\n## Description\n\n## Description\n\n## Example:\n\n\n\n\n\n\n## Problem\n\n\", \"M\", \"M\"]\n\n\n\", \"\"]\n\n\n\n\n\n\n###\n\n###\n\n\n###\n\n\n\n\", \"M\", \"", "\n## Description\n\n## Examples\n\n## All\n\n\n## All\n\n## Example\n\n## All\n\n## All\n\n## Examples\n\n## All\n\n## All\n\n##\n\n\n\n\n\n\n\n\n\n\", \"\", \"```\n\", \"\"]\n\",\n\n\n\n\n\n\n\n\n###\n\n\n\n\n### Task\n\n\",", "\n## Example\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n### Example\n\n\n\n## Example\n\nI: 1\n\n## Examples\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\", \"\", \"```\n\", \"\"]\n\",\n\n\n\n\n\n\n\n###\n\n\n```\n\n\",", "\n## Description\n## Example\n\n## Example 2\n\n### Example 3\n\n## Example 4\n\n## Example 3\n\n## Examples 2\n\n\n\n\n\n\n\n\n\n\n## Example 3\n\n\n\", \"\", \"```\n\", \"\"]\n```\n\n\n\n\n\n\n\n\n## Example 3\n\n\n###\n\n\n\n\"] ==> [\"", "\n## About\n## Example\n\n## Run\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n\n\n## Example\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\n\n\", \"\", \"```\n\n\", \"\", \"\",\n\n\n\n\n\n\n\n\n\n```\n\n\", \"M\",", "\n## Example\n\n## Example\n\n## Examples\n\n## Examples\n\n## Example\n\n## Examples\n\n## Examples\n\n\n\n\n## Example\n\n\n\n\n\n\n\n## Example\n\n## Task\n\n\n\n\",```\n\n\", \"\"]\n\n\n\n\n\n\n\n\n\n###\n\n\n\n###\n\n\n\n\", \"MMMM\",", "\n## Note\n## The function is in the task\n##\n## Information\n\n### Example\n\n## Examples\n\n## Examples\n\nI: 3\n\nI: 4\n\n## Example\n\n\n\n\n\n\n\n##\n\n##\n\n\n\n\n\",\", \"```\n\n\", \"\",\",\n\n\n\n\n\n\n\n\n\n```\n\", \"", "\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Example\n\n## Examples\n\n\n\n\n\n\n\n## Examples\n\n\n\n\n\n\n## Example\n\n\n\", \"```\n\", \"\",\",\n\n\n\n\n## Result\n\n##\n\n\n\n\n\n\n\n```\n\n\",", "\n## Definition\n## Example\n\n## Example\n\n## Example\n\n## Examples\n\nI: 1\nI: 5\nI: 10\nI: 10\n\n###\n\n\n\n\n\n\n\n\n\n\", \"\", \"```\n\", \"\"]\n```\n\n\n\n\n\n\n\n## Example\n\n\n\n\n\n\n\", \"MMMM\", \"M", "\n\n\n### Step 1\n\nYou have a Roman numerals\n\n### All\n\nI: 3\n\nI: 4\n\nI: 5\n\nI: 5\n\nI: 4\n\n\n\n\n\n\n\n\n\n\n\n\n\", \"```\n\", \"\"]\n\",\n\n\n\n\n\n\n\n\n```\n\n\", \"M\",", "\n## Example\n\n## Example (no regex)\n\n## Example (no regex)\n\n## Example (no regex)\n\n## Examples\n\n\n\n\n## Example\n\n\n\n\n\n\n\n\n\n\", \"MMMM\", \"```\n\", \"\"]\n\",\n\n\n\n\n###\n\n## Test\n\n\n\n\n\n\n```\n\n\", \"", "\n\n## Description\n\n## Examples\n\n```\n\n\n\n\n### Example\n\n## Description\n\n## Example\n\n## Description\n\n## Examples\n\n\n\n\n\n\n###\n\n\n\n\n### Task\n\n\n\n\", \"```\n\", \"\"]\n\",\n\n\n\n\n\n\n## Example\n\n\n\n\n\n\nCMXCIX\",", "\n\n\n## Description\n\n## Example:\n\n### Example:\n\n# The function is not tested\n\n## Example:\n\n# Example\n\n### Honey\n\n\n\n\n\n\n\n\n\", \"\", \"```\n\n\", \"\"]\n```\n\n\n\n\n\n\n\n## Test\n\n\n\n\n\n\n\n\n\n\", \"M\","], "prompt": "\nQUESTION:\n## Task\n\nComplete the function that receives an array of strings (`arr`) as an argument and returns all the valid Roman numerals.\n\nBasic Roman numerals are denoted as:\n\n```\nI: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000\n```\n\nFor the purposes of this kata we will consider valid only the numbers in range 0 - 5000 (both exclusive) since numbers >= 5000 were written in a different way (you had to place a heavy bar over the numeral that meant it was multiplied with 1000).\n\nThere are other ways of tackling this problem but the easiest is probably writing a Regular Expression.\n\n### Let's break the problem down:\n\nTo match a set of characters `/[1-9]/`(single digits) you should take into consideration the Roman numbers `I, II, III, IV, V, VI, VII, VIII, IX`. This could be done by testing with `/IX|IV|V?I{0,3}/`. This part `/I{0,3}/` matches `I, II or III` but we have a `V` appearing 0 or 1 times because of the `?` so `/V?I{0,3}/` would match `I,II,III,V,VI,VII or VIII`. However there is one flaw with this. Do you see it? It is the fact that it would also match an empty string `\"\"` because of the {0,3}. In order to pass the tests you will have to **filter out the empty strings** as well. So the entire part matches `I to IX`(inclusive) but what about larger digits?\n\nUse the same logic for the digit in the tens place and the hundreds place. Be sure to wrap each part (units, tens, hundreds, thousands) in a pair of braces `(IX|IV|V?I{0,3})` and for the digit in the thousands place the logic is pretty straight forward, you just have to match `M` 0 to 4 times (since 5000 is not included). Wrap everything up with `^` and `$` to make sure you match the entire string (^ matches from the beginning of the string, while $ denotes the end, meaning there is nothing after that sign.\n\n## Examples\n\n```\n[\"I\", \"IIV\", \"IVI\", \"IX\", \"XII\", \"MCD\"] ==> [\"I\", \"IX\", \"XII\", \"MCD\"]\n\n[\"MMMMCMXCIX\", \"MMDCXLIV\", \"MMCIX\", \"CLD\", \"LCD\"]) ==> [\"MMMMCMXCIX\", \"MMDCXLIV\", \"MMCIX\"]\n```\n\nGood luck!\ndef valid_romans(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}