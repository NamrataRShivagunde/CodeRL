{"4019": {"code": ["\n\n\n\n\n\n\n~~~if:java\n\n~~~\n\njava\n\n\n\n\n\n  ==> return (5)\n\n\n\n\n\n___\n\n\n~~~\n\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor is found.\n~~~\n\n~~~if:java\n\n\njava\nJava", "\n\n\n\n\n\n\n~~~\n\n\n\njava\n\n\n\n\njava\n\n\n~~~if:java\n___\n\n\n\n\n\n\n___\n\n\n\n~~~\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor **will** be found.\n~~~\n\n\n\n\n\njava\nJava's", "\n\n\n\n\n\n\n~~~if:java\n\n~~~if:java\n~~~if:java\n\n~~~if:java\n\n\n\n\n~~~if:java\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n~~~if:java\n\n\n~~~if:java\njava's default return statement can be any\n~~~", "\n\n\n\n\n\n\n\n~~~if:java\n\n\n\n\n~~~if:java\n\njava\n\n\n\n\n\n\n\n\n___\n\n~~~if:java\nJava's default return statement can be any `int`\n~~~\n\n\n\njava\njava's default return statement can be any `int`\n~~~\n\n\njava\nJava's", "\n\n~~~if:java\n\n\n\n\n\n\n\n\n~~~if:java\n\n\n\n\njava\n\n~~~if:java\n\n~~~if:java\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n~~~if:java\n\n~~~if:java\n\n~~~if:java\n\njava\n\n~~~", "\n\n\n\n\n\n\n\n~~~if:java\n\n~~~\n\n~~~if:java\n\n~~~if:java\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~if:java\nJava's default return statement can be any `int`\n\n\n\n\n\n~~~if:java\nJava's default return statement can be any\njava", "\n\n\n\n\n\n\n\n\n\njava\n\n~~~if:java\n\n\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor will be found.\n~~~if:java\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\njava\n\n\n\n\njava\n\n~~~if:java\n\n", "\n\n\n\n\n\n~~~if:java\n\n\n\n\n\njava\n\n~~~if:java\n\n~~~if:java\n\n\n\n\n\n\n\n\n\n___\n\n~~~if:java\n\n~~~if:java\nJava's default return statement can be any `int`\n\n\n\n\n\n\n~~~java\n\n~~~if:", "\n~~~if:java\n\n\n\n\n\n\n\n\n\n~~~if:java\n\n\n~~~if:java\n\njava\n\n\n\n\n\n\n\n\n\n___\n\n\n~~~if:java\n\n~~~\njava\n~~~if:java\n\n~~~if:java\nJava's default return statement can be any `int`\n\njava", "\n~~~\n\n\n\n~~~if:java\n\n\n\n\n\n\n\n~~~if:java\n\n~~~if:java\n\n~~~if:java\n`\n\n\n\n\njava\n\n\n\n\n\n\n___\n\n\n\n\n\n\n\n~~~if:java\n\n~~~if:java\n\n~~~if:java\n\njava", "\n\n\n\n\n\n\n\n~~~if:java\n\n\n\njava\n\n~~~if:java\njava's default return statement can be any `int`\n~~~if:java\nif:java\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~if:java\n\n\njava\n\n~~~if:java\n\njava\n#", "\n\n\n\n\n\n\n~~~if:java\n\n\n\njava\n\n\n\n\njava\n\n___\n\n\n\n\n\n___\n\n# Explanation:\n\n**_divisor_** is divisible by divisor**, **_bound_** is less than or equal to bound**, \n\n**_divisor_** is\n\n\n\n\n\n\njava", "\n\n\n\n\n\n\n~~~if:java\n\n\n\n\n~~~if:java\n\n~~~if:java\n\njava\n\n~~~if:java\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~if:java\n\njava\n\n~~~if:java\n\n~~~if:java\n\n\njava\n\n~~~if", "\n\n\n\n\n\n\n~~~if:java\n~~~\n\n~~~if:java\n\n\njava\n\n\n\n\n\n\n\n\n\n\n\n___\n\n~~~if:java\n\n~~~if:java\nJava's default return statement can be any `int`.\n~~~\n\n\n\n\n\n\n\n\n\n\n~~~if:java", "\n~~~\n\n\n\n\n\n\n\n\n\n\njava\n\n\n~~~\n\n~~~\n\n~~~if:java\n\n~~~\n\n~~~if:java\n\n\n\n\n\n\n\n___\n\n___\n\n\n~~~\njava\n\n\n~~~\n\n~~~if:java\n\njava\n\n~~~if:java\nJava", "\n\n\n\n~~~if:java\n\n\n\n\n~~~if:java\n\n\n\n~~~if:java\n\n~~~if:java\n\n\njava\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\njava\n\n~~~if:java\n\n~~~if:java\n\n~~~if:java\n\n\njava\n", "\n\n\n\n\n\n\n\n\n~~~if:java\n\n~~~\n\n\n\njava\n\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n~~~if:java\n~~~\n\n~~~if:java\n\n~~~if:java\n\n~~~\n\n\n~~~\n\n\n\n\njava\n\n~~~if:java\n", "\n~~~if:java\n_\n\n\n\n\n\n\n~~~if:java\n\n\njava\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~if:java\n\n~~~if:java\nJava's default return statement can be any `int`\n~~~\n\n~~~if:java\n\n\n\n\njava\n\n~~~if:", "\n\n\n\n\n\n\n\n\n\n~~~\n\njava\n\n\n\n\n\n\n\n\n\n\n___\n\n#\n\n\n~~~if:java\njava's default return statement can be any `int`, a divisor **will** be found.\n~~~\n\n~~~if:java\n\n\njava's default return statement can be any `int`\n\njava", "\n\n\n\n\n\n\n\n~~~if:java\n\n\n\njava\n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor is found.\n~~~\n\n~~~if:java\n\n\njava\n\n\n\njava\njava's default return statement can be any `"], "prompt": "\nQUESTION:\n# Task\n\n**_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That , \n\n# Conditions :\n\n* **_N_**  is *divisible by divisor*\n\n* **_N_**  is *less than or equal to bound* \n\n* **_N_**  is *greater than 0*.\n___\n\n# Notes \n\n* The **_parameters (divisor, bound)_** passed to the function are *only positive values* .\n* *It's guaranteed that* a **divisor is Found** .\n___\n# Input >> Output Examples \n\n```\nmaxMultiple (2,7) ==> return (6)\n```\n## Explanation: \n\n**_(6)_** is divisible by **_(2)_** , **_(6)_** is less than or equal to bound **_(7)_** , and **_(6)_** is > 0 .\n___\n```\nmaxMultiple (10,50)  ==> return (50)\n```\n## Explanation:\n\n**_(50)_** *is divisible by* **_(10)_** , **_(50)_** is less than or equal to bound **_(50)_** , and **_(50)_** is > 0 .*\n___\n```\nmaxMultiple (37,200) ==> return (185)\n```\n## Explanation:\n\n**_(185)_** is divisible by **_(37)_** , **_(185)_** is less than or equal to bound **_(200)_** , and **_(185)_** is > 0 .\n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor **will** be found.\n~~~\n\n~~~if:nasm\n## NASM-specific notes\n\nThe function declaration is `int max_multiple(int divisor, int bound)` where the first argument is the divisor and the second one is the bound.\n~~~\ndef max_multiple(divisor, bound):\n\t\nUse Call-Based format\nANSWER:\n"}}