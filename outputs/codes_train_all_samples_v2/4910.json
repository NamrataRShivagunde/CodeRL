{"4910": {"code": ["\n# KATA# Python Note\n\n# KATA# Python Note\n#\n# Python Note\n#\n\n#\n\n# Python Note\n\n\n #\n\n#\n\n\n\n#\n \n\n\t\n\t\n\n#\n\n#### Python Notes\n\n\n\n\n\n\n\n\n\n   \n\n#### Python Notes\n\n\n\n\n\n    #", "\n\t\n#### Python Note\n\n#\n\n    Use Call-Based format\n\n    [ SIGN ] [ NUMERATOR / DENOMINATOR ]\n\n   \n\n\n\n\n\n\n#\n\n\n#\n\n\n\n\t\n\n\n#\n\n\n\n\n\n#\n\n\n   \n\n#### Python Note\n\n \n\n\n    # This", "\n# Example\n\n# Python Note\n\n  <---\n\n\n\n#\n\n#\n\n\n# Python Note\n#\n* The fractions are stored as integers.\n*\n\n\n\n\n#\n\n\n\t\n\n#\n\n#\n\n\n\n\n\n\n\n#\n\n####\n\n   \n    \n\n    # The second argument is a `", "\n# Python Notes\n\n# Kata\n\n  # - python\n\n  # - python\n\n  # - python\n\n   \n\n\n\n\n# Python Notes\n\n#\n\n\n\n\n\n# Python Notes\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n#\n\n# Python Notes\n*\n\n\n    Precision:", "\n\n# Python Notes\n\n# Example\n\n[ SIGN ] [ WHOLES ] [ DENOMINATOR ] [ DIV ] [ DIV ]\n#\n\n\n#\n\n#\n#\n\n#\n\n\n\n#\n\n\n\t\n:\n\n   \n\n\n\n\n\n\n\n#\n\n\n#\n\n#\n\n\n\n### Example\n#", "\n\t\n# Python Note\n*\n\n\n# Python Note\n\n# Python Note\n* Use Call-Based format\n*\n\n#### Python Notes\n# Python Note\n\n\n\n#\n\n# Python Notes\n\n\n\n\n\n\n\n\n\n\n#\n\n###\n\n# No docstring\n\n#\n\n\n# Python Notes\n\n\n\n# KATA:", "\nUse Call-Based format\n\n## Python Note\n\n#\n\n## Python Note\n\n   \n\n\n#\n\n#\n#\n\n#\n\n\n\t\n\n\n##\n\n\n\n\n\t\n\n## Python Note\n\n\n\n\n\n\n#\n\n\n\n\n\n#\n\n#\n\n## Python Note\n#\n#", "\n#### Python Notes\n\n# Kata\n\n    Use Call-Based format\n\n#### Python Notes\n*\n\n#\n\n#\n\n#\n#\n\n#\n\n\n\t\n\n#\n\n\n\n\t\n\n\n#\n\n\n\n\n\n\n\n\n\n\n#\n\n# Python Note\n\n\n#\n# ---\n#\n# See", "\n#\n ####\n#\n\n\n\nif __class__ == 'Fraction':\n\n    return self.to_int()\n\n#\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n#\n\n\t\n\t\n\n\n#\n\n   \n\n\n\n\n#\n\n\n#\n\n#\n#\n\n#\n\n    _, _", "\n\n# KATA# Python Notes\n\n# Kata# Python Notes\n\n# Python Note\n\n# KATA# Python Notes\n#\n\n\n\n#\n\nNote:\n\n\n#\n\n#\n\n#\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n#\n\n#### Python Notes\n\n#\n\n\n\n    _, _", "\n\n    return self\n\n\n\n\n\n\n\n\n\n\n\n#### Description\n# The signature of the method for constructing an instance of `Fraction`\n#\n\n#\n\n#\n\n\n\n#\n\n\n\n\t\n\n\n\n\n\n\n#\n\n\n#\n\nNOTE:\n\n   \n\n# Python Notes\n\n  \n\n    1/", "\n# Python Note\n##\n# Python Notes\n#\n\n#\n\n# Python Note\n#\n\n   \n\n\n#\n\n#\n\nNote:\n\n  \n\n#\n\n\n\n#\n\n\n\n\n\t\n\n#### Python Note\n\n\n\n\n\n#\n\n\n\n#\n\n#\n\n#\n\n\n\n    from kata", "\n\n\n#### Python Note\n\n#\n\nUsage-Based format\n\n# Use Call-Based format\n#\n\nUse Call-Based format\n\n# Python Note\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n#\n\n#\n\n#\n\n#\n\n#\n# KATA:", "\n# Kata\n# Python Note\n\n    [ SIGN ] [ NUMERATOR ] [ DENOMINATOR ] [ SIGN ] [ SIGN ]\n\n#### Python Notes\n#\n\n\n\n#\n\n\n\n\n\n#\n\n\n\n\n\n#\n\n   \n\n\n\n\n\n\n\n\n   \n\n\n#### Example\n\n\n\n    from k", "\n# Re-Use Call-Based format\n### Python Notes\n\n# Python Notes\n\n\n\nUse Call-Based format\n\n\n\n# Python Notes\n\n*\n*\n*\n\n# Python Notes\n\n\n\t\n\n\n# Python Notes\n\n\n\n\n#\n\n\n\n\n#### Python Notes\n\n\n#\n\n    [ SIGN ] [ WHO", "\n\t\treturn '1'\n\n\t\n# Python Notes\n\n   \n\n\n\n#\n\n  \n\n#### Python Notes\n\n   \n\n\t\n\n   \n\n \n\t\n\t\n\n#### Python Notes\n\n\n\t\n\t\n#\n\n\n\n#\n\n\n#### Python Note\n\n\n\n   \n\n\n\n#!/", "\n# End Python Note\n\n# Python Note\n\n    # Fractions\n    \n       \n\n\n#\n\n#\n\n#\n#\n\n#\n\n   \n\n\n\n# Python Notes\n\n\n\n\n\n\n\n\n\n\n#### Python Note\n\nNote:\n\n\n\n\n\nto_float:\n\n##\n\n# ######", "\n    ## Python Note\n    ## Python Note\n\n\n# Python Note\n\n  \n\n# Python Note\n\n\n# Python Note\n\n   \n\n# Python Notes\n\n\n\n# Python Notes\n\n\n\n\n\n\n# Python Notes\n\n   \n\n\n\n\n\n\n\n\n\n\nto_string\n\n\n\n\n#### Conversion Methods\n#", "\n# KATA#\n#\n#\n\nUsage-Based format\n# KATA#\n\nUse Call-Based format\n# KATA#\n\n# Python Notes\n#\n\n\n\n#\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n#\n\n# Python Notes\n*\n\n    _,", "\n\n# Python Note\n#\n# Python Note\n#\n#\n\n#\n\n#\n\nNote:\n\n    '''\n    1.1\n\n   #\n\n\n\n#\n\n# Python Notes\n*\n\n\t\n\t#\n\n#\n\n\n\n\n\n\n#\n\n#\n\n   \n\n#\n\n\n#\n#\n# No"], "prompt": "\nQUESTION:\nThis kata is part one of precise fractions series (see pt. 2: http://www.codewars.com/kata/precise-fractions-pt-2-conversion).\n\nWhen dealing with fractional values, there's always a problem with the precision of arithmetical operations. So lets fix it!\n\nYour task is to implement class ```Fraction``` that takes care of simple fraction arithmetics. Requirements:\n\n* class must have two-parameter constructor `Fraction(numerator, denominator)`; passed values will be non-zero integers, and may be positive or negative.\n* two conversion methods must be supported:\n * `toDecimal()` returns decimal representation of fraction\n * `toString()` returns string with fractional representation of stored value in format:\n\n    [ SIGN ] [ WHOLES ] [ NUMERATOR / DENOMINATOR ]\n   * **Note**: each part is returned only if it is available and non-zero, with the only possible space character going between WHOLES and fraction. Examples: '-1/2', '3', '-5 3/4'\n    \n* The fractional part must always be normalized (ie. the numerator and denominators must not have any common divisors).\n* Four operations need to be implemented: `add`, `subtract`, `multiply` and `divide`. Each of them may take integers as well as another `Fraction` instance as an argument, and must return a new `Fraction` instance.\n* Instances must be immutable, hence none of the operations may modify either of the objects it is called upon, nor the passed argument.\n \n #### Python Notes\n* If one integer is passed into the initialiser, then the fraction should be assumed to represent an integer not a fraction.\n* You must implement the standard operator overrides `__add__`, `__sub__`, `__mul__`, `__div__`, in each case you should support `other` being an `int` or another instance of `Fraction`.\n* Implement `__str__` and `to_decimal` in place of `toString` and `toDecimal` as described above.\ndef to_string(self):\n\t\nUse Call-Based format\nANSWER:\n"}}