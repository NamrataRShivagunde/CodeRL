{"4810": {"code": ["\n\n\n# Example\n\nA                  A                  A                    A              A\nB                   B                  B                  B\nB   C                   C                   C\n\n\n\n\n\n\n\n\n\n\n\n\n# Solver\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\nA                    A                B                  B                  B\n\n\t\n\n\n\n# Example", "\n\n\n\n\n# Example\n\n# Idea\n\n      A    B   C              A    B   C\n      B   C\n\n___\n\n\n\n\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Idea\n\n\n\n    # Example\n\n# Example\n\n# Example\n\n\n\n\n", "\n\n\n\n\n\n\n# Call-Based format\n\n# Idea\n\n              |\\                   |\\                |\\                \\                |  \\\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n\n# Idea\n\n\n# Task\n\n\n\n\n\n\n## Examples\n\n# Tasks\n", "\n\n# Reference\n\n# Example\n\n# Example\n\nA    B    C\n\n\n\n\n\n\n\n\n\n\n# Example\n\nA\n\nB\n\n\n\n\n\n\n\n\n\n# Results\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n# Example\n\n\n\n\n# Example 1\n\n", "\n\n Call-Based format\n\n___\n\n\n\n\n\n\n# Regression\n\n# Idea\n\nA                 A                 A               A  A    A  A  A  A\n__\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n\n# This\n\n\n\n\n\n\"\"\"\n\ndef _get_all_", "\n\n# Reports\n\n# Reports\n\n---\n\n\n\n\n\n\n\n\n\n\n\n# Reports\n\n# Tester\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Dumb\n\n# Hi\n\n   \n\n\n\n\n\"\"\"\n\n\n# Implementation:\n\n# Example 1", "\n\n# Example\n\n# Example\n\nA   A   A   A   A   A\n\n___\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Functional\n\n# Functional\n\ndef make_spanning_tree(edges, t):\n\n\n\n\n\n\n\n\n#", "\n\n\n\n\n\n# Example\n\n# Idea\n\n# I18n\n\n# Idea\n\n# I18n\n\n# I18n\n\n \\\n\n\\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n# Task\n\n# Task\n\n\n\n\n\n# Task\n\n# References\n\n", "\n\n\n\n\n# Summary\n\n# Example\n\nA                    A                    A                    A\nB                   A                  A\nB                   A\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n# Functional\n\n    Make a spanning tree\n\n___\n\n\n \\\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n# Example\n\n# Idea\n\nA                A                 A                  A\nB                 A                 A                A\nB                    A                  A\nB                   A\nB                   A\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n## Example\n\n\n\n\n\n\n\"\"\"\n\n#", "\n\n\n# Example\n\nA            A  A  B\nB  C\n\n\n\n\n\n\n\n\n# Example\n\n# Idea\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Idea\n\nA    A      A     A   A       A\n\n\n\n\n\n\n\n# Re", "\n# Example\n\n# Example\n\nA              B          C\n\n\n\n\n\n\n\n\n# Call\n\n# Call-Based format\n\nA              B          C\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Idea\n\n\n\n\n\n\n# Example\n\n# Idea\n\n\n\n#", "\n\n\n\n\n# Example\n\nA   B   B   C   C   D   D   D   D   D\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note:\n\n# Idea\n\nB   C       A\nB    C                  C  C\n \n\n\n\n\n\n\n\n\n# Example 2\n", "\n\n# Call-Based format\n\n\n\n\n# Call-Based format\n\n# Call-Based format\n\nA                    A                  A                    A                A  A  B  B  B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n# Example\n\n\n\n## Example:\n\n", "\n\n\n\n\n\n# Example\n\n# Idea\n\nA                    A                   A                    A                   A                    A\nB                    A                  A\nB\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Test\n\n\n# Example\n\n# Idea\n\nA                    A                   A\n\\ \\\n\n\n#", "\n# Call-Based format\n\n\n\n\n\n\n# Task\n\n   \n\n# Note\n\n\n\n\n# Notes\n\n# Function based format\n\n# Task\n\n   \n\n\n\n\n\n\n# Idea\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n   \n\n\n# Task\n\n   \n\n    \"\"\"\n\n", "\n\n\n# Call-Based format\n\n__min__max__min__min__max__max__max__max__max\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n# Idea\n\n\n\n\n\n\n\n\n# Task\n\n# Idea\n\n   \n\n\n# Task\n\n   \n\n\n\n# Task\n\n# Note", "\n\n# Reports\n\n__       __        __            __\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Idea\n\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\n\n___\n\n# Example\n\n# Idea\n\n# Functional\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n    # TODO: add a", "\n\n\n\n\n# Example\n\nA    B                  B                B                   B\nB     C\nB\n\n\n\n\n\n\n# Hoist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\nA    B                 B                  B                  B                 B\n\n\n\n\n\n\n\"\"\"\n\nreturn [2", "\n# Example\n\n# Ditto\n\nAB\nC\n\n\n\n\n# Example\n\nA                    A                    A                    A\nB                    B                  B\nB                  B                  B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Idea\n\n\n\n\n\n\n\n\"\"\"\n\nreturn make_spanning"], "prompt": "\nQUESTION:\n# Idea\n\nIn the world of graphs exists a structure called \"spanning tree\". It is unique because it's created not on its own, but based on other graphs. To make a spanning tree out of a given graph you should remove all the edges which create cycles, for example:\n```\nThis can become      this      or      this        or       this\n\n A                    A                  A                   A\n |\\                   |                   \\                  |\\\n | \\       ==>        |                    \\                 | \\\n |__\\                 |__                 __\\                |  \\\nB   C                 B  C               B  C                B  C\n```\nEach *edge* (line between 2 *vertices*, i.e. points) has a weight, based on which you can build minimum and maximum spanning trees (sum of weights of vertices in the resulting tree is minimal/maximal possible).  \n[Wikipedia article](https://en.wikipedia.org/wiki/Spanning_tree) on spanning trees, in case you need it.\n\n___\n\n# Task\n\nYou will receive an array like this: `[[\"AB\", 2], [\"BC\", 4], [\"AC\", 1]]` which includes all edges of an arbitrary graph and a string `\"min\"`/`\"max\"`. Based on them you should get and return a new array which includes only those edges which form a minimum/maximum spanning trees.\n```python\nedges = [(\"AB\", 2), (\"BC\", 4), (\"AC\", 1)]\n\nmake_spanning_tree(edges, \"min\")    ==>    [(\"AB\", 2), (\"AC\", 1)]\nmake_spanning_tree(edges, \"max\")    ==>    [(\"AB\", 2), (\"BC\", 4)]\n```\n\n___\n\n# Notes\n\n* All vertices will be connected with each other\n* You may receive cycles, for example - `[\"AA\", n]`\n* The subject of the test are these 3 values: number of vertices included, total weight, number of edges, but **you should not return them**, there's a special function which will analyze your output instead\ndef make_spanning_tree(edges, t):\n\t\nUse Call-Based format\nANSWER:\n"}}