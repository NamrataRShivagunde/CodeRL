{"3373": {"code": ["```\n\n### Example\n\n### Matrix multiplication\n\n## Example\n\nA matrix multiply with B, C\n\n### Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  ):\n  \n  \n```\n\n\n~~~endif\n\n## Example\n\n\n\n\n\ndef\n   \n    \"\"\"\n\n\n## Example\n, b):", "```\n\n### Example\n\n### Example\n\n### Example\n\n## Example\n\nA     A\n## Example\n\n## Example\n\n\n\n\n\n\n\n\n\n\n### Example\n\n## Example\n\n\n\n, b):\n\n, b):\n\n\n\n\n\n\n\n\n\n#endif\n\n\n\n, b) -> np.array:\n", "```\n\n## Example\n```\n# The algorithm for multiplying two square matrices\n\n\n\n~endif\n\n\n\n\n\n\n# Example\n\n\n\n, b)\n\n# Example\n#\n\n\n\n\n\n\n~endif\n\n## Example\n\n# Example\n```\n\n\ndef\n\n, b):\n    \"\"\"\n    Matrix multiplication", "```\n\n\n## Example\n\nA matrix multiplication\n```\nA matrix multiplication\nA matrix_mult(a, b, c)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n,b,c):\n\"\"\"\n\n\n\n\n\n\n~endif\n\n\n\n\n# Example\n\n\n\n,b,c):\n# Example 1", "```\n\n## Example\n```\n\n\n\n\n\n\n\n\n\n\nA         B         C\n|3 2|     |1 1|     |11 4|     |11 8|\n\n\n~~~endif\n\n, b):\n\n\n\n\n\n\n~endif\n\n\n\ndef\n\n, b):\n    \"\"\"\n    Multiply two", "```\n\n## Example:\n\n~~~if:c\n\n~~~else:c\n\n\n\n\n\n\n\n\n\n\n  A   B  C\n\n\n\n, b):\n \n\n\n\n\n\n~~~endif\n\n\n\n\n### Example\n\n## Example\n```\n\n\ndef\n\n, b, c, d):\n", "```\n\nif:c\n1 x 1 =  2 \n```\n\n~~~else:c\n\n\n\n\n\n\n\n\n\n```\n\n\n\n,b):\n#!python\n\n\n\n\n\n~~~endif\n\n\n\n\n# Example\n~~~\n\n\n# Example\n\n\n, b, c, d, e, f", "```\n\n~~~end\n\n### Example\n\n### Example\n\nA matrix multiplication\n\n### Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n , b):\n  return a * b\n\n### End\n\n\n\n\n\n\n\n\n\n~~~end\n\n\n\ndef\n\n, b):\n  a[0][0", "```\n```\n\n## Example\n\n\n\n\n```\n\n\n\n\n\n\n\n\n|A|B|C\n|A|B|C\n|A|C =  |2|\n|1|     |3|     |11|\n```\n\ndef:\n\n\n\n\n\n\n\ndef\n\n, b):\n    \"\"\"\n", "\n```\n\n### Example\n\n## Example\n\nAx  B  C\n\n## Example\n\nAx  B\n```\n\n\n\n\n\n\n\n\n\n\n\n\n, b)\n\n# Example\n\n\n\n\n~~~end:c\n\n\n\n\n\n\n# Example\nC =\n\n#endif\n\n, b):\n", "```\n\n## Example\n```\n\n\n\n\n\n\n\n\n\n\n\nA[0][0] = B[0][0] = A[1][0] = B[1][1] = A[1][1]\n\n\n\n):\n\n\n\n\n\n~end\n\n\n\n\n\ndef\n\n):\n  a = array(a", "```\n```\n\n### Example\n\nA matrix multiplication\n\n~~~if:b\n```\n\n## Example\n\n```\n\n\n\n\n\n\n\n\n\n\n\n,b):\n## Example\n```\n\n\n\n\n\n\n~~~endif\n\n### Example\n\n\n\n\ndef\n\n):\n  # TODO: check the dimensions", "\n```\n\n~~~else:c\nx\n```\n\n\n\n\n\n\n\n\n\n### Example\nA[n] = a[n] * b\n```\n\n### Example\n\n\n):\n\n, b):\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n# Example\n#\n\n, b, c):\nreturn", "```\n\nif:c\nA     B     C\n~~~else:c\n\n### Example\n\nA     B     C\n\n\nif:c\n\n~else:c\n~else\n\n\n\n\n\n =\n):\n, b):\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\ndef\n\n, b):\n  return a", "```\n\n## Example\n~~~if:c\n\n\n\n\n\n\n\n\n\n\n   \nA[n] * B[n] = A[n][n] * B[n][n]\n```\n\n\n\n## Example\n\n,):\n\n\n\n\n\n\n```\n\n\n\ndef\n\n, b):\n  # Create a", "\n~~~endif\n\n### Example\n#\n\n\n\n\n\n\n\n\n\n## Example\n```\nA = 1x2\nB = 1x2\nC = 1x2\n\n### Example\n\n =\n):\n, b):\n#\n\n\n\n~~~endif\n\n\n\n\n\n\ndef\n\n,b,c):\nreturn a", "```\n\n### Example:\n\n## Example:\n\nA    B     C\n\n### Example:\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\n\n, b)\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n## Example\n\nA         B         C\n\n## Example\n\n\n\n, b", "\n```\n\n\n\n\n\n\n## Example\n```\nA = matrix_mult(a, b)\nC = matrix_mult(a, b)\n```\n\n## Example\n```\n\n\n\n\n\n\n\n):\n\n:\n\n\n\n\n\n\n~~~endif\n\n\n\ndef\n\n):\n  a = np.array", "```\n\n~~~end\n\n### Example\n\n\n\n\n\n\n\n\n\n\n\n\nA  B  c\n\n\n, b):\n\n\n1\nA  B  c\n\n~~~end\n\n\n~~~end\n\n## Example\n\n\n\n\n\n\n\n\n# Example\n#\nA = [1,2,3]\n,", "\n```\n\n```\n\n### Example\n\n### A matrix multiplication\n```\n\n`\n\n```\n\n\n\n\n~else:c\n\n## Example\n\n\n\n\n\n\n\n\n, b)\n# Example\n\n\n\n\n\n\n~endif\n\n\n\n#endif\n\n\n\n, b):\n    return a * b"], "prompt": "\nQUESTION:\nWrite a function that accepts two square (`NxN`) matrices (two dimensional arrays), and returns the product of the two. Only square matrices will be given.\n\nHow to multiply two square matrices: \n\nWe are given two matrices, A and B, of size 2x2 (note: tests are not limited to 2x2). Matrix C, the solution, will be equal to the product of A and B. To fill in cell `[0][0]` of matrix C, you need to compute: `A[0][0] * B[0][0] + A[0][1] * B[1][0]`.\n\nMore general: To fill in cell `[n][m]` of matrix C, you need to first multiply the elements in the nth row of matrix A by the elements in the mth column of matrix B, then take the sum of all those products. This will give you the value for cell `[m][n]` in matrix C. \n\n## Example\n```\n  A         B          C\n|1 2|  x  |3 2|  =  | 5 4|\n|3 2|     |1 1|     |11 8|\n```\n\nDetailed calculation:\n```\nC[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0] = 1*3 + 2*1 =  5\nC[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1] = 1*2 + 2*1 =  4\nC[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0] = 3*3 + 2*1 = 11\nC[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1] = 3*2 + 2*1 =  8\n```\nLink to Wikipedia explaining matrix multiplication (look at the square matrix example): \nhttp://en.wikipedia.org/wiki/Matrix_multiplication\n\nA more visual explanation of matrix multiplication: http://matrixmultiplication.xyz\n\n~~~if:c\n**Note:** In **C**, the dimensions of both square matrices `n` will be passed into your function.  However, since the dimensions of your returned \"matrix\" is expected to be the same as that of the inputs, you will not need to keep track of the dimensions of your matrix in another variable.\n~~~\ndef matrix_mult(a, b):\n\t\nUse Call-Based format\nANSWER:\n"}}