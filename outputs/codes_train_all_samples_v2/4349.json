{"4349": {"code": ["\n\n\n\n\n\n\n\n\n\nHero's method\n\nHero's method\n\nHero's method\n\nHero's method\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHero's method:\n\n\t\tAlexandria's method\n\t\n\n\n\n\n\n\n#\n\n#\n", "\n\n\nint_rac(2,1):\n\n\n\n\n\n\n\n\n\n\nUse JavaScript, CoffeeScript, Typescript:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nThe first algorithm used for approximating the square root of a number `n`\n\n#", "\n\n\nint_rac(356243,356243):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n```\n\nHero's method:\n\nWe approximate the square root of a number `n`,", "\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\n\n\n\n\n\nThe function is called by the first iteration of the algorithm\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n1:\n\n1 is a number\n1 is\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Javascript:\n\n#\n\n\n\n\n\n\n\n\n\n\n\nint_rac(356243,e)\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n#\n\n#\n\n\n## Examples:\n#\n#", "\n#\n\n\n\n\n\n\n\n\n\n\n\n\nThe function is called for each iteration of the algorithm.\n\nThe function is called for each iteration of the algorithm.\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n#\n\nint_rac(", "\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(25, guess)\n\nint_rac(25, guess)\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(n, guess)\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n#\n\n\n#\n# The first", "\n\n\n\n\n\n\n#\n\nNote:\n\n\n\n\nint_rac(n, guess)\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nThe first algorithm used for approximating the square root of a number `n` and `guess`.\n\n\n\n\n\n\n\n\n\n\n#\n\n#\n", "\n\n\n\n\n\n\n\n\n\nNote:\n\nNote:\n\n\n\n\n\n#\n\nNOTE:\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(125348981764,356243):\n\n\n\n\n\n\n\n\n\n\n\n#\n\nreturn int_rac(", "\n\n\n\n\nNote:\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(356243,3564053): follows a progression of [3564053,3544046,3564053]\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(1, 1):\n\nint_rac(0, 1)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nThe kata algorithm is used by the first algorithm. \n\n\n\n\n\n", "\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDo not use the following format:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(15,1):\n\n\n\n\n\n\n\n\nint_rac(125348,1):\n\n\n\n\n#\n#\n#\n", "\n\n## Example\n\n\n\n\n\n\n\n\n\n\nThe kata algorithm is using the following:\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(n, guess):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\nint_rac(n, guess):\n\t\n\n\n#\n\n", "\n\n\n\n\n\n\n\n\n\n\t\n\n\nNote:\n\n\n\n\n\nThe first algorithm used for approximating the square root of a number `n` and an error `e` is\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(n, guess)\n\n\n\n#\n\n#\n# The", "\n\n\n\n\n\n\n\n\n\n\n\n\nNo examples:\n\n```\n\n\n\n\n\n\n\n\n\n```\n\nThe method of Hero's method is used for approximating the square root of a number `n`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t#\n\n\n\n\t#\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\nThe first algorithm uses Call-Based format\n\n```\n\ngreat-function:\n\nint_rac(n, guess):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nHero's method:\n\n\t\n\n\n#\n", "\n```\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(5,e):\n\n\t\t# we're finished\n\t\t#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n#\n\n\n#\n\n# The", "\n\n\n\n\n\n\n\n\nNote:\n\nThe function is not used directly.\n\nNote:\n\n\n\n\n\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n###\n\n#\n\n\n#\n\nHero's method\n#\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse JavaScript:\n\nUse JavaScript:\n\nUse JavaScript:\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n#\n#\n\n# The first", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nHero's method:\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nint_rac(125348981764,356243): follows a progression of [356243,354,354046]\n\n\n\n\n\n\n"], "prompt": "\nQUESTION:\nOne of the first algorithm used for approximating the integer square root of a positive integer `n` is known as \"Hero's method\", \nnamed after the first-century Greek mathematician Hero of Alexandria who gave the first description\nof the method. Hero's method can be obtained from Newton's method which came 16 centuries after. \n\nWe approximate the square root of a number `n` by taking an initial guess `x`, an error `e` and repeatedly calculating a new approximate *integer* value `x` using: `(x + n / x) / 2`; we are finished when the previous `x` and the `new x` have an absolute difference less than `e`.\n\nWe supply to a function (int_rac) a number `n` (positive integer) and a parameter `guess` (positive integer) which will be our initial `x`. For this kata the parameter 'e' is set to `1`.\n\nHero's algorithm is not always going to come to an exactly correct result! For instance: if n = 25 we get 5 but for n = 26 we also get 5. Nevertheless `5` is the *integer* square root of `26`.\n\nThe kata is to return the count of the progression of integer approximations that the algorithm makes.\n\nReference:\n\n\n\nSome examples:\n```\nint_rac(25,1): follows a progression of [1,13,7,5] so our function should return 4.\n\nint_rac(125348,300): has a progression of [300,358,354] so our function should return 3.\n\nint_rac(125348981764,356243): has a progression of [356243,354053,354046] so our function should return 3.\n```\n\n#\n\nYou can use Math.floor (or similar) for each integer approximation.\n \n#\n\nNote for JavaScript, Coffescript, Typescript:\n\nDon't use the double bitwise NOT ~~ at each iteration if you want to have the same results as in the tests and the other languages.\ndef int_rac(n, guess):\n\t\nUse Call-Based format\nANSWER:\n"}}