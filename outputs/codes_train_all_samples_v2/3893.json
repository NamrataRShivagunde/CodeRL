{"3893": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nshould return [2,3,4,5]\n\n\n\n\n\n\n\n\n\n\n\n\n\nDivisors a number 2 to 3\n\nThis function is not call-based.\n\n\n\n\n\n\n```python\n", "\n\n\n\n\n\n\n\nshould return \"integer is prime\"\n\n\nUse Call-Based format\n\n\n\nshould return [2,3,4,5,6]\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nif the number is not prime return 'null'\n\n\n\n\n\nnull\n\n\nUse Call-Based format\n\n\n``", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndivisors(integer) #should return [2,3,4,5]\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nEXAMPLE:\n# Use Call-Based format\n# Example:\n#\n# Example:\n#\n\n#\n\n#\n# Example", "\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n.\n\n\n\n\n\ndivisors(13); #should return [4,5]\ndivisors(13); #should return [2]\n\n\n\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nshould return [2,5]\n\nUse Call-Based format\n\n\n\n\n\n\n\nNOTE:\nIf the number is not prime return the string '(integer) is not prime'.\n\n\n\n\n\n\n\n\n```python\n#!", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nshould return [0,1,2,3,4,5]\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nReturns:\n\ninteger\n\t\n\n\n\n\n\n\n\n\n   .. code-block::", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nReturn \"integer\" is not prime\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nIf the number is not prime return 'null'\n\n\n\n\n\n\n\nReturn the array with all divisors\n\n\n\n\n    This function", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nReturns an array of divisors.\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```python\ndivis", "\nUse Call-Based format\n\n\n\n\n\n\n\nshould return [3]\n\n\n\nUse Call-Based format\n\n\n\nshould return [1,5]\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nReturn \"integer is prime\"\n\n\n\nReturn \"integer is prime\"\n\n\n\n\n\n\n```python\ndiv", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nReturn a function named `divisors`\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nnull\n\n\n\n\n```python\n#include <https", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nshould return [2,5,6,7,8,9]\n\n\n\n\n\n\n\n\n\n\nRETURN:\ninteger/n\n\nUse Call-Based format\n\n\nReturn integer/n\n\n\n\n\n\n\nCreate a function named `divisors", "\n\n\n\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\ndivisors(integer):\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nExample:\n\n```python\ndivisors(3) # should return 3\n\n\n\n\n\n\n\n\n\n```python\n# do", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\nshould return [2,3,4,5,6]\n\n\n\n\n\n\n\n\n\nif the number is not prime return a string.\nif the number is not prime\n\n\n\n\n\n\n\n```python\n#include", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nn > 1:\n\n\n\n\n\nn > 1:\n\nn > 1:\n\n should return \"integer\" is prime\n\n\n\nnull\n\n\n\nn > 1:\nDivisors (", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nreturn \"integer is prime\"\n\nQUESTION:\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Like format\nReturn a string\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nIf the integer is not prime return an empty array.\n\n\n\n\n\n\n\n\n```python\n#if 1", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format.\n\n\nDEFAULT:\n\n\t# Use Call-Based format\n\n\nDOES:\n\n\n\n\n\n\n\n\n\n\n\nCreate a function named `divisors", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nshould return [2,3,4,5]\n\n\nUse Call-Based format\n\n\n.\n\n\n\n\nReturns:\n`divisors`\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n```python\n#if", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nExample:\n# divisors(10)\n# divisors(2)\n# divisors(3)\n\n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nshould return [3,4,5]\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nReturn the array of divisors in the specified order\n\n\n\n\n\n```python\n# Do not edit\n# div"], "prompt": "\nQUESTION:\nCreate a function named `divisors`/`Divisors` that takes an integer `n > 1` and returns an array with all of the integer's divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string '(integer) is prime' (`null` in C#) (use `Either String a` in Haskell and `Result, String>` in Rust).\n\n#### Example:\n\n```python\ndivisors(12); #should return [2,3,4,6]\ndivisors(25); #should return [5]\ndivisors(13); #should return \"13 is prime\"\n```\ndef divisors(integer):\n\t\nUse Call-Based format\nANSWER:\n"}}