{"3534": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\nCall-Based format\n\nExample:\n\nTo Bits\n\nExample:\n\nTo Bits\n\nExample:\n\nTo Bits\n\nExample:\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(function) ->\n\n{toBits}\n\n\n\n\n```\n", "\nCall-Based format\n\n\n\n\n\n\n\n\ntoBits\n\nUse Call-Based format\n\nExample:\n\nvar toBits = toBits(string)\n\nExample:\n\nvar toBits = toBits(string)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntoBits:\n\n```\nvar set = [", "\n\n\n\n\n\n\n\n\n\nToBits:\n\n\n\nTo Bits:\n\n\tTo Bits\n\n\t\n\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe task is to use the function `toBits` as a function for a set of unique integers.\nThe task is to", "\n\n\n\n\n\n\n\n\n\n\n\nCall-Based format\n\nExample:\n\nToBits:\n\nfunction toBits(string):\n\nUse Call-Based format\n\nExample:\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nvar exampleInput = '0';\nvar exampleOutput =\n\n``", "\nTo get a bitmap from a set of unique integers, use a call-based format\n\n\n\n\n\n\n\n\n\n\nBit Vectors/Bitmaps\n\n\n\n\ntoBits(string)\n\n\nBit Vectors/Bitmaps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n  To get a set of unique integers between 0 and 1", "\nUse Call-Based format\n\n\n\n\n\n\n\n\ntoBits\n\nUse Call-Based format\n\nExample:\n\nvar fromBits = toBits(string)\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[0]\n\n[1]\n\n\n\n\n0-20\n\n\n```\n\n```\n", "\n\n\n\n\n\n\ntoBits:\n\nUse Call-Based format\n\nExample:\n\n\ttoBits:\n\n\ttoBits(string):\n\t\nUse Call-Based format\n\nInput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nvar set = [3, 14", "\n\n\n\n\nTo be called from a function:\n\nvar toBits = toBits\n\nTo be called from a function:\n\ntoBits\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn:\n\n```\ntoBits\n```\n\n\n\n```\n\nif", "\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\nCall-Based format\n\nExample:\n\n\n\n\n\n\n\ttoBits(string)\n\nExample:\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\ntoBits:\n\n```\n\n\n\n```\n\nvar set = [", "\n\n\n\n\n\n\n\ntoBits:\n\nUse Call-Based format\nInput:\n\nTo be called from a function\nOutput:\n\nto_bits\n\nPrompt:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\nreturn:\n\tBit Vectors/Bitmaps\n```\n\n\n\n\n```\n", "\n\nExample:\nToBits\n\n\n\n\nExample:\n\nToBits\n\nExample:\n\nUse Call-Based format\n\n\n\n\n\n\n\nExample:\n\nToBits\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput:\n\n\n\n```\nvar set = [3,", "\n\nExample:\n\n\n\n\n\n\n\n\n\nTo Bits:\n\nTo Bits:\n\nTo Bits\n\nTo Bits:\n\nTo Bits\n\nExample:\n\nBits:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntoBits(string)\n\nExamples:\n\nExample:\n\n\n\n```", "\n\n\n\n\n\n\n\n\nTo bits:\n\n    >>> from to_bits('string')\n\n\t>>>\ntoBits('string')\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\ntoBits:\n\n```\n\n\n\n\n< 20\n\n\n```\n\n```\n\n``", "\n\n\n\n\n\n\nTo see how to convert a string to a bitvector/bitmap:\n\nvar string = '123\\n33\\n34\\n35\\n3\\n7\\n3...'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n\n    # Input:\n  The", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ntoBits:\n\nUse Call-Based format\n\nExample:\n\nvar toBits = 'toBits'\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n\n     \n  For a single index, you can use the `toBits`", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nCall-Based format\n\nExample:\n\nTo Bits\n\nExample:\n\nTo Bits\n\nExample:\n\nExample:\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\noutput = '3\\n14\\n19'\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nBit Vectors/Bitmaps\n\nOutput:\n\nBit Vectors/Bitmaps\n\n\n\n\nBit Vectors/Bitmaps\n\n\n\n\n\n\n\n\n\n\n\n\ntoBits\n```\n\n\n\n\n\n\n\n```\n\nint = 0\nfor index in [", "\n\n\n\n\n\n\nvar bitvector = [0, 1, 1, 1, 2, 3, 3, 1, 2, 2, 2, 2, 2, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo\n\n\n\n\ntoBits:\n\nTo Bits\n\n```\n\n\n>>> from toBits import to", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nTo Bits\n\nExample:\n\nTo Bits\n\nExample:\n\nExample:\n\narray\ntoBits\n\nExample:\n\n\n\n\n\n\nBit Vectors/Bitmaps\n\n\n\n\n\n\n\n\n\n\n\n\ntoBits(string)\n\nReturns:\n\nString\n\n", "\n\nOutput:\n\n\nTo bits\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\nTo bits\n\n\nInput:\n\nTo bits\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\ntoBits:\n\nTo bits:\n\n```\n\n\n\n\n```\n\n\n``"], "prompt": "\nQUESTION:\nBit Vectors/Bitmaps\nA bitmap is one way of efficiently representing sets of unique integers using single bits.\nTo see how this works, we can represent a set of unique integers between `0` and `< 20` using a vector/array of 20 bits:\n```\nvar set = [3, 14, 2, 11, 16, 4, 6];```\n```\nvar bitmap = [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0];\n```\nAs you can see, with a bitmap, the length of the vector represents the range of unique values in the set (in this case `0-20`), and the `0/1` represents whether or not the current index is equal to a value in the set.\n\nTask:\nYour task is to write a function `toBits` that will take in a set of uniqe integers and output a bit vector/bitmap (an array in javascript) using `1`s and `0`s to represent present and non-present values.\nInput:\nThe function will be passed a set of unique integers in string form, in a random order, separated by line breaks.\nEach integer can be expected to have a unique value `>= 0` and `< 5000`.\nThe input will look like this:\n`let exampleInput = '3\\n14\\n5\\n19\\n18\\n1\\n8\\n11\\n2...'`\nOutput:\nThe function will be expected to output a 5000 bit vector (array) of bits, either `0` or `1`, for example:\n`let exampleOutput = [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0,...]`\nMore in-depth bitmap kata coming very soon, happy coding!\nTo learn more about bitmapping and to see the inspiration for making these kata, checkout the book Programming Pearls by Jon Bently.  It's a powerful resource for any programmer!\ndef to_bits(string):\n\t\nUse Call-Based format\nANSWER:\n"}}