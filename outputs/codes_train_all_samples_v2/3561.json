{"3561": {"code": ["\n\n\n# Note\n\n\n\n\n\n\n\n\n\n\n\n    Number of chunks to be calculated\n\n- 1) Cut the number of `cnt`\n    Max is `maxcnt`\n\n- 2) Cut the number\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 2) Bash tests\n\n# Max", "\n\n\n\n# Note\nAnother Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n- 1) Find the last chunk in the last chunk\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n\n\t\n```\n\n\n```\n\n#", "\n\n\n# Note\n\n\n\n\n\n\n\n\n- 1) Find the maximum value `maxcnt`\nExample:\n# Max is 0 for digit 7\nMax is 1 for digit 7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n\n\n\n- 3) Find the count `cnt`\n\n\n\n\n\n```\n", "\n\n\n\n\n\n\n\n\n\n\n# Note\n\n\n\n\n\n\n-\n\n\n- 3) Find the last chunk (`n`):\n\t\nMax is 1 for digit 1\n\n- 2) Find the last chunk (`n`)\n\n- 4) Find the maximum\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n# Bew", "\n\n\n\n\n# Note:\nUse Call-Based format\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\nif you use `n=0` you have a number of chunks, call the function `fib(n)`\n\n\n\n\n\n\n\n\n\n\n# Note:\n# `fib", "\n# Note\n\n\n\n# Note\n\n\n\n# Note\n\n\n# Beware:\n# Use Call-Based format\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n- 1) Cut the value `f` into chunks\n```\n", "\n\n\n\n\n\n\n\n\n# Note\nAnother Call-Based format\n\n\n\n# Note\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n- 1) Find the last chunk of the string (`f`) in `ch`\nExample:\n\n\t\t\"Last chunk 14 for digit 14\"\n\n\n\n\n\n\n\n\n\n``", "\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n# Note\n\n\n\n# Note\n\n\n\n\n# Note\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n###\n# Example\n\nExample:\n\n\nMax is 7 for digit 7\n\n```\n\n\n\n\n\n\n\n\n```\n", "\n\n\n\n\n\n\n\n\n\n\n- 2) Calculate Fibonacci... yes\n\n- 3) Calculate Fibonacci... yes\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 3) Cut the value into chunks\n\n```\n", "\n\n\n\n\n\n\n# Note\nThe function is a Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n# Note\n\n\n# It's the function\n#\nExample:\n#\nfib(n)\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n# B", "\n\n\n# Example:\n# I18n\n# Bash tests need to publish the function\n# Note:\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n- 2) Find the last chunk in `f`\nExample:\n\n\n\n\n\n\n```\n\n# B", "\n\n\n\n\n\n\n\n\n\t# Note:\n#\n\n\n\n\n\n\n\n\t#\n\t\t# maxcnt\n\t\t# maxcnt\n\t\t# maxcnt\n\t\t# maxcnt\n\t\t# maxcnt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n# TODO\n#\n\n# Note\n\n\n", "\n# Note\n\n\n\n\n\n\n# Note\n\n\n\n\n\n- 1) Find the count of each digit `ch` in the chunk `f`.\n#\n\n\n\n\n\n\n\n\n\n\n\n\n- 3) Find the count of each digit `ch`\nExample:\n\n\n\n\n\n\n\n\n\n# Note\n\nAnother Fibon", "\n\n\n\n\n\n# Note\n\n\n\n# Note\n\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n# Note\n\n\n\n\n\n\n\n- 3) Cut the first length of the first chunk\nExample: for `n=2` -> \"Last chunk 11 for digit 11\"\n\n\n\n\n\n\n\n\n\n# TODO:", "\n\n\n\n# Note\nNote:\n\nUse Call-Based format\n\n# Note\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n# Note\n\nExample:\n\n# Note\n\n\n\n- 3) Cut the number `n`\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n# Note", "\n\n\n\n\n\n\n\n\n# Note\n\n# The second function is just for a simple function to calculate the count.\n#\n\n\n\n\n\n\n\n\n\n\n\n- 3) Cut the last chunk of `f`.\n\n- 2)\n\n\n\n\n\n\n\n- 4) Return the last chunk\n\n\n\n\n\n\n\n\n```", "\n```\n\n\n# Note\n\n\n\n\n\n\n\n# Note\nUse Call-Based format\n# Note\n\nThe function is called with two parameters\n#\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n- 2) Return a string\n\n\n\n\n\n\n\n\n\n```\n\n# B", "\n\n\n\n\n\n\n\n# Note:\n##\n\n# Example:\n# fib(n):\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n#\n\n# Note\n\n# The following code is used:\n#\n\n# Note\n\n#\n#\n\n#\n#\n#\n", "\n\n\n\n\n\n\n# Note\n\n\n\n\n\n\n# Use Call-Based format\n\nExample:\nfor `n=100` you have no length in `cnt`.\n\n\n\n\n\n\n- 3) Cut the last chunk\n\n\n\n\n\n\n\n\n\n\n\n# Note\n\n\n# Note\n\n\n\n# Note\n\n```", "\n\n\n\n\n\n# Note\n\n\n# Note\n\n\n\n\n\n\n\n\n\n\n\n# Note\n# The function name `aroundFib(n)`\n#\n\n# Note\n\n\n\n\n\n\n\n# Note\nNote\n\nExample:\n\n# Note\n\nLast chunk...\n\n\n\n\n\n\n\n\n\n\n# Max is 1"], "prompt": "\nQUESTION:\nAnother Fibonacci... yes but with other kinds of result.\nThe function is named `aroundFib` or `around_fib`, depending of the language.\nIts parameter is `n` (positive integer).\n\nFirst you have to calculate `f` the value of `fibonacci(n)` with `fibonacci(0) --> 0` and\n`fibonacci(1) --> 1` (see: )\n\n- 1) Find the count of each digit `ch` in `f` (`ch`: digit from 0 to 9), call this count `cnt` and find the maximum\nvalue of `cnt`, call this maximum `maxcnt`. If there are ties, the digit `ch` to consider is the first one - in natural digit order - giving `maxcnt`.\n\n- 2) Cut the value `f` into chunks of length at most `25`. The last chunk may be 25 long or less.\n\n```\nExample: for `n=100` you have only one chunk `354224848179261915075`\nExample: for `n=180` f is `18547707689471986212190138521399707760` and you have two chunks \n`1854770768947198621219013` and `8521399707760`. First length here is 25 and second one is 13.\n```\n\n- At last return a string in the following format:\n\"Last chunk ...; Max is ... for digit ...\"\n\nwhere Max is `maxcnt` and digit the first `ch` (in 0..9) leading to `maxcnt`.\n\n\n```\nExample: for `n=100` -> \"Last chunk 354224848179261915075; Max is 3 for digit 1\" \nExample: for `n=180` -> \"Last chunk 8521399707760; Max is 7 for digit 7\"\nExample: for `n=18000` -> \"Last chunk 140258776000; Max is 409 for digit 1\"\n```\n# Beware: \n`fib(18000)` has `3762` digits. Values of `n` are between `500` and `25000`.\n\n# Note\nTranslators are welcome for all languages, except for Ruby since the Bash tests needing Ruby a Ruby reference solution is already there though not yet published.\ndef around_fib(n):\n\t\nUse Call-Based format\nANSWER:\n"}}