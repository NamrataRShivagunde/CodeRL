{"4784": {"code": ["\n\\\\\\__\\/////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\n\n\n\n\n\n\n`\n\n\n```\n`\n`\n\n`\n\n\n\n```\n\n\n\n\n\n__\\///\n\n\n\n\n\n\n\n\n`\n\n\n```\n\n``", "\n\\/////\\\\\\__\\/////\\\\\\\\\\\\\\\\\\\\\\\\\\/////\\\\\\\\\\\\\\\\\\\\\\\\\\/////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n\n\n\n\n\n\n\n`\n\n`\n\n`\n\n (_normalization_)\n\n`\n\n\n\n\n\n\n__\n\n\n\n\n\n\n\n\n\n (Kata)\n```", "```\n\n///__\\//\\\\\\\n\n\n\n///__\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n`\n\n`\n\n\n\n\n\n\n\n\n\n\n__\\\\\n\n\n \n\n`\n\n\n\n, the other images are of interest.\n", "```\n///\\\\//\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n`\n\n\n\n\n`\n`\n\n```\n\n\n.\n\n`\n\n\n\n\n\n\n \n\n```\n\n\n```\n\n\n\n.\n```python\nGLYPHS = \"", "```\n__\\///\\\\\\\\\\\\_____    \n\n\n\n\n\n\n\n\n```\n\n```\n\n\n```\n\n\n (Kata):\n\n\n\n```python\nGLYPHS = \"x,y,z```\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n (_col_", "```\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \n\n\n\n \n\n`\n\n\n`\n\n\n```\n\n`\n\n\n```\n\n\n\n\n__\\//\\\\\\__\\//\\\\\\__\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n```\n\n`\n`\n\na (_meters_)_\n", "```\n\\\\\\\\\\\\\n\n\n\n```\n\n\n\n\n\n```python\n```\n\n```\n\n\n```python\n\n```\n```\n\n\n```\n\n\n\n\n\n\\\\\n\n\n\n__Disclaimer:__\n```\n\n`\n\n`\n\n\n\n```\n\n```python\n\n", "\n\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n\n\n`\n\n\n\n\n\n\n```\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n`\n\n```\n\n (1983)\n```\n", "\n____\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n\n\n\n```\n\n`\n\n\n\n```python\n`\n\n\n\n```python\n`\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n, Ie.  _0 \ufffd", "```\n\n///__\\//\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n`\n\n\n\n\n`\n\n`\n\n`\n\n\n\n.\n\n\n\n\n\n\n_ \n\n\n\n\n\n`\n`\n\nThe _glyphs_ is a list of integers.,", "```\n//////\n\n\n\n///__\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \n\n`\n\n`\n\n`\n\n`\n\n`\n\n`\n\n`\n\n\n\n\n\n\n \n_\n\n\n \n\n\n`\n\n`\n\n\n\n```\n\n```\n\n_", "```\n\\////\\\\\\__\\////\\\\\\\n\n\n```\n\n\n\n\n\n\n```\n\n\u2192 1 \u2192 1 \u2192 1 \u2192 1 \u2192 1\n\n`\n\n`\n\n\n\n\n`\n\n\n\n\n__         \n\n\n\n\n\n\n\n\n\n\n\n, Dinga", "\n\\\\\\\\////\\/\\\\\\_________\\/\\\\\\_________/\\\\\\\\\\\\\\\\\\_____    \n\n\n\n\n`\n\n\n\n`\n\n```\n\n```\n\n\n\n\n\n\n\n\n \n\n_\n\n\n\n\n\n\n\n\n```\n\n```\n\n```python\nGLYPHS = \"xyz\"\n`\n\n\n (", "\n \n///\n\n\n\n\n\n\n\n\n\n```\n0 \u2192 0.0 \u2192 0.0 `\n\n\n\n```python\nGLYPHS = \"XYZ\"\n\n\n\n`\n`\n\n\n\n\n\n\n\n\n`\n\n_Disclaimer:__\n\n\n\n\n\n (_scanline", "```\n\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n\n\n\n\n`\n\n`\n\n`\n\n`\n\n`\n\n`\n\n\n\n\n\n\n\n__\n\n\n\n\n\n`\n\n-Kata-Kata-", "```\n\\\\\\__\\/////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n\n\n`\n\n`\n\n`\n\n`\n\n`\n\n\n\n`\n\n\n\n\n\n\n\n\n__    \n\n\n\n\n\n\n\n\n\n, Kata, Kata", "```\n\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\////\\/\\\\\\_________\\/\\\\\\_____    \n\n\n\n\n\n`\n`\n\n`\n\n`\n\n`\n\n```\n\n\n```\n\n.\n\n```\n\n \n\n \n\n\n\n\n\n__\n\n\n\n\n\n\n\n\n\n, Ie.  0 \u2192", "```\n\\\\\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//\n\n\n\n\n`\n\n\n\n`\n`\n\n`\n\n`\n\n.\n\n\n\n\n\n`\n__________\n  _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n\n\n\n\na (_scanline", "```\n\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/////\\\\\\_________/\\\\\\_________/\\\\\\_____        \n\n\n\n\n\n\n\n\n`\n\n\n`\n\n\n`\n\n\n\n \n\n \n\n\n\n\n\n\n`\n`\n\n`\n\n_normalization_\n\n```\n (_", "```\n`\n\n__\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n///\n\n`\n`\n\n`\n\n`\n\n`\n\n`\n\n`\n\n`\n\n\n\n\n\n\n\n\n \n\n_____\n\n\n\n\n`\n\n`\n\n\n\n\n\n\n```\n"], "prompt": "\nQUESTION:\nConvert the 8-bit grayscale input image (2D-list) into an ASCII-representation.\n\n```\n_____/\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\__________/\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_        \n ___/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\/////////\\\\\\_____/\\\\\\////////__\\/////\\\\\\///__\\/////\\\\\\///__       \n  __/\\\\\\/////////\\\\\\__\\//\\\\\\______\\///____/\\\\\\/_______________\\/\\\\\\_________\\/\\\\\\_____      \n   _\\/\\\\\\_______\\/\\\\\\___\\////\\\\\\__________/\\\\\\_________________\\/\\\\\\_________\\/\\\\\\_____     \n    _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______\\////\\\\\\______\\/\\\\\\_________________\\/\\\\\\_________\\/\\\\\\_____    \n     _\\/\\\\\\/////////\\\\\\_________\\////\\\\\\___\\//\\\\\\________________\\/\\\\\\_________\\/\\\\\\_____   \n      _\\/\\\\\\_______\\/\\\\\\__/\\\\\\______\\//\\\\\\___\\///\\\\\\______________\\/\\\\\\_________\\/\\\\\\_____  \n       _\\/\\\\\\_______\\/\\\\\\_\\///\\\\\\\\\\\\\\\\\\\\\\/______\\////\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_ \n        _\\///________\\///____\\///////////___________\\/////////__\\///////////__\\///////////__\n```\n_(Example ASCII-art)_\n\nFor every component in the image output a character corresponding to its intensity.\n\nSpecifically, you are supposed to normalize the input values (of dynamic range 0 - 255) down to a dynamic range of the number of glyphs (0 - 8). For simplicity your implementation should use flooring (integer division) in order to make all values (0 ~ 8) integers, ie.\n```\n  0 \u2192 0.0 \u2192 0\n 10 \u2192 0.4 \u2192 0\n...\n254 \u2192 7.9 \u2192 7\n255 \u2192 8.0 \u2192 8\n```\n\nYour symbols (_glyphs_) for representing pixel intensities:\n```python\nGLYPHS = \" .,:;xyYX\"\n```\n\nThe _normalization_ is linear (and floored), meaning with an input value of 180 and 9 glyphs, glyph #5 (0-indexed) is ```x```, meaning ```180 \u2192 'x'```.\n\nEach scanline (_row_) in the image should be represented by a newline ```\\n``` in the output string. Ie. a single string, not a list of strings.\n\n__Disclaimer:__ This is my first Kata, so any feedback is greatly appreciated. I may add some more specific test cases to show of your fine art. ;)\n\n__Note:__ Your ASCII-art generator is best suited for bright text on dark background.\ndef image2ascii(image):\n\t\nUse Call-Based format\nANSWER:\n"}}