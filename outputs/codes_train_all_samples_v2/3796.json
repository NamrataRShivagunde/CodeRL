{"3796": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\na | b | filler\n\n\n\n\n\n\nor_arrays(a, b, filler=3)\n\n\n\n\n\n\n\n\n\n\n1.2, 2.3\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\na and b are arrays of equal length.\n\n```python\nor_arrays(a, b)\n\n\n\n\n\n\n\nIt started as a discussion with friend\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nThe following format is used to perform the `or_arrays` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI made it here\n\n\n\n\n\n\n\n```python\nif len(a)!= len", "\nUse Python-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.0,2.0,2.0,1.0,1.0,0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\na[3]", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n1,2,3\n2,3,4,5,6,7,7\n\n\n\n\n\n\n\n\n\n\n\n\n\n1,2,3\n\n\nIt started as a discussion with a friend\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nIt started as a discussion with a friend who didn't grasp some way to grasp some way\n\nNOTE:\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nif len(a)!= len", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\na and b have the same size and `filler`\n\n\n\n\n\n\n1,2,3\n\n\n\n\n\n\n\n\n```python\na,b,c,d", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n1,2,3,4,5,6,7,7,5,7,6\n\n\n\n\n\n\n\n\n\n\n1,2,3,3\n\n\n\n\n\n\n\n\nThe following would be the same as the ``'", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\na == b\nb == a\na == b\n\n\n\n\n\n\n\n\n\n\n\n\n1 1 2 3\n\n\n\n\n\n\n\n1 2 3 3 4 5 7 7 8\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n1,2,3,4,5,6\n\n\n\n\n\n\n\n\n\n\n\n1,2,3,4,5,6\n\n\n\n\n\n\n\n\n```python\na[0,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n1,2,3,2,3\n\n\n\n\n\n\n1,2,3\n\n\n\n\n\n\n\n```python\na[a == b] ==", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n == 1\nor_arrays(a, b, filler=0) == 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 + 2 + 3 + 4 + 5\n\n\n\n\n\n\n\n\n\n\n```python\na[0", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n1,2,3\n2,4,5,6\n\n\n\n\n\n\n\n\n\n\nUse Python format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nif len(a) == len(b", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\na | b | c\n\n\n\n\n\n\n\n\n\n\na | b | c\nb | c\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse call-based format\n == [1,2,3]\n\nOR:\n\n\n\n\n\n\n\n\n\n\n\n\n1,2,3\n\n1,2,3\n\n\n\n\n\n\n\n\n\n\n\n```python\nif len(", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nI started as a discussion with a friend, who started as a discussion with a friend, who started as a discussion with a friend.\n\n\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nIt started as a discussion with a friend\n\n\n\n\n\n\n```python\nfor", "\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\na, b, filler = a, b\n\n\n\n\n\n\n\nIt started as a discussion with a friend.\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Python format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nit started as a discussion with a friend, who didn't fully grasp some way\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Python format\n\nUse Call-Based format\n\na == b\nb == a\na == b\nb == a\n\n\n\n\n\n\n\n\nThis is an example of the `or_arrays` function.\n\n\n\n\n\n\n\n\n\n\n```python\nif a[", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nbinary `OR` the first element of two given arrays [starts to sound like a tonguetwister, doesn't it?].\nBinary `OR` the second element of the second array [starts to sound like a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA list or array of"], "prompt": "\nQUESTION:\nIt started as a discussion with a friend, who didn't fully grasp some way of setting defaults, but I thought the idea was cool enough for a beginner kata: binary `OR` each matching element of two given arrays (or lists, if you do it in Python; vectors in c++) of integers and give the resulting ORed array [starts to sound like a tonguetwister, doesn't it?].\n\nIf one array is shorter than the other, use the optional third parametero (defaulted to `0`) to `OR` the unmatched elements.\n\nFor example:\n\n```python\nor_arrays([1,2,3],[1,2,3]) == [1,2,3]\nor_arrays([1,2,3],[4,5,6]) == [5,7,7]\nor_arrays([1,2,3],[1,2]) == [1,2,3]\nor_arrays([1,2],[1,2,3]) == [1,2,3]\nor_arrays([1,2,3],[1,2,3],3) == [1,2,3]\n```\ndef or_arrays(a, b, filler=0):\n\t\nUse Call-Based format\nANSWER:\n"}}