{"4193": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n`\nUse Call-Based format\n\nQUESTION:\n\nUse Call-Based format\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n```\nUse Python:\n```\n\n\n```\nThe number ```1331``", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\nUse Call-Based format\nQUESTION:\n\nUse Call-Based format\n```\n\nUse Python 3\n\n\n\n\n\n\n``` python\na, b =", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nQUESTION:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nCall-Based format\nQUESTION:\n\na,b\n\n\na,b\n```\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\nnumber of Tests = 94\nnumber of Cubic = 8\n\nUse Call-Based format\n\n:\n\n\n\n\n\n:\n\n\n\n```\n\n\n\n\n\n\n``` python\na = -1e17\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nnumber of Tests = 94\nminimum value = -1e17\nmaximum value = 1e17\n\n\n\n\n\n\n:\n\n\n\n\n:\n\n```\n\n\n```\n\n```\n\n```\nThe number ```1331```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n```\nUse Call-Based format\nQUESTION:\n\nThe number ```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nnumber of Tests = 93\nminimum value for a = -1e17```\nmaximum value for b = 1e17```\n\n\n\n:\n\n\n\n:\n\n\n\n`\n\n\n\n:\n\n```\nThe number ```1331``` is the first positive perfect cube", "\nUse Call-Based format\n\n\n\n\n\nuse Call-Based format\nANSWER:\n\nUse Call-Based format\n\nExample:\n\n```\npython\nnumber of Tests = 94\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n`\n\n\n\n```\nUse Call-Based format\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n```\n\nUse Python 3 format\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n``` python\na = -5000\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nQUESTION:\n\nUse Call-Based format\n\n```\n\nUse Call-Based format\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n```\n\n\n```\n\nThe number ```13", "\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\na < b\nb < a\n\n```\n\n\n\n:\n\n\n\n```\n\n\n\nUse Python 3 format\n\n\n\n\n\n\n```\nThe number ```1331```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\nnumber of Tests = 94\n\nUse Call-Based format\n\n:\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n```\n\n\n\n\t```\nNumber of Tests =", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nQUESTION:\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```\n\n\nUse Call-Based format\n\n\n\n\n\n```\n\n\n```\nThe", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n:\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n```\n\n\n\n```\n\n```\nThe number ```13", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\na, b = [a, b]\n\t\n```\n\n```\nCall-Based format", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n:\n\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\nThe number ```", "\n\nUse Call-Based format\n\n\n\n\n\n\n\nuse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python3 format\n\n\n\n\n\n```\nPython2 and Python3\nnumber of Tests = 2\nnumber of Tests = 4\n\n```\n\n\n\n``", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n:\na,b,3\n```\n\nUse Python-Based format\nQUESTION:\n\nUse Python2\nnumber of Tests = 94\n\n\n``", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Python 3 format\n\n\n\n\nnumber of Tests = 6\n\nUse Call-Based format\n\n\n\n\n\n:\n\n\n```\nUse Python 3 format\n\n\n\n```\nUse Call-Based format\nQUESTION:\n\n\n\n\n```\n\n\n```\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nnumber of Tests = 94\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nUse Call-Based format\nQUESTION:\n\nUse Python 3.\nnumber of Tests = 3\n\n```\n"], "prompt": "\nQUESTION:\nThe number ```1331``` is the first positive perfect cube,  higher than ```1```, having all its digits odd (its cubic root is ```11```).\n\nThe next one is ```3375```.\n\nIn the interval [-5000, 5000] there are six pure odd digit perfect cubic numbers and are: ```[-3375,-1331, -1, 1, 1331, 3375]```\n\nGive the numbers of this sequence that are in the range ```[a,b] ```(both values inclusive)\n\nExamples:\n``` python\nodd_dig_cubic(-5000, 5000) == [-3375,-1331, -1, 1, 1331, 3375] # the output should be sorted.\nodd_dig_cubic(0, 5000) == [1, 1331, 3375]\nodd_dig_cubic(-1, 5000) == [-1, 1, 1331, 3375]\nodd_dig_cubic(-5000, -2) == [-3375,-1331]\n\n```\nFeatures of the random tests for python:\n```\nnumber of Tests = 94\nminimum value for a = -1e17\nmaximum value for b = 1e17\n```\nYou do not have to check the entries, ```a``` and ```b``` always integers and ```a < b``` \n\nWorking well in Python 2 and Python 3.\nTranslation into Ruby is coming soon.\ndef odd_dig_cubic(a, b):\n\t\nUse Call-Based format\nANSWER:\n"}}