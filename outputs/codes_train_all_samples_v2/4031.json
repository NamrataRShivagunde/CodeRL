{"4031": {"code": ["\nKata Series #1 - The interpreters\n\nKata Series #2 - The interpreters\n\nKata Series #3 - The interpreters\n\n\n\n\n\n\n#\n\n\n\n## The Interpreters\n\n#\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n-\n\n\n\n\n### The Interpreters", "\n# Esolang Interpreters #1 - Custom Interpreters\n# Esolang Interpreters #2 - Custom Interpreters\n\n\n\n\n\n\n\n\n\n## The Interpreters\n\n\n\n\n\n-\n-\n\n-\n\n- `~` -\n-\n\n\n\n-\n\n\n\n-\n\n\n-\n\n\n\n### The K", "\n# Esolang Interpreters #1\n# Esolang Interpreters #2\n\n# Esolang Interpreters #3\n\n# Esolang\n\n#\n\n\n\n\n\n\n\n\n#\n\n\n#\n\n\n\n-\n\n\n-\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n-\n\n\n\n##", "\n\n# Esolang Interpreters #1\n\n# Esolang Interpreters #2\n\n# Esolang Interpreters #3\n\n#\n\n#\n\n\n\n\n\n# The Interpreters\n\n#\n\n\n\n-\n\n\n\n\n-\n\n\n\n\n\n\n## The Data\n\n-\n\n\n-\n-\n-\n\n-", "\n\n# Esolang Interpreters #1 - Custom Smallfuck Interpreter\n\n# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n#\n\n## The Interpreter\n\n#\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n-\n\n\n\n-\n\n-\n\n\n- `", "\n# Esolang Interpreters #1 - Custom Kata Interpreter\n# Esolang Interpreters #2 - Custom Kata Interpreter\n\n\n\n\n\n\n#\n\n\n\n\n## The Data\n\n\n\n\n-\n\n\n\n-\n\n\n\n\n\n\n\n## The Data\n\n-\n\n\n\n-\n-\n-\n\n\n### Example", "\n# Esolang Interpreters #1 - Custom Kata Interpreter\n# Esolang Interpreters #2 - Custom Kata Interpreter\n\n\n\n\n\n#Kata Series\n\n\n\n\n#\n\n-\n\n-\n\n\n\n\n\n\n-\n\n\n\n\n\n\n## The Data\n\n-\n\n\n\n-\n-\n-\n\n\n", "\n\n# Esolang Interpreters #1 - Custom Kata Interpreter\n\n# Esolang Interpreters #2 - Custom Kata Interpreter\n\n#\n\n#\n\n\n\n\n\n\n#\n\n\n#\n\n\n\n\n-\n\n\n-\n\n-\n-\n\n\n\n\n\n\n\n\n\n-\n-\n-\n\n\n## The", "\n\n# Esolang Interpreters #1 - Custom Kata Interpreter\n\n# Esolang Interpreters #2 - Custom Kata Interpreter\n\n#\n\n#\n\n\n\n\n\n#\n\n\n#\n\n\n\n\n-\n\n\n-\n\n-\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n## The Kata", "\n# Esolang Interpreters #1 - Custom Kata Interpreter\n# Esolang Interpreters #2 - Custom Kata Interpreter\n#\n#\n\n\n\n#\n\n\n\n\n\n## The Programming\n\n\n\n\n-\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n-\n\n- -\n\n## The Data\n\n", "\n\n# Esolang Interpreters #1\n# Esolang Interpreters #2\n# Esolang Interpreters #2\n\n# Esolang Interpreters #3\n#\n#\n\n\n\n#\n\n\n\n\n\n\n-\n-\n\n\n\n-\n\n\n\n\n\n\n#\n\n\n\n-\n\n-\n\n\n###\n\n#", "\n# Esolang Interpreters #1\n# Esolang Interpreters #2\n\n# Esolang Interpreters #3\n\n#\n\n#\n\n\n\n\n\n\n\n#\n\n\n## The Programming Language\n\n\n-\n-\n\n\n\n-\n\n\n\n\n\n\n-\n\n\n\n-\n-\n- `\n\n\n### Example", "\n# Esolang Interpreters #1 - Custom Smallfuck Interpreter\n# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n# -\n\n\n\n#\n\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n## The Mode\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n- `^` - Escape", "\n# Esolang Interpreters #1 - Custom\n# Esolang Interpreters #2 - Custom\n\n# Esolang Interpreters #3 - Custom\n\n\n\n\n\n\n#\n\n\n#\n\n\n\n-\n\n\n-\n\n-\n\n\n\n\n## The Data\n\n-\n\n\n\n-\n\n\n\n\n## The Interpreter\n\n", "\n## The Interpreters\n# Esoteric programming language #1 - Custom Interpreters\n#\n# No more\n\n\n\n# Entropy\n\n# No more\n\n#\n\n\n#\n\n\n#\n\n#\n\n#\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n-\n\n\n-\n\n\n\n## The", "\n# Esolang Interpreters #1 - Custom Smallfuck Interpreter\n# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n-\n-\n\n\n\n\n\n-\n\n\n\n\n## This Series\n\n#\n\n\n-\n\n-\n\n- `[`", "\n# Esolang Interpreters #1 - Custom Kata Interpreter\n# Esolang Interpreters #2 - Custom Kata Interpreter\n\n#\n\n#\n\n\n\n\n#\n\n\n## The Codewarrior\n\n#\n\n\n\n-\n\n\n\n-\n\n\n\n\n\n\n\n\n\n-\n\n\n\n## The Data\n\n\n\n", "\n# Esolang Interpreters #1 - Custom Kata Interpreter\n\n# Esolang Interpreters #2 - Custom Kata Interpreter\n\n#\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n-\n\n\n\n\n\n## The Data\n\n-\n\n\n-\n\n-\n\n\n## The Data", "\n# Esolang Interpreters #1 - Custom Kata Interpreter\n# Esolang Interpreters #2 - Custom Kata Interpreter\n\n\n\n\n\n\n#\n\n\n\n\n#\n\n## The Programming\n\n\n\n\n-\n\n\n\n\n\n\n\n## The Data\n\n-\n\n\n\n-\n\n\n## The Interactions\n\n\n", "\n# Esolang Interpreters #1 - Custom Smallfuck Interpreter\n# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n\n\n\n\n\n\n#\n\n#\n\n\n\n\n-\n\n\n\n\n\n\n## The Data\n\n\n\n\n\n\n\n-\n\n\n\n-\n\n-\n\n\n### The Data"], "prompt": "\nQUESTION:\n# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n## About this Kata Series\n\n\"Esolang Interpreters\" is a Kata Series that originally began as three separate, independent esolang interpreter Kata authored by [@donaldsebleung](http://codewars.com/users/donaldsebleung) which all shared a similar format and were all somewhat inter-related.  Under the influence of [a fellow Codewarrior](https://www.codewars.com/users/nickkwest), these three high-level inter-related Kata gradually evolved into what is known today as the \"Esolang Interpreters\" series.\n\nThis series is a high-level Kata Series designed to challenge the minds of bright and daring programmers by implementing interpreters for various [esoteric programming languages/Esolangs](http://esolangs.org), mainly [Brainfuck](http://esolangs.org/wiki/Brainfuck) derivatives but not limited to them, given a certain specification for a certain Esolang.  Perhaps the only exception to this rule is the very first Kata in this Series which is intended as an introduction/taster to the world of esoteric programming languages and writing interpreters for them.\n\n## The Language\n\nSmallfuck is an [esoteric programming language/Esolang](http://esolangs.org) invented in 2002 which is a sized-down variant of the famous [Brainfuck](http://esolangs.org/wiki/Brainfuck) Esolang.  Key differences include:\n\n- Smallfuck operates only on bits as opposed to bytes\n- It has a limited data storage which varies from implementation to implementation depending on the size of the tape\n- It does not define input or output - the \"input\" is encoded in the initial state of the data storage (tape) and the \"output\" should be decoded in the final state of the data storage (tape)\n\nHere are a list of commands in Smallfuck:\n\n- `>` - Move pointer to the right (by 1 cell)\n- `<` - Move pointer to the left (by 1 cell)\n- `*` - Flip the bit at the current cell\n- `[` - Jump past matching `]` if value at current cell is `0`\n- `]` - Jump back to matching `[` (if value at current cell is nonzero)\n\nAs opposed to Brainfuck where a program terminates only when all of the commands in the program have been considered (left to right), Smallfuck terminates when any of the two conditions mentioned below become true:\n\n- All commands have been considered from left to right\n- The pointer goes out-of-bounds (i.e. if it moves to the left of the first cell or to the right of the last cell of the tape)\n\nSmallfuck is considered to be Turing-complete **if and only if** it had a tape of infinite length; however, since the length of the tape is always defined as finite (as the interpreter cannot return a tape of infinite length), its computational class is of bounded-storage machines with bounded input.\n\nMore information on this Esolang can be found [here](http://esolangs.org/wiki/Smallfuck).\n\n## The Task\n\nImplement a custom Smallfuck interpreter `interpreter()` (`interpreter` in Haskell and F#, `Interpreter` in C#, `custom_small_fuck:interpreter/2` in Erlang) which accepts the following arguments:\n\n1. `code` - **Required**.  The Smallfuck program to be executed, passed in as a string.  May contain non-command characters.  Your interpreter should simply ignore any non-command characters.\n2. `tape` - **Required**.  The initial state of the data storage (tape), passed in **as a string**.  For example, if the string `\"00101100\"` is passed in then it should translate to something of this form within your interpreter: `[0, 0, 1, 0, 1, 1, 0, 0]`.  You may assume that all input strings for `tape` will be non-empty and will only contain `\"0\"`s and `\"1\"`s.\n\nYour interpreter should return the final state of the data storage (tape) **as a string** in the same format that it was passed in.  For example, if the tape in your interpreter ends up being `[1, 1, 1, 1, 1]` then return the string `\"11111\"`.\n\n*NOTE: The pointer of the interpreter always starts from the first (leftmost) cell of the tape, same as in Brainfuck.*\n\nGood luck :D\n\n## Kata in this Series\n\n1. [Esolang Interpreters #1 - Introduction to Esolangs and My First Interpreter (MiniStringFuck)](https://www.codewars.com/kata/esolang-interpreters-number-1-introduction-to-esolangs-and-my-first-interpreter-ministringfuck)\n2. **Esolang Interpreters #2 - Custom Smallfuck Interpreter**\n3. [Esolang Interpreters #3 - Custom Paintfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-3-custom-paintf-star-star-k-interpreter)\n4. [Esolang Interpreters #4 - Boolfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-4-boolfuck-interpreter)\ndef interpreter(code, tape):\n\t\nUse Call-Based format\nANSWER:\n"}}