{"4645": {"code": ["\n```\n\n\n\n\n## Your task\n\nThe kata task\n\n## Kata\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n## A walk\n\nPromenades\n\n```Python\n\n\n\nR\n\n\n```\n```\n", "\n\n\n\n```\n\n\n\n> Kata:\n> The Kata.com page is <2.0.0.1</2>\n\n```\n\n```\n\n\n```\n```\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n# Examples\n\n# Example\n\n\n```\n", "\n\n\n\n### Taking a walk\n\n## The walk\n\nPromenades are a walk of fractions\n\n```Python\npromenade(\"\") == (1,2)\n\n\n\n\n>\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n*\n\n\n```\n\n\n```\n\n", "\n\n## The task\n\n\n\n```\n\n\n\n> Example:\n> kata\n> kata\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n**\n\n* `R`\n\n```\n\n```\n\n\n```\n\n## The", "```\n\n## The kata task\n\n\n\n\n\n\n\n> Kata\n> Re-use a walk.\n> Reuse a walk.\n\n```Python\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n## The walk\n\n*\n\n\n\n\n```\n\n``", "```\n\n## The task\n```\n`\n\n\n## Your task\n\n## The kata\n\n\n\n> The kata is finished by now\n> The kata is finished by now\n>\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n```\n\n*\n`\n\n```\n\n\n``", "```\n\n\n\n\n> Kata\n> Kata\n> Kata\n\n\n\n> Kata\n\n> Kata:\n> Kata\n> Kata:\n> Kata\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n## The walk\n\n*\n\n\n\n\n\n```\n\n", "\n\n\n\n```\n\n\n## An example of a walk\n\n\n> Example of a walk:\n\n> kata\n> kata\n> kata\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n*\n* `\"R\"`\n\n\n\n\n```\n\n```\n", "\n\n```\n\n\n\n\n## Kata\n\n> Kata is about to be used as a kata task.\n\n\n\n\n\n\n### Example\n\n\n\n\n\n\n```\n\n```\n\n\n\n## Kata\n\n\n```\n\n\n\n### Firts\n\n### A walk\n\n```\n\n\n```\n", "\n```\n\n\n\n#### Examples\n\n####\n\nYour kata is a walk.\n\n## Your kata is a walk\n\n####\n\n> Kata\n\n> Kata\n\n> Kata\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n``", "\n\n\n\n```\n\nKata\n\n\n\n> The kata is still running, you have to wait for a kata to finish.\n\n```\n\nNote:\n> The kata is currently finished.\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n*\n\n\n\n\n```\n\n``", "\n\n\n\n```\n\n## The task\n\n> Kata\n> Kata\n> Kata\n> Kata\n> Kata\n> Kata\n> Kata\n> Kata\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n*\n\n\n\n```\n\n# The first", "\n```\n\n\n\n\n\n\n\n> Kata (Kata)\n> Kata (Kata)\n\n> A walk (Kata)\n> Kata (Kata)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n\n\n\n```\n\n```\n\n``", "\n```\n\n## Hard coding\n\n> See https://github.com/kata/kata\n>\n```\n```\n\n```\n\n\n```\n\n\n\n\n```\n\n\n\n\n*\n```\n\n```\n\n\n\n```\n\n\n*\n\n\n\n```\n\n```Python\npromen", "\n```\n\n\n\n\n### The Kata task\n\n## Kata\n\n\n\n> `kata <kata.com>`\n\n\n\n\n\n## A walk\n\n\n\n\n\n\n\n\n\n\n```\n\n## A walk\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n```\n\n# The", "\n```\n\n\n\n\n\n\n> Kata (1):\n> Kata (2):\n> Kata (2):\n> Kata (2)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n```\n\n# Example 1", "\n```\n\n\n\n\n\n## The task\n\n> Kata\n> Kata\n\n> Kata\n\n> Kata\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\n\"L\"\n\"R\"\n```\n\n\n\n```\n\n##", "\n```\n\n## Taking a kata\n\n\n\n\n\n\n> `kata`\n> `kata`\n\n> `kata`\n\n### Recently changed kata\n\n## Recent kata\n\n>\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n```\n\n*\n\n```\n\n``", "\n\n\n\n> Kata:\n> A kata task has finished running this kata.\n> A kata task has finished running this kata.\n\n>\n\n\n\n\n## Kata\n\n>\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n*\n\n\n\n\n```\n\n# The reason", "\n```\n\n\n\n\n## The kata task\n\n> The kata task is finished with this kata.\n> The kata task is finished with this kata.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n``\n\n*\n\n\n\n\n```\n\n\n```\n"], "prompt": "\nQUESTION:\n> If you've finished this kata, you can try the [more difficult version](https://www.codewars.com/kata/5b256145a454c8a6990000b5).\n\n\n## Taking a walk\nA promenade is a way of uniquely representing a fraction by a succession of \u201cleft or right\u201d choices. \n\nFor example, the promenade `\"LRLL\"` represents the fraction `4/7`.\n\nEach successive choice (`L` or `R`) changes the value of the promenade by combining the values of the\npromenade before the most recent left choice with the value before the most recent right choice. If the value before the most recent left choice was *l/m* and the value before the most recent right choice\nwas r/s then the new value will be *(l+r) / (m+s)*. \n\nIf there has never been a left choice we use *l=1* and *m=0*;  \nif there has never been a right choice we use *r=0* and *s=1*.\n\n\nSo let's take a walk.\n\n* `\"\"` An empty promenade has never had a left choice nor a right choice. Therefore we use *(l=1 and m=0)* and *(r=0 and s=1)*.  \nSo the value of `\"\"` is *(1+0) / (0+1) = 1/1*.\n* `\"L\"`. Before the most recent left choice we have `\"\"`, which equals *1/1*. There still has never been a right choice, so *(r=0 and s=1)*. So the value of `\"L\"` is *(1+0)/(1+1) = 1/2*\n* `\"LR\"` = 2/3 as we use the values of `\"\"` (before the left choice) and `\"L\"` (before the right choice)\n* `\"LRL\"` = 3/5 as we use the values of `\"LR\"` and `\"L\"`\n* `\"LRLL\"` = 4/7 as we use the values of `\"LRL\"` and `\"L\"` \n\n\nFractions are allowed to have a larger than b.\n\n\n## Your task\n\nImplement the `promenade` function, which takes an promenade as input (represented as a string), and returns \nthe corresponding fraction (represented as a tuple, containing the numerator and the denominator).\n\n```Python\npromenade(\"\") == (1,1)\npromenade(\"LR\") == (2,3)\npromenade(\"LRLL\") == (4,7)\n```\n```Java\nReturn the Fraction as an int-Array:\npromenade(\"\") == [1,1]\npromenade(\"LR\") == [2,3]\npromenade(\"LRLL\") == [4,7]\n```\n\n\n*adapted from the 2016 British Informatics Olympiad*\ndef promenade(choices):\n\t\nUse Call-Based format\nANSWER:\n"}}