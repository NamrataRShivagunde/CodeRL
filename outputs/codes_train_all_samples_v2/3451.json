{"3451": {"code": ["\n\n* Call-Based format\n*\n\n\n\nUse Call-Based format\n\n\n\n\n*\n\n\n\n* Call-Based format\n\n*\n\n\n\n\t\n\n\n       \n        B\n        G\n        B\n        G\n        B\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    R    G   G     B     G", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n*Adapted from the 2017 British Informatics Olympiad*\ndef\n\n\n       \n        B\n\n\n\n\n\n\n\nR\nG\nB\nC\n\n\n\n\nR\n    G\n    \n    G \n", "\n\n\n\n*A call-Based format\n\n\n\n\n*A call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*A call-Based format\n\n\n       \n        B\n        G\n        B\n       \n\n\n\n\n\n\nThe more complicated example is:\n\n\n\n\n\n\n\nR  G   B", "\n\n* Use Call-Based format*\n\n\n\n\n\n\n\n\n\n\t\n* Use Call-Based format*\n\n\n\n\t\n\t\n*\n\n\n        G G B B\n        B B G B B\n\n\n\n\n\n \n\n\n\n\n\n\n* Call-Based format*\n\n**Example**\n\n*\n  \n```", "\n\n\n\n* Use Call-Based format*\n\n*\n\n\n\n\n\n\n\n\t\n* Use Call-Based format*\n\n* Use Call-Based format*\n\n*\n\n\n\t\n\t\n\n\n\n\n\n\n\n  \n\n\n\n* Use Call-Based format\n\n\n\n\n\n\n\n  R  G  B\n  G", "\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\t\nReturn a row of coloured triangle\n\n\n*\n\n*\n\n\n\n\n\n\n  \n\n\n*\n\n\n    G G B B B\n    G B B\n    B B B B\n\n\n\n\n  \n\n\n    G G B", "\n\n\n\n\nUse Call-Based format\n\n\n\n*\nThe input string should contain only uppercase letters `R`, `G`, `B`, `B`, etc.\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  B\n      G\n      B\n\n```\n\n\n\n\n\n\n\n\n\n\n    \n``", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n*The end of the call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n        G G        B G\n        B G\n\n\n\n\n\n\n\n\nRRGBRGBB\n      G\n      B\n\n\n\n\n\n    R", "\n\n\n        Bubbler\n        Bubbler\n        Bubbler\n        Bubbler\n\n\n*\n\n\n\n\n*Test for invalid input*\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nBecomes colour:        G G B B B B B B\n\n\n\n\n\n    R   G   B   G", "\n\n\n\n* The default implementation*\n\nRRGBRGBB\n    G\n    B\n    G\n    B\n    G\n    B\n    G\n\n* The default implementation*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* The default implementation*\n\n\n```", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n```\n\n\n\n\t\n\n\n\n*\n\n\n    G     B     G     B     B\n      B     G     B\n      B\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n      #  The first row of colours is", "\n\n\n \n\n\n\n\n\n*\nUse Call-Based format\n*\n  def triangle(row):\n\t\n    return row\n\n*\n   \n \n\n\n\n\n\n\t\n   \n\n       \n\n\n\n\n\n\n\n\n    *  In the kata example:\n\n   \n\n\n    *\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n*Use Call-Based format*\n\nUse Call-Based format\n\nA Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\n*\nRRGBRGBB\nRRGBRGBB\nG\n\n```\n\n\n\n\n\n\n\n    G G G G", "\n\n\nRRGBRGBB\n    B\n    G\n    B\n    B\n    G\n    G\n    B\n    B\n    G\n    B\n   \n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nThe following example shows a more complicated example:\n```\n\n\n\n\n  [R G B B", "\n\n*Use Call-Based format*\n\n\n\n\n\n\n\n\n\n*Use Call-Based format*\n\n\t\n\n\n\n\t\n\n*\n\n        G G G G\n\n\n\nR B B G B B\n\n\n\n\n\n\n  \n\n```\n\nThis function is called by the kata method\n\n```\n\n\n``", "\n*\nUse Call-Based format\n*\n\n\n\n\n\n\n\n\n\n*\nUse Call-Based format\n*\n\n\n*\n\n\n\n\t\n\n\n        B G          B\n\n\n\n\n\n\n\n*\n\nThe algorithm is a much harder example*\n\n\n\n\n\n\n\n    G G G\n\n    * **B", "\n\n\n\n\n\n\n\n* The default case:\n\n  BGGGGGGGGGG\n\n* The default case:\n  BGGGGGGG\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n*\n\n\n```\n\n\n\n\nG G B\n    B G", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n*Test for invalid input*\n  \n\n\n\n\n\n*Test for invalid input*\n\n\n\n\n\t\n\n\n        G G G\n        B B G G\n        B B\n\n\n\n\n\n\n\n\n\n\n\n\n\nRRGBRGBB\n  \n\n\nR RGBRGBB", "\n\n* Use Call-Based format\n*\n\n\n\n\n\n\n\n\n\n\t\n\n\n* Use Call-Based format\n\n* Returns an input string\n*\n\n\n\n\t\n*\n\n\n\n\n\n\n\n   \n    \n\n```\n\n\n\nR G B G B\n    B G B B\n\n\n\n\n\n\n\tR", "\n\n\n\n\n*\nUse Call-Based format\n*\n\n\n\n*\nThe input string should not contain any uppercase letters\n*\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n        B\n\n\n\n\n     \n\n\n        B\n      G\n        B\n        G\n        B\n\n   \n\n\n\n\n\n    R G B"], "prompt": "\nQUESTION:\nIf you finish this kata, you can try [Insane Coloured Triangles](http://www.codewars.com/kata/insane-coloured-triangles) by Bubbler, which is a ***much*** harder version of this one.\n\nA coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is used in the new row. This is continued until the final row, with only a single colour, is generated.\n\nThe different possibilities are:\n```\nColour here:        G G        B G        R G        B R\nBecomes colour:      G          R          B          G\n```\n\nWith a bigger example:\n```\nR R G B R G B B\n R B R G B R B\n  G G B R G G\n   G R G B G\n    B B R R\n     B G R\n      R B\n       G\n```\n  \nYou will be given the first row of the triangle as a string and its your job to return the final colour which would appear in the bottom row as a string. In the case of the example above, you would the given `RRGBRGBB` you should return `G`.\n\n* The input string will only contain the uppercase letters `R, G, B` and there will be at least one letter so you do not have to test for invalid input.\n* If you are only given one colour as the input, return that colour. \n\n\n*Adapted from the 2017 British Informatics Olympiad*\ndef triangle(row):\n\t\nUse Call-Based format\nANSWER:\n"}}