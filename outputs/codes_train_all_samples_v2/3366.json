{"3366": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\t\n\n\nUse Call-Based format\n\n\nL(n,d)\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n1st 0123\n2", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```\n0123456789\n1st 0123\n2nd 0231\n3rd 0213\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n#\n\n\n```\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nThe function should be called for any number of digits, starting with 0 and ending with 0.\n\nExample:\n\n1st perm(n,d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n```\n3rd 0123", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nNth permutation of digits\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\n1st 0123", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\nL(n,d)\n\n\t\n\t\n\n\n\nUse Python format\n\n\n\n\n\n\n\n\n\n```\n1st 0123\n2nd 0123\n```\n\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nBAD:\n\nUse Python-Based format\n\nBAD:\n\nnth_perm(d,n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t```\n\t1st", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\nEVALUATION:\n\n\t\n\n\n\n```\n\n\t\n\n\t\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n\n```\n\n```\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\t\nUse Call-Based format\n\nANNOUNCEMENT:\n\nUse Python-Based format\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA string that represents the nth `d` digit", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\t\t# Use Call-Based format\n\n\t\n\n\n\nnth_perm(n,d)\n\n\n\t\n\n\n\n\n\n\n\n\n```\n\n\n\n\nN:\n\n```\n\n\n\n\n\n\n```\n\nN:\n\n", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nn = 0\nd = 0\n\nNOTE:\n\nUse Pythonic format\n\nNOTE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1st 0123 1st 0212 1st 0232\n\n\n\n\n\n\n\n\n\n\n```\n1st 0", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nnth_perm(n,d)\n\n\n\n\n\n\n123\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```\n1st 0123``\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n```\nL(1,2)```\n\n\n\n\n\n\nNth Permutation\n```\n\n\n\t\n\n\t\n\n\n\n\n\n\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\n\n```\n2nd 0123\n2", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n```\n\n\n```\n\n\n\n\n\n\nNth permutation\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    n = 8\n\td = 4\n\t\n\n\n\n\n\n```\n\n1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n```\n\n1st 0123\n1st 0123\n\n3rd 0123\n\n5th 0123\n3rd 0123\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n3rd 0123\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nLexicographic permutations are ordered combinations of digits 0123, 0212, 0232, 1023, and 1031.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1st 0123\n2nd 012\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n#\n#\n\nUse Python-Based format\n\n\nnth_perm(n,d)\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n1023\n\n\n\n\n\n```\n\n\n\n```\n\n1st 0123\n2nd", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Python-Based format\n\n\n\n\n\n\n\n\nnth\n\n\t\n\n\n\n\n\n\n\n\n```\n\n\n1023\n```\n\n\n\n\n\n\n```\n\nNth 1st 0123", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nnth_perm(n,d)\n\nUse Call-Based format\n\n\n\n\n\n123\n\n\n\n\n\n\n0123\n0123\n\n\n\n\n\n\n\n\"\"\"\n    if not hasattr(n, '", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n''')\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\nReturns:\n\nnth_perm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL(0,10) = ['0", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nThe function should return a `string`\n\nExample:\n\nnth_perm(n,d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples of the `nth_perm"], "prompt": "\nQUESTION:\nLexicographic permutations are ordered combinations of a set of items ordered in a specific way.\n\nFor instance, the first 8 permutations of the digits 0123, in lexicographic order, are:\n\n```\n1st 0123\n2nd 0132\n3rd 0213\n4th 0231\n5th 0312\n6th 0321\n7th 1023\n8th 1032\n```\n\nYour task is to write a function ```L( n, d )``` that will return a `string` representing the `nth` permutation of the `d` digit, starting with 0 (i.e. d=10 means all digits 0123456789).\n\nSo for `d = 4`, `L(7,4)` should return `'1023'`, and `L(4,4)` should return `'0231'`\n.\n\n\nSome things to bear in mind:\n\n\u2022 The function should return a `string`, otherwise permutations beginning with a 0 will have it removed. \n\n\u2022 Test cases will not exceed the highest possible valid values for `n`\n\n\u2022 The function should work for any `d` between `1` and `10`.\n\n\u2022 A value of 1 for `n` means the 1st permutation, so `n = 0` is not a valid input.\n\n\u2022 Oh, and no itertools ;)\ndef nth_perm(n,d):\n\t\nUse Call-Based format\nANSWER:\n"}}