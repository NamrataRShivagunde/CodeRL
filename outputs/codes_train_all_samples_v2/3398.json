{"3398": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nDOCS:\n\n\n\t\tsolve(arr)\n\n\t\t\nUse Call-Based format\n\nDOCS:\n\t\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n# TODO\n\n\n\n# TODO:\n#\n#", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nExample:\n\n\n\n\n\n\ndef\n\t\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\nHaskell\n\nThe idea is:\n```Kata\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\t\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nCONDITION:\n\nUse Call-Based format\nTHEN:\n\nprint(arr)\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```Kata\n#", "\nUse Call-Based format\n\n\n\n\n\nHaskell\n\nThis task can be used to test the progression of an array of arrays\n\n\n\n\n\t\nUse Call-Based format\n\nCALL:\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nHaskell\n\n\n\n\n\n\n# Note:\n# The Kata", "\nUse Call-Based format\n\n\n\n\n\n\n\nuse Call-Based format\n\nUse Call-Based format\nPRECONDITION:\n\nUse Call-Based format\nPOSTCONDITION:\n\n\n\n\n\ndef\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1,2,3,5,6,5,3]\n\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nWHERE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKata\n\n\n\n# This Kata\n\nKata\n\n\n\n\n# Kata\n\n\n\n```H", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\nNOTE:\n\n\n\n\n\n\ndef solve(arr):\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```Haskell\nIf you are using the", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nRETURN:\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```Kata\nThe Kata Kata task is:\n\n\n\n\n", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n    Return the minimum number of changes needed to convert an array\n\n   \n\n   \n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nNOTE:\n\n\t\nUse Call-Based format\n\nNOTE:\n\n\n\n\ndef\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf an array of length > 3, it will be converted to an", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nWITH:\n\n\t\tuse Call-Based format\n```\n\n\t\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nIf you are", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n```\n\nUse Call-Based format\n```\n\n\n\nfunction solve(arr)\n\nfunction\n\n\n\n\nfunction\n\n\n\n\n\n\n\n\n\n\nKata:\n\n\n\n\n\n\n\n# This is the Kata basis", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nCall-Based format\n\n\n\n\n\n\n\n\nThe array must be a `numpy.ndarray`\n\nExample:\n\nsolve(arr)\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\t```", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nRETURN:\n\nReturn the minimum number of changes needed to make an arithmetic progression.\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\nHaskell\nThe code below for this task:\n\n\n\n\n\n\n```", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\n    arr\n\t\nUse Call-Based format\n\n   \n\t\n\n\n\n\n\n\n\n\n\n\n\nKata:\n\n\n\n\n\n```Haskell\n\n\n\n    If the array is already", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n>>>\ndef solve(arr):\n\t\nUse Call-Based format\n>>>\n\n:\n\n\ndef\n\n:\n\n\n\n\n\n\n\nHaskell\n\n\nKata:\n\n\n\n\n\n```Kata", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKata:\n\nThe Kata Kata task allows you to define an arithmetic progression\n\n\n\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n    Example:\n\n\t\nUse Call-Based format\n\n    Example:\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nHaskell\n\n\n\n\n    `length`\n\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nRETURN:\n\nA positive integer\n\nA negative integer\n\nA negative integer\n\nA negative integer\n\nA negative integer\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```Haskell\nFor an"], "prompt": "\nQUESTION:\nIn this Kata, we define an arithmetic progression as a series of integers in which the differences between adjacent numbers are the same. You will be given an array of ints of `length > 2` and your task will be to convert it into an arithmetic progression by the following rule:\n```Haskell\nFor each element there are exactly three options: an element can be decreased by 1, an element can be increased by 1 \nor it can be left unchanged.\n```\nReturn the minimum number of changes needed to convert the array to an arithmetic progression. If not possible, return `-1`.\n```Haskell\nFor example: \nsolve([1,1,3,5,6,5]) == 4 because [1,1,3,5,6,5] can be changed to [1,2,3,4,5,6] by making 4 changes.\nsolve([2,1,2]) == 1 because it can be changed to [2,2,2]\nsolve([1,2,3]) == 0  because it is already a progression, and no changes are needed.\nsolve([1,1,10) == -1 because it's impossible.\nsolve([5,6,5,3,1,1]) == 4. It becomes [6,5,4,3,2,1]\n```\n\nMore examples in the test cases. Good luck!\ndef solve(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}