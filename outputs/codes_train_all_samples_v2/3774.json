{"3774": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\ndefine a function that takes one integer argument\n\n## Examples\n\nmov edi, 1\ncall is_prime\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Example\n\n\n\n\n\n\n\n\n\n    # 0.5 =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n## Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n## Example\n\n\n\n\n## Examples\n\n## 1.9.1\n\n\n\n\n\n\n\n## Example\n\n\n\n## Examples\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n is_prime\n\nmov edi, -1\ncall is_prime\n\nmov edi, 0\n\nmov edi, -2\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Primes\n\n\n\n\n\n\n\n## Example\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n# Call-Based format\n\n\n\t\n\n\n\n\t\n\n\n\nis_prime(num)\n\n\n\n\n\n\n## Example\n\n# Number functions\n\n\n\n\n## Output\n\n\n\n\n\n## Example\n\n\n\n# Use Python function\n``", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n## Example\n\n\n\t\nUse Call-Based format\n\n## Function\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Precondition:\n\n\n\n\n\n## Example\n\nmov edi, 1\n\n\n\n\n## Example\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\nEAX <- 1 (true)\n\nEAX <- 1 (false)\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Note:\n\n\n\n\nDefine a function that takes one integer", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n## Use Call-Based format\n\n#\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n## Examples\n\n# 1,2,3\n is_prime(num)\n\n## Example\n\n\n\n\n\n\n\n# 2^31\n# The 2", "\nUse Call-Based format\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n# Use Call-Based format\n\n\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n## Examples\n\n## Is a prime number\n\n## Example\n\n# 1\n\n\n#\n\n\n\n## Examples\n\n\n\n\n\n\n## Example", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n## Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Example\n\nmov edi, 1\nmov edi, -1\ncall is_prime\n\n\n\n\n\n\n\t\n## Example", "\nUse Call-Based format\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n\t\n\n\n\n\n\n\t\n\n\n\n\n\nis_prime(num)\n\n# Example\n\nmov edi, 1\n\nmov edi, -2\n\n\n:\n\n\n\n\n\n\n\n\n\n# Example\n\ndefine is_", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nDefine a function that takes one integer argument\n\n## Example\n\nmov edi, 1\ncall is_prime\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Check\n\n\n\n\n\n\n\n## Example\n\n\n\n## Example\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n# Call-Based format\n\n\n\n\n\n## Example\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n# Call-Based format\n\n\n\n\n\n\n\n\n## Examples\n\n## Use Call-Based format\n\n## Call-Based\n\n\n\n\n\n\n\n\n\n##", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\tIs a prime number\n\n## Example\n\nmov edi, 1\ncall is_prime\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n## Example\n\n\n\n\n\n## Example:\nDefine a function that takes one integer argument\n\n\n\n\tDefine a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n EAX <- 1 (true)\n\nmov edi, 0\ncall is_prime    ; EAX <- 0 (false)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # Check for a prime\n\n", "\n\n\n\n\n\n\n\n\n\t\t\n\n\ndefine a function that returns a boolean value\n\n## Examples\n\nmov edi, 1\ncall is_prime    ; EAX <- 1 (true)\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Output\n\n\n\n\n## Example\n\nmov edi, 2\n\n\n##\n\n", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n## Use Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n### Example\n\n\n\n## Examples\n\n\n\n\n## Example\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\ndef __init__(self,", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n    Use Call-Based format\n\n## Example\n\nmov edi, 1\ncall is_prime    ; EAX <- 1 (true)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Evaluation\n\nis_prime(num)\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n## Example\n\nis_prime(num)\n\n\n\n\nis_prime(num)\n\n## Example\n\n\n\n\n\n\n\n\n\t## Example\n", "\n\n\n\nUse Call-Based format\n\n## Use Call-Based format\n\n\n\n\n\n## Example\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n## Examples\n\n## Examples\n\n## The following are all implemented\n\n## Examples\n\n## Examples\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n\n## Example", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n EAX <- 1 (true)\n\nmov edi, 2\ncall is_prime    ; EAX <- 1 (false)\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n# Is prime\n\n\n## Example\n\n\n\n##"], "prompt": "\nQUESTION:\nDefine a function that takes one integer argument and returns logical value `true` or `false` depending on if the integer is a prime.\n\nPer Wikipedia, a prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n## Requirements\n\n* You can assume you will be given an integer input.\n* You can not assume that the integer will be only positive. You may be given negative numbers as well (or `0`).\n* **NOTE on performance**: There are no fancy optimizations required, but still *the* most trivial solutions might time out. Numbers go up to 2^31 (or similar, depends on language version). Looping all the way up to `n`, or `n/2`, will be too slow.\n\n## Example\n```nasm    \nmov edi, 1\ncall is_prime    ; EAX <- 0 (false)\n\nmov edi, 2\ncall is_prime    ; EAX <- 1 (true)\n\nmov edi, -1\ncall is_prime    ; EAX <- 0 (false)\n```\ndef is_prime(num):\n\t\nUse Call-Based format\nANSWER:\n"}}