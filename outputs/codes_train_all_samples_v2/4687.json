{"4687": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nn = 12; decomp(12) -> \"2^12\"\n\n\n\n\n\nn = 12; decomp(12)\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 1; decomp(1) -> \"1\"\n\nn = 2; decomp(2) -> \"2\"\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nreturn \"2^21 * 3^2 * 5^3 * 7 * 11 * 23\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ->\n\t\nreturn \"2^21 * 3^5 * 7 * 11 * 25\"\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nn = 10; decomp(10) -> \"2^10 * 3^9 * 5^2 * 7\"\n\n:\n\nn =\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n```\n\n\n\n\n```\n\n\nUse Call-Based format\n\nThe aim is the kata\n```\n\n\n\n\n\n\n```\n\nThe aim is", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n```\n\n\nUse Call-Based format\n\nThe aim of the kata is the aim of the kata\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n```\n\n\nUse Call-Based format\n\nThe aim is the kata\n\n\n\n\n\n\n\n```\n\n\nn = 2;", "\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\nUse Call-Based format\n\nNote:\n\n- n is a prime factor.\nNote:\n\nn! is a prime factor.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 123;\n\n\n\n\n\nThe aim is", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\nUse Call-Based format\n\nReturn:\n\nn!\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 3; decomp(3)\n\n\n\n\n\n\n\n```\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n```\n\nUse Call-Based format\n\nn = 1; decomp(n)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n# The", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n```\n\n\n\n\nn = 4000; decomp(4000) -> \"2^4 * 3^6 * 7 * 23\"\n", "\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\nUse Call-Based format\n\n```\nn = 12; decomp(12)\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\nThe aim", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```\n\n# The a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nn = 100; decomp(100) -> \"100\"\n\n:\n\n\n\n\n```\n\nn = 12;", "\nUse Call-Based format\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nn = 2; decomp(2) -> 2^2 * 3^3 * 5^2 * 7^2 * 7^3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\nn = 12; de", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\n\n\nUse Call-Based format\n```\n\n\n\n\nn = 12; decomp(12)\n\n\n\n\n\n\n``", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nn = 2; decomp(2) -> 2^3\n\n`n` can be an integer\n\n\n\n\n\n\n\n\n```\n\n# The", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n```\n\n\nThe aim is the kata\n```\n\n\n\nn = 3; decomp(3) -> 3^4\n\n\n\n\n``", "\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n```\n\nn = 12; decomp(12) -> \"2^12 * 3^4 * 5^3 * 7 * 9\"\n\n\n\n\n\n\n\n\n\n\n```\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 1; decomp(1) -> \"1^2 * 3^3 * 5^2 * 7 * 11\"\n\n\n\n\n``"], "prompt": "\nQUESTION:\nThe aim of the kata is to decompose `n!` (factorial n) into its prime factors.\n\nExamples:\n```\nn = 12; decomp(12) -> \"2^10 * 3^5 * 5^2 * 7 * 11\"\nsince 12! is divisible by 2 ten times, by 3 five times, by 5 two times and by 7 and 11 only once.\n\nn = 22; decomp(22) -> \"2^19 * 3^9 * 5^4 * 7^3 * 11^2 * 13 * 17 * 19\"\n\nn = 25; decomp(25) -> 2^22 * 3^10 * 5^6 * 7^3 * 11^2 * 13 * 17 * 19 * 23\n```\n\nPrime numbers should be in increasing order. When the exponent of a prime is 1 don't put the exponent.\n\nNotes\n\n- the function is `decomp(n)` and should return the decomposition of `n!` into its prime factors in increasing order of the primes, as a string.\n- factorial can be a very big number (`4000! has 12674 digits`, n will go from 300 to 4000).\n- In Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use `dynamically allocated character strings`.\ndef decomp(n):\n\t\nUse Call-Based format\nANSWER:\n"}}