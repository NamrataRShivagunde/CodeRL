{"3428": {"code": ["\n\n\n\n# Description\n\n* QR-code*\n\n* Version 1*\n\n* Version 2*\n\n\n\n\n# Representations\n\n* Version 2*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         \n         \n\n\n          [, ]]\n\n```\n\n,, ],\n 0, 0,", "\n\n# Example\n\n# Description\n\n#\n\n# Input/output\n\n# Example\n\n* The message to be decoded*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n# Description\n\n\n         \n        ,\n\n\n          [, ]]\n\n```\n\n, ],\n\n 0, 0", "\n\n\n\n# Description\n\n# Example:\n\n# 1. Decode a QR-code\n\n# 2. Decode a message.\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n 0, 1, 0, 1, 1, 1 ]\n\n\n\n         \n\n\n          [ 1,, ]]\n\n\n,, ]]\n\n#\n 0,", "\n\n\n# Input/output\n\n\n\n\n\n\n\n\n# Example\n\n# Example example\n\n# Example 1\n\n# Example 2\n\n# Example 3\n\nmessage = [0,1,1,1,1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, ]\n\n```\n\n 1, ]\n\n\n 0,", "\n\n\n# Description\n\n*\n\n\n\n# Contribution\n\n*\n\n*\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n# Example\n\n\n 0, 0, 0, 0, 0, 1, 1, 1 ],\n\n\n\n,, ]]\n\n```\n\n,,\n 0, 0, 0", "\n\n\n# Description\n\n# Example\n\n# Description\n\n#\n\n# Notes\n\n# Information\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n 1, 0, 1, 0, 0, 1, 0 ]\n\n\n        ,\n\n, ],\n         \n```\n,,,\n         \n 0,", "\n# Message\n\n# Message\n\n\n\n\n# Translations\n\n*Translations appreciated*\n\n\n\n# Overview\n\n\n\n\n\n# Output\n\n\n\n\n\n\n\n 1, 0, 0, 1, 0, 1 ]\n\n\n\n        ,\n\n 0,, ]]\n\n```\n\n 0, ]\n\n\n 0, 0", "\n\n\n# Author\n\n*Authors*\n\n\n\n\n\n# Description\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Example\n\n```python\n\n# QR-code\n\nmessage = [1,2,3]\n\n\n\n\n\n        ,,, ],\n         \n```\n\n 1, ]\n\n\n 0,", "\n\n# Input/output\n\n\n\n# Example\n\n# Examples\n\n# Input\n\n* Translations appreciated*\n\n* Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          1,\n\n```\n,, ]\n\n\n, 0, 0, ],\n\n\n 0, 0", "\n\n\n# Question\n\n* Translation appreciated*\n\n* Translations appreciated*\n\n* Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n# Output\n\n\n\n\n\n\n\n\n\n\n\n 0, 1,\n\n 0, 1, 1, 1 ]]\n\n\n\n,, ],\n\n#\n 0, 0", "\n\n\n\n\n# Description\n\n# Description of the QR Code\n\n#\n\n\n\n\n\n# Description of the decode\n\n\n\n\n\n\n# Example\n\n# Example\n\n\n 0, 0, 0, 0, 0, 0, 0, 1 ],\n\n\n\n 0,, ]]\n\n```\n\n#, ]\n#\n\n 0,", "\n\n\n# Description\n\n* QR-code*\n\n* The qr code is encoded using the `version` number\n*\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n 0, 1, 0, 1, 1, 1 ]]\n\n\n\n,, ]]\n\n```\n\n, ],\n \n 0,", "\n\n\n\n# Note\n\n*The original code is `qrcode`.\n*The original code is `message`.\n*\n\n\n\n\n\n\n\n\n\n# Notes\n\n\n\n\n\n\n 1 ],\n          [ 0 ]\n\n          1, 1,\n\n 0, 0, 1 ],\n,\n```\n,, ]]\n\n\n 0,", "\n\n# About\n\n\n\n\n\n\nExample:\n\n# Description\n\n*\n\n\n\n\n 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1 ]\n 1, 1, 1, 0, 1, 1 ]\n\n\n\n 0,,\n```\n\n# Example\n\n\n\n\n 0, 0, 0", "\n\n\n\n# Translation\n\n*Translation appreciated*\n\n*Translation appreciated*\n\n*Translation appreciated*\n\n*Translation appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         \n        ,\n\n ],\n,\n```\n\n\n,, 0, 1 ]\n\n\n 0", "\n\n\n\n\n# Description\n\n#\n\n# Message\n\n\n\n\n\n\n\n\n# Information\n\n#\n\n# Example\n\n# Description\n\n# Description\n\n# Example:\n\n\n\n\n\n\n\n\n          0, 0, 0, 0,\n\n 0, 0,, ]]\n\n```\n\n#, ]\n#\n 0,", "\n\n\n# Examples\n\n###\n# Message\n#\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Example\n\n# Messages\n\n\n# Example\n\n\n# Description\n\n\n\n\n\n\n 1, 0, 0, 0 ],\n\n         \n        ,\n\n,, ]]\n\n\n,, ],\n\n#\n 0,", "\n\n\n\n# Question\n\n* Decoding*\n\n* Version 1*\n\n* Version 2*\n\n* Version 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 0, 0, 0, 0, 0, 0, 1 ]]\n\n\n\n\n,, ]\n\n```\n\n, ],\n\n 0,", "\n# Description\n\n\n# Representations\n\n# Parameters\n\n* Parameters\n*\n\n*\n\n* Translation\n*\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n 1, 0, 0, 0, 0, 0, 1 ]\n\n\n        ,\n\n,, ]]\n\n```\n\n\n,,\n 0, 0, 0", "\n\n\n# Translation\n\n* Translations appreciated*\n*\n\n\n\n\n\n\n\n# Description\n\n\n\n# Example\n\n# Example\n\n\n# Example\n\n* Translations appreciated*\n\n\n\n\n\n\n\n\n\n         \n         \n\n\n          [, ]]\n\n```\n\n#,,\n 0, 0, 0"], "prompt": "\nQUESTION:\n*Translations appreciated*\n\n# Overview\n\nYour task is to decode a qr code.\nYou get the qr code as 2 dimensional array, filled with numbers. 1 is for a black field and 0 for a white field.\nIt is always a qr code of version 1 (21*21), it is always using mask 0 ((x+y)%2), it is always using byte mode and it always has error correction level H (up to 30%). The qr code won't be positioned wrong and there won't be any squares for positioning exept the three big ones in the corners.\n\nYou should return the message inside the qr code as string.  \nThe QR Code will always be valid and be of `version 1`, meaning the decoded message will never be more than 8 characters long. The way to decode a complete QR-code is explained below, but keep in mind that in this kata, you'll only have to decode the parts in green in the picture below:\n\n\n\n\n# Input/ouput\n\n* Input: 2D array of `0` (white) and `1` (black) values\n* Output: the decoded message, according to the process described below.\n\n```python\nqrcode = [[ 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 ],\n          [ 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1 ],\n          [ 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 ],\n          [ 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 ],\n          [ 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 ],\n          [ 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1 ],\n          [ 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 ],\n          [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n          [ 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1 ],\n          [ 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1 ],\n          [ 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1 ],\n          [ 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0 ],\n          [ 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0 ],\n          [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0 ],\n          [ 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1 ],\n          [ 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 ],\n          [ 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1 ],\n          [ 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0 ],\n          [ 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 ],\n          [ 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0 ],\n          [ 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1 ]]\n\nreturn \"Hello\"\n```\n```C\nint qrcode[21][21] = {{ 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },\n                      { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1 },\n                      { 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },\n                      { 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },\n                      { 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },\n                      { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1 },\n                      { 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },\n                      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },\n                      { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1 },\n                      { 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1 },\n                      { 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1 },\n                      { 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0 },\n                      { 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0 },\n                      { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0 },\n                      { 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1 },\n                      { 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },\n                      { 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1 },\n                      { 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0 },\n                      { 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },\n                      { 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0 },\n                      { 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1 }};\n\nreturn \"Hello\";\n```\n\n\n\n# Decoding a QR-code\n\nHere comes the explaination on how to decode a qr code. You can skip it, if you already know how it works:\n\n### Postionning information\n\nFirst of all we have to take a look at the big three positioning fields in the corners.\n\n\n\nYou can see on the image that these fields are connected.  \nThe fields are just there for the positioning and I told before that the qr code will be always positioned correctly so you can ignore them.\n\n### Mask information\n\nThe bits next to the positioning fields give us information about the mask and the error correction level the qr code uses. I wrote above that it is always mask 0 and always error correction level H, so we can also ignore that stuff.\n\n\n\n### Reading information\n\nNow we start with the important stuff. Go through the qr code like the red arrow shows on this picture (btw I made it with paint so don't judge me)\n- We start in the lower right corner\n- Then we go one to the left\n- Then we go one up and one to the right\n- And so on just look the red arrow\n\n___Important:___ Remember that everything inside the blue boxes has another purpose than encoding information, so don't forget to skip those parts.\n\n\n\nIn the image below, you may find the complete pattern to read information in a QR-code. But keep in mind you'll be handling only \"QR-code version 1\", so you don't need to read the full set of data (see picture at the top if needed).\n\n\n\n### Decoding information\n\nWe have to build a bit sequence now. In order to do that we will use mask 0 definition which is `((x+y)%2)==0`, where:\n- x and y are the indexes of our 2 dimensional array (0-based)\n- if the condition of our mask is true, we have to convert the pixel: black -> 0 and white -> 1\n- A mask is used to prevent long sequences of identical bits so that a scanner can better recognize the code\n\nFor each black field add 1 to our bit sequence and for each white field add 0 to our bit sequence, don't forget that many bits get converted because of mask 0.\n\nLet's do the first bits together:\n\n* We start with the first pixel (in the lower right corner, where also the red arrow begins) which is black, but we have to use mask because (20+20)%2 is 0, therefore we don't add 1 to our bit sequence but 0.\n* Next field is white. This time we don't use mask because (20+19)%2 isn't 0, so we add a 0 to our bit sequence.\n* Next field is black. This time we don't use mask because (19+20)%2 isn't 0, so we add a 1 to our bit sequence.\n\nImportant (!): Since we're limiting ourselves to version 1, we have to continue that process only until our bit sequence is 76 long, because the input will never be longer than eight characters.\n\nAt the end you get a bit sequence:\n```\nbits:      0100000000100100100001101001000011101100000100011110110000010001111011001111\nlegend:    MMMMssssssss...\n\n- \"M\": mode bits (4 bits)\n- \"s\": size message bits (8 bits)\n- ...: message bits and error correction information\n```\n\nThis bit sequence is representing the following information\n* First 4 bits show mode: `0100`. This isn't important for us, because I told you before that we will use always byte mode in this kata.\n* The following 8 bits show the length of the encoded word: `00000010`. This is the binary representation of number 2, so we know our word is 2 characters long.\n* The following bits are data bits followed by error correction bits (but you can ignore error correction bits, because there won't be any errors). We know our word is 2 chars long, so we take the next 16 bits (because 1 char=8 bits):\n  - First group of 8 bits: `01001000`. This is `72` in decimal which is ascii value of `\"H\"`.\n  - Second group of 8 bits: `01101001`. This is `105` in decimal which is ascii value of `\"i\"`.\n\nSince we don't handle in this kata error correction, we got our word/output: `\"Hi\"`.\n\nGood luck :)\ndef scanner(qrcode):\n\t\nUse Call-Based format\nANSWER:\n"}}