{"3260": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nA function receives a number of integers ```n1, n2,..., np```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\nA function receives numbers\n\n\n\n\n## Examples\n\nA function", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe function rearranges the number ``k`` and the number ``k > 0``\n\n\n\n\nA function receives a certain numbers of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n## Example\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n# Example\n\n\n\n\n\n\n# Example\n\n\n\n\n\n# Example\n\n# Rearrangement:\n#", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA function receives a certain number of integers ```n1, n2,..., np```\nand a factor ```k```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\npython\nrearranger(k)\n\n\nA function receives a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nrearranger(k, *args)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nrearranger(k, *args)\n\n## Examples\n\n\n\n\n\n\n\n\n\n```python\nre", "\nUse Call-Based format\n\n\nUse Call-Based format\n## Examples\n\nuse Call-Based format\n\n\n\n\n\n\n\nA function receives a certain number of integers ```n1, n2,..., np```\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\nA function receives a certain number of integers\n\n\n\n\nA function receives", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nrearranger(k, k, k, k, k, k)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\nA function receives a certain numbers of integers\n\n\n\n\nA function receives a certain numbers of integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n## Examples\n\npython\nrearranger(k, *args)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA function receives a certain numbers of integers ```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nA function receives a certain number of integers\n\n```python\nrearranger(n1, n2, n3..., np)```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrearranger(k)\n\n\nA function receives a certain numbers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n## Example\n\n# Example\n\nfunction\nrearranger(k)\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n\n\n\n\n\n# Example\n\n\n\n\n# Example\n\n\n# Example\na function receives a certain", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nA function receives a certain numbers of integers ```n1, n2, n3..., np```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n# Example\n\nA function receives a certain numbers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nA function receives a certain number of integers ```n1, n2,..., np```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrearranger(k, *args)\n\n\n\nA function receives a certain numbers of", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nrearranger(k, *args):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n## Examples\n\nA function accepts two numbers of integers ```n```\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n# Example\n\n\n\nUse Call-Based format\n\n\n\n\n\nA function receives a certain number of integers and a factor ```k```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\nA function receives a certain number of integers ```n```\n`\n\n\n\n\nA function receives a certain numbers of", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n## Examples\n\n\n\n\n\n\nA function receives a certain numbers of integers ```n1, n2,..., np```\n\n\n\n\n\n\n\n\n# Examples\n\n\n\n\n\n\n\n\n\n\n# Examples\n#\nA function receives a certain", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n## Examples\n\nA function receives a certain numbers of integers\n\n\n\n\n\n\n\n\n\n\n## Examples\n\nA function receives a certain number of integers\n\n\n\n\n## Examples\n\nA", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n## Example:\nUse Call-Based format\n\n\n\n\n\n\n\n\nA function receives a certain numbers of integers ```n1, n2,..., np```\n\n\n\n\n\n\n\n\n\n\n\n## Examples\nA function receives the minimum number\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\nRearranger:\n\nUse Call-Based format\n\n## Example\n\nrearranger(k, *args):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nrearranger(10, 20, 2, 32,", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA function receives a certain number of integers ```n1, n2,..., np```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA function returns a number of integers\n\n\n\n\n\n\nA function receives a certain numbers of", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nA function takes a minimum number and returns a number\n\nQUESTION:\nA function takes a minimum number\nQUESTION:\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\nrearranger(k)\n\n\nA function receives a certain numbers"], "prompt": "\nQUESTION:\nA function receives a certain numbers of integers ```n1, n2, n3 ..., np```(all positive and different from 0) and a factor ```k, k > 0```\n\nThe function rearranges the numbers ```n1, n2, ..., np``` in such order that generates the minimum number concatenating the digits and this number should be divisible by ```k```.\n\nThe order that the function receives their arguments is:\n```python\nrearranger(k, n1, n2, n3,....,np)\n```\n\n## Examples\n\n```python\nrearranger(4, 32, 3, 34, 7, 12)  == \"Rearrangement: 12, 3, 34, 7, 32 generates: 12334732 divisible by 4\"\n\nrearranger(10, 32, 3, 34, 7, 12) == \"There is no possible rearrangement\"\n```\nIf there are more than one possible arrengement for the same minimum number, your code should be able to handle those cases:\n```python\nrearranger(6, 19, 32, 2, 124, 20, 22) == \"Rearrangements: 124, 19, 20, 2, 22, 32 and 124, 19, 20, 22, 2, 32 generates: 124192022232 divisible by 6\"\n```\n\nThe arrangements should be in sorted order, as you see: `124, 19, 20, 2, 22, 32` comes first than `124, 19, 20, 22, 2, 32`.\n\nHave an enjoyable time!\n\n(Thanks to `ChristianE.Cooper` for his contribution to this kata)\ndef rearranger(k, *args):\n\t\nUse Call-Based format\nANSWER:\n"}}