{"3038": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\ndef solve(st):\n\t\nUse Call-Based format\ndef\n:\n\n(st):\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n    `[For Kata return string]`\n", "\nUse Call-Based format\n\n\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n:\n\n(st):\n\n:\t\n\n\n\t\n\n\n\n\n`\n\n\n\n\nIn this Kata, you will be given a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\ndef solve(st):\n\t\nUse Call-Based format\n\n\n\n(st) = st\n\ndef\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\n`\n\n```\n\n\n```\n\nRETRIEVE:\n\n``", "\n\n\n\n\nUse Call-Based format\n\n\n\ndef solve(st):\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n```\n\n        Kata:\n\n        Kata:\n\n\n\n\n```\n\n\n```\n\n\n```\n", "\n\n\n\nUse Call-Based format\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\nUse Python format\ndef\n:\n\n(st) = st\ndef\n\t\n\n\n\n\n\t\n\n\n\n\n`\n\n\n\n```\n\n\n\n\n\n```\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\n\n\nUse Call-Format\n\n\n\n\t\nUse Python format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n`\n\n\n```\n\n\nA Kata, you", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\ndef solve(st):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n```\n\n\n```\n\nKata:\n\nIn this Kata\n\n\n\nIn this K", "\n\n\n\n\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n\n\n\ndef solve(st):\n\t\n\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n`\n\n`\n\n\n\n```\n\n\n\n```\nIn this Kata, you will", "\n\n\n\n\nUse Call-Based format\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n:\n\n(st) = st\ndef\n\t\nUse Call-Based format\t\t\n\n\n\t\n\n\n\n\n\n```\n\n\nsolve(st)\n```\n\n\n```\n", "\n\n\n\n\nUse Call-Based format\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\nUse Call-Based format\ndef\n:\n\n\n\n\t\nUse String format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n`\n\n\n\n```\n\n\n```\n", "\n\n\n\n\n\nUse Call-Based format\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n:\n\ndef\n\t\n\n\n\n\n\t\n\n\n\n\n`\n\n\n`\n\n\n# Kata:\n# Kata is a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\ndef solve(st):\n\t\n\n:\n\n\n\n\t\nuse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n```\n\nKata:\n\n\tKata\n\n\n\n```\nIn this K", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\nUse Call-Based format\ndef\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n`\n\n\n`[For Golang return rune]`\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\nUse Call-Based format\ndef\n\n\n(st) = st\ndef\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA Kata task is a task that can be", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n:\n(st) = st\n\ndef\n\t\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n```\n\n\n\n\n```\nIn this", "\n\n\n\n\nUse Call-Based format\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n\n\n\n(st) = st\ndef\n\t\nUse Python format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\n\nIn this Kata, you will", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\ndef solve(st):\n\t\n\t\nUse Call-Format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\n\n`\n\n\n\n```\n\n\nIn this Kata, you will be given a string that contains a string of k", "\n\n\n\nUse Call-Based format\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n:\nst = st\n\ndef solve(st):\n\t\n\n\n\n\n\n\n\n\n\n\n\nUse Kata format\n\n\n`\n\n\n\nIn this Kata, you will be given a", "\n\n\n\n\n\nUse Call-Based format\n\ndef solve(st):\n\t\n\t\nUse Python 3 format:\n\nUse Python 2.7 format\n(st) = st\n\n\t\nUse Python 2.7 format\n\n\n\n\n\nUse Call-Based format\t\n\n\n\n\n`\n\n\n```\n\n\nIn this Kata:\nIn", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\t\nUse Call-Based format\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n\t\n\nUse Kata format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this Kata, you will just ask you"], "prompt": "\nQUESTION:\nIn this Kata, you will be given a string and your task is to return the most valuable character. The value of a character is the difference between the index of its last occurrence and the index of its first occurrence. Return the character that has the highest value. If there is a tie, return the alphabetically lowest character. `[For Golang return rune]`\n\nAll inputs will be lower case. \n\n```\nFor example:\nsolve('a') = 'a'\nsolve('ab') = 'a'. Last occurrence is equal to first occurrence of each character. Return lexicographically lowest.\nsolve(\"axyzxyz\") = 'x'\n```\n\nMore examples in test cases. Good luck!\ndef solve(st):\n\t\nUse Call-Based format\nANSWER:\n"}}