{"4361": {"code": ["\n\nUse Call-Based format\n\n\n\n\n\n\n\nlower_limit = 1000\nk = 10\nresult  = 625\n\n\n\n\n\n\n\n\n, result):\n\n\n\n\n\n\n\n:\n\n\n\n\nlower_limit = 5\nk = 2\nresult = 6\n\n\n\n\n\n\tresult = 625\nlower_limit =", "\n\n\n\n\n\t\nUse Call-Based format\n\nlower_limit = 5000\nk = 2\nresult = 625\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nk = 2\nlower_limit = 2\nresult  = 625\n\nk = 2\n\n\n\n\n\n\nresult =\nlower_limit", "\n\n\n\n\n\n\nlower_limit = 1000\nk = 5\nresult = 625\n\n\n\n\n\n\n\n\n\n\n\n\nlower_limit = 1000\nk = 2\nresult  = 625\n\n\n\n:\n\n\n\n\n\n1 <= result <= k\n\n\n\n\n\n\n1 <= result <= k\n2 <= k < 3\n3", "\n\n\n\n\n\n\nlower_limit = 100\nk = 1\nresult = 625\n\n\n\n\n\n\n\nlower_limit = 100\nk = 1\nresult  = 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  lower_limit = 10\nk = 2\n\n\n\n\n\n\nresult = 1\nlower_limit = 3", "\n\n\n\n\n\n\nlower_limit = 500\nk = 3\nresult = 625\n\n\n\n\n\n\nlower_limit = 500\nk = 3\nresult  = 625\n\n_\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult = 625\nlower_limit = 2\nk = 1\n\n\nresult = 625", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nlower_limit = 625\nk = 2\nresult = 625\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n1 <= result <= 1e6\n1 <= k <= 5\n1 <= k <= 6\n\n\n\n\n\n\nresult = 1e", "\nUse Call-Based format\n\n\n\n\n\nlower_limit = 0\nk = 1\nresult  = 0\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nExample:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nlower_limit = 625\nk = 2\n\n\n\n\n\n\n```", "\n\n\n\n\nUse Call-Based format\n\n\nlower_limit = 0\nk = 0\nresult  = 625\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlower_limit = 100\nk = 5\nresult  = 625\n\nlower_limit = 5\n\n:\n\n\n\n\nresult = 0\nlower_limit =", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nlower_limit = 100\nk = 2\nresult  = 625\n\n, result):\n\t\n\n\t\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\n:\n\nlower_limit = 5\nk = 2\n\nresult  = 625\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nlower_limit = 100\nk = 3\nresult  = 625\n\n_\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlower_limit = 10\nk = 2\nresult = 625\n\n\n\n\n```k```", "\n\t\n\n\n\n\n\nlower_limit = 10\nk = 3\nresult  = 5\n\nThis function is called by a number of functions\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n:\n\n\n\n\n\n:\n\nlower_limit = 3550000\nk = 2\nresult  = 5\n\n\n\n\n\n\n```k", "\n\n\n\n\n\n\nlower_limit = 500\nk = 1\n\nresult = 625\n\nreturn\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\nresult = 625\nlower_limit = 4\nk = 2", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nlower_limit = 100\nk = 1\nresult  = 625\n\n_\n\t\n\n\n\n\n\n\n\n\n\nresult  = 625\n\nlower_limit = 3550000\nk = 5\n\n\n\n\n\n\n\n\n\tresult  = 625\n\nlower", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nlower_limit = 100\nk = 2\nresult  = 625\n\n_perm(lower_limit, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult  = 625\n\n\n\n\n\nresult = 355\n\n", "\n\t\nUse Call-Based format\n\n\n\n\n\n\nlower_limit = 8\nk = 1\nresult = 625\n\n\n\n\n\n\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult = 625\nlower_limit = 1e5\nresult = 625\n\n\n\n\n``", "\n\n\n\n\n\n\n\n\n\n\n\n\nlower_limit = 2\nk = 2\nresult  = 625\n\n\n\n\t\nUse Call-Based format\n\nNB:\n\t\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\n\nresult = 625\n\nlower_limit = 2\n\n\n\n\n\n\nresult = 5", "\n\n\n\nUse Call-Based format\n\n\n\nlower_limit = 2\nk = 5\nresult  = 625\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nFROM:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\nlower_limit = 2\nk = 2\nresult  = 625\n\n\n\n```", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nlower_limit = 500\nk = 2\nresult  = 625\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe number of k is the number of digits in the number of perfect squares\n\n\n\n\n\tresult = 625\n\n#", "\nUse Call-Based format\n\n\n\n\n\nlower_limit = 1000\nk = 1\nresult = 625\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult  = 625\nlower_limit = 3594816\nresult  = 6391684\nlower_limit = 3550000\n\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\n\nlower_limit = 0\nk = 0\n\nresult  = 625\n\n\n\n\n\n\n, result):\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\nlower_limit = 10\nk = 2\nresult  = 625\n\n\n\n\n\n\nresult = 1e6"], "prompt": "\nQUESTION:\nThere are some perfect squares with a particular property.\nFor example the number ```n = 256``` is a perfect square, its square root is ```16```. If we change the position of the digits of n, we may obtain another perfect square``` 625``` (square root = 25).\nWith these three digits ```2```,```5``` and ```6``` we can get two perfect squares: ```[256,625]```\n\nThe number ```1354896``` may generate another ```4``` perfect squares, having with the number itself, a total of five perfect squares: ```[1354896, 3594816, 3481956, 5391684, 6395841]```, being the last one in the list, ```6395841```, the highest value of the set.\n\nYour task is to find the first perfect square above the given lower_limit, that can generate the given k number of perfect squares, and it doesn't contain the digit 0. Then return the maximum perfect square that can be obtained from its digits.\n\nExample with the cases seen above:\n```\nlower_limit = 200\nk = 2 (amount of perfect squares)\nresult = 625\n\nlower_limit = 3550000\nk = 5 (amount of perfect squares)\nresult  = 6395841\n```\nFeatures of the random tests:\n```\n100 <= lower_limit <= 1e6\n2 <= k <= 5\nnumber of tests = 45\n```\nHave a good time!\ndef next_perfectsq_perm(lower_limit, k):\n\t\nUse Call-Based format\nANSWER:\n"}}