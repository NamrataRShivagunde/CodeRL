{"4993": {"code": ["\n\n\n\n\n\n\n\n    His gathered information:\n\n    a) slope:\n\n    b) acceleration:\n\n    b) acceleration:\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- The description:\n\n-\n\n\n\n    \n    - 5) if the end of `", "\n\n\n\n\n\n\n  His information:\n\n  Initial conditions:\n\n  - Air gravity:\n\n  - Air acceleration:\n\n  - Air acceleration:\n\n  -\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    \n    c) the power\n\n\n   ", "\n\n\n   \n\n\n\n\n    John:\n\n    - His is a standpoint\n\n    - Beware:\n\n    -\n\n\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 2) if the end of the time:\n\n    - 3)\n\n   ", "\n\n\n\n\n\n\n  For example:\n\n   \n\n    a)\n\n    b)\n    \n    c)\n    \n  1)\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n    - 1)\n    - 2)\n    \n    - 3)\n\n   \n\n\n\n\n\n\n\n\n\n- 3)", "\n\n\n\n\n\n\n   \n\n    ARE:\n\n    0 1 2 3 3 4 4 4 5 5 5\n\n\n\n\n\n\n\n   \n   \n\n    b) tiredness:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    c) a\n\n    b) dTot:\n\n    b)\n    \n    -", "\n\n\n\n\n\n\n\n\n\n\n    His power:\n\n    1) slope:\n\n    2) acceleration:\n\n    3) slope:\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 1) if his power and his speed are exactly positive:\n\n   \n\n\n   ", "\n\n\n\n\n\n\n    GRAVITY_ACC\n\n    John\n   \n\n    DELTA_T\n\n\n   \n\n\n   \n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    c)\n\n    b) tiredness:\n\n    a) dTot:\n\n    b)", "\n\n\n\n\n\n\n\n  \n\n  \n \n\n  \n\n    1) masses:\n\n   1) acceleration:\n\n  \n   \n    -\n    \n\n \n\n    -\n\n\n\n\n\n\n\n\n\n\n\n\n  Furthermore:\n\n  A\n\n \n\n  Beware:\n\n", "\n\n\n\n\n\n\n\n    a) power\n\n    b) acceleration\n\n    c)\n\n    d) tired\n\n\n\n\n\n   \n   \n    b) speed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n    - 1) if it's a\n    - 2) if it's a `percent`. \n\n -", "\n\n\n\n \n\n\n\n\n  John:\n\n \n\n  Tiredness:\n\n  Air drag:\n\n  DTot:\n\n  Air drag:\n\n  Air drag:\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 1) if all `dTot", "\n\n\n\n\n\n\n\n    AIR_D_WATTS:\n\n    - 1) air drag is\n    \n    - 2) air acceleration is\n\n    - 3) air acceleration is\n\n    - 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n    - 5) if `dTot`", "\n\n\n\n\n\n\n    AIR_GRAVITY:\n\n \n\n    AIR_TILE:\n\n    AIR_TILE:\n\n    AIR_TAKE:\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 6)\n\n   \n\n\n    - 5", "\n\n\n    John's air drag:\n    0\n\n    1\n    1\n    2\n\n    3\n    4\n    5\n\n    6\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n   \n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n    - 5) if `dTot`", "\n\n\n\n\n\n\n    John:\n\n    - John\n    - John\n    - John\n\n    - John\n\n    - John\n\n    - John\n\n    - His\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 5) if a \ufffd", "\n\n\n\n\n\n\n  DELTA_T = 4\n\n  AIR_D_WATTS = 100\n\n \n\n\n \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 1) if the function is a function, we add his current power\n    \n    - 2) if the\n\n    -", "\n\n\n   \n\n\n\n\n\n    - Furthermore:\n    - Aromaticity:\n    - Air power:\n    - Air acceleration:\n\n    - Air speed:\n    \n    -\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 5) if at least `", "\n\n\n\n\n\n\n\n\n\n    AIR:\n    \n    John's mass:\n    \n    WATTS:\n\n    gamma:\n    \n    t:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 1) if the tiredness is positive:\n\n   \n\n", "\n\n\n\n\n\n\n  His gathered information:\n\n  Air drag is:\n\n    a) slope,\n    b) acceleration\n\n \n\n\n\n\n\n\n   \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  - The end of the example:\n\n  -\n\n    \n    - 5)", "\n\n\n\n\n\n\n    KIND:\n \n    D_WATTS = 6\n\n    gamma = 0\n    \n\n   \n\n\n\n   \n   \n\n\n \n\n    -\n\n\n\n\n\n\n\n\n\n\n    - If a\n    - 5) if a `tired` is `tired` we add `t` to", "\n\n\n\n\n\n\n    His gathered information:\n\n    a) slope:\n\n    b) acceleration:\n\n    c) dTot\n\n    dTot\n\n    b) gamma\n\n    c)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - 5) if `dTot`"], "prompt": "\nQUESTION:\nThe description is rather long but you are given all needed formulas (almost:-)\n\nJohn has bought a bike but before going moutain biking he wants us to do a few simulations.\n\nHe gathered information:\n\n- His trip will consist of an ascent of `dTot` kilometers with an average slope of `slope` *percent* \n- We suppose that: there is no wind, John's mass is constant `MASS = 80 (kg)`, his power (generated at time `t` by pedaling and measured in watts)\nat the start of the trip is `WATTS0 = 225 (watts)`\n- We don't take account of the rolling resistance\n- When he starts climbing at t = 0 his initial speed (pushed start) is `v0 (km/h)`\n- His initial acceleration `gamma` is 0.\n`gamma` is in `km/h/min` at time `t`. It is the number of kilometers per hour he gains or loses in the next *minute*. \n- Our time step is `DELTA_T = 1.0 / 60.0` (in minutes)\n\nFurthermore (constants in uppercase are given below):\n\n - Because of tiredness, he *loses* D_WATTS * DELTA_T of power at each DELTA_T. \n - calcul of acceleration:\n  \n  Acceleration has three components:\n    - 1) on an ascent where the slope is `slope` the effect of earth gravity is given by:\n    \n    `- GRAVITY_ACC * function(slope)`\n    \n    (Beware: here the `slope`is a percentage, it is not an angle. You have to determine `function(slope)`).\n    \n    Some help for `function(slope)`:\n    \n    a) slope: \n    \n    \n    \n    b) earth gravity:\n  \n    https://en.wikipedia.org/wiki/Gravity_of_Earth\n    \n    - 2) air drag is \n    \n    `- DRAG * abs(v) * abs(v) / MASS` where `v` is his current speed\n    \n    - 3) if his power and his speed are both strictly positive we add the thrust (by pedaling) which is: \n    \n    `+ G_THRUST * watts / (v * MASS)` where `watts` is his current power\n    \n    - 4) if his total `acceleration is <= 1e-5` we set acceleration to 0\n - If `v - 3.0 <= 1e-2` John gives up\n\n\n```\nConstants:\nGRAVITY_ACC = 9.81 * 3.6 * 60.0                        // gravity acceleration\nDRAG        = 60.0 * 0.3 / 3.6                         // force applied by air on the cyclist\nDELTA_T     = 1.0 / 60.0                               // in minutes\nG_THRUST    = 60 * 3.6 * 3.6                           // pedaling thrust\nMASS        = 80.0                                     // biker's mass\nWATTS0      = 225.0                                    // initial biker's power\nD_WATTS     = 0.5                                      // loss of power\n(Note: watts at time t + DELTA_T is watts at time t minus D_WATTS * DELTA_T)\n\nParameters:\ndouble dTot                                            // distance to travel in km\ndouble v0                                              // initial speed km/h\ndouble slope                                           // ascent in percentage (don't forget to divide by 100 when needed)\n\nVariables that can be used:\nt                                                      // time\ngamma                                                  // total acceleration with its 3 components\nv                                                      // speed\nd                                                      // distance travelled\nwatts                                                  // biker's power \n\n```\n#### Task:\nWrite function\n`temps(v0, slope, dTot)` which returns as a *rounded* integer the time `t` in minutes needed to travel `dTot`. \nIf John gives up return `-1`.\n\nAs a reminder:\n\n1) speed at (t + DELTA_T) = (speed at t) + gamma * DELTA_T\n\n2) distance at (t + DELTA_T) can be taken as (distance at t) + speed * DELTA_T / 60.0 where speed is calculated with 1).\n\n```\nExamples:\ntemps(30, 5, 30) -> 114\ntemps(30, 20, 30) -> -1\ntemps(30, 8, 20) -> 110\n```\nReference:\ndef temps(v0, slope, d_tot):\n\t\nUse Call-Based format\nANSWER:\n"}}