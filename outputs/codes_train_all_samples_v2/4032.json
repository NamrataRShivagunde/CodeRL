{"4032": {"code": ["\nUse Call-Based format\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n```\n\nfunction solve(n):\n\t\n\ndef\n\n\n\n\n\n:\n\n\n```else:javascript\n\n\n`\n\n\n`\n\n\n\n\t\t#!/", "\nUse Call-Based format\n\n\n\n\n\nUse Javascript\n### Note\n`\ndef solve(n):\n\t\nUse Call-Based format\nfunction solve(n):\n\t\nUse Javascript\n### Note\n\n\n\n\n\ndef\n\n\n\n\n\n:\n\n```\n\n\n`\n\n`\n\n`\n\n\n\n#\n# Rule:\n", "\nUse Call-Based format\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\nreturn n\n\n```\ndef solve(n):\n\t\nUse Call-Based format\n\n\n\n\n\ndef\n\n\n\n\n\t:\n\n\n\n\n\n`\n\n\n`\n\n\n\n\n### Note\n\nThis", "\n\n\n\n\nUse Call-Based format\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\nfunction solve(n):\n\t\nUse Call-Based format\n\nfunction solve(n):\n\n\ndef\n\n\n\n\n\n\n:\n\n```\n\n\n\n`\n\n```\n\n\n```endif\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\ndef solve(n):\n\t\nUse Call-Based format\n\ndef\n\n\n\n\n\n:\n\n\n```else:javascript\n`\n\n\n`\n\nConsider the number triangle below", "\t\nUse Call-Based format\t\n\n\n\n\n`\n# Example\n\ndef solve(n):\n\t\nUse Call-Based format\n\n# Example\n\ndef solve(n):\n\t\nUse Call-Based format\n\t\n\n\ndef\n\t\t\n\n\t:\n\n\n\n\n`\n\n`\n```\n\n\n\n# Example 2\n#", "\n\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\n#\n#\nNOTE:\n\nUse JavaScript for testing\n\n\ndef solve(n):\n\t\n\ndef\n\n\n\n\n\n\n\n\n```\n\n\n\n`\n\n\n`\nelse:\n\n\n## Note\n\nThis kata uses native", "\n\n\n\n\n\n\n`\n\n\ndef solve(n):\n\t\nUse Call-Based format\n\ndef sum(n):\n\t\nUse Call-Based format\n\n```\ndef sum(n):\n\t\n\n\n\n\t\n\n\n\n\n:\n\n```endif:javascript\n\n\n`\n\n\n`\n\n\n\n```if", "\t\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\nelse:javascript\n### Note\n\n\n\n\n\n```\ndef solve(n):\n\t\nUse Python call-based format\n```\n\ndef\n\n\n\n\n\n:\n\n\n\t\n\n`\n\n\n\n`\n\n\n#### Example\n###", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\nUse JavaScript\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif:javascript\n\n\n\n`endif:javascript\n\n\n### Note\n\n\n\n\n\n\n    If you have no triangle", "\n\t\n`\n\n\nUse Call-Based format\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\nfunction solve(n):\n\t\n\n\n\n\ndef solve(n):\n\t\n\n\t\n\n\n\n:\n\n```else:javascript\n\nUse Call-Based format\n`\n`\nConsider the number triangle below,", "\nUse Call-Based format\n\n\n\n\n\nUse Javascript\n`\ndef solve(n):\n\t\nUse Call-Based format\nfunction solve(n):\n\t\n\n\n\n\ndef solve(n):\n\t\n\t\n\n\n\n\n:\n\n\n\n```else:javascript\n\n`\n\n\n\n\n\n```else:javascript\n\n### Note", "\nUse Call-Based format\n`\n\n\nUse Javascript\n\n\n`\n\ndef solve(n):\n\t\nUse JavaScript\n\nUse Call-Based format\n\n\n\n```\ndef solve(n):\n\t\n\ndef\n\n\n\n\n\n:\n\n```else:javascript\n\n\nThe function returns the sum of rows.\n\n\n\n\nConsider", "\n\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\n\nfunction solve(n)\n\n\n\n```\ndef sum(n):\n\t\n\ndef sum(n):\n\t\n\n\n\n\n\n:\n\n\n```else:javascript\n\n`\n\n\n`\n\n  #TODO:\n\n  ", "\t\nUse Call-Based format\t\n\n\n\n\n\n`\n\n\ndef solve(n):\n\t\nUse Call-Based format\n\n```\ndef call(n):\n\t\nUse Call-Based format\n```\n\n```\n\ndef\ndef\n\t\t\n\n\n:\n\n\n\n`\n\n\n\n\n\n\n\n\n### Note:", "\nUse Call-Based format\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\t\n\n\ndef solve(n):\n\t\nUse Call-Based format\n\ndef solve(n):\n\t\nUse Call-Based format\n\n\t\t\n\n\t:\n\n\n\n```\n\n\n\n`\n\nConsider the", "\n\n\n\n\nUse Call-Based format\n\n\n\n\ndef solve(n):\n\t\nUse Call-Based format\n\nif:javascript\n### Note\n\n\nif:javascript\n### Note\n\n\ndef solve(n):\n\t\n\n\n\n\n\n\n:\n\n```\n\n\n\n`\n\n\n```\n\n\n\n1.  The", "\n\n\n\n\nUse Call-Based format\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n# Example:\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n```else:javascript\n# Note\n### Note\n\n`\n\n`else:javascript\n### Note\n\n\n\n\n```if", "\n\n\n\n\nUse Call-Based format\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n### Note\n\n\n\n\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n```\n\n\n\n\n`\n\n\n`\n\n\n\n### Note\n\nThis kata uses native", "\nUse Call-Based format\n\n\n\n\n\n`\n\ndef solve(n):\n\t\nUse Call-Based format\n\n\n\n\n\ndef solve(n):\n\t\nUse Call-Based format\n\n```\ndef\n\n\n\n\n\n:\n\n\n```\n\n`\n\n### Note\n\n\n`\n\n\n# 1:\n# K"], "prompt": "\nQUESTION:\nConsider the number triangle below, in which each number is equal to the number above plus the number to the left. If there is no number above, assume it's a `0`.\n\nThe triangle has `5` rows and the sum of the last row is `sum([1,4,9,14,14]) = 42`.\n\nYou will be given an integer `n` and your task will be to return the sum of the last row of a triangle of `n` rows. \n\nIn the example above:\nMore examples in test cases. Good luck!\n\n```if:javascript\n### Note\n\nThis kata uses native arbitrary precision integer numbers ( `BigInt`, `1n` ).  \nUnfortunately, the testing framework and even native `JSON` do not fully support them yet.  \n`console.log(1n)` and `(1n).toString()` work and can be used for debugging.  \n\nWe apologise for the inconvenience.\n```\ndef solve(n):\n\t\nUse Call-Based format\nANSWER:\n"}}