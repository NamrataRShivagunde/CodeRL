{"3274": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Simple format\n\nUse Haskell format\n\n\n\n\n\n\n\n\n\n\n\n\n\nKata:\n\nUse Kata\nKata:\n\n\n\n\n```Kata", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\t\nUse Call-Based format\n\nUse Kata-Task-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Solve a string\n\t# Solve(st)\n# Solve(st)\n\n\n\n```Haskell:\nif", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\t\nUse Function-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nKata:\n\n\n\n\n\n\n\n\n\n\n```Haskell\n\n\n```Haskell", "\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\nUse Kata task to return the length of the longest prefix and suffix\n\n\n\nThe task can be called with a string.\n\n\n\n\n\n\n\n\n\n\n\n```Haskell`\nfor example:\nsolve(\"abcd", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n# Solve\nst.join(st)\n# Solve\n# Solve\n#\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\n\nUse Kata format\n\n\n\n\n\n\n\n\n\n\nKata\n\nThe Kata Kata task is a task for the Kata task.\n\n\n\n\n\n```K", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\tst.lower()\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```Kata`\n\n\n```\nIn this Kata, you", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\tst.lower()\n\tst.upper()\n\n\nUse Kata-based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n# solve(st)\n# solve(st)\n#\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nUse Task-Based format\n\n\nUse Kata task\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nst.split(\"\")\n\n\n```Kata", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\treturn st\n\t\nUse Call-Based format\n\n\nUse Task-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nKata:\nIn this Kata, you will be given a string and your task will return the length\n\n\n\nIn", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\n\n\nUse Call-Based format\n\n\nUse Kata task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n```\nIn this Kata, you will be given a string and your", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\nUse Task-Based format\n\n\n\n\n\n\n\n\n\n\n# Haskell\nkata(st)\n# Haskell\n# Kata(st)\n# Kata(st)\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\t\nuse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```Kata`\n\nThe task will return the length of the longest prefix and suffix of a string.\n```\n\n\n\n\n\n\n\n```Kata`", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\nsolve(\"ab\") = 1\nsolve(\"ab\") = 3\n\n\n\n\n\n\n\n\n```Kata\nIn this Kata", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n# Solver\n# Solve\n# Solve\n# Solve\n# Solve\n# Solve\n#\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\nUse Kata task to find the longest prefix and suffix\n\n\n\n\n\n\n\n\n\n\n\nHaskell:\n\nThis Kata is a Kata task\nKata:\n\n\n\n\n```Kata", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based task\n\n\n\n\n\n\n\n\n\n\n# Haskell:\n#\nkata.solve(\"abcd\")\n#\n\n#\n#\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse string-based format\n\n\nUse Kata\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Solve\n\nsolve(st)\n\n\n\n\n```\nIn this K", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\nUse Kata to solve a string\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n# Solve a string\n# Solve a string\n# Solve a string\n# Solve a string\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\t\nUse Kata-Task format\n\n\n\n\n\n\n\n\n\n# Kata\n\n\n# Kata\n# Kata\n# Kata\n# Kata\n# Kata\n# Kata\n\n\n\n\n``"], "prompt": "\nQUESTION:\nIn this Kata, you will be given a string and your task will be to return the length of the longest prefix that is also a suffix. A prefix is the start of a string while the suffix is the end of a string.  For instance, the prefixes of the string `\"abcd\"` are `[\"a\",\"ab\",\"abc\"]`. The suffixes are `[\"bcd\", \"cd\", \"d\"]`. You should not overlap the prefix and suffix.\n\n```Haskell\nfor example:\nsolve(\"abcd\") = 0, because no prefix == suffix. \nsolve(\"abcda\") = 1, because the longest prefix which == suffix is \"a\".\nsolve(\"abcdabc\") = 3. Longest prefix which == suffix is \"abc\".\nsolve(\"aaaa\") = 2. Longest prefix which == suffix is \"aa\". You should not overlap the prefix and suffix\nsolve(\"aa\") = 1. You should not overlap the prefix and suffix.\nsolve(\"a\") = 0. You should not overlap the prefix and suffix.\n```\n\nAll strings will be lowercase and string lengths are `1 <= length <= 500`\n\nMore examples in test cases. Good luck!\ndef solve(st):\n\t\nUse Call-Based format\nANSWER:\n"}}