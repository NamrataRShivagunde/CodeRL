{"4829": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n\ndef compose(f,g):\n\t\n\n\t\n\n:\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\n\n__Function composition__ is a function composition__\n\n\n\n\t\n__Function composition__", "\nUse Call-Based format:\n\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\n\t\n\n:\n\n\nf3(x)\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format:\n\t\nUse Call-Based format\n\n\n\n__Function composition__\n\n\n\n\n__Function composition__ is", "\nUse Call-Based format\t\nUse Call-Based format\n\n\n:\nUse Call-Based format\n\n\n\n\n:\n\n\n\ndef compose(f,g)\n\n\t\n\n:\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\n__Function composition__ is a function composition__\n\n\n\n\n\n__", "\n\nUse Call-Based format:\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\t\n:\n\n__Function composition__:\n\n__Function composition__ is a mathematical operation\n\n\t\n:\n\n\n\n\n\n__Function composition__ is a function composition\n\n\n\n\n\n\n``", "\nUse Call-Based format:\nUse Call-Based format\nUse Call-Based format\n\n\n:\n\n\n\n\n\n:\n\n\ndef compose(f,g):\n\t\nUse Call-Based format\n\n\n\t\n:\n\n\n\n:\n\n\n\n\n__Function composition__ is a function composition__\n\n\n\n\n\n__Function composition__ is a", "\nUse Call-Based format\t\nUse Call-Based format\n\n\n:\n\n\n\n\n:\n\n__Function composition__ is a mathematical operation\n\n\t\n\n__Function composition__ is a mathematical operation in Python:\n\n\n\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n__Function composition__ is a mathemat", "\n:\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n:\n\n\n\n\t\n\n\n:\n__Function composition__ is a mathematical operation\n\n\n\t\n:\n\n\n\n__Function composition__ is a lambda operation\n\n\n\n\t\n__Function composition__ is", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\n\t\n\n\n\n\n__Function composition__\n__Function composition__ is a mathematical operation\n\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n__Function composition__ is a math", "\n:\n\n\n\nUse Call-Based format\n:\n\n\n\n```python\ndef compose(f,g):\n\t\nUse Call-Based format\n\n:\n\n\n\n\n:\n\n\n\n\n\n:\n\n\n\nUse Call-Based format\n__Function composition__ is a mathematical operation in the following format\n\n\n\n\n\n```", "\nUse Call-Based format\t\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\t\n\n\n\n\n\n\n\t\nUse Call-Based format:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n__Function composition__ is a mathematical", "\n:\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n__Function composition__ is a function composition__\n\n\n\t\n\n:\n\n\nUse Function Composition format\n\n\n:\n\n\n\n\n\n\n\n__Function composition__ is a function composition__\n\nf3 =\n\n\n\t__Function composition", "\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\t\n\n:\n\n__Function composition__ is a mathematical operation\n\n\n\t\n:\n\n\n\n__Function composition__ is a mathematical operation\n\n\n\n\n__Function composition__ is a", "\nUse Call-Based format:\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\t\n\n\n:\n\n\n__Function composition__ is a mathematical operation\n\n\n\n:\n\n\n\n\n\nUse Lambda-Based format\n\n\n\n\t\n\n\nf1 = compose(f1", "\n:\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\n\t\n\n__Function composition__ is a mathematical operation:\n\n\n:\n\n\n\nUse Call-Based format\n__Function composition__\n\n\n\n\n\n\n__Function", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\t\n\n\n:\n\nUse Call-Based format\n\n\t\n\t\nUse Function-Based format:\n\n\n\n\n\n__Function composition__ is a lambda operation\n\n\n\n\n__Function composition__ is a", "\n:\n\nUse Call-Based format\n\n\n:\n\nUse Call-Based format\n\n\n\n:\n\n\ndef compose(f,g):\n\t\nUse Call-Based format\n\n\n\t\n\n:\n\n\n\t\n:\n\nUse Function Composition\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n__Function composition__ is a math", "\n:\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n:\n__Function composition__ is a mathematical operation\n\n\n\n:\n:\n\n\n\n:\nUse Function Composition format\n\n\n\nUse Call-Based format\n__Function composition__\n\n\n\n\n\n\n__Function composition", "\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef compose(f,g):\t\nUse Proc-Based format\n\n\t\n\n\n\n\n__Function composition__(x):\n\t\n\n\t\n:\n\n\n\n\n__Function composition__ is a mathematical operation\n\n\n\n\n\n", "\nUse Call-Based format:\n\n\n\nUse Call-Based format\n:\n\n\n\n:\n__Function composition__ is a mathematical operation\n\n\n\n\t\n\n:\n\n__Function composition__ is a mathematical operation.\n\n\n\n:\n\n\n\n\nUse Function-Based format\n\n\n\n\n\t__Function composition__ is a math", "\n:\n\n\n\nUse Call-Based format\n\nUse Call-Based format:\n\n\n\n\n:\n\n\n\n\t\n\n:\n\n__Function composition__ is a mathematical operation.\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n__Function composition__ is a mathematical operation\n\n\n\n\n\n"], "prompt": "\nQUESTION:\n__Function composition__ is a mathematical operation that mainly presents itself in lambda calculus and computability. It is explained well [here](http://www.mathsisfun.com/sets/functions-composition.html), but this is my explanation, in simple mathematical notation:\n\n```\nf3 = compose( f1 f2 )\n   Is equivalent to...\nf3(a) = f1( f2( a ) )\n```\n\nYour task is to create a `compose` function to carry out this task, which will be passed two functions or lambdas. Ruby functions will be passed, and should return, either a proc or a lambda. Remember that the resulting composed function may be passed multiple arguments!\n\n```python\ncompose(f , g)(x)\n=> f( g( x ) )\n```\n\nThis kata is not available in haskell; that would be too easy!\ndef compose(f,g):\n\t\nUse Call-Based format\nANSWER:\n"}}