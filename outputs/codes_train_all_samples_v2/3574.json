{"3574": {"code": ["\nUse Call-Based format\n\n\n\n\n\n`D0` is a string with a space added to the first parameter.\n\nThe kata can be called with a number of iterations:\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Recursive format\n\n\n\n\n\n\n\n\n```\n\nD0 = '", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample:\n\nDragon(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'D'\n\nD0 = 'D'\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\nreplace 'a' with 'F'\nreplace 'b' with 'R'\nreplace 'L' with 'F'\nreplace 'F' with 'L'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'Fa'\n\nD1 =", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nreplace 'D0' with 'Fa'\nreplace 'b' with 'F'\nreplace 'F' with 'LF'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'D0'\n\n\n\n\n\n`D", "\nUse Call-Based format\n\n\n\n\n\n\n`D0` should be a string.\n\nUse Call-Based format :\n\n```\nD0 = 'F'\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nD0 = 'D0'\n\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nD0 = 'Fa'\n\nUse Call-Based format\n\nRETURN:\n\nDragon Curve\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'Fa'\n\n\n\nD0 = 'F", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n -> F a Rb\n1st iteration: Fa -> F aRbF R\n2nd iteration: Fb -> F b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#!/usr/bin/env", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\nDragon Curve\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'D0'\n\n\n\n\n\n\n\n\n\n\nD0 = 'D0'\n\n", "\nUse Call-Based format\nThe dragon curve is a function that returns a string\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'Fa'\n\n\n\n\n\n\nD0 = 'D0'\n\n\nD0 = '", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'D0'\n\n\n\n\n\n''', 'D", "\nUse Call-Based format\n\n\n\n\n\n''''''''\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDragon Curve\n\nD0 = 'D0'\n\n\n\n\n\n\nD0 = 'D", "\nUse Call-Based format\n\n\n\n\n\n\n\nD0 = 'Fa'\n\nUse Call-Based format\n\nfunction Dragon(n):\n\nUse Call-Based format\n\nFUNCTION:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'D0'\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\na -> b -> F\nb -> l -> F\na -> l\nb -> f\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD0 = 'Fa'\n\n\n\n\n\n\n\n```\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\tUse Call-Based format\n\t\t\nUse Call-Based format\n\n\t\tUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe dragon's curve is the self-similar fractal\n\n\n\n\n\na = 0\nb = 1", "\nUse Call-Based format\nUse Call-Based format\n\n```\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nreplace 'a' with: 'a'\nreplace 'b' with: 'b'\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nD0 = 'D0'\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nRETURN:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe dragon's curve is not self-similar.\n\nReturns:\n\n`''`\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDragon Curve\n\n```\nD0 = 'D0'\n\n\n\n\n\n\nD0 = 'D0", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nEXAMPLE:\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe dragon's curve is a fractal.\n\n\n\n\n\n\n```\n\n``", "\t\nUse Call-Based format\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nNOTE:\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDragon Curve\n\nWHERE\n\n\n\nD0 = 'Fa'\n\n#", "\t\nUse Call-Based format\n\n\n\n\n\n`D0` should be a string of the same length as the function name\n```\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nDragon's curve is a self-similar fractal\n\n\n\n\n\n\nD0 = 'Fa"], "prompt": "\nQUESTION:\nThe dragon's curve is a self-similar fractal which can be obtained by a recursive method. \n\nStarting with the string `D0 = 'Fa'`, at each step simultaneously perform the following operations:\n\n```\nreplace 'a' with: 'aRbFR'\nreplace 'b' with: 'LFaLb'\n```\n\nFor example (spaces added for more visibility) : \n\n```\n1st iteration: Fa -> F aRbF R\n2nd iteration: FaRbFR -> F aRbFR R LFaLb FR\n```\n\nAfter `n` iteration, remove `'a'` and `'b'`. You will have a string with `'R'`,`'L'`, and `'F'`. This is a set of instruction. Starting at the origin of a grid looking in the `(0,1)` direction, `'F'` means a step forward, `'L'` and `'R'` mean respectively turn left and right. After executing all instructions, the trajectory will give a beautifull self-replicating pattern called 'Dragon Curve'\n\nThe goal of this kata is to code a function wich takes one parameter `n`, the number of iterations needed and return the string of instruction as defined above. For example: \n\n```\nn=0, should return: 'F'\nn=1, should return: 'FRFR'\nn=2, should return: 'FRFRRLFLFR'\n```\n\n`n` should be a number and non-negative integer. All other case should return the empty string: `''`.\ndef Dragon(n):\n\t\nUse Call-Based format\nANSWER:\n"}}