{"4806": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n# Example\n\n# Example\n\n# Example:\n\n# Initialization\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n# Use Call-Based", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n# next random number (seed = 1)\n\n\n\t\n\n\n\n\n\n\n\n\n\n## Example\n\n# Example:\n\n# Example\n\n\n\n\n\nXn", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n# Example:\n\n# Initialize the class with seed = 5\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Use Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n### Xn", "\n\n\n\nUse Call-Based format\n\n# Example:\n\n# Initialize the class `Random`\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n# Example:\n\n# Use Call-Based format\n\n\n\n## Example\n\n\n\n\n\n## Example\n\n#", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Initialize the class\n\n\n# initialize", "\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nOPTIMIZATION:\n\n# Use Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# initialize the generator with seed", "\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n# next random number\n\n## Xn+1=(aXn + c) mod m\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n## Xn+1=(", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nX0=1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The default implementation\n\n## Xn\n\n## Xn+1\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n# Initial seed\n\n\n\n# Example\n\n\n\n\n\n\n\t\n\n\n\n\n## Initialisation\n\n\n\n\n\n\n\n\n\n# This code is based on the [LCG] library:\n\n##\n\n\n## X", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n## Xn+1", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n# Example:\n\n# Initialize the class\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n# init(seed=5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n## Xn", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n#\n\n\n\n\n\n\n\n\n# return\n\n## Xn = aXn + c\n#\n\n# example\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n# Example\n\n# Initialize a random", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Example:\n\n\n\n\n\n\n##\n\n\n\n\n#", "\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n# Example\n\n# Example\n\n# Example\n\nA\n#\n\n# Example\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Xn+1=aXn\n\n\n\n\n# Example\n\n", "\n\n\n\nUse Call-Based format\n\n## Example\n\n# Example\n\nrandom.seed(seed)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n# Use Call-Based format\n\n\n\n# Example\n\n\n# Example\n\n\n\n##\n\n\n# Example 1", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Example\n\n# Example\n\n\n\n\n\n## Example\n\n## Initializing:\n\n\n\n\n# Initialize", "\nUse Call-Based format\n\n\n\n# Example\n\n# Example\n\n# Example\n\n# Example\n\n# Example\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\t\n\n\n\n\n\n\n\n# Example\n\n\n\n\n## Example\n\n\n\n\n\n\n# Use call", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n# Example\n\n# Example\n\n# Example\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n## Xn+1=(aX", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n# Example\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n# Example:\n\n## Initialisation\n\n\n\n\n\n\n# Use Call-Based format\n\n# Example", "\n\n\n\n# Use Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n# aXn=aXn+1=aXn+1+cXn+1\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Use Call-Based format\n\n\n\n\n\n# Use Call-Based format\n"], "prompt": "\nQUESTION:\nThe [Linear Congruential Generator (LCG)](https://en.wikipedia.org/wiki/Linear_congruential_generator) is one of the oldest pseudo random number generator functions.\n\nThe algorithm is as follows:\n\n## Xn+1=(aXn + c) mod m\nwhere:\n* `a`/`A` is the multiplier (we'll be using `2`)\n* `c`/`C` is the increment (we'll be using `3`)\n* `m`/`M` is the modulus (we'll be using `10`)\n\nX0 is the seed.\n\n# Your task\n\nDefine a method `random`/`Random` in the class `LCG` that provides the next random number based on a seed. You never return the initial seed value.\n\nSimilar to [random](https://docs.python.org/3/library/random.html#random.random) return the result as a floating point number in the range `[0.0, 1.0)`\n\n# Example\n\n```python\n# initialize the generator with seed = 5\nLCG(5)\n\n# first random number (seed = 5)\nLCG.random() = 0.3      # (2 * 5 + 3) mod 10 = 3 --> return 0.3\n\n# next random number (seed = 3)\nLCG.random() = 0.9      # (2 * 3 + 3) mod 10 = 9 --> return 0.9\n\n# next random number (seed = 9)\nLCG.random() = 0.1\n\n# next random number (seed = 1)\nLCG.random() = 0.5\n```\ndef __init__(self, seed):\n\t\nUse Call-Based format\nANSWER:\n"}}