{"4774": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\nUse Call-Based format\n\n```python\nfind_in_array(seq, predicate) # --> 1\n\n\n:\n\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n\n\n:\n\n\n\n\nWe'll create a function that takes in two parameters", ":\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n:\n\n\n* a sequence (length and types are irrelevant)\n* a function (value, index)\n* a function (predicate)\n\n\n\n\n\n\n\n\n:\n\n\n\nWe'll create", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\nUse Call-Based format\n\n```python\n\n:\n\n\n\n\n\n:\n\n\n\nUse Call-Based format\n```python\n:\n\n\n\n```python\n\n\n:\n\n\n\n\n\nWe'll create a function that takes in two", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nWe'll create a function that takes in two parameters:\n\n* a sequence (length and types are irrelevant)\n\n* a function\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n:\n\n\n\n\nUse Call-Based format\n\n:\n\n\n\nWe'll create a function", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\nWe'll create a function that takes in two parameters:\n\n* a sequence (length and types are irrelevant)\n* a function (value, index)\n\n\n\n:\n\n\n:\n\n\n\n\n:\n\n\n\n\nWe'll create a function that takes", "\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\nfind_in_array([1, 2], true_if_even)\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\n\nWe'll create a function that takes in two parameters:\n\n* a sequence", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\n\n\n:\n\n* a function (value, index) that will be called on each item and return True or false\n\n\n\n:\n\n\n\n\n\n\n\n\nWe'll create a function that takes in two parameters:\n", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\n\n\t\nUse Call-Based format\n\n```python\n:\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe'll create a function that takes in two parameters:", ":\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n```python\n\n:\n\n* a function that returns true for every item\n* a function (value, index)\n\n\n\n:\n\n\n\n\n:\n\n\n\n\nWe'll create a function that takes in", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n:\n\nWe'll create a function that takes in two parameters:\n\n* a sequence (length and types are irrelevant)\n* a function\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\nWe'll create a function that takes in", ":\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\nWe'll create a function that takes in two parameters:\n\n* a sequence (length and types are irrelevant):\n\n* a function (value, index)\n\n\n:\n:\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n```python\n\nif any([0", ":\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n\n\n:\n\nUse Call-Based format\n\n```python\n\n\n\n\n\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n```python\n\n\nUse Call-Based format\n\n\n\n\n\nWe'll create a function that takes in", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nWe'll create a function that takes in two parameters:\n\n* a sequence (length and types are irrelevant)\n* a function (value, index)\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\nIf you'll need to call your function with", ":\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nimport sys\n\n\n\n\n\n:\n\n* a sequence (length and types are irrelevant)\n* a function (value, index)\n\n\n:\n\n\n\n\n:\n\n\n\nWe'll create a function", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe'll create a function that takes in two parameters:\n\n* a sequence (length, types are irrelevant),", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nPARAM:\n\nUse Call-Based format\n\nPARAM:\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n\n\n:\n\n\n\n\nWe'll create a function that takes in two parameters", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWe'll create a function that takes in two parameters:\n\n* a sequence (length, types, irrelevant)\n* a function (value, index)\n\n\n\n:\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\nWe'll create a", ":\n\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\nWe'll create a function that takes in two parameters:\n\n* a sequence (length and types are irrelevant)\n* a function (predicate)\n\n\n:\n\n:\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\nWe'll create a function that takes in two", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\nUse Call-Based format\n\n```python\n\n\n:\n\n\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\nwhere :\n\n```python\n\n\n\n\nWe'll create a function that takes in two parameters:\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\nUse Call-Based format\n\n\n```python\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\nThe function returns -1 if the sequence is empty.\n\n```python\n\n\n\n\nWe'll create a function that takes in two parameters"], "prompt": "\nQUESTION:\nWe'll create a function that takes in two parameters:\n\n* a sequence (length and types of items are irrelevant)\n* a function (value, index) that will be called on members of the sequence and their index. The function will return either true or false.\n\nYour function will iterate through the members of the sequence in order until the provided function returns true; at which point your function will return that item's **index**. \n\nIf the function given returns false for all members of the sequence, your function should return -1.\n\n```python\ntrue_if_even = lambda value, index: value % 2 == 0\nfind_in_array([1,3,5,6,7], true_if_even) # --> 3\n```\ndef find_in_array(seq, predicate):\n\t\nUse Call-Based format\nANSWER:\n"}}