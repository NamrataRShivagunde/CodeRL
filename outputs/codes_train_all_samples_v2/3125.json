{"3125": {"code": ["\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nRust:\n\t\nUse Call-Based format\n\n```python\nsolve(n) = 36\n\n\n\n\n\n\n\n\n\n\n\n\nsolve(n) =\n\n\n\n\n\n\n\n\n\n\n# because there is a perfect square", "\nUse Call-Based format\n\nUse Rust-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nRust:\n\n\n\n\n\n\ndef\n\t\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n```rust \n\n\n\n```rust \n\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nRUST:\n\n\n\n\n\n\nUse Kata format\n\nUse Call-Based format\n\n\n\ndef solve(n):\n\t\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\nRUST:\n\n\n\n\n\n# because you can add", "\nUse Call-Based format\nRUST:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nUse Rust:\n\n\n\n\ndef solve(N):\n\t\n\n\n\n\n\n\n\n\n```rust\n\n\n\n\n\n\n\n\n\n\n```rust \n\n# because 3 and", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\nRust:\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\ndef\n\ndef solve(N):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```rust`\n\n\n\n\n# because", "\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\nRust:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n```rust \n\n\n\n\n```rust\n\n\n\n\n\n\n```rust\n\n\n```csh", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nRust:\n\n\n\n\nUse Call-Based format\n\nRust:\n\n\n\n\ndef\n\t\n\n\n\n\n\n\n\n\n```rust\n\n\n\n```kata \n\n\n\n\n```rust \n\n\n\n#", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nRust:\n\n\n\n\n\n\n```python\nsolve(n) = 1\n\n\n\n\n\n\n\n\t\n\n\n```rust \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# because 36 is the", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Rust format\n\n\n\n\n\n\n\n\n\n\n\nRust:\n\n\t\tuse Rust format\n\n```rust \n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRust:\n\n\n\n\n# because 3 and", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nRust:\n\n\n\n\n\n\ndef solve(n):\n\t\nUse Call-Based format\n\nDEF solve(n):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRust:\n\n\n\n\n# because 3 and", "\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\nRust:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef\n\t\n\n\n\n\n```rust\n\n\n\n```python\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```csh", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n```python \nsolve(n) = nil\n\t\n\n\n\n```rust`\n\n\n\n\n\n\n\n\n```rust\n\n\n\n\n\n\n```rust \n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nRust:\n\n# Use Call-Based format\n\n\n\n\n```python\n# because this Kata will return a number\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Haskell \n# because 36", "\nUse Call-Based format\n\nUse Rust format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nRust:\n\n\nUse Call-Based format\n\n```python \n\n\n\n\ndef\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRust:\n\n\n\n# because 36 is the smallest", "\nUse Call-Based format\n\nUse Rust format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\nRust:\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n```rust\n\n\n\n\n\n```rust \n\n\n\n\n\n```rust \n#\n\n```python\n\n", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nRUST:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n```rust`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# because the kata is the", "\nUse Call-Based format\nRUST:\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n```rust \nsolve(9) = -1\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```csharp", "\n\nUse Rust format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nRust:\n\nUse Call-Based format\n\n```python\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRust:\n\n\n\n\n\n\n# because 3", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nRUST:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\ndef solve(N):\n\t\nUse Call-Based format\n\ndef solve(n):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```rust ", "\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nRust:\n\n\n\n\n\n\nUse Call-Based format\n\nUse Rust:\n\n\n\n\n\n\ndef\n\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# because the last item in the"], "prompt": "\nQUESTION:\nIn this Kata, you will be given a number `n` (`n > 0`) and your task will be to return the smallest square number `N` (`N > 0`) such that `n + N` is also a perfect square. If there is no answer, return `-1` (`nil` in Clojure, `Nothing` in Haskell, `None` in Rust). \n\n```clojure \nsolve 13 = 36\n; because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve 3 = 1 ; 3 + 1 = 4, a perfect square\nsolve 12 = 4 ; 12 + 4 = 16, a perfect square\nsolve 9 = 16 \nsolve 4 = nil\n```\n\n```csharp \nsolve(13) = 36\n//because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve(3) = 1 // 3 + 1 = 4, a perfect square\nsolve(12) = 4 // 12 + 4 = 16, a perfect square\nsolve(9) = 16 \nsolve(4) = -1\n```\n\n```haskell \nsolve 13 = Just 36\n-- because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve 3 = Just 1 -- 3 + 1 = 4, a perfect square\nsolve 12 = Just 4 -- 12 + 4 = 16, a perfect square\nsolve 9 = Just 16 \nsolve 4 = Nothing\n```\n\n```python\nsolve(13) = 36\n# because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve(3) = 1 # 3 + 1 = 4, a perfect square\nsolve(12) = 4 # 12 + 4 = 16, a perfect square\nsolve(9) = 16 \nsolve(4) = -1\n```\n\nMore examples in test cases. \n\nGood luck!\ndef solve(n):\n\t\nUse Call-Based format\nANSWER:\n"}}