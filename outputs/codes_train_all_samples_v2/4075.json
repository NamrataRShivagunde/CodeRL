{"4075": {"code": [":\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\nThe number of digits of the value in having more than 100 digits\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n```python\nf(15) = 2596253253695\n```\n\n\n\n\n:\n\n\n\n\n```", ":\t\n\n\n\n\n:\n\n# f(15) == 0\nf(15) == 1\n# f(15) == 1\n\n\n\n:\n:\n\n\n\n:\n:\n\n\n\n\n\n\n6268\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n```python\n# f(2) == 2", ":\n\n\n\n\nUse Call-Based format\n\n:\n\n\nThe number of digits of the value is less than 100 digits.\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\nThe first term; it's recursive function", ":\n\t\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nf(15) = 0\n```\nf(15) = 0\n\n```\n\n\n\n\n\n:\n\n\n\n\n\n\n\n``", ":\n\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n\nThe number of digits in the sequence\n```\nnum_digits = 100\n\nThe number of digits in the sequence\n\n\n\n:\n\n\n\n\n\n\n\n\n\n```\n# f(15) == 14\n\n\n\n\n\n\n:\n\n\n\n\n\n\n``", ":\t\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\nThe function you have given is called for each of the following terms:\n\n\n\n\n\n\n\n\n\n\n```python\nf(15) = 1\n```\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n```python\n#", ":\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6251\n\n```python\nf(14) = 1\n```\n\n\n```\n\n\n\n\n:\n\n\n\n\n\n\n\n```python\n", ":\t\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n:\n\n\n\nThe number of digits in a sequence\n\n\n\n\n\n\n\n\n```python\nsomething_acci()```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", ":\t\n\n\n\n:\n\n\nThe number of digits in the sequence is less than 151.\n\nThe number of digits in the sequence is always less than 151.\n\n\n\n:\n:\n\n\n\n:\n\n\n:\n\n\n\n\n\n9\n\n\n\n\n\n:\n\n\n\n\n\n\n\nThe first term; the first term in", ":\n\n\n\n:\n\n\nUse Call-Based format\n\n```python\nf(14) == 2596253253253253253253253253253\n\n```python\n# f(15) == 2\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\nThe number of terms:", ":\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nsomething_acci(15)```\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n```python\n#", ":\t\n\n\n\n:\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n:\n\n\nThe first term in having more that 100 digits.\n\n```python\nf(14) = 1\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\nThe third term in having", ":\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nf(14) = 259625325325326724725\n```\n\n\n\n\n\n:\n\n\n\n\n\n\n", ":\n\t\n\n\n:\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\nThe number of digits given will always be less than 151.\n\n```python\nf(15) = 16\n```\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\nThe first term; the", ":\n\t\n\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf(15) = 2596253253253253737467374674657274363686365\n\n\n\n\n:\n\n\n\n\n\n\n```python", ":\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n# num_dig > 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nf(15) = 1\n```\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n1-th term; 2596253", ":\t\n\n\n:\n\n\n\n\n\n\n```python\n# f(15) == 1\n# f(15) == 1```\n\n\n:\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n3\n```\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n```python\n#", ":\n\n\n\n:\n\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n# f(15) = 356635443563749344894636\n```\n\n\n\n\n\nION:\n\n\n\n\n\n\n```python\n#", ":\n\n\n\n\n\n:\n\n\nThe first term is the first term in having more than 100 digits.\n\nThe second term is the second term in having more than 100 digits.\n\n```python\n\nf(15)\n\n\n\n\n:\n\n\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\nThe first term in", ":\n\t\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n# f(15) == 14\n# f(15) == 15\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first term; the"], "prompt": "\nQUESTION:\nWe have the following recursive function:\n\n\n\nThe 15-th term; ```f(14)``` is the first term in having more that 100 digits.\n\nIn fact, \n```\nf(14) = 2596253046576879973769082409566059879570061514363339324718953988724415850732046186170181072783243503881471037546575506836249417271830960970629933033088\n\nIt has 151 digits.\n```\nMake the function ```something_acci()```, that receives ```num_dig``` (number of digits of the value) as unique argument.\n\n```something_acci()``` will output a tuple/array with the ordinal number in the sequence for the least value in having equal or more than the given number of digits.\n\nLet's see some cases:\n```python\nsomething_acci(20) == (12, 25)\n# f(11) = 1422313222839141753028416\n\nsomething_acci(100) == (15, 151)\n```\nThe number of digits given will be always more than 5. ```num_dig > 5```.\n\nHappy coding!!!\n\nAnd the name for this kata? You have three words of the same meaning in Asian Languages.\ndef something_acci(num_digits):\n\t\nUse Call-Based format\nANSWER:\n"}}