{"3873": {"code": ["\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n:\n\n\n```else`\n\n\n\n\nNote:\n\n\n\n\n\n\n\nRelated to MrZizoScream", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n```if:python\n\n## Example\n\n# Use Call-Based format\n\n\n# Example\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n```endif```\n\n:\n\n\n\n```endif```\n\n\n\n\n\n\n\n\n\nRelated to Mr", "\nUse Call-Based format\n\n\n\n\n\n\ndef product(nums):\n\t\nUse Call-Based format\n\n\n\nRelated to LeetCode\n\n\n\t\nRelated to MrZizoScream's Product Array kata.\n\n\n\n:\n\nUse Call-Based format\n\n\n```endif\n\n\n\n\n\n\n\n\nRelated to", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nRelated to MrZizoScream's Product Array kata\n\n\n\t\tarray[i][i]\n\t\t\n\n\n\n\n\n\n\n\n```endif```\n\n\n\n\n\n\n\n\n```endif```\n\n\n\nRelated to LeetCode.", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nRelated to LeetCode\n\n\n\n\t\nRelated to MrZizoScream's Product Array kata\n\n\n\n:\n\n\n\n```endif```\n\n\n\n\n\n\n\n\n\n\nRelated to MrZizoScream", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n```if:javascript\n\nif:python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif```\n\n\n\n\n\n\n```endif```\n\n\n\nRelated to MrZ", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nRelated to MrZizoScream's Product Array kata\n\ndef product_sans_n(nums)\n\nReturns:\narray\n\n\"\"\"\n\n\n\n\n\n```endif```\n\n:\n\n\n\n\n\n\n\n\n\n\nRelated to MrZiz", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n\n\n\nRelated to LeetCode\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n```else\n\n\n\n\n\n\n\n```if:javascript\n\n**Note:**\n\n\n\nRelated to", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nRelated to LeetCode\nRelated to LeetCode\n\n\n\t\n\n\nRelated to MrZizoScream's Product Array kata\n\n\n\n\n\n\n\n```else:javascript\n\n\n\n\n\n\n\n\nRelated to MrZizoSc", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nRelated to LeetCode's Product Array kata\n\n\n\ndef product(nums):\n\t\n\n\nRelated to LeetCode's Product Array kata\n\n\n\n\n\n\n```else`\n\n\n\n\n\n\n\n\n\n\n\n\nRelated to MrZizoScream", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n```if:python\n\nif:python\n\n\n\n\nRelated to LeetCode.\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n:\n\n\n```if:javascript\n\n\n\n\n```else\n\n```if:python\n\n**Note**\n\n\nRelated", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\nif:python\n\nfunction product_sans_n(nums)\n\nif:python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif``\n\n\n\nUse Call-Based format\n\n\n\n\n\nRelated to MrZizo", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nRelated to LeetCode\n\n\n```if:javascript\n\n\ndef product(nums):\n\t\nUse Call-Based format\n\n```if:python\n\n\n\n\n\n\n\n:\n\n\n```if:python\n\n\n\n\n\n\n\n```if:python\n", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n```if:python\n\n#\n\n\n\n\nRelated to LeetCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n```endif```\n\n\n\n\nRelated to MrZizoScream's Product Array kata\n\n\n\n\nRelated", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nRelated to MrZizoScream's Product Array kata\n\n\n\n\n\n\n\n\n\n\n\n\n```else:javascript\n\n\n\n\n\n\n\n```if:python\n\nRelated to MrZizo", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\nNote:\n\nThis is an adaptation!\n\n\n\ndef product(nums):\n\t\n\n\t\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n```endif```\n\n\n\n\n\n\nRelated to MrZizo", "\n\n\n\n\n\n\n\ndef product_sans_n(nums):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nRelated to MrZizoScream's Product Array kata\n\n\n\n:\n\n\n\n```endif```\n\n\n\n\n\n\n\n\n\n\nRelated to M", "\n:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nRelated to LeetCode\n\n\n\tsum(nums, 1)\n\t\n\n\t\nUse Call-Based format\nRelated to MrZizoScream's Product Array kata\n\n\n\n\n\n\n\n```endif```\n\n\n\n\n\n\nRelated to MrZ", "\n\nUse Call-Based format\n\n\n\n\n\n\n\nif:python\n\n\n\n\nRelated to LeetCode\nRelated to MrZizoScream's Product Array kata\n\n\n\n\n\n\n\n\n\n\n\n```else`\n\n\n\nUse Call-Based format\nRelated to LeetCode\n\n\n\n\nRelated to MrZiz", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\ndef product_sans_n(nums)\n\nreturn new_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:python\n\n\n```if:python\n\n\n\n\n\nRelated to"], "prompt": "\nQUESTION:\nRelated to MrZizoScream's Product Array kata. You might want to solve that one first :)\n\n```if:javascript\n**Note:** Node 10 has now been enabled, and you can now use its BigInt capabilities if you wish, though your resulting array must still contain strings (e.g. \"99999999999\", not 9999999999n)\n\nPre-node 10: You will need to use the BigNumber.js library! Please use `.toFixed(0)` or `.toPrecision()` to round instead of `.toString(10)`, as the latter is _very_ slow\n```\n\nThis is an adaptation of a problem I came across on LeetCode. \n\nGiven an array of numbers, your task is to return a new array where each index (`new_array[i]`) is equal to the product of the original array, except for the number at that index (`array[i]`).\n\n**Two things to keep in mind:**\n\n* Zeroes will be making their way into some of the arrays you are given\n* O(n^2) solutions will not pass.\n\nExamples:\n\n**Note**: All inputs will be valid arrays of nonzero length.\n\nHave fun! Please upvote if you enjoyed :)\ndef product_sans_n(nums):\n\t\nUse Call-Based format\nANSWER:\n"}}