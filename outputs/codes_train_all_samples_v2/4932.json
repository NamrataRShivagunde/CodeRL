{"4932": {"code": ["\n\n\n# Toggling Grid\n\n\n\n\n# Solve a grid with a sequence of toggles\n\n\n\n\n\n\n\npuzzle = findSolution()\nprint(puzzle)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfind_solution(puzzle)\nprint(solution)\n\n\n\n\n\n 0, 1, 0, 1", "\n#\n\n\n\n\n\nfindSolution()\nprint(puzzle)\n\n# Toggling Grid\n#\n\nprint(puzzle)\n\n# Toggles\n\n## Examples:\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 0, 1, 0, 1, 1 ],\n  [", "\n\n\n# Toggling Grid\n\n\n\n\n\n\n\nfindSolution()\n\n\nsize, size, size, size, size, size, size\n\n\n\n\n ]\n```\n\n\n\n\n# Toggling grid\n\n\n\n\n\n\n\nfind_solution(puzzle)\nprint(solution);\n```\n\n\n 0, 1, 1", "\n\n\n\n# Toggling Grid\n\n# Toggling Grid\n\n\n\n\n\ntoggleRow(1)\ntoggleCol(2)\ntoggleCol(3)\ntoggleCol(2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Toggling Grid\n\n\n\n\n 0, 1, 0, 1,", "\n\n\n# Toggling Grid\n\n\n\n\n\n\n\n\nsize\n\nsize\nsize * size\nsize\nsize\nsize\nsize\nsize\nsize\nsize\nsize\nsize\n\n\n\n\n\n\n\n\n\n\n\n\n# Toggling Grid\n\n\n\n\n\npuzzle = findSolution();\nprint(puzzle);\n\n\n 0, 1", "\n\n\n# Toggling Grid\n\n\n\n\npuzzle = [\n  [0, 0, 1, 1, 1, 1, 1, 1 ],\n  [0, 0, 1, 1, 1, 1 ]\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1, 1, 0, 1, 1", "\n\n\n# Toggling Grid\n\n\n\n\n\n\n\nfind_solution()\nprint(findSolution(puzzle))\n> [0, 0]\n\n# Toggling Grid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example of \"1\" toggle:\n\n###\n\n\n\n\n### Example of \"5 0", "\n\n\n\n# Toggling Grid\n\n\n\n# Toggles Grid\n\n\n[ 0, 1, 0, 1 ]\n\n```python\npuzzle = find_solution();\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Toggling Grid\n\n\n\n\n 1, 1, 1, 1, 1", "\n\n\n\n\n\n\n# Toggling Grid\nprint(puzzle)\n\n# Toggling grid\nprint(puzzle)\n\n## Toggling grid\n\n# Toggle grid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\npuzzle = [\n  [1, 0", "\n\n\n# Toggling Grid\n\n# Toggling Grid\n\n\n\n\n\n\n# Toggling Grid\n\n\n\n\n# Toggling grid\n# Toggling grid\n# Toggling grid\n\n### Example of \"1\" toggle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1, 0, 1, 1, 1 ]", "\n\n\n\n# Toggling Grid\n#\n\n\n\n# Toggling Grid\n#\n\n### Tests\n\n\n\n\n\n\n\n\n\n ]\n```\n\n\n\n\n\n\n\n\n### Tests\n\n## Tests:\n\n# Toggling Grid\n#\n\n\n\n\n\n\n\n\n 1, 1, 1, 1 ]", "\n\n# Toggling Grid\n#\n\n\n# Toggling Grid\n#\n\n\n\n\n\n\n\n\n\ntoggleRow(0);\ntoggleCol(0);\n\n```python\npuzzle = [size];\n\n\n\n\n\n\n\n\n\n\n\npython\npuzzle = [size]\nprint(puzzle);\n\n\n\n\n 0,", "\n\n\n# Toggling Grid\n# Toggles the grid\n# Toggles the grid\n\n\n\n\n\n\n\n# Toggling Grid\n# Toggles the grid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npuzzle = findSolution(puzzle)\nprint(puzzle)\n\n\n 0, 1, 1", "\n\n\n\n# Toggling Grid\n\n\n\nfind_solution()\nprint(puzzle);\n\n### Toggles Grid\n\n## Solved grid:\n\n> [0, 1]\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 0, 1, 0, 1, 1 ],", "\n\n# Toggling Grid\n\n\n\n\n\nfind_solution()\n\n# Solved\nprint(findSolution())\n\n# Toggling Grid\n\n### Toggling Grid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 0, 0, 1, 1, 1 ],\n  [ 0,", "\n\n\n\n# Toggling Grid\n\n\n\n\n\ntoggleRow(size)\ntoggleCol(size)\n\n# Toggling Grid\n\n# Toggling grid\n\n# Toggling grid\n\n# Toggle grid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1, 1, 1, 1 ],\n", "\n# Toggling Grid\n\n# Toggling Grid\n\n\n\n\n\n\n\n\n\n\n\n\n\nsize = size * size\n\n\n\n\n]```\n\n# Toggling Grid\n\n\n\n\n\n\n\n\n\n\npython\nprint(puzzle);\n```\n\n\n\n\n 0, 1, 0, 1, 1 ],\n", "\n\n\n# Toggling Grid\n\n\n\n\n# Toggling Grid\n\n## Toggle Grid\n\n# Toggles grid\n\n### Toggle grid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Toggling Grid\npuzzle = [\n[\n[ 0, 1, 1", "\n\n# Toggling Grid\n\n\n\n\n\n# Toggling Grid\nprint(puzzle)\n\n# Toggling Grid\n\n### Toggling Grid\n\n\n\n\n\n\n\n\n\n]\n\n#\n\n\n\n\n\n\n\n\n\n\n\n# Toggling Grid\n\n\n\n 0, 1, 0, 1, 1 ],\n", "\n\n\n\n\n# Toggling Grid\n\n\nfind_solution(puzzle)\nprint(solution)\n\n# Toggling Grid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Toggling Grid\n\n\n\n\n\n\n\n 0, 1, 1, 1, 1 ] ];\n\n### Toggling Row\n"], "prompt": "\nQUESTION:\n# Toggling Grid\nYou are given a grid (2d array) of 0/1's. All 1's represents a solved puzzle. Your job is to come up with a sequence of toggle moves that will solve a scrambled grid.\n\nSolved:\n\n```\n[ [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1] ]\n``` \n\n\"0\" (first row) toggle:\n```\n[ [0, 0, 0],\n  [1, 1, 1],\n  [1, 1, 1] ]\n```\n\nthen \"3\" (first column) toggle:\n```\n[ [1, 0, 0],\n  [0, 1, 1],\n  [0, 1, 1] ]\n```\n\nThe numbers in quotes are codes for the row/column, and will be explained.\n\n## Your task: findSolution()\nYour task is to write a function, `findSolution()` (or `find_solution()`), which takes as input a 2d array, and returns an array of \"steps\" that represent a sequence of toggles to solve the puzzle.\n\nFor example:\n\n```python\nsolution = find_solution(puzzle)\nprint(solution);\n> [0, 3]\n```\nNote that, in the above example, `[1, 2, 4, 5]` is also a valid solution! Any solution will pass the tests.\n\nThe solution is tested like this, for each number in the solution:\n\n```python\nif n < puzzle.size:\n  toggleRow(n)\nelse:\n  toggleCol(n - puzzle.size)\n```\nTo elaborate, possible n's for a 3x3 puzzle:\n\n- Row numbers = (0    --> size - 1)\n- Cols numbers = (size --> size * 2 - 1)\n\n### Example of \"2\" toggle:\n\n### Example of \"4\" toggle:\n\n## More examples:\n\n```python\npuzzle = [\n  [ 0, 1, 0 ],\n  [ 1, 0, 1 ],\n  [ 1, 0, 1 ]\n];\nsolution = find_solution(puzzle)\nprint(solution);\n> [0, 4]\n```\nlet's try some bigger puzzles:\n\n```python\npuzzle = [\n  [ 1, 0, 1, 0, 0 ],\n  [ 0, 1, 0, 1, 1 ],\n  [ 0, 1, 0, 1, 1 ],\n  [ 0, 1, 0, 1, 1 ],\n  [ 1, 0, 1, 0, 0 ]\n];\nsolution = find_solution(puzzle)\nprint(solution);\n> [ 0, 5, 4, 7 ]\n```\n\n```python\npuzzle = [\n  [ 1, 1, 1, 0, 1, 1, 1 ],\n  [ 1, 1, 1, 0, 1, 1, 1 ],\n  [ 1, 1, 1, 0, 1, 1, 1 ],\n  [ 0, 0, 0, 1, 0, 0, 0 ],\n  [ 1, 1, 1, 0, 1, 1, 1 ],\n  [ 1, 1, 1, 0, 1, 1, 1 ],\n  [ 1, 1, 1, 0, 1, 1, 1 ]\n];\nsolution = find_solution(puzzle)\nprint(solution);\n> [ 3, 10 ]\n```\n\nThere are randomized tests with puzzles of up to 100x100 in size. Have fun!\ndef find_solution(puzzle):\n\t\nUse Call-Based format\nANSWER:\n"}}