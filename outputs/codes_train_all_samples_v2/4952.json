{"4952": {"code": ["\n**The Rub**\n\nUse Call-Based format\n\n```python\n\ndef partial_keys(o):\n\t\n\n\n\n\n\n\n\n\n\ndef\n\n**The Rub**\n\n\n\n\n\n**The Rub**\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\nYou can\n\n\n\n\n\n**", "\n**Simple**\n\nUse Call-Based format\n\n**Function**\n\n\n\n\n\n\n\n\n\ndef __getitem__(self, key):\n\t\n\n\t\"\"\"\n\n\n**Return**\n\n\n\n\n\n**The Rub**\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\nThe\n\n\n\n\n\n**", "\n\n```python\n\ndef partial_keys(self, object):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n**The Rub**\n\n\n\n\n\n**The Rub**\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\no = {}\n\n\n**The R", "\n\n\n\n\n\n\n\n\nThe Lua**\n\n\n\n\n```python\n\no = partial_keys({\"a\": 1}) # {a} # {a} # {a} # {b} # {}\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n**The R", "\n\n**Partial Keys**\n\n**Example**\n\n```python\no = partial_keys({\"abc\": 1})\n\n\n\n\n`python\n\no = partial_keys({\"id\": 1})\n\n```python\n\n\n\n\n\n:\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub", "\n\n**The Red Bill**\n\n**The Bill**\n\n**The Tilk**\n\n**The Fish**\n\n**The Cub**\n\n**\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Cub**\n", "\n\n**The Love**\n\nYou can use the object with the `partial_keys` function.\n\n\n\n\n\n\n\n\n\ndef __getitem__(self, key):\n\t\n\n:\n\n\n\n:\n:\n**The Rub**\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n\n\n**The Rub**\n", "\n\n**The William**\n\n\n```python\n\ndef partial_keys(object):\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n\n\n\n\n\t\n\n**The Rub**\n\n:\n\n\n\n\n\n\n**The Rub**\n\n\n\n\n\n\n**The Rub**\n\n", "\n\n**The Brazy**\n\n**The Chu**\n\n**The Brazy**\n\n**The Cool**\n\n**The Hair**\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n:\n**The Rub**\n:\n\n\n\n\n\n\n\n\n```python\n\n#\n\n\n\n\n```", "\n\n\n```python\n\nimport partial_keys\n\n```\n\n\n\n\n\n\n`\n\n\n\n\n\n\no = partial_keys({\n\t\"abc\": 1\n\t}\n)\n\n```\n\ndef\n\n\n\n\n:\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**", "\n\n**The Fred**\n\n\n```python\n\ndef partial_keys(o):\n\n\n\n\n\n\n\n\n```python\n\n\n```\n\ndef __getitem__(self, key):\n\n\n\n\n\n\n\n:\n\n**The Lub**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub", "\n\n\n**The Luc**\n\n**The Darry**\n\n**The Rub**\n\n\n\n```python\n\ndef partial_keys(self, key):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n\n\n\n**", "\n\n\nThe Rub is a Python function.\n\n```python\ndef partial_keys(obj):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n:\n\n**The Rub**\n\n\n\n\n**The Rub**\n:\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n**The Rub**", "\n**A Call-Based format**\n\n**A Call-Based format**\n\n**A Call-Based format**\n\n\n\n```python\n\ndef __getitem__(self, key):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n", "\n**Call-Based format**\n\n\n```python\ndef partial_keys(obj):\n\nuse Call-Based format\nANSWER:\n\n**Return-Based format**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n**The Prem**\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n", "\n\n**Call-Based format**\n\n\n\n\n\n**The Britter**\n\n\n```python\n\n\n\n\n```python\n\n\n\n\n\t\n**The Britter**\n\n\n\n\n\n\t\n:\n**The Rub**\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\n**The", "\n**Key-Based**\n\nThe Key-Based format\n\n\n\n\n\n\n```python\no = partial_keys({\"a\": 1})\n```\n\n\n\n```python\n\n\n\n\n\n\ndef\n\t\n\n\n**The Arab**\n\n\n\n\n\n\n\n\n\nThe\n\n\n\n\n\n**The Rub**", "\n\n**The Rub**\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n**The Rub**\n\n**The Rub**\n\n\n\n\n\n**The Rub**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n", "\n\n**Simple**\n\n**Simple**\n\n**The Rub**\n\n**The Rub**\n\n\n\n\n\n\n\n\n\n\n\n**The Dog**\n\n\n```python\n\n\n\n\n\n:\n**The Rub**\n\n\n\n\n\n\n\n\n**The Rub**\n\nYou can\n\n\n\n\n\n**", "\n\n```python\n\nimport partial_keys\n\n```python\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n:\n\n**The Rub**\n\n\n\n\n\n**The Rub**\n\n:\n\n\n\n\n\n\n\n\n\n\n**The Rub**\n\nYou can\n\n\n\n\n\n**"], "prompt": "\nQUESTION:\n**The Rub**\n\nYou need to make a function that takes an object as an argument, and returns a very similar object but with a special property. The returned object should allow a user to access values by providing only the beginning of the key for the value they want. For example if the given object has a key `idNumber`, you should be able to access its value on the returned object by using a key `idNum` or even simply `id`. `Num` and `Number` shouldn't work because we are only looking for matches at the beginning of a key.\n\nBe aware that you _could_ simply add all these partial keys one by one to the object. However, for the sake of avoiding clutter, we don't want to have a JSON with a bunch of nonsensical keys. Thus, in the random tests there will be a test to check that you did not add or remove any keys from the object passed in or the object returned.\n\nAlso, if a key is tested that appears as the beginning of more than one key in the original object (e.g. if the original object had a key `idNumber` and `idString` and we wanted to test the key `id`) then return the value corresponding with whichever key comes first **alphabetically**. (In this case it would be `idNumber`s value because it comes first alphabetically.)\n\n**Example**\n\n```python\no = partial_keys({\"abcd\": 1})\n\no['abcd'] == 1 # true\no['abc'] == 1 # true\no['ab'] == 1 # true\no['a'] == 1 # true\n\no['b'] == 1 # false!\no['b'] == None # true\n\nlist(o.keys()) # ['abcd']\n```\ndef __getitem__(self, key):\n\t\nUse Call-Based format\nANSWER:\n"}}