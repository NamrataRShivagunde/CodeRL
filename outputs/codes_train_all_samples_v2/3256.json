{"3256": {"code": ["\n\n> 103 ---> 615 ---> 135 ---> 218 ---> 135 ---> 228 ---> 228\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 1\n\n\n\n\n> 420 ---> 350 ---> 420 ---> 1\n\n\n\n\n\n>\n\n\n\n>\n\n>\n\n, you can use", "\n```\n\n> 1\n```\n\n\n```\n\n\n\n> 1\n\n-> 3\n> 1\n\n```\n\n\n```\n\n\n\n\n> 1\n\n\n\n```\n\n\n```\n\n\n>\n\n```\n\n\n\n```\n\n>\n\n\n\n>\n>\n\n:\n\n", "```\n\n\n> 1\n\n\n\n> 1\n1> 1\n1> 1\n1\n1\n2\n2\n2\n3\n\n3\n\n\n\n\n`\n> 1\n1> 1\n1\n1\n2\n```\n\n\n>\n\n\n\n> 1\n\n\n\n>\n\n\n\n\n, we can make the function ```", "\n```python\nfor i in range(1, 20):\n> 0\n> 0\n```\n\n\n\n\n> 272\n\n-> 1\n\n```python\n> 272\n\n\n\n\n\n\n>\n```\n\n\n:\n\n>\n\n\n\n\n\n>\n\n\n\n>\n\n>\n\n, we can add the", "```\n\n> 106 ---> 170 ---> 170 ---> 170 ---> 170 ---> 170 ---> 170 ---> 170\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n> 263 ---> 1554 ---> 170 --->\n\n\n>\n\n\n>\n\n,\n\n:\n\n```", "\n\n\n> 350 ---> 351 ---> 351 ---> 351 ---> 351 ---> 153 ---> 153\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n> h = 1\n\n\n\n\n\n> 153 ---> 1\n\n\n\n\n\n\n\n\n:\n\n```\n# 1```", "\n\n> 134 ---> 134 ---> 134 ---> 134 ---> 134 ---> 134 ---> 134 ---> 134 ---> 134 ---> 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n>\n\n\n\n\n> 1\n\n\n\n\n>\n\n\n\n\n:\n\n```python\n", "\n\n> 450\n\n\n\n\n\nh = 1\n\n\n\n\n\n\n\n\n\n\n\npython\nstart = 1\nn = 2\nk = 3\nr1 = 2\n\n```python\n>\n\n```python\n\n\n\n\n>\n\n\n\n>> 153\n\n\n\n>\n\n\n\n\n, we can sum the", "\n\n\n\n\n\n\n\n\n\n```\n> 134 ---> 345 ---> 757 ---> 184 ---> 184 ---> 184 ---> 184 ---> 184 ---> 184 ---> 1\n\n\n\n\n\n\n\n\n\n>\n\n\n\n>> 0\n\n\n\n\n\n\n\n\n:\n\n```python\n", "\n\n> 3\n\n--> 3\n\n1\n2\n1\n2\n1\n\n\n\n\n> 7\n\n1\n\n> 5\n\n3\n\n3\n\n\n\n\n> 1\n\n\n```python\n\n3\n\n:\n\n>\n\n\n\n\n>\n\n\n\n>\n\n\n\n\n:\n\n```python\n", "\n\n\n> 273 ---> 272 ---> 272 ---> 272 ---> 272 ---> 272 ---> 272 ---> 175 ---> 272 ---> 175\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n>\n\n\n\n>\n\n\n\n\n, we can use the", "```\n\n\n> 145\n\n```\n\n\n\n\n> 145\n\n```\n\n\n> 153\n\n```\n\n\n\n```\n\n> 145\n\n```\n\n\n```\n\n\n\n\n\n>`\n\n\n\n\n>\n\n\n\n>\n\n>\n\n:\n\n```python\n", "```\n\n```python\npython\n\nsum_pow_dig_seq()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n> 1\n\n\n\n\n\n\n> 1\n\n\n\n```python\n\n\n```python\n\n\n>\n\n```\n\n\n\n\n>\n\n\n>\n\n>\n\n, the first", "```\n\n> 141 ---> 223 ---> 142 ---> 141 ---> 142 ---> 142 ---> 142 ---> 143 ---> 143\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 1\n\n\n\n\n> 3\n\n\n\n\n\n:\n\n- start --->", "\n\n\n\n\n\n\n\n\n\n\n\n\n220 ---> 272 ---> 272 ---> 271 ---> 272 ---> 1554 ---> 1554 ---> 1555 ---> 1555 ---> 1555 ---> 1555\n\n\n\n\n>\n\n\n>\n\n>\n\n\n\n\n\n\n```python\n", "\n\n> 5\n\n```python\n#\n2636\n\n2636\n3636\n\n2636\n\n2636\n\n\n\n\n\n\n>\n\n>\n\n\n\n\n>\n\n```\n\n\n\n\n>\n\n```\n\n\n\n\n>\n\n\n\n>\n\n,\n\n, the above example", "```\n\n\n> [h, patt_arr, patt_len, last_term]```\n\n\nEXAMPLE:\n\n\n\n\n\n> 147\n\n\n\n> 147\n\n\n\n\n\n\n\n>\n\n\n\n\n\n>\n\n\n\n\n\n>\n\n\n>\n\n\n\n:\n\n```python\nsum_", "```\n\n\n> 5\n\n```\n\n\n\n> 420 ---> 725 ---> 653 ---> 143 ---> 119 ---> 119 ---> 119 ---> 119 --->\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n> 1\n\n\n\n\n\n\n\n\n\n, we can take a number of ``k", "\n```python\npython\nsum_pow_dig_seq(start, n, k, last_term)```\n\n\n\n\n\n>\n\n> 1\n\n\n\n\n\n> 2\n\n\n\n\n\n\n\n> 1\n\n\n\n\n\n\n\n> 153\n\n\n\n\n>\n\n\n\n\n:\n\n```python\n", "\n\n```python\n\n> 153 ---> 153 ---> 153 ---> 153 ---> \n\n```python\n\n\n\n\n\n>\n\n> 3\n\n```python\n\n\n\n>\n\n```python\n\n\n\n\n>\n\n\n\n>> 153\n\n\n\n>\n\n\n\n\n\n```python\n"], "prompt": "\nQUESTION:\nLet's take an integer number, ``` start``` and let's do the iterative process described below:\n\n- we take its digits and raise each of them to a certain power, ```n```, and add all those values up. (result = ```r1```)\n\n- we repeat the same process with the value ```r1``` and so on, ```k``` times.\n\nLet's do it with ```start = 420, n = 3, k = 5```\n\n```\n420 ---> 72 (= 4\u00b3 + 2\u00b3 + 0\u00b3) ---> 351 (= 7\u00b3 + 2\u00b3) ---> 153 ---> 153 ----> 153\n```\n\nWe can observe that it took ```3``` steps to reach a cyclical pattern ```[153]```(```h = 3```). The length of this cyclical pattern is ```1```, ```patt_len```. The last term of our k operations is 153, ```last_term```\n\nNow, ```start = 420, n = 4, k = 30```\n\n```\n420 ---> 272 ---> 2433 ---> 434 ---> 593 ---> 7267 --->\n6114 ---> 1554 ---> 1507 ---> 3027 ---> 2498 ---> 10929 --->\n13139 ---> 6725 ---> 4338 ---> 4514 ---> 1138 ---> 4179 ---> 9219 ---> \n13139 ---> 6725 ---> 4338 ---> 4514 ---> 1138 ---> 4179 ---> 9219 ---> \n13139 ---> 6725 ---> 4338 ---> 4514 ---> 1138 ---> 4179 ---> 9219......\n```\n\nIn this example we can observe that the cyclical pattern (```cyc_patt_arr```) is ```[13139, 6725, 4338, 4514, 1138, 4179, 9219]``` with a length of ```7```, (```patt_len = 7```), and it took ```12``` steps (```h = 12```) to reach the cyclical pattern. The last term after doing ```30``` operations is ```1138```\n\nMake the function ```sum_pow_dig_seq()```, that receives the arguments in the order shown below with the corresponding output:\n```python\nsum_pow_dig_seq(start, n, k) ---> [h, cyc_patt_arr, patt_len, last_term]\n```\n\nFor our given examples, \n```python\nsum_pow_dig_seq(420, 3, 5) == [3, [153], 1, 153]\n\nsum_pow_dig_seq(420, 4, 30) == [12, [13139, 6725, 4338, 4514, 1138, 4179, 9219], 7, 1138]\n```\n\nConstraints for tests:\n```\n500 \u2264 start \u2264 8000\n2 \u2264 n \u2264 9\n100 * n \u2264 k \u2264 200 * n\n```\nDo your best!\ndef sum_pow_dig_seq(start, n, k):\n\t\nUse Call-Based format\nANSWER:\n"}}