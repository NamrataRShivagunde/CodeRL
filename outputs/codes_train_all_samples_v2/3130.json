{"3130": {"code": ["\n\n\n\n\n\n\nThe following format is used:\n\n```cpp,java\nhas_subpattern(string) == True; //cannot be entirely reproduced repeating \"a\"\n```\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp,java\ncpp", "\nUse Call-Based format\n\n\n\n\n\n\n\nuse Call-Based format\n\n```python\nfrom c++.string_subpattern_recognition_ii.js\n\nUse Call-Based format\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n```c++\n\nif [1]", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\nhasSubpattern(string):\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```cpp,java\nhas_subpattern(string)\n\n\n\n\n\n```", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern(string):\n\t\nUse Call-Based format\n\nANSWER:\n\nThe function should return a boolean\n\nANSWER:\n\n\n\n\n\n\n\n\n```cp", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\thas_subpattern(string)\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp,java\n\n\n\n\n\n```java\ncpp,java", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\nhasSubpattern(string) == True; //cannot be entirely reproduced repeating \"a\"\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp,java\ncpp", "\nUse Call-Based format\n\nQUESTION:\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\treturn has_subpattern(string)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern(string) == True; #created repeating \"a\"\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\n```python\nhas_subpattern(string) == true; //cannot be entirely reproduced repeating a pattern\n```\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\nhas_subpattern\n\n\n\n```cpp,java\ncpp", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\nhas_subpattern(string)\n\n:\n\n\n\n\n\n\n:\n\n```cpp,java\ncpp,java\n\n\n\n\n```cpp,", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\n\n\n\n```cpp,java\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nhas_subpattern(string)\n\n\n\n\n\n\nhas_subpattern(string)\n\n\n\n```cpp", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern(string)\n\n\n\n\n\nhasSubpattern:\n\n\n\n\n```cpp,", "\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\n\nEXAMPLE:\n\nhas_subpattern(string):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern:\n\n```java\ncpp,java\n\n\n\n```cpp", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n```python\nif has_subpattern(string):\n\treturn True\n\n\n\n\treturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE:\n\nThe following function has_subpattern() function is a function.\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\nhasSubpattern(string):\n\t\n\n\n\n\n\n\n\n\n\n\n\n```cpp,java\n == true; //no repeated pattern\n\n```", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nANSWER:\nUse Call-Based format\n\nANSWER:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nhas_subpattern(string)\n#\n\n# No repeated", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern(string)\n\n\n\nhasSubpattern(string)\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern(\"a\") == False; //no repeated pattern\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nhas_subpattern(string)\n\nreturn True\n\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern(string)\n\n\n\n\n\n\n\n\n\nhasSubpattern(string) == true\n\n\n\n\n```cpp", "\nUse Call-Based format\n\n\nuse Call-Based format\n\nNB:\nUse Call-Based format\nNB:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nhas_subpattern(string)\n\nhas_subpattern(string)\n\n\n\n```cpp", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nhasSubpattern(string) == True;\nhasSubpattern(string) == True;\n\n\n:\n\n\n\n\n\n\n\n\n\n\n```cpp,java\nhasSubpattern(\"aa", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nhas_subpattern(string)\n\t\n\n\n\n\n\n\n\n\nhas_subpattern(string)\n\n\n\n\n\n\n```cpp,java\ncpp,java\n\n\n\n\n```"], "prompt": "\nQUESTION:\nIn this kata you need to build a function to return either `true/True` or `false/False` if a string can be seen as the repetition of a simpler/shorter subpattern or not.\n\nFor example:\n\n```cpp,java\nhasSubpattern(\"a\") == false; //no repeated pattern\nhasSubpattern(\"aaaa\") == true; //created repeating \"a\"\nhasSubpattern(\"abcd\") == false; //no repeated pattern\nhasSubpattern(\"abababab\") == true; //created repeating \"ab\"\nhasSubpattern(\"ababababa\") == false; //cannot be entirely reproduced repeating a pattern\n```\n```python\nhas_subpattern(\"a\") == False #no repeated pattern\nhas_subpattern(\"aaaa\") == True #created repeating \"a\"\nhas_subpattern(\"abcd\") == False #no repeated pattern\nhas_subpattern(\"abababab\") == True #created repeating \"ab\"\nhas_subpattern(\"ababababa\") == False #cannot be entirely reproduced repeating a pattern\n```\nStrings will never be empty and can be composed of any character (just consider upper- and lowercase letters as different entities) and can be pretty long (keep an eye on performances!).\n\nIf you liked it, go for the [next kata](https://www.codewars.com/kata/string-subpattern-recognition-ii/) of the series!\ndef has_subpattern(string):\n\t\nUse Call-Based format\nANSWER:\n"}}