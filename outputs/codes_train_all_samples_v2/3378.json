{"3378": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\ndef encrypt(text, n):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    If the input-", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef encrypt(text, n):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ns eT ashi tist!\ns eT ashi tist!\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n    If n is <= 0 then return", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\nQUESTION:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n-----\n\n\n###\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    To encrypt, do", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\nUse Call-Based format\n\n -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\nFor building the encrypted", "\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef encrypt(text, n)\n\n\n\ns eT ashi tist! -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nLet encrypt (str:string)", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\ndef encrypt(text, n)\n\n\n\n\n\n\n\n -> s eT ashi tist!\"\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n\n-----\n\n#", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\nBTW:\n\n\n\n\nThe output string is not a Call-Based format\n\n\n\n\n\n\nThis is a", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\ndef encrypt(text, n):\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n -> \"s eT ashi tist!\"\n\n\n\n -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\n\nIf the", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Let encrypt (str:", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use Fsharp", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\nThis is the same", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\n\n\n\n    If n > 1 then return the encrypted string, else", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nWrite one method:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\nNEED:\n\n\n\n\n\n\n\n\nNEED:\n\n\nUse Call-Based format", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nThis kata is part of the Simple Encryption Series:\n\n\n\n -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\n\n\n```python\nfor", "\nUse Call-Based format\n\n\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\n\nThe input-string is encrypted:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\nWrite two methods:\n\n\n\n\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\n\n\n\n\n\n\n\n\nThis kata is", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n -> \"s eT ashi tist!\"\n\nREQUIRE:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse a single method:", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA simple encrypt/decrypt method:", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\ndef encrypt(text, n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis kata:\nUse Call-Based format\n\n\n\n\n\n\n\n\n    If the output-string is"], "prompt": "\nQUESTION:\nFor building the encrypted string:Take every 2nd char from the string, then the other chars, that are not every 2nd char, and concat them as new String.\nDo this n times!\n\nExamples:\n```\n\"This is a test!\", 1 -> \"hsi  etTi sats!\"\n\"This is a test!\", 2 -> \"hsi  etTi sats!\" -> \"s eT ashi tist!\"\n```\n\nWrite two methods:\n```python\ndef encrypt(text, n)\ndef decrypt(encrypted_text, n)\n```\n\n```Fsharp\nlet encrypt (str:string) (n:int) -> string\nlet decrypt (str:string) (n:int) -> string\n```\n\nFor both methods:\nIf the input-string is null or empty return exactly this value!\nIf n is <= 0 then return the input text.\n\nThis kata is part of the Simple Encryption Series:\nSimple Encryption #1 - Alternating Split\nSimple Encryption #2 - Index-Difference\nSimple Encryption #3 - Turn The Bits Around\nSimple Encryption #4 - Qwerty\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\ndef decrypt(text, n):\n\t\nUse Call-Based format\nANSWER:\n"}}