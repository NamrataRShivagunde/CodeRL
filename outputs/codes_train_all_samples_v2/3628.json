{"3628": {"code": ["\n> \n> \n> \n> \n\n\n> \n> \n> \n> \n> \n\n> \n\n\n\n\n\n\n\n\n\nrotate(data, n) # => [1, 2, 3, 4]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n(data, -2) # =>", "\n> \n> \n> \n> \n> \n> \n\n\n\n> \n\n\n\n\n\n\n\n\nrotate(data, 1, 2, 3) # => [1, 2, 3]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n> \n\n\n\n\n\n(data, -1) # => [", "\n< \n\nrotate(data, n)\n```\n\n> \n\n\n> \n\n\n\n\nrotate(data, n)\n```\n\n\n\n\n\nrotate([1, 2, 3, 4, 5, 1])\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n(data, 0) # => [1, 2", "\n> \n> \n> \n\n\n```\n> \n> \n> \n> \n> \n\n\n```\n\n\n\n\n\n\n\n\n\n\nrotate(data, -1) # => [1, 2, 3, 4]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n(data, -2", "\n>\n\n\n>\n>\n>\n> \n>\n> \n> \n> \n> \n> \n> \n> \n> \n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n #n\n\n(data, 2) # => [3, 4", "\n\n\n\n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` \n\n\n\n\n\n\n\n\n\n(data, 2) # => [2, 1, 3, 4", "\n``` \n\n> \n> \n\n\n\n> \n\n\n\n\n\n\nrotate(data, 1, 2, 3, 4, 5) # => [True, False, True]\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n(data, 2, 1, 1) # => [3, 4", "\n> \n<br>\n> \n> \n\n\n\n\n\npython\nrotate(data, 3, 6) # => [1, 2, 3, 4]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\nrotate(data, 2, 3) # => 1\n\n\n(data,", "> \n> > \n```\n\n```\n\nNote:\n> \n> \n`\n\n\n\n\n\n\n\n\n\n\nrotate(data, n) # => [1, 2, 3, 4, 5]\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n([0, 0, 0], 1) #", "\n> \n> \n> \n> \n\n\n\n> \n\n\n\n\n\n\n\nrotate(data, n) # => [1, 2, 3, 4, 5]\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n(data, 3) # => [2, 3, 4", "\n>\n>\n\n\n>\n\n\n> \n>\n> \n**Note**:\n>\n> \n> \n\n> \n\n\n\n\n\n\n\n\n\n\n\n(data, 1) # => [1, 2, 3, 4]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n(data, 2) #", "> \n**Note**:\n> \n> \n> \n\n \n \n\n\n\n\nrotate(1, 2, 3, 4, 5)\n```\n\n\n\n\n\n\n\n(data, -3) # => [2, 1, 3, 2]\n\n\n\n\n\n\n\n\n\n\n\n(data, 1) # =>", "\n> \n> \n\n\n> \n> \n> \n> \n> \n> \n> \n> \n> \n\n\n\n\n\n\n\n\n\n\n\n\n\n(data, -1) # => [1, 2, 3, 4]\n\n\n\n\n\n\n\n\n\n\n(data, -1) # =>", "\n> \n\n\n\n> \n\n\n\n\nrotate(data, 0) # => [1, 2, 3, 4, 5]\n```\n\n\n\n\n\n\n\nrotate(data, 0) # => [1, 2, 3, 4]\n\n\n\n\n\n\n\n\n\n\n\n\n(data, 1) # => [2, 3", " \n\n\n\n>\n< \n\n\n\n\nrotate(data, 1, 2) # => [1, 2, 3]\n```\n\n\n\n\n\n\n\nrotate(data, 1) # => [1, 2, 3, 4]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n([1, 2, 3, 4, 5", "\n< \n\n\n> \n**Example:\n> \n< \n> \n\n\n\n\n\npython\ndata = [1, 2, 3, 4, 5, 6]\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n(data, 2) # => [2, 3", "\n>  \n\n\n\n> \n<\n\npython\nrotate(data, 1, 2, 3) # => [1, 2, 3]\n```\n\n\n\n\n\n\n\n\n\n\n\n(data, -2) # => [2, 2, 3, 4]\n\n\n\n\n\n\n\n\n\n\n\n(data, 2) #", "\n> \n**Note**:\n> \n\n\n\n> \n**Note**:\n> \n> \n\n\n\n\n\n\n\n\n\nrotate(data, 3) # => [2, 3, 4, 5]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n(data, -1) # => [2, 3,", "\n> \n> \n> \n> \n> \n> \n\n> \n\n```\n\n\n\n\n\npython\ndata = [1, 2, 3, 4]\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\n\n\nrotate(data, n)\n\n(data, -1) #", "\n>\n\n\n\n\n>\n>\npython\nrotate(data, 1, 2, 3) # => [1, 2, 3]\n```\n\n\n\n\n\n\n\n\n\n\n(data, -1) # => [1, 2, 3, 4]\n```\n\n\n\n\n\n\n\n\n\n\n\n(data, 2) # =>"], "prompt": "\nQUESTION:\n> \n**Note**: This kata is a translation of this (Java) one: http://www.codewars.com/kata/rotate-array. I have not translated this first one as usual because I did not solved it, and I fear not being able to solve it (Java is **not** my cup of... tea). @cjmcgraw, if you want to use my translation on your kata feel free to use it.\n\nCreate a function named \"rotate\" that takes an array and returns a new one with the elements inside rotated n spaces.\n\nIf n is greater than 0 it should rotate the array to the right. If n is less than 0 it should rotate the array to the left. If n is 0, then it should return the array unchanged.\n\nExample:\n```python\ndata = [1, 2, 3, 4, 5];\n\nrotate(data, 1) # => [5, 1, 2, 3, 4]\nrotate(data, 2) # => [4, 5, 1, 2, 3]\nrotate(data, 3) # => [3, 4, 5, 1, 2]\nrotate(data, 4) # => [2, 3, 4, 5, 1]\nrotate(data, 5) # => [1, 2, 3, 4, 5]\n\nrotate(data, 0) # => [1, 2, 3, 4, 5]\n\nrotate(data, -1) # => [2, 3, 4, 5, 1]\nrotate(data, -2) # => [3, 4, 5, 1, 2]\nrotate(data, -3) # => [4, 5, 1, 2, 3]\nrotate(data, -4) # => [5, 1, 2, 3, 4]\nrotate(data, -5) # => [1, 2, 3, 4, 5]\n```\n\nFurthermore the method should take ANY array of objects and perform this operation on them:\n```python\nrotate(['a', 'b', 'c'], 1)     # => ['c', 'a', 'b']\nrotate([1.0, 2.0, 3.0], 1)     # => [3.0, 1.0, 2.0]\nrotate([True, True, False], 1) # => [False, True, True]\n```\n\nFinally the rotation shouldn't be limited by the indices available in the array. Meaning that if we exceed the indices of the array it keeps rotating.\n\nExample:\n```python\ndata = [1, 2, 3, 4, 5]\n\nrotate(data, 7)     # => [4, 5, 1, 2, 3]\nrotate(data, 11)    # => [5, 1, 2, 3, 4]\nrotate(data, 12478) # => [3, 4, 5, 1, 2]\n```\ndef rotate(arr, n):\n\t\nUse Call-Based format\nANSWER:\n"}}