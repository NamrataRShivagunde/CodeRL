{"3701": {"code": ["\n\n~\n\n\n\n\n\nobjc\n\n\n\n\nWrite a function that calculates the *least common* multiple of its arguments\n\n>>>\n\n\n\nWrite a function that calculates the *least common* multiple of its arguments.\n\n\n:\n\n\n~~~endobjc\n\n\n\n\nobjc\n\n\nWrite a function that calculates the *least common* multiple", "\n\n\n\n\nUse Object-Based format\n:\n\nUse Call-Based format\nobjc\n\n~~~endif\n\n\n\n\n\n\n\n\n\n\n\n\n~~~else:objc\n\n~~~endif\n:\n\n\n~~~endif\n\nLCM:\n\n\n\nobjc\n~~~endif\n>>>\n\n\nWrite a", "\n\n\n~~~if:python\n\n\n~~~else:python\n\n:\n\n\n~else:objc\n\n\n~~~else:python\n\nLCM:\n\n\n\n\n\n\n\n\n\n\n\n:\n\n~~~endobjc\n\n\n:\nWrite a function that calculates the *least common multiple* of its arguments.\n~end\n\n", "\n\n~\n\n~~~else:python\n\n\n:\n\n\n~else:objc\n\n\n~~~endif\n\nfunction lcm(*args):\n\nUse Python-Based format\n\n~~~if:python\n\n\n\n:python\n\n\n\n\n~endif\n\n:\n~~endobjc\n\n\n\n~endif\n\n\nWrite", "\n\n\n\n\nLCM:\n\n:\n\n\n~~~else:c\n\n\n\n\n\n\n\n\nWrite a function that calculates the *least common multiple* of its arguments.\n\n\n\n\n\n\n```objc``:\n\n\n\n:\n\nobjc\n\n\n~~~endobjc\n\n\n~~~if:objc\nNOTE:", "\n\n\n\n\n\n\n\nobjc\n\n~~~endif\n\n~~~\n\n\n\n\n\n\n\n\n0:\n\n\n\n~~~else:\n\n:\n\nUse Call-Based format\n\n~~~endif\n\nLCM:\n\n>>>\n\n\n\n\nobjc\n\n\n\nA function that calculates the *least common* multiple of", "\n\n\n\n~~~endif:objc\n\n:\n\n\n\n\n~~~else:lcm\n\n~~~if:lcm\n\n\n\nobjc\n\n\n\n\n\n\n~~~else:\n\n:\n\n\n~~~endif:objc\n\nLCM:\n\n\n~~~endif:objc\n\n~~\t\n*", "\n\n\n\n~~~endif:objc\n\n:\n\nUse Call-Based format\nobjc\n\n\n\n\n\n\n\n\nWrite a function that calculates the *least common multiple* of its arguments.\n\n\n~~~endif\n\nLCM:\n:\n\n~~~endif\n\n>>>\n\n\n\n~else:lcm\n\t\nWrite a", "\n\n\n\n~~~endobjc\n\n\nUse Object-Based format\n:\n\nobjc\n~~~end:lcm\n\n~~~endif:lcm\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n\n\n:\n\n\n~~~endif:objc\n\n\n\n~endobjc\nobjc:\n\n\nWrite", "\n\n\n\n\n:\n\n~endif\n\n\n\t\nuse Python-based format\nLCM:\n\nUse Python-based format\n\n\n\n\n\n\n\n~~~if:lcm\nLCM:\n\n\n\n\n:\n\n\n~~~endif\nLCM:\n\n~~~endif\n\n~endobjc\n\n\nWrite a function", "\n\n\n\n\n:\n\n~~~endif\n\n~~~endif\n\nuse Python-Based format\n\n~~~if:python\n\t\nuse Python-based format\n\n~~~if:python\n\t\nuse Python-C\n\nLCM:\n\n\n\n:objc\n\n\n\n\n\n\n:\n~~else\n\n\n~\n\nWrite", "\n\n\n\n\n:\n\n\n\nobjc\n\n~~~if:lcm\n\n\n\n\n\n\n\n\nWrite a function that calculates the *least common multiple* of its arguments.\n\n~~~else:objc\n:\n\n\n~~~endif\nobjc:\n\n\n\nobjc\n\n\n\n    A function that calculates the *least common*", "\n\n\n\n\n\n\n\n~~~endif\n\nLCM:\n\n~~~\n\n~~~else:python\n\n\n\n\n\n\n\n\n:\n\n```objc`:\n\n```objc:\nLCM:\n\n```objc:\n\nWrite a function that calculates the least common multiple* of its arguments\n```~\n\n", "\n\n\n\n\n:\n\nUse Object-Based format\nobjc\n\n\n\n\n\nLCM:\n\n~~~\n\n\n\n\n\n\n\n\n~~~else:\n~~~\nobjc\n\n~~~else:\n\n\n~~~else:\n\nWrite a function that calculates the *least common multiple* of its arguments\nelse:\n\n\nWrite a", "\n\nUse Call-Based format\n\n~~~\n\n\n:\n\nUse Python Call-Based format\n~else:py\n\n~~~\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n:\n\n\n~~~endif\n\nLCM:\n\n\n~~~endif\n\n\n\nobjc\n\n\n\n*LCM*:\n", "\n\n\n\n\n\n\n\nobjc\n\n#if lcm.lcm\n\nLCM:\n\n\n\n\nLCM:\n\nLCM of numbers\n\n\n~~~\n\n\n\n\n\n\n:\n\n\t\n\n~~~endif:objc\n\n~~~endif:objc\n\n\n\n\n~endif:objc\n\n", "\n\nLCM:\n\n\n\n~~~else:python\n:\n\nUse Call-Based format\nobjc\n\n~~~endif:objc\n\n\n\n\n\n\n\n\n>>> Use Python 3\n\n\n:\n\n~~else:objc\n\n~~~endif\n\nLCM:\n\n\n\n\n~else:python\n\n\nWrite a", "\n\n\n\n>>>\n\n:\n\n~\n~endif\n\n~~~endobjc\n\n\nuse Python-based format\n\n>>>import lcm\n\nimport lcm\n\nuse Python format\n\n~~~if:python\nLCM:\n\n\n\n\n:\nc\n\n\n~else:python\n:\n~\n\n\n~end:\n\nWrite", "\n\n\n\n\n\n\n\n\nUse Call-Based format\n~endobjc\n\nLCM:\n\n\n\n\n\n\nLCM:\n\nLCM:\n\n\n\n\n\n\n\n\n:\n\n```objc\nNOTE:\n\n```objc:\n\n\n>>> if:lcm\n\n\n>>>else:lcm\n\n\nWrite", "\n\n\n\n\n\nUse Call-Based format\n\n\n~endobjc\n\n\n\n\n\nLCM:\n\n~~~\n\n\n~~~endif:objc\n\n\n\n\n\n\n\n~~~endif:objc\n\nLCM:\n\n\n```objc\n\n\n~endif:objc\n\n\nWrite a function that calculates"], "prompt": "\nQUESTION:\nWrite a function that calculates the *least common multiple* of its arguments; each argument is assumed to be a non-negative integer. In the case that there are no arguments (or the provided array in compiled languages is empty), return `1`.\n\n~~~if:objc\nNOTE: The first (and only named) argument of the function `n` specifies the number of arguments in the variable-argument list. Do **not** take `n` into account when computing the LCM of the numbers.\n~~~\ndef lcm(*args):\n\t\nUse Call-Based format\nANSWER:\n"}}