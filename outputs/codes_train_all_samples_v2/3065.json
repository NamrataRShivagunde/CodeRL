{"3065": {"code": ["\n\n\n\n\n\n\n\n\n\nget_textliterals('test')\n\n\n\nWe like call-based format...\n\n\n\n\n\n\n\n\n\n\n  s := 'i am literal';\n  a := 1;\n  s := 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe above code is not used...", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n  s := 'test';\n  a := 0;\n  b := 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_textliterals(pv_code)\n\n\n\nList", "\n\n\n\n\n\n\n\n\n\n\nCall-Based format\n\n\n\nThe call-based format\n\n\n\nget_textliterals(\"'this' is test\")\n\nget_textliterals(\"'this' is test\")\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\nWe like a call-based block...\n\nNOTE: \n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_textliterals('test') -> [(0, 6)]\n\n\n\n\n\nWe like parsed", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n  s := 'i am literal'\n  s := 'i am literal';\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # One literal inside comment\n\n    s", "\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe above example:\n\n    #  ---\n\n\t\t#  'this is a\n\t\ts := 'test'\n\t\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nget_textliterals(pv_code)\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_textliterals('this is literal')\n\n\n\n\n\n\nWe like", "\n\n\n\n\n\n\n\n\n\nUse Call-Based format...\n\n\nNOTE:\n\nThe source block is not parsed or generated\n\nNOTE:\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\noutput:\n\n\n\n\nNote:\n  1) handle", "\n\n\n\n\n\n\n\nget_textliterals(\"test\")\n\nget_textliterals(\"'test'\")\n\nget_textliterals(\"'test'\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_textliterals(\"this is this\")\n\n\n\n\nThe above code and the above code are", "\n\n\n\n\n\n\n\n\nget_textliterals('test')\n\nget_textliterals(\"'test'\")\n\nget_textliterals(\"'test'\")\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n   \n\nThe same is the same as:\n\n    1)", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\nWe like call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_textliterals(p_code)\n\nget_textliterals(p_code)\n\n\n\n\nWe like", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\nwe like parsed SQL or PL/SQL blocks...\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The above is a bit of a hack, but we need to do the same.\n\n\n# The", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\n\nYou like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\nThe last symbol of the source fragment: \n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\nNote:\n\n\n\n\n\n\n\nSample:\n```\nif 'this is an literal'\n\n\nNote:\nWe", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe like parsed SQL or PL/SQL blocks...\n\n\n\nget_textliterals(pv_code) -> [(0,4)]\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  s := 'test';\n  a := 1;\n  b := 1;\n  c := 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe like all source blocks...\n\n\n\nget_textliterals(\"test\")\n\n\n\n\nWe like all source blocks...\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nget_textliterals(pv_code)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_textliterals(\"'this' is 'test'\")\n\nget_textliterals(\"'this' is 'literal'\")\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n  1) skip literal inside comment\n  2) skip multy-line comment\n  3) skip literal inside literal\n\n \n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n#"], "prompt": "\nQUESTION:\nWe like parsed SQL or PL/SQL blocks...\n\nYou need to write function that return list of literals indices from source block, excluding \"in\" comments, OR return empty list if no literals found.\n\ninput:\nsome fragment of sql or pl/sql code\n\noutput:\nlist of literals indices [(start, end), ...] OR empty list\n\nSample:\n```\nget_textliterals(\"'this' is sample\") -> [(0,6)]\nget_textliterals(\"'this' is sample 'too'\") -> [(0, 6), (15, 20)]\n```\n\nText literal: any text between single quotes\nSample:\n```\n  s := 'i am literal'\n```\nSingle-line comment: any text started with \"--\" \nSample:\n```\n  a := 1;\n  -- this is single-line comment\n```\nMulty-line comment: any text between /* */\n```\n  a := 1;\n  /*\n  this is long multy-line comment\n  */\n```\n\nNote: \n1) handle single quote inside literal\n```\n  s := 'we can use quote '' in literal'\n```  \n2) multy-line literal\n```\n s := '\n this is literal too\n ';\n```\n3) skip literal inside comment\n```\ns := 'test'; --when comment started - this is not 'literal'\n```\n4) any unclosed literal should be closed with last symbol of the source fragment\n```\ns := 'test\n```\nThere is one literal in this code: \"'test\"\ndef get_textliterals(pv_code):\n\t\nUse Call-Based format\nANSWER:\n"}}