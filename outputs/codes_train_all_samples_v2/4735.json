{"4735": {"code": ["\n\n\n\n\n\n\n## Example:\n\n\n\n\n\n\n\n\nkeep_order([1, 2, 3, 4], 0) #=> 0\n\nkeep_order([1, 2, 3, 4], 2) #=> 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Tasks:\n\n#### Task", "\n\n\n\nkeep_order(ary, val) #=> 1\n\nkeep_order(ary, val) #=> 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n```python\n#!/python\n\n\n\n\n\n\n\n## Examples:\n\n#### Task", "\n\n\n\n\n\n\n\n\n\n\n\n\n\nkeep_order(ary, val) #=> 1\n\nkeep_order(ary, val) #=> 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Task:\n\n## Example:\n\n#### Task:\n\n\n\n\n\n\n### Task:", "\n\n\nkeep_order([1, 2, 3], 0) #=> 0\nkeep_order([1, 2, 3], 1) #=> 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n## Example:\n\n# Another example:\n\n\n\n\n\n\n\n\n### Task", "\n\n\n\n\n\nkeep_order(ary, val) #=> val\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n## Example:\n\n\n #=> 2\n\nkeep_order(ary, val) #=> 1\n\n\n\n\n\n\n\n\n### Task:", "\n\n\n# The function `keep_order` is a call-based format\n#\nkeep_order(ary, val) #=> 0\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n #=> 1\n\n\n\n\n\n\n\n#### Example:\n\n## Example:\n\n\n\n\n\n###", "\n\n### Tasks:\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n# Make your function call-based.\n#\n\n\n\t\t^\n\n\n\n\n\n#### Task:\n\n\n### Tasks:\n\n#### Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# If you have issues, you can use", "\n\n\n\nkeep_order(ary, val) #=> 2\n\nkeep_order(ary, val) #=> 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                      ^(index 5)\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Example:\n\n\n\n\n\n## Example:\n\n##", "\n## Example:\n\nkeep_order([1, 2, 3, 4, 2], 0) #=> 4\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n#### Task:\n\n\n\n\n\n\n\n\n\n\n### Tasks:\n\n### Task:\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n# Re-The-Call-Based format\n\n#### Example:\n\n## Example:\n\n## Task:\n\n\n\n\n\n\n\n\n\n\n\n\n                      ^(index 5)\n\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Task:\n\n# Task:\n", "\n## Example:\n\n## Tasks:\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n## Example:\n\n\n\n #=> 4\n                      ^(index 4)\n\n\n### Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Task:\n\n\n\n\n\n#### Example:", "\n## Example:\n\n\n\n\n##### Example:\n\n\n\n\n\n\n\n\n##### Example:\n\n##### Task:\n\n\n\n\n      ^(index 5)\n      ^(index 3)\n         \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Task:\n\n#\n\n", "\n\n\n\nkeep_order(ary, val)\n\n\n\n\n\n\n\n_Do not modify the input._\n\n### Task:\n\n## Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n\n\nkeep_order([1, 2, 3, 4])\n\n\n", "\n```\n\n\n\n\n\n\n\n\nkeep_order(ary, val)\n\n\n\n\n\n\n\n#### Example:\n\n```python\n\nkeep_order([1, 2, 3, 4, 2, 2]) #=> 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n##", "\n\n\n\nkeep_order(ary, val) #=> 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n                      ^(index 1)\n                      ^(index 2)\n\n\n## Example:\n\n\n\n\n\n\n\n\n\n\n\n\n #=> 1\n\n\n\n\n\n#### Example:\n\n#### Example:\n\n\n\n\n\n### Task:", "\n#\n\n#\n\nkeep_order(ary, val) #=> 1\n\nkeep_order([1, 2, 3, 4], 2) #=> 2\n\n\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n## Example:\n\n\n\n\n\n\n```python\n\nif", "\n\n\n\nkeep_order(ary, val):\n\n## Example:\n\nkeep_order(ary, val):\n\n## Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Results:\n\n#### Example:\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n", "\n\n## Example:\n\nkeep_order(ary, val) #=> 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              ^(index 5)\n\n\n\n\n\n\n\n### Example:\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples:\n\n## Task:\n\n\n\n\n", "\n## Example:\n\n\n\n\n\n\n\n\n\n\nkeep_order([1, 2, 3, 4, 7], 4) #=> 4\n\n\n\n\n\n\n\n\n\n\n\n\n #=> 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### References:\n\n#### Example:\n\n#### Task:\n\n\n\n\n", "\n\n\n\n\n#!/\n\n\n\n\n\n\n\n\n#!/\n\nkeep_order(ary, val): #=> 2\n\n#!/\n\n#!/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n## Example:\n\n\n\n\n\n### Task:\n\n"], "prompt": "\nQUESTION:\n#### Task:\n\nYour job here is to write a function (`keepOrder` in JS/CoffeeScript, `keep_order` in Ruby/Crystal/Python, `keeporder` in Julia), which takes a sorted array `ary` and a value `val`, and returns the lowest index where you could insert `val` to maintain the sorted-ness of the array. The input array will always be sorted in ascending order. It may contain duplicates.\n\n_Do not modify the input._\n\n#### Some examples:\n\n```python\nkeep_order([1, 2, 3, 4, 7], 5) #=> 4\n                      ^(index 4)\nkeep_order([1, 2, 3, 4, 7], 0) #=> 0\n          ^(index 0)\nkeep_order([1, 1, 2, 2, 2], 2) #=> 2\n                ^(index 2)\n```\n\nAlso check out my other creations \u2014 [Naming Files](https://www.codewars.com/kata/naming-files), [Elections: Weighted Average](https://www.codewars.com/kata/elections-weighted-average), [Identify Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).\n\nIf you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!\ndef keep_order(ary, val):\n\t\nUse Call-Based format\nANSWER:\n"}}