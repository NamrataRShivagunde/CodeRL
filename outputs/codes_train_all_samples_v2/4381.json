{"4381": {"code": ["\n```\n\nmin_unfairness()\n\n**Example**\n\n**Minimal unfairness**\n\n\n\n\n\n`\n\n```\n\n\n\n\n\n\n\n*\n\n\n)\n\n\n\n\n\n\n\n\n```\n\n\n\nmin_unfairness([],0)==0 #from max()\n-", "```\n\n\nmin_unfairness(unfairness)\n```\n\n\n\nminimal unfairness\n\n**Warning:**\n\n* The unfairness is not a valid value;\n*\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n)\n\n**Warning:**\n\n*", "```\n\n\n\n\n\n\nmin_unfairness()\n\n**Note:**\n\n* The maximum value is 0;\n* the minimum is 0;\n*\n\n```\n\n\n\n\n\n)\n\n\n\n\n\n\nmin_unfairness(2)==1\n\n\n\n\n\n\nmin\n\n)\n\n**Info:", "\n```\n\n\nmin_unfairness()\n\nmin_unfairness()\n\n```\n\n\n\n\n\n\n\nchallenges/ang-1)\n\n* min_unfairness()\n==1\n\n\n\n\nmin\n\n\n\n\n\n\n\n\n\n\n\nmin_unfairness()\n\n/)\n", "```\n\n\n\n\n\n\n\nmin_unfairness:\n\n* unfairness:\n\n* unfairness:\n\n*\n\n\n```\n\n\n\n\n\n/index.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/challenges/ang.html)\n\n**Information**\n\n", "```\n\n\nmin_unfairness()\n\n**Note:**\n\n\n\n`\n\n**Notes:**\n\n* The unfairness of a list/array is 0\n*\n\n```\n\n\n\n\n\n\n)\n\n\n\n\n\n\nmin_unfairness\n\n\n\n\n\n\n/).\n\n**This sample", "\n```\n\n\n\n\n\n\n\nmin_unfairness([1,2,3,4,5,6,5,6,7,7,7,7])\n\n\n\n```\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/)\n\n\n**Note:**\n\n*", "```\n\n\nmin_unfairness(unfairness, unfairness)\n```\n\n\n\n\n\n```\n\n\nmin_unfairness(unfairness)\n\n\n\n\n);\n\n\n\nmin_unfairness\n\n\n\n\n\n\n\n\n\n\n.html)\n\n* lists/arrays can", "```\n\n\n\n\n\n\nmin_unfairness: minimal unfairness of a list/array; minimal unfairness is the minimum unfairness of an array/list;\n\n\n\n\n\n\n\n\n)\n\n\nmin_unfairness\n\n\n\n\n\n\n\n\n\n)\n\n**Note:**\n\n", "\n```\n\n\nmin_unfairness([10,30,250,10,20])==1 #from max(10,10,20)==1\n```\n\n\n\n\n\n\n\n\n\n\n\n/).\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n_minimal/), but it can be used as an", "```\n\n\n\n\n\n\n\n\nmin_unfairness:\n\nminimal is the minimum unfairness of a list/array;\n\n\n\n```\n\n\n\n\n\n\n)\n\n\n\n\n\n\nmin_unfairness([1,2,3,4,5])==1\n\n\n\n\n\n\n/list_", "```\n\n\n\n\n\n\n\n\n\nmin_unfairness:\n\n* unfairness of a list/array is the minimum unfairness of the list/array;\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Notes**\n\n* the default value of k is 0;\n*\n-list", "```\n\n**Example:**\nfrom the unfairness of a list/array.\n\n\n```\n\n\n\n\n\n\n\n\n* The unfairness is 0\n* The maximum is 0\n*\n\n\n)\n\n\nmin\n\n\n\n\nmin_unfairness([],1)\n\n\n\n\n\n).\n\n**Warning", "```\n\n\n\n\n\n\n\n\nmin_unfairness(unfairness) == unfairness #from max(x1,x2,...xk)==0\nmin_unfairness(array)==0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmin_unfairness\n\n-list", "```\n\n\n\n\n**Notes**\n\n\n\nmin_unfairness()\n\n**Notes**\n\n* The minimum unfairness of an array/list is 0;\n*\n\n\n\n\n\n\n\n\n/index.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/).\n\n**Notes**\n\n*", "\n```\n\n\nmin_unfairness(unfairness)\n\n**Note:**\n\n\n\n\n```\n\n\nmin_unfairness(unfairness)\n\n\n\n\n\n\n\n);\n*\n\n\n\n\n\n\n\n\n\n```\n\nmin_unfairness()\n\n```\n\n-", "```\n\n\n\n\n\n\nmin_unfairness()\n\n**Note:**\n\n* The unfairness of a list/array is 0\n\n*\n\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nmin_unfairness()\n\n\n/).\n\n**Example", "```\n\n\n\n\n\n\n\n`\n\n**Note:**\n\n* The unfairness of a list/array is 0;\n* the unfairness of an empty list/array is 0;\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\nmin_unfairness\n\n\n\n\nmin\n\n/)\n\n**Constraints", "\n```\n\n\n\n\n\n\n\nmin_unfairness:\n\nminimal unfairness\n\nminimal unfairness\n\nmaximal unfairness\n\n```\n\n\n\n\n\n\n\n```\n\n\n)\n\n\n\n\n\n\nmin_unfairness\n\n\n\n\n\n.html)\n\n#", "\n```\n\nmin_unfairness\n\n**Notes**\n\n* The unfairness of an array/list is 0\n```\n\n\n\n\n\n\n\n\n\n\n\n_in_sample.html):\n\n\nmin_unfairness([1,2])==0 #\n\n\n,\n\n\n\n\n\n_list/ang_"], "prompt": "\nQUESTION:\nWe define the \"unfairness\" of a list/array as the *minimal* difference between max(x1,x2,...xk) and min(x1,x2,...xk), for all possible combinations of k elements you can take from the list/array; both minimum and maximum of an empty list/array are considered to be 0.\n\n**More info and constraints:**\n\n* lists/arrays can contain values repeated more than once, plus there are usually more combinations that generate the required minimum;\n* the list/array's length can be any value from 0 to 10^(6);\n* the value of k will range from 0 to the length of the list/array,\n* the minimum unfairness of an array/list with less than 2 elements is 0.\n\nFor example:\n\n```python\nmin_unfairness([30,100,1000,150,60,250,10,120,20],3)==20 #from max(30,10,20)-min(30,10,20)==20, minimum unfairness in this sample\nmin_unfairness([30,100,1000,150,60,250,10,120,20],5)==90 #from max(30,100,60,10,20)-min(30,100,60,10,20)==90, minimum unfairness in this sample\nmin_unfairness([1,1,1,1,1,1,1,1,1,2,2,2,2,2,2],10)==1 #from max(1,1,1,1,1,1,1,1,1,2)-min(1,1,1,1,1,1,1,1,1,2)==1, minimum unfairness in this sample\nmin_unfairness([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],10)==0 #from max(1,1,1,1,1,1,1,1,1,1)-min(1,1,1,1,1,1,1,1,1,1)==0, minimum unfairness in this sample\nmin_unfairness([1,1,-1],2)==0 #from max(1,1)-min(1,1)==0, minimum unfairness in this sample\n```\n\n**Note:** shamelessly taken from [here](https://www.hackerrank.com/challenges/angry-children), where it was created and debatably categorized and ranked.\ndef min_unfairness(arr,k):\n\t\nUse Call-Based format\nANSWER:\n"}}