{"3781": {"code": ["\npython\nprod_int_partII(20, 8) == [2, 2, 2]\n```\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII(3, 5) == [3, 4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(4) ----> 4 #\n\n[(", "\npython\nprod_int_partII() == 42\n\npython\nprod_int_partII() == 42\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII() == [2, 2, 2, 2]\n\n```python\nprod_int_partII()\n\n\n", "\n\n\n\n\n\n\n#\n\n\nprod_int_partII()\n\n# (2)\n# (3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(4) ----> [5, 6]\n\n(6) ----> [2, 6] # Amount of different products\n\n\n[(", "\n\n\n\n\npython\nprod_int_partII() == 3\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII(42, 4) == [] # There is only one list of lists.\n\n(2) ----> 3 # Total amount of different products\n\n\n\n\n\n\n\n   ", "\npython\nprod_int_partII() == [6, 8, 10]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII(3, 2) == [] # A list of lists\n\n(1) ----> 6\n\n\nprod_int_", "\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII(3) == [] # No factors\n\n\n\n\n\n\n\n\n\n\n\n(4) ----> [2, 2, 3, 4, 2, 2, 2, 3] # Amount of different products with three factors.\n\n\n\n\n\n\n\n#   (3) ---->", "\n\n\n\n\n\npython\nprod_int_partII(42) == 100\n\n(2) ----> [7, 11] # Amount of different products\n\n(3) ----> [9]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(4) ----> 6 # Amount of different products\n\n\n\n\n\n\n(", "\n\n\n\n\n\n\n\nprod_int_partII(4, 0) == [2, 2, 2, 3]\n\n```python\n\nprod_int_partII(6, 0) == [2, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n# (4) ----> [", "\npython\nprod_int_partII(6, 2, 3, 4) == [2, 2]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\nprod_int_partII(37, 2) == [0, 0, []]\n\n\n\n\n    (", "\n\n\n\n    (2) ----> 4 # Amount of multiplicative products\n    (3) ----> 4 # Amount of multiplicative products\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII() == []\n```\n\n\n\nprod_int_", "\npython\nprod_int_partII() == 42\npython\nprod_int_partII() == 42\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII(2, 5) == 3 # Product partitions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII() == []\n\n\n\n\n#", "\npython\nprod_int_partII(12) == 6\npython\nprod_int_partII(16) == 12\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII() == [0, 0, 0, 0]\n\n\n\n\n# (4) ---", "\n\n\n\n\n\npython\nprod_int_partII(2, 2, 2) == 0 # The product-list is zero.\n\n(4) ----> 0 # The product-list is zero\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII()\n\n\n\n\n\n", "\n\n\n\n\n\npython\nprod_int_partII(2, 3) == 0\n\n(2) ----> 0 # Amount of different products that has no amount of factors equals to 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII() == []\n```\n\n\n\n\n[", "\n\n\n\n\n\n\nprod_int_partII(n, s) == s\n\n\n\n\n\n\n\n\n\nprod_int_partII(1, 2) == 1 # Amount of different products with one factors equals to 2\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII() == []\n\n\n\nprod_int_", "\n\n\n\n\n\n\n\n\n\nprod_int_partII(24, 5) == [2, 3, 4, 2, 3, 2, 4, 4] #\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(4) ----> 0 # Amount of different products\n\n\n\n\n\n\n#\n\n# (4", "\n\n\n\n\npython\nprod_int_partII(34, 42) == [3, 4, 8, 9, 7]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII(36, 1) == [0, 0, 1]\n```\n\n\n[(2)]", "\npython\nprod_int_partII(1) == [0, 0, 0, 0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII(4, 3) == [2, 2, 2, 2] # The product-list\n\n\n\n# (4) ---", "\n\n\n\n\n\n\nprod_int_partII(6, 1) == 1\n\n(2) ----> 1 # Amount of different products\n\n(3) ----> 1 # Amount of different products\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(4) ----> [2]\n\n\n[(", "\npython\nprod_int_partII() == 1 # Amount of different products with three factors\n\npython\nprod_int_partII() == 2 # Amount of different products with three factors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nprod_int_partII() == []\n\n\n\n[(4"], "prompt": "\nQUESTION:\nYou should have done Product Partitions I to do this second part.\nIf you solved it, you should have notice that we try to obtain the multiplicative partitions with ```n \u2264 100 ```.\n\nIn this kata we will have more challenging values, our ```n \u2264  10000```. So, we need a more optimized a faster code.\n\nWe need the function ```prod_int_partII()``` that will give all the amount of different products, excepting the number itself multiplied by one.\n\nThe function ```prod_int_partII()``` will receive two arguments, the number ```n``` for the one we have to obtain all the multiplicative partitions, and an integer s that determines the products that have an amount of factors equals to ```s```.\n\nThe function will output a list with this structure:\n```python\n[(1), (2), [(3)]]\n\n(1) Total amount of different products we can obtain, using the factors of n. (We do not consider the product n . 1)\n\n(2) Total amount of products that have an amount of factors equals to s.\n\n[(3)] A list of lists with each product represented with by a sorted list of the factors. All the product- lists should be sorted also.\nIf we have only one product-list as a result, the function will give only the list \nand will not use the list of lists\n```\nLet's see some cases:\n```python\nprod_int_partII(36, 3) == [8, 3, [[2, 2, 9], [2, 3, 6], [3, 3, 4]]]\n\n/// (1) ----> 8 # Amount of different products, they are: [2, 2, 3, 3], [2, 2, 9], \n[2, 3, 6], [2, 18], [3, 3, 4], [3, 12], [4, 9], [6, 6] (8 products)\n    \n    (2) ----> 3 # Amount of products with three factors (see them bellow)\n\n    (3) ----> [[2, 2, 9], [2, 3, 6], [3, 3, 4]] # These are the products with 3 factors\n```\n```python\nprod_int_partII(48, 5) == [11, 1, [2, 2, 2, 2, 3]] # Only one list.\n```\nAgain consider that some numbers will not have multiplicative partitions.\n```python\nprod_int_partII(37, 2) == [0, 0, []]\n```\nHappy coding!!\n\n(Recursion is advisable)\ndef prod_int_partII(n, s):\n\t\nUse Call-Based format\nANSWER:\n"}}