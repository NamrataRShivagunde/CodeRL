{"3817": {"code": ["split_without_loss`.\n\n\n\nsplit_without_loss(\"hello world!\", \"|\")\n\n```\nsplit_without_loss(\"hello world!\", \"|\")\n\n#### Examples:\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\nsplit_without_loss(\"|\")\n\n\n\n\n```\n", "\n\n\n\n\n#### Examples:\n\nsplit_without_loss(\"hello world!\", \"|\")\n\n\n\n## Example:\n\n```python\nsplit_without_loss(\"hello world!\", \"|\")\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\nsplit_without_loss\n\n\n\nsplit_without_loss(\"\")\n", "\n\n\n\n\n\nsplit_without_loss(\"hello world\", \" | \")\n\n### Example:\n\nsplit_without_loss(\"hello world\", \" | \")\n\n#### Example:\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsplit_without_loss(\"hello world!\", \"|\")\n\n\n\n\n\n\n``", "\n```\n\n\n\nsplit_without_loss(str, split_p)\n\nsplit_without_loss(\"hello world!\", \"|\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n### Example:\n\n#### Example test cases:\n\n\n\n\n\n\n\nsplit\n\n\n\n``", "\n```\n\n\n\n\n#### Example:\n\nsplit_without_loss\n\n```\n\n## Example:\n\nSplit without loss\n\n#### Example:\n\nSplit without loss\n\n## Examples:\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\nsplit_without_loss\n\n\nsplit\n\n\n##", "\n```\nsplit_without_loss\n\n\n\n\n#### Example:\nsplit_without_loss\n\n\nsplit_without_loss(\"|\", \"o|rl\")\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n\nsplit_without_loss(\"\")\n\n\n\n\n", "\n```\n\n\n\n\nsplit_without_loss\n\nsplit_without_loss(\"hello\", \"world!\")\n\n#### Example:\n\nSplit string\n\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n#### Example:\n\n\n\n\n\n\n```\n\n\nsplit_without_loss\nsplit\n\nsplit_without_", "\n\n#### Example:\nsplit_without_loss(str, sep)\n\n\n```\n\n\n\n\n#### Example:\n\nThe best is to use the split_without_loss function.\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\nsplit_without_loss\nsplit_without_loss\n\n\n\n\nsplit_without_", "\n\n#### Example:\nsplit_without_loss(split_p = \"|\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\nsplit_without_loss(\"h|rld! |rld!\", \" |\")\n\n\n\n\n```\n\n\n\n\n\n\n\nsplit_without_loss:\n\n\n\n\n\n\n", "\nsplit_without_loss`\n\n\n\nsplit_without_loss(split_p = \"|\", sep = \"|\")\n\n#### Example:\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n## Example:\n\nsplit_without_loss(str, sep)\n\n\n\n\n\n\n\n\n\n```", "\nsplit_without_loss\n\n\n\nsplit_without_loss\n\n\nsplit_without_loss\n\nsplit_without_loss\n\nsplit_without_loss\n\nsplit_without_loss\n\nsplit_without_loss\n\nsplit_without_loss\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\nsplit\n\n\n\n", "\n\n\n\n#### Example:\n\nSplit the string by the separator (`split` function in Python:\n\n```python\n\nsplit_without_loss(\"hello world!\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\nsplit_without_loss\n\n\n\n\n```", "```\n\n\n\nsplit_without_loss\nsplit_without_loss\nsplit_without_loss\nsplit_without_loss\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\nsplit_without_loss(\"hello world!\", \"|\")\n\nsplit\n\n\n\n```\n\n###", "\n```\nsplit_without_loss\n\n#### Example:\n\n\n\n#### Example test cases:\n\n\n\n\n\nsplit_without_loss(\"hello world!\", \" | \")\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\nsplit_without_loss\n\n\n\n\n\n\n``", "\n\n\n\n\n\nsplit_without_loss(\"\", \"|\")\n\n```\n\n#### Example:\n\nSplit a string using `split`\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n#### Example:\nsplit_without_loss(\"hello world!\", \"h|rld!\")\n\n\n\n\n\n\n\n\n\n\n```\n", "\n\n\n\n\nsplit_without_loss\nsplit_without_loss\nsplit_without_loss\nsplit_without_loss\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n#### Example:\n\n```python\n\nSplit with `split_without_loss`\n\n\n\n\n\n\n\n\n\n\n\n\n```\n", "\", \" \", \" \")\n\n\n\n\n\n\nsplit_without_loss(\"hello\", \"|\")\n\n#### Example:\n\nSplit by `split`\n\nThe split function will be called on overlapping regions.\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsplit_without_loss:\n\n\n\n\n```", "\n```\n\n\n\n\n#### Example:\n\nSplit without loss (`split_without_loss` in Ruby/CoffeeScript):\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\nsplit_without_loss(\"world! |\")\n\n\n\nsplit\n\n\n```", "\n```\nsplit_without_loss\n\", \"h|rld!\"\n\n#### Example:\n\nSplit by separator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n#### Example:\n\n\n\n```\n\n\n\n\n```\n\n\n\nsplit_without_loss(\"hello\", \" \") #\n\n\n", "\n\n\n\n\n\n\nsplit_without_loss(split_p = \"|\")\n\n\n#### Example:\nsplit_without_loss(split_p = \"|\")\n\n\n\n\n\n\n\n```\n\n#### Example:\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\nsplit_without_loss(\"\", \" \")\n\n\n\n``"], "prompt": "\nQUESTION:\nMost languages have a `split` function that lets you turn a string like `\u201chello world\u201d` into an array like`[\u201chello\u201d, \u201cworld\u201d]`. But what if we don't want to lose the separator? Something like `[\u201chello\u201d, \u201c world\u201d]`.\n\n#### Task:\n\nYour job is to implement a function, (`split_without_loss` in Ruby/Crystal, and `splitWithoutLoss` in JavaScript/CoffeeScript), that takes two arguments, `str` (`s` in Python), and `split_p`, and returns the string, split by `split_p`, but with the separator intact. There will be one '|' marker in `split_p`. `str` or `s` will never have a '|' in it. All the text before the marker is moved to the first string of the split, while all the text that is after it is moved to the second one. **Empty strings must be removed from the output, and the input should NOT be modified.**\n\nWhen tests such as `(str = \"aaaa\", split_p = \"|aa\")` are entered, do not split the string on overlapping regions. For this example, return `[\"aa\", \"aa\"]`, not `[\"aa\", \"aa\", \"aa\"]`.\n\n#### Examples (see example test cases for more):\n\n```python\nsplit_without_loss(\"hello world!\", \" |\") #=> [\"hello \", \"world!\"]\nsplit_without_loss(\"hello world!\", \"o|rl\") #=> [\"hello wo\", \"rld!\"]\nsplit_without_loss(\"hello world!\", \"h|ello world!\") #=> [\"h\", \"ello world!\"]\nsplit_without_loss(\"hello world! hello world!\", \" |\")\n                  #=> [\"hello \", \"world! \", \"hello \", \"world!\"]\nsplit_without_loss(\"hello world! hello world!\", \"o|rl\")\n                  #=> [\"hello wo\", \"rld! hello wo\", \"rld!\"]\nsplit_without_loss(\"hello  hello  hello\", \" | \")\n                  #=> [\"hello \", \" hello \", \" hello\"]\nsplit_without_loss(\" hello world\", \" |\")\n                  #=> [\" \", \"hello \", \"world\"]\nsplit_without_loss(\"  hello hello hello\", \" |\")\n                  #=> [\" \", \" \", \"hello \", \"hello \", \"hello\"]\nsplit_without_loss(\"  hello hello hello  \", \" |\")\n                  #=> [\" \", \" \", \"hello \", \"hello \", \"hello \", \" \"]\nsplit_without_loss(\"  hello hello hello\", \"| \")\n                  #=> [\" \", \" hello\", \" hello\", \" hello\"]\n```\n\nAlso check out my other creations \u2014 [Identify Case](https://www.codewars.com/kata/identify-case), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2)\n\nIf you notice any issues/bugs/missing test cases whatsoever, do not hesitate to report an issue or suggestion. Enjoy!\ndef split_without_loss(s, split_p):\n\t\nUse Call-Based format\nANSWER:\n"}}