{"3752": {"code": ["\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\npython\n\n\n\n\n\n```python\nvalue_at([1, 2, 3, 4])\n```\n\n\n\n\n\n\n\n\n```python\naCb := a * (a", "\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n```python\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nvalue_at([1, 2], 3\n", "\nvalue_at(poly_spec, x):\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nvalue_at([1, 2, 3])\n```\n\n\n\n\n\npython\nvalue_at([1, 2, 3])\n```\n\n\n\n\n``", "\n\n\n\n\n\n\n\n\n\n\n\n\nThe Binomial Form of a polynomial has many uses:\n\n```python\nbinomial_form(poly_spec, x) := x\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nvalue_at(poly_spec, 3)\n\n\n\n\n\n\n\n```python\na", "\n\n\n\n\n\n\n\n\nbinomial_form(x, x) = a * b * c + c\nbinomial_form(x, b) = b\n\n```python\nvalue_at(x) := x\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\naCb :=", "\n\n\n\nCall-Based format\n\n\n\n\n\n\n\nbinomial_form(poly_spec)\n\nbinomial_form(poly_spec)\n\nvalue_at(poly_spec)\n\n\nAnswer:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\naCb := a *", "\n\n\n\nCall-Based format\n\n\n\np(x) := (a-1) * (b-2) * (b-1) * (b-2) * (b-1) * (a-2) * (b-2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n", "\n\n\n\n\n\n\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n```python\nvalue_at(poly_spec, x) :=\n\naCb := x\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\naCb := a *", "\n\n\n\n\n\nUse Call-Based format\n\npython\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nvalue_at(poly_spec, 3):\n\n```python\naCb := a\n```\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\n\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n```python\nvalue_at(poly_spec, x):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\np(x) := 3\n\np", "\n\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\naCb := a * (a-1) * (a-2) *... * (a-2) * b!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\naCb := a", "\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n```python\nvalue_at(poly_spec, x) := 3\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\naCb := a * x\n\n#", "\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\npython\naCb := a * (a-1) * (a-2) *... * (a-N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 * (a-1) * (a-", "\nUse Call-Based format\n\n\n\n\n\n\np(x) := a * (a-b) * (b-b) * (b-b)\n\nq(x) := b\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naCb = 1\n\n\n\n\n```python", "\n\n\n\n\n\n\n\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n```python\nvalue_at(poly_spec, x) := x\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nvalue_at(x) := 3\n\n\n\n``", "\n\n\n\n\n\n\nvalue_at(poly_spec, x):\n\nUse Call-Based format\n\n```python\nvalue_at([1, 2, 3])\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naCb := a * (a-b)\n\n\n\n\n```", "\n\n\n\n\n\n\n\n\n\n\nThe Binomial Form of a polynomial has many uses\n\n```python\nbinomial_form(poly_spec) := a * (a-2) *... * (a-N) \\* x\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\naCb", "\nUse Call-Based format\n\n\n\n\n\n\np(x) := a * (a-1) * (a-2) *... * (a-2) * (a-1)\nq(x) := b\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\naCb := a *", "\nUse Call-Based format\n\n\n\n\n\nvalue_at([1, 2, 3, 4, 5])\n\n\n\n\n\n\n\n\n\npython\na = 1\nb = 2\nc = 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naCb(x) := a\n\n\n\n\n\n```python\na", "\n\n\naCb := a * (a-1) *... * (a-2) *... * (a-1) * (a-2)\n```\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\npython\nvalue_at([1, 2, 3])\n```\n\n\n\n\n\naCb :="], "prompt": "\nQUESTION:\nThe Binomial Form of a polynomial has many uses, just as the standard form does.  For comparison, if p(x) is in Binomial Form and q(x) is in standard form, we might write\n\np(x) := a0 \\* xC0 + a1 \\* xC1 + a2 \\* xC2 + ... + aN \\* xCN\n\nq(x) := b0 + b1 \\* x + b2 \\* x^(2) + ... + bN \\* x^(N)\n\nBoth forms have tricks for evaluating them, but tricks should not be necessary.  The most important thing to keep in mind is that aCb can be defined for non-integer values of a; in particular,\n\n```\naCb := a * (a-1) * (a-2) * ... * (a-b+1) / b!   // for any value a and integer values b\n    := a! / ((a-b)!b!)                          // for integer values a,b\n```\n\nThe inputs to your function are an array which specifies a polynomial in Binomial Form, ordered by highest-degree-first, and also a number to evaluate the polynomial at.  An example call might be\n\n```python\nvalue_at([1, 2, 7], 3)\n```\n\nand the return value would be 16, since 3C2 + 2 * 3C1 + 7 = 16.  In more detail, this calculation looks like\n\n```\n1 * xC2 + 2 * xC1 + 7 * xC0 :: x = 3\n3C2 + 2 * 3C1 + 7\n3 * (3-1) / 2! + 2 * 3 / 1! + 7\n3 + 6 + 7 = 16\n```\n\nMore information can be found by reading about [Binomial Coefficients](https://en.wikipedia.org/wiki/Binomial_coefficient) or about [Finite Differences](https://en.wikipedia.org/wiki/Finite_difference).\n\nNote that while a solution should be able to handle non-integer inputs and get a correct result, any solution should make use of rounding to two significant digits (as the official solution does) since high precision for non-integers is not the point here.\ndef value_at(poly_spec, x):\n\t\nUse Call-Based format\nANSWER:\n"}}