{"4554": {"code": ["```\n\n## Hard-coded\n\n# The game is a kata\n\n## Hard-coded\n\n\n\n\n\n\n\n# Ironic\n\n\n\n\n## Hard-coded\n\n\n\n\n\n\n```\n\n## Example:\n\n\n\n\n## Example:\n\n\n\n# Example:\n\n\n't be empty. \n\n", "\n## Hard-coded\n\n\n# Description of the function\n\n## Example: \n\n## Hard-coded\n\n\n## Example:\n\n\n\n\n\n\n\n\n## Example: \n\n\n\n```\n\n## Example:\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n\n\n\n\n\n\n be empty. \n\n## Example 5", "```\n\n## Description\n\n\n\n\n\n\n\n## Example:\n\n## Example: \n# Malus of Natac\n\n# One kata about Natac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Example\n\n\n\n\n## Examples:\n\n\n\n\n't be empty.\n\n##", "```\n\n## Example: \n\n# Natac\n# Natac\n\n## Kata\n\n# Natac\n\n# Natac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n```\n\n## Bowtie\n\n\n\n\n be empty.\n\n## Example 5", "\n```\n\n# The main game\n\n# The game object\n\n\n\n\n## Description\n\n\n\n\n## Example:\n\n## Example 1\n\n\n\n\n\n## Example 2\n\n\n\n\n\n\n\n\n\n## Examples\n\n\n## Examples\n\n\n\n\n## References\n\n## Example 2\n\n\n\n\n\n\n\n be empty,", "```\n\n## Game\n\n\n# House\n# Water\n# Ratio\n# Carmen\n# Farmen\n# Rarmen\n\n\n\n\n\n\n\n```\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n\n```\n\n\n\n\n\n't. \n\n## Example 2:\n\n", "```\n\n\n# A few examples and examples \n# The current time and resources of the game.\n#\n\n## Game\n\n\n\n\n```\n\n## Functions\n\n\n\n\n\n\n## Example output\n\n\n\n\n\n\n\n\n## Details\n\n\n\n## Example output\n\n\n\n\n\n\n be empty.\n\n## Example output\n\n", "```\n\n\n## Games\n\n# Replays\n\n# Hills\n\n# Hills\n\n## Hills\n\n## Wins\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\n```\n\n## References\n\n\n\n be empty.\n\n", "```\n\n## Hardcoded\n# A Hard coded\n# A Hard coded\n# A Hard coded\n# A Hard coded\n#\n\n\n\n\n\n\n\n```\n```\n\n\n\n\n\n## Tasks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Functions\n\n#\n\n\n\n be empty \n", "```\n\n## Note\n\n# Kata\n\n# Game\n\n# Resource\n\n# Resource\n\n# Resource\n\n# Resource\n\n# Resource\n\n\n\n\n## Example\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n## Other\n\n\n\n\n\n\n\n\n## Example\n\n\n\n be empty,", "```\n\n\n# A few things\n# A few things\n# A few things\n# A few things\n#\n\n## Hardcoded\n\n\n\n\n\n```\n```\n\n\n\n\n```\n\n## Examples\n\n\n\n\n\n\n## Example\n\n\n\n\n\n\n```\n\n\n\n\n be empty.\n\n## Example 5", "\n\n\n# Lyan Lan\n# I\u2019m A. A. B. A. B. B. B. B. A. B. B. B\n```\n\n\n\n\n\n\n\n\n\n```\n\n## Definitions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n't be empty.\n\n## Example 6", "\n\n## Information\n\n# The game is about the kata\n\n\n\n## Example: \n# A string of letters representing the resources you have and played\n\n\n\n\n```\n\n\n\n\n\n## Example\n\n# Description\n\n\n\n\n\n## Example:\n\n\n\n\n\n```\n\n\n\n\n\n\n be empty. \n\"\"\"\n", "```\n\n## Game\n\n# Letterss of Natac\n\n\n\n## Resource\n\n\n\n## Star\n\n\n\n\n\n\n## Example:\n#\n\n\n\n\n# Examples\n\n# Task:\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples:\n\n\n\n\n\n\n\n be empty, but a", "```\n\n## Game\n\n# Letterss of Natac\n# Letterss of Natac\n\n\n\n## Resource\n\n\n\n\n\n```\n\n## Components\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n# Letterss of Natac\n#\n\n\n\n\n\n\n\n be empty, but a", "\n\n\n# Letterss of Natac\n# Letterss of Natac\n# Letterss of Natac\n# Letterss of Natac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n## Details\n\n\n\n\n\n\n\n## Methods\n\n\n\n\n\n be empty, but a play", "```\n\n\n# French\n# Lorem ipsum\n# Brobrons\n# Roni ipsum\n# Lorem ipsum\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n## Example:\n\n\n\n\n\n\n## Example:\n\n\n\n\n\n be a string ", "```\n\n## Law\n\n# The order of resources you have\n# The number of resources you have\n# The number of resources you have\n#\n\n\n\n\n\n\n```\n\n## Test\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n\n\n\n## Example:\n\n\n\n\n\n be empty. \n\n## Returns", "\n\n## Description\n\n\n# The test for kata about the game \n# The test for kata about the game\n\n## Example:\n\n#\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n## Example: \n\n\n\n## Example:\n\n#\n\n\n\n\n\n\n\n\n## Examples:\n\n1.", "\n\n## Game\n\n\n\n\n## Information\n\n# The game has been made up. \n\n\n\n\n## Example: \n\n## Example: \n\n# Some game\n\n# The game has been made up. \n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# House\n\n\n\n\n# House\n\n \n\n##"], "prompt": "\nQUESTION:\n# Letterss of Natac\nIn a game I just made up that doesn\u2019t have anything to do with any other game that you may or may not have played, you collect resources on each turn and then use those resources to build things like roads, settlements and cities. If you would like to try other kata about this game, they can be found **[here](https://www.codewars.com/collections/59e6938afc3c49005900011f)**\n\n## Task\n\nThis kata asks you to implement a time efficient version of the function `play_if_enough(hand, play)` , which takes as input a `hand`, the resources you have (a string of letters representing the resources you have), and a `play`, (a string of letters representing the resources required to build a certain game object), and returns a tuple (list in r) of a boolean value, corresponding to whether you have enough resources, and your hand. If you had enough to build the object, the returned hand is your resources minus those you used to build the object. If not, it is your original hand (the one passed to the function).  \n\nFor example, if it takes 3 ore and 2 grain to build a city, `play` is `\u201dooogg\u201d`. If `hand` is `\u201dooooogggssbbb\u201d`, then `play_if_enough(hand, play)` returns `(True, \u201coogssbbb\u201d)`. \n\n## Examples\n```python\nplay_if_enough(\"ooooogggssbbb\", \"ooogg\")  => (True, \"oogssbbb\")\nplay_if_enough(\"oogssbbb\", \"bwsg\")        => (False, \"oogssbbb\")\nplay_if_enough(\"\", \"bw\")                  => (False, \"\")\nplay_if_enough(\"abcdefghij\", \"aa\")        => (False, \"abcdefghij\")\n\n```\n## Notes: \n1. The order of resources in your hand (or play) is not relevant. You can shuffle your hand any way you'd like, so long as you have the same number of each resource.\n2. There are 26 different resources, each represented by a lower case letter a-z, so a valid hand is a string of lower case letters.\n3. A valid play is a string of any number of lower case letters.\n4. You do not have to test for whether a hand or play is valid. \n5. A hand can be empty, but a play can't. In the event a hand is empty, you don't have the cards to play, so return `(False, \"\")`, in the correct data structure for your language, see example 4 above.\n6. Tests include hand sizes of up to 150000 elements and play sizes up to 10000 elements.\ndef play_if_enough(hand, play):\n\t\nUse Call-Based format\nANSWER:\n"}}