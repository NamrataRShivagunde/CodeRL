{"4791": {"code": [":\n\n\n\n\n1', '01101111', '01101111', '01101111', '01101111', '01101111', '01101111', '01100001', '01101110', '1011001', '1011011' ]\n\n\n\t\n:\n\n\n::\n\n::\n\n:\n:\n\n\n\n    DO", "\n\n', '0110111', '01101111', '01101100', '01101100' ]\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\n\n:\n1,1,1,1,1,1,1\n::.\n\n:\n\n\n:\n\n\n\n\n\n\n    [\n            [ '1", ":\n\n\n\n:\n1001', '01100001', '01101101', '01101101' ]\n\n\n\n:\n\n\n\n:\n:\n\n\nUse Call-Based format\nUse Call-Based format\n.\n\nExample: `'man'` should return `[ '01100001' ]`\n\n:\n\n:\n\n\n\n\n   ", "\t\t0111101'\n\n\n\n:\n101101'\n\n\n\n\n\t\n\n:\n\n\n\n\t\n:\n\nUse Call-Based format\n\nUse Call-Based format', '01101101', '01100001', '01101100'...\n\n\n:.\n\n\n\n\n\n\n\n\n\n\n\n\t\tRead a function that", "\t\n\n\n\nUse Call-Based format\n:\n', '0200001', '02101101', '02101101', '01100001' ]\n\n\n\t\n:\n\n\n:\n:\n\n\nUse Call-Based format\n:\n.\n\n\nUse Call-Based format\nUse Call-Based format\n:\n\n\n\nWrite a function that takes a", ":\n\n\n\n:\n100', '01101101', '01100001', '01101110'\n\n\n\n\n:\n\n\n\n:\n\n\n\n\nUse String-Based format\n\n\n\n.\n\nExample: `'man' should return `[ '01100001' ]`\n\n:\n\n:\n\n\n\n\n    This function will convert a", "\n\n\n\n\n\n100', '10110110', '10110111', '10110111', '10110111',...\n\n\n\n\n\n:\n\n\n\n\t\n\n\n\n\n\n\n\n\nUse Call-Based format.\n\nExample: `'man' should return `[ '01100001' ]`\n\n:\n:\n\n\n\n\n   ", "\n\n01100001'\n\n\n:\n', '01100101', '01100001'\n\n\n\n\n:\n\n\n\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n.\n\nExample: `'man' should return `[ '01101101' ]`\n\n:\n:\n\n\n\nWrite a function that takes a string", "\n\n\n\n\nUse Call-Based format\n:\n', '01100001', '0110111'\n\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\nUse Call-Based format. The binary numbers are in binary format.\n\nUse Call-Based format\n\n:\n:\n1001'\n\n\n\n\nWrite a function that takes", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Python format\n\n\n\n', '01101101', '01100001', '01100001', '01101101'...\n\n\n\n.\n\nExample: `'man'` should return `[ ]`\n\n:\n:\n\n\n\n\n\t>>> '", ":\n\n\n\n\nUse Call-Based format\n:1110\n\n\n\n:\n\n\n\n\t\n:\n\n\n\n10111111', '01101101111', '0110111111', '0110111111', '101101111'\n\n\n\n.\n\n\n\n\nUse Function-Based format\n:\n\n\n\n\n\n    * Markdown:", "\n\n','man' ]\n\n\n\n\n','mir','mir','man','man'\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n.\n\nExample: `'man'` should return `[ '01100001', '01100001' ]`\n\n:\n:\n\n\n\n\n\nThe function returns an", ":\n\n\n\n\n1001', '101101101', '1011011001', '101101101', '1011011001', '1011011001' ]\n\n\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format.\n\n\n\n\nUse Call-Based format\n\n10111111\n\n\n\n\nWrite a function", "\n\n\n\n\nUse Call-Based format\n\n1011', '011011011', '01100001', '01101101' ]\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nUse Call-Based format.\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string that returns", "\n\n01101110'\n\n\n:\n10111'\n\n\n\n\n:\n\n\n\n\t:\n\n\n\n\n01101101101'\n01100001'\n01101101100'\n\n\n\nUse Call-Based format\n\nUse Call-Based format.\n\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string that returns a", ":\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n1', '01101101', '01100001'\n\n\n\n:\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\n.\n\nExample: `'man' should return `[ 0, 0, 0 ]`\n\n:\n:\n\n\n\n\nWrite a function that", "\n\n\n\n\n\n1001','man','man'\n\n\n\n:\n\n\n\n\t\n:\n\nUse Call-Based format\n\n\n`man` should return `[ '01100001', '01100001' ]`\n\n\n:.\n\n\n\n\n\n:\n100001', '01100001',...\n\n\n\n\n    A", "\n\n', '0011', '01101' ]\n\n\n:', '01100001', '01101101'\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n.\n\nExample: `'man'` should return `[ '01100001', '01100001' ]`\n\n:\n:\n\n\n\n\n        A function that", ":\n\n\n\n\n', '1', '1', '1' ]\n\n\n\n\n\n\n\n\n\t\n\n:\n\nPrint a call-based format\n\n\n10110111\n\n\n.\n\nExample: `'man' should return `[ '011011011' ]`\n\n:\n\n:\n\n\n\n\n    \"\"\"\n    if not isinstance", ":\n\n\n\nUse Call-Based format\n:', '01100001', '01100001'\n\n\n\n\n:\n\n\n\n:\nWrite a function that takes a string as an argument\n\n\n\n\n\nUse Call-Based format\n.\n\n\n\n\n\n\n:\n\n100001'\n\n\n\n\nWrite a function that takes a string and returns"], "prompt": "\nQUESTION:\nWrite a function that takes a string and returns an array containing binary numbers equivalent to the ASCII codes of the characters of the string. The binary strings should be eight digits long.\n\nExample: `'man'` should return `[ '01101101', '01100001', '01101110' ]`\ndef word_to_bin(word):\n\t\nUse Call-Based format\nANSWER:\n"}}