{"4960": {"code": ["\n\n\n\n\n\n\n# Examples:\n\n## Example\n\n# The Harshad object is complete\n\n#\n\n## Example\n\n\n\n\n\n\nHarshad.is_valid(number)\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Example\n\n## Examples\n\n\n*\n*\n*\n\n\n", "\n\n\n\n# Examples\n\nis_valid(number):\n\n# Examples\n\nis_valid(number)\n\n# Examples\n\n# Examples\n\n**Note**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Test\n\n\n\n\n\n\n\n\nH\n\n## Test\n\n##\n*\n\n#\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\nHarshad numbers are always valid\n\nHarshad numbers are always divisible by 1\n\nHarshad numbers are always divisible by 2\n\n**Note**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Tests\n\n##\n\n\n\n\n\n##\n", "\n\n\n\n\n\n```python\n\n\n\n\nHarshad.is_valid(number)\n```\n\n\n\n\n\nuse Call-Based format\n\n```python\n\n\n\n*\n\n\n\n\n\n\n## Example\n\n\n\n\n\n\n\n\n\n\n\nHarshad.is_valid()\n\n\n\n\n\n\n#", "\n\n\n\nCall-Based format\n\n**Example**\n\n*\n\n\n\n\n\n```python\nHarshad.is_valid(number)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n## Example\n\n## Examples\n\n## Tests\n\n\n*\n\n*\n*\n\n##\n#", "\nUse Call-Based format\n\n\n\n\n\n\npython\nHarshad.is_valid(number)\n\n## Tests\n\n```python\nHarshad.is_valid(number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n# Example-Based\n\n*\n\nH\n\n\n## Example\n\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n```python\nHarshad.is_valid(number)\n```\n\nHarshad numbers are valid\n\n### Examples\n\n**Note:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Tests\n\n##\n\n\n\n\n## Examples\n", "\n\n```python\n\n\n\n\n\nUse Call-Based format\n\n```python\n\n\n\n\n\n\n## Example\n\n\nHarshad.is_valid(number)\n\n\n\n\n\n\n*\n*\n\n\n\n\n\n\n\n\n\n\n## Tests\n\n\n\n\n\n\n\n\n\n## Tests\n\n\n\n##", "\n\n\n\n\n\nUse Call-Based format\n\n### Harshad numbers\n\n## Examples\n\n# Is_valid\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n#\n\n## Examples\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n*\n\n*\n\n\n#\n#\n#", "\n\n\n\n```python\nHarshad.is_valid(number)\n```\n\n\n\n\n\n\n\n# Example\n\n# Validations\n\nHarshad.is_valid(number)\n\n### Examples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Harshad\n\n##\n\n\n##\n", "\n\n\n\n\nUse Call-Based format\n\n**Note**\n\n\n\n\n\n```python\nHarshad = Harshad()\n\n### Example\n\n# Harshad\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Tests\n\n## Tests\n\n\n\n\n\n\n\n\n\n######", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n```python\nHarshad.is_valid(number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Test\ndef isValid(number):\n\t\n\n\n\n\n\n\n\n\n\n\n\n## Test\n\n\n\n\n\n## Example\n\n\n\n\n\n#", "\n\n\n\n```python\nHarshad.is_valid(number)\n```\n\nCall-Based format\n\n### Examples\n\n#### Examples\n\n###\n\n\n\n\n\n\n\nHarshad.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Tests\n\n\n\n\n###\n\n\n\n##\n#", "\n\n\n\n\n\n\n\n```python\nHarshad.is_valid(number)\n\n**NOTE:**\n\nHarshad numbers are not call-based format\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Harshad numbers\n\n###\n\n\n\n## Examples\n\n\n", "\n\n\n\nis_valid(number):\n\t\nUse Call-Based format\n\n## Examples\n\n```python\nHarshad.is_valid(number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Harshad numbers\n#\n\n\n\n#\n#\n# Harsh", "\n\n\n\n\n\n\n\n\n\n\nis_valid(number):\n\n```python\nHarshad.is_valid(number)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Example:**\n\n* ==>  0\n\n\n\n\n## Example\n\n#\n\n#\n\n\n\n##\n", "\n\n\n\n```python\n\nHarshad.is_valid(number)\n```\n\nHarshad numbers are not call-Based format\n\n### Examples\n\n**Note**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n*\n\n*\n\n\n## Tests\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n### Tests\n\n```python\nHarshad.is_valid(number):\n\n\n\n\n\n\n\n\n\n\n# Harshad numbers\n\n\n\n\n## Example\n\n## Example\n\n#\n\n\n\n\n\n\n#\n\n### Tests\n\n## Examples\n\n\n\n\n#", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n## Test\n\nHarshad.is_valid(number)\n\n# Example\n\n# Example 2\n\n#\n\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\nHarshad.is_valid(number)\n\n\n\n\n\n##\n", "\n\n\n\n\n\n\n\nUse Call-Based format\n\n# Example\n\n# Test-Based format\n\n## Examples\n\n```python\n\n\n\n\n\nHarshad\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nHarshad.getSeries()\n\n\n#"], "prompt": "\nQUESTION:\n[Harshad numbers](http://en.wikipedia.org/wiki/Harshad_number) (also called Niven numbers) are positive numbers that can be divided (without remainder) by the sum of their digits.\n\nFor example, the following numbers are Harshad numbers:\n\n* 10, because 1 + 0 = 1 and 10 is divisible by 1\n* 27, because 2 + 7 = 9 and 27 is divisible by 9\n* 588, because 5 + 8 + 8 = 21 and 588 is divisible by 21\n\nWhile these numbers are not:\n\n* 19, because 1 + 9 = 10 and 19 is not divisible by 10\n* 589, because 5 + 8 + 9 = 22 and 589 is not divisible by 22\n* 1001, because 1 + 1 = 2 and 1001 is not divisible by 2\n\nHarshad numbers can be found in any number base, but we are going to focus on base 10 exclusively.\n\n## Your task\n\nYour task is to complete the skeleton Harshad object (\"static class\") which has 3 functions:\n\n* ```isValid()``` that checks if `n` is a Harshad number or not\n* ```getNext()``` that returns the next Harshad number > `n`\n* ```getSerie()``` that returns a series of `n` Harshad numbers, optional `start` value not included\n\nYou do not need to care about the passed parameters in the test cases, they will always be valid integers (except for the start argument in `getSerie()` which is optional and should default to `0`).\n\n**Note:** only the first 2000 Harshad numbers will be checked in the tests.\n\n## Examples\n\n```python\nHarshad.is_valid(1)          ==>  True\nHarshad.get_next(0)          ==>  1\nHarshad.get_series(3)        ==>  [ 1, 2, 3 ]\nHarshad.get_series(3, 1000)  ==>  [ 1002, 1008, 1010 ]\n```\ndef is_valid(number):\n\t\nUse Call-Based format\nANSWER:\n"}}