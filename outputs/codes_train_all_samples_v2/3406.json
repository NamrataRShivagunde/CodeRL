{"3406": {"code": ["\nUse Call-Based format\n~~\n\nUse Call-Based format\n\n\n:\n\nUse Call-Based format\n~~endif\n\nUse Call-Based format\n\n~~~endif:php,csharp\n\n\n:\n~\n\n\n:\n\n\n:\n~\n\n\n\n\n~~~else:\n\n\n\n\n\t\n\n``", "\nUse Call-Based format\n~~\n\nUse Call-Based format\n:\n\nUse Call-Based format\n~~~\n~\n\n\n:\n\n~\n\n\n\t\n\n\n\n\n:\n\n\n~~~endif\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n```\nF(n) = n - F(n", "\n:\nUse Call-Based format\n\n\n:\n~~\n~\n~\n\n:\n\nmutual recursion allows us to apply the mutual recursion to the function f(n)\n\n\t\n:\n\n\n\n\t\n:\n\n\n~~~endif\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\nF(0) =", "\nUse Call-Based format\n~~\n\nUse Call-Based format\n:\nUse Call-Based format\n~~~else\n\nCalling-Based format\n\n~~~if:csharp\n\nUse Call-Based format\n\n\n\n\n:\n~\n\n\t\n:\n\n\n:\n~\n\n\n\n\n\n\n\tF(n) = 1\n\n", "\nUse Call-Based format\n~~\n\nUse Call-Based format\n\n\n:\n~~\n\nMutual Recursion\n~~~else\n\nUse Call-Based format\n~~\n\n\n\n\n:\n~\n\n~\n:\n\n\n\n:\n\n\n~~~endif\n\n\n\n\n\n\n\n\t\n\n\nF(0) =", "\nUse Call-Based format\n~\n\n\n:\nUse Call-Based format\n\n~~~else:\nPHP,csharp\nUse Call-Based format\n\n~~~endif\n\n\nFemale:\n\n\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n~~~endif\n\n\n\n\n```\nF", "\n:\nUse Call-Based format\n~~\n:\n\nUse Call-Based format\n~~else\n\nFemale, Male, Memale\n\n~~~endif\n\n\n:\n\n~\n\n:\n\n:\n\n\n\t\n\n:\n~\n~~~endif\n\n\n\n\n\n\n\n\n\n\tF(1) =", "\nUse Call-Based format\n~~\n\n:\nUse Call-Based format\n~endif\n\nuse Call-Based format\n\nCsharp:\nUse Call-Based format\n\nf(n)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n:\n\n~~~endif\n\n\n\n\n\n\t\nF(n)", "\nUse Call-Based format\n~~\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n~~~\n\n\n\n\n:\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n~~~endif\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n~~~if:php,c", "\n\nUse Call-Based format\n~~\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n~~endif\n\nF(n):\n\t\nUse Call-Based format\n\n\n:\n~\n\n\n:\n\n\n:\n~\n\n\n\n\n\n~~~endif\n\n\n\t\n\n\n", "\n\nUse Call-Based format\n~~\n\nUse Call-Based format\n:\n\nUse Call-Based format\n~endif\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\n\n\t\n\n:\n\nUse Call-Based format\n~~endif\n\n~~endif\n\n\n\n\n\n\n\nF(0) =", "\n\nUse Call-Based format\n~~\n\n\nUse Call-Based format\n:\n~~\n~~endif\n\n\nn = f(1)\n\nUse Call-Based format\n~~\n:\n~\n\n\n\n\n\n\t\n:\n\n\n~~~endif\n\n\n\n\n\n\n\n```\nF(0) = 2\n", "\nUse Call-Based format\n~\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n~else\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nUse Call-Based format\n\n\t\n:\n\nUse Call-Based format\n~~~endif\n\n\n\n\n\n\n\n\n\t\n\n\n```", "\nUse Call-Based format\n~~\n\n\nUse Call-Based format\n\nUse Call-Based format\n~~\n~\n\n\n\n\n\n\n\n\t\n\n\n\n\nMutual Recursion allows us to use a call-based format\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```\nF(", "\nUse Call-Based format\n~~\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n~~endif\n\n\n:\n~\n\n\t\n:\n\n\n\n\n:\n~~else\n\n~~~endif\n\n~~endif\n\n\n\n\n\n\n\n\n\n\n```\nF", "\n\nUse Call-Based format\n~\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n~\n~\n\n\n\n\n\n\n\n\treturn f(n)\n\t\n\n\n\n\n\n\n\t\n\nUse Call-Based format\n:\n\n\n~~~endif\n\n\n\n\n\n\n\nF(0) = 0\nF", "\nUse Call-Based format\n~~else:php,csharp\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n~~endif\n:\n\n\n:\n~\n\n:\n:\n\n\n\n:\n~~else:php\n\n~~endif\n\n\n\n\n\n\n\n\n\n``", "\n:\n\n\n\n:\nUse Call-Based format\n~~~else:\nphp,csharp\n\nuse Call-Based format\nF(n)\n\t\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n:\n\n\n\t\n:\n~~endif\n\n\n\n\n\n\n\n\n\n\n\nF(n) = n", "\nUse Call-Based format\n~~\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n~~endif\n\n\n\n:\n~\n\n:\n:\n\n\n\n\n:\n~\n~~~endif\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n```\nF(0", "\n:\n\n\nUse Call-Based format\n\n:\nUse Call-Based format\n~~~\n\n\n\n:\n\n\n\t\n\t\n\n\n\n\nn = 1\n\nL:\n\t\n\n\n\n\n~endif\n\n~~endif\n\n\n\n\n\n\n\n\n\t\n\n```\nF(0) = F(1)"], "prompt": "\nQUESTION:\nMutual Recursion allows us to take the fun of regular recursion (where a function calls itself until a terminating condition) and apply it to multiple functions calling each other! \n\nLet's use the Hofstadter Female and Male sequences to demonstrate this technique. You'll want to create two functions `F` and `M` such that the following equations are true: \n\n```\nF(0) = 1\nM(0) = 0\nF(n) = n - M(F(n - 1))\nM(n) = n - F(M(n - 1))\n```\n\nDon't worry about negative numbers, `n` will always be greater than or equal to zero.\n\n~~~if:php,csharp\nYou *do* have to worry about performance though, mutual recursion uses up a lot of stack space (and is highly inefficient) so you may have to find a way to make your solution consume less stack space (and time).  Good luck :)\n~~~\n\nHofstadter Wikipedia Reference http://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Female_and_Male_sequences\ndef f(n):\n\t\nUse Call-Based format\nANSWER:\n"}}