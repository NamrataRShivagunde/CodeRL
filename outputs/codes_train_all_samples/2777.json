{"2777": {"code": ["\nUse Call-Based format\n\n\n\n:a3e3a5ee9f3f9e4f2\n\n\n\n\n\n:\n\n\n st2 = st\ndef solve(st3)\ndef solve(st4)\n\n::\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n```Haskell\nConsider", "\nUse Call-Based format\n\n\n\n:\nc2\n\ndef solve(st):\n\ndef solve(st):\n\ndef solve(st):\n\t\n:\n\n\ndef solve(st):\n\tdef\n:\n:\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\ndef solve(st):\n\n\n\n*  This is a", "\nUse Call-Based format\n\n\n\n:\nUse Call-Based format97b1f\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n:\n(st):\n\t\n\t\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n```\nHaskell\nCons", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\n\n\n\n\n\t\n\n:\n\n\n\n:\nUse Call-Based format\n\n\n\n\nHaskell\n\n\n\n\n\nIf you can't find any expansion, try", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\ndef f(st):\n\t\n\n:\n\nHaskell \n\n(st)\n\ndef f(st):\n\t\ndef solve(st):\n\t\ndef\n::\n\n\n:\n\n\n\n\n\ndef solve(st):\n\n\n\n```Java expansion", "\nUse Call-Based format\n\n\n\n:\na1\n\n\n\n\n\n\ndef solve(st):\n\t\nUse Call-Based format\n(st)\n\n\n\t\n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n```\nConsider the following", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\ndef\ndef solve(st):\n\t\n\n:\n\n\ndef solve(st):\n\t\ndef solve(st):\n\t\ndef\n\t\n::\n\n\n:\n\n\n\n\nHaskell\n\n\n\n\n\ndef\n\n\n\n```Haskell\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nabbbbbbb\n\n\n\t\nUse Call-Based format\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st):\n\n:\n\n\n\n::\n\n\n:\n\n```\n\n\n\n\n\n\n\n\n```Haskell\nCons", "\nUse Call-Based format\n\n\n\n:\n\nUse Call-Based formatbbbbbbbb\n\n\n\t\nUse Call-Based format\ndef solve(st):\n\t\n\t\n:\n\n(st)\ndef st(st):\n\t\n\t:\n:\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n```\nHaskell\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n:\n\ndef st(st):\n\ndef solve(st):\n\t\t\n\n:\n\nHaskell\n \n\t\n\t\n:\n\n\n:\n\n\n```\n\n\n\n\nHaskell\n\nConsider the following expansion:\n\n\n\n\n\n\n```H", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\ne\ndef solve(st):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\t\n\n:\n\n\n\n\nUse Call-Based format:\n\n\n\n\n\nHaskell\nHaskell\n\n\n\n\n\n\\`Haskell\nConsider the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nf2e9b\n\n\n\n\n:\n\n\n st2 = st\n\ndef solve(st3)\ndef solve(st4):\ndef solve(st4)\n\n::\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nHask", "\n:\nUse Call-Based format\ndef solve(st):\n\t\n\nUse Call-Based format\n:\n\ndef\n\n\nUse Call-Based expansion:\nHaskell\n\n\n\t\n\n:\n\n\n\nUse Call-Based format:\n\n\n```\n\n\n\n\nHaskell\n\nHaskell\n\n\n\n\n\tNopefully", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\ndef\n\ndef solve(st):\n\t\nUse Call-Based format\ndef solve(st)\ndef solve(st):\n\t\n\n\n \n\t\n\n:\n\n\n\n:\n\n\n```\n\n\n\n\n\n\n\t\n\n\n\n* Example:*\n*", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n:\n\n\ndef solve(st):\n\t\nUse Call-Based format\n\n:\n\nHaskell\n(st)\n\ndef\n\n:\n\n\n:\n\n\n```\n\n\n\n\n\n\n\n\n\n\n```\n\nHaskell\nConsider the following expansion", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\na3\ndef solve(st):\n\t\n\n:\n\nHaskell\n\ndef solve(st):\n\t\tst = st.replace(\"\\\\\", \"\")\n\t\ndef\n::\n\n\n:\n\n\n\n\n\n\n\n\n\n\n    \\b\n# Solve", "\n:\n\n\n\nUse Call-Based format\n:9e0d0d0d0d1d2\n\nUse Call-Based format\n\n\n\n:\n\n st2 = st\ndef st3 = st\ndef st3 =\n:\n:\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n```Haskell\nConsider", "\nUse Call-Based format\nUse Call-Based format\n\n\n:\nUse Call-Based format0000f2\n\n\n\n\t\n:\n\n st = st\n\t\n\n\t\n:\n\nUse Call-Based format\n\n\n:\n\n\n```\n\n\n\n\n\n\n\n\nfunction solve(st)\n\n\n\n\n```\nHaskell", "\n:\n\ndef solve(st):\n\t\n\n:\nUse Call-Based format97\ndef\ndef solve(st):\n\t\n:\n\nHaskell \n\n\n\t\n:\n:\n\n\n:\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based expansion\n\nHaskell\n\n\n\n\n\n\n``", "\n:\n\ndef solve(st):\n\t\n\n:\na1b2e9fe1e9e9b9c9e6\ndef solve(st):\n\t\nUse Call-Based format\n\n\n\n:\n\n\n\n::\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n\nThe following expansion:\n```H"], "prompt": "\nQUESTION:\nConsider the following expansion:\n```Haskell\nsolve(\"3(ab)\") = \"ababab\" -- \"ab\" repeats 3 times\nsolve(\"2(a3(b))\" = \"abbbabbb\" -- \"a3(b)\" == \"abbb\" repeats twice.\n```\n\nGiven a string, return the expansion of that string. \n\nInput will consist of only lowercase letters and numbers (1 to 9) in valid parenthesis. There will be no letters or numbers after the last closing parenthesis.\n\nMore examples in test cases. \n\nGood luck!\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\ndef solve(st):\n\t\nUse Call-Based format\nANSWER:\n"}}