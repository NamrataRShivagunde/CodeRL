{"1820": {"code": ["\nUse Call-Based format\n \n   \n\n\n\n\n   \n   \n\n\n\n \n       \n\nUse Call-Based format\n\n\nUse Call-Based format     / \\   \\\n     / \\   \\\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nYou need to find the largest value in each row of a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n 2 3 3 3 3 \n \n\nUse Call-Based format\n    value = 0\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\nYou need to find the largest value", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n 1   3   9\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n    return root.val\n\n# Definition for a binary tree node.\n\n\n\n\n\n\n\n\n\nyou need to find the largest value", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n      2      3   2\n\n\n    def __init__(self, root: TreeNode):\n        pass\n\n\n\n# Definition for the binary tree node.\n\n\n\n\n\n\n\n\n    You need to find", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n \n\n\nUse Call-Based format\n\n      2   3   9\n\n       1   3   9\n    def __init__(self):\n        pass\n\n\n\n\n   \n\n\n\n\n\n\n\n\nWe need to find the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n   2   3   9\n\n\n    pass\n    \nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nYou need to find the largest value in", "\nUse Call-Based format\n \n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n \n\n\n\n 1   2   3   9 \n\n       / \\   \\  \n       / \\   \\\n\n    def largestValues(self, root: TreeNode) -> List[int]:\n\n\n   \n\n\n\n#\n\n\n    You", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n   3   9\n\n\n       \nUse Call-Based format\n\n\n# Definition for a binary tree node.\n\nUse Call-Based format\n\n\n\n\n\n\n\nYou need to find the largest value", "\nUse Call-Based format\n \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n \n\n\n\n   2\n\n\nUse Call-Based format\n       \nUse Call-Based format\n\n\n        1   2   3   9\n        5   3   9\n\n\n   \n\n\n\n\n        1   2   3\n       \n\n\n    You", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n 1   2   3   9 \n\n\n    __init__(self)\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n\n\n\n\nPlease need to find the largest value in each", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n \n        2   3   2\n\n\n\n 2 3 2\n\n\n\n\n\n\nUse Call-Based format\n\n\nYou need to find the largest value in each row of a binary tree.\n\n\n\n\n\nYou need", "\nUse Call-Based format\n \n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n 2   4\n\n       4   2   2\n       5   3   9\n __init__(self)\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nYou need to find", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n 1   3   9\n\n        \nUse Call-Based format\n    def largestValues(self, root: TreeNode):\n        pass\n\n\n\n   \n\n\n\n\n\nYou need find the largest value", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\nInput: 1\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nYou need to find the largest value", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nExample:\n\nInput: \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n \n\n\n    def value(self) -> int:\n        return self.val\n\n\n\n   \n\n\n\n\n\n\nYou need find the largest", "\nUse Call-Based format\n \n     \n\nUse Call-Based format\n\n\n\n   \n   \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n     5   3   9  \n   \n\n    def __init__(self, val=0):\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nYou need", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample:\n\n\n\n\n\n    use largestValues(self, root):\n\n\n\n\n\n\n\n\n# Definition for the binary tree node.\nUse Call-Based format\n\n\n\n\n\n\n    You need to", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n 2   3   9\n\n\n   ...\n   ...\n\n\n\n# Definition for the binary tree node.\n\n\n\n\n\n\nYou need to find the largest value in each", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\n    1   3   9\n\n\n\n\n\n \n\n\n\n\n  2   3   9  \n\n\n    def __init__(self):\n        pass\n\n\n\n   \n\n\n\n\n       \n\n\nYou need to find the largest value in", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample:\n\n\n\n\n\n\n\n    pass\n\n\n\n 2   3   9\n\n   \n    pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nYou need find the largest value in each row"], "prompt": "\nQUESTION:\nYou need to find the largest value in each row of a binary tree.\n\nExample:\n\nInput: \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\nOutput: [1, 3, 9]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def largestValues(self, root: TreeNode) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}