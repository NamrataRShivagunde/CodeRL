{"183": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def minDotProduct(self, nums1: List[int], nums2: List[int]):\n        return 0\n\nUse Call-Based format\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\nGiven two arrays nums1 and", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nReturn the maximum dot product of two arrays.\n\n\n\n   \n    pass\n\nGiven two arrays nums1 and nums2.\n\n\n   :\n        \n\n\n\n\n1\n\u00a0\n\n\u00a0\n\n\n\n1\n\u00a0\n\nGiven two arrays nums1", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    return maxDotProduct(nums1, nums2)\n\n\nGiven two arrays nums1 and nums2.\n\n   :\n        \n\n\n\n2\n\n\n\n\n\n\n\nGiven two arrays nums1 and nums2.\n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n        return maxDotProduct(self, nums1, nums2)\n\nUse Call-Based format\n\n\n\n\n\n   :\n\n        \n\n\n\n1\n\u00a0\n\n\n\n\n1\n\u00a0\n\nGiven two arrays nums", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    maxDotProduct(self, nums1, nums2)\n\nUse Call-Based format\n\n\n   \n    maxDotProduct(self, nums1, nums2)\n\n\n\n\n\n\n\n\n\n\n\nGiven two arrays nums1 and nums2.\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    return maxDotProduct(self, nums1, nums2)\n\n\n\n   :\n   ...\n\n\n\n\n\n\n2\n\n\n\n\nGiven two arrays nums1 and nums2.\n\n\n\nGiven two arrays nums", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n    maxDotProduct(self, nums1, nums2)\n\nUse Call-Based format\n\n   \n       ...\n\n\n\n   :\n        \n\n\n\n\n1\n\u00a0\n\n\n\ngiven two arrays nums1 and nums2.\n\n\n\nGiven two arrays nums", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n    return 1\n\nUse Call-Based format\n\n\n\n   \n        pass\n\nUse Call-Based format\n\n\n\n\n2\n\n\n\n\n\nGiven two arrays nums1 and nums2.\n\n\nGiven", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    return maxDotProduct(nums1, nums2)\n\nGiven two arrays nums1 and nums2.\n\n   :\n\n\n\n\n\n\n2\n\n\n\n\nGiven two arrays nums1 and nums2.\n\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\nGiven two arrays nums1 and nums2.\n\n\n   :\n        pass\n\n\n\n\n1\n\u00a0\n\n\u00a0\n\n\n\nGiven two arrays nums1 and nums2.\n\n\nGiven", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def dotProduct(self, nums1, nums2):\n        return -1\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two arrays nums1\u00a0and nums", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n    return self.maxDotProduct(nums1, nums2)\n\n\n\n   :\n        pass\n\n\n\n\n\n\n1\n\u00a0\n\n\n\n\n1\n\u00a0\n\n\nGiven two arrays nums1 and", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n1\n\n\nGiven two arrays nums1 and nums2", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    return maxDotProduct(self, nums1, nums2)\n\n\n\n   :\n        return 0\n\n\n\n\n\n1\n\u00a0\n\n\n\n\nGiven two arrays nums1 and nums2.\n\n\nGiven two", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    return 1\n\n\nReturns the maximum dot product between two arrays.\n\n\n   :\n\n\n\n\n\n1\n\n\n\nGiven two arrays nums1 and nums2.\n\n\n\nGiven two arrays", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        return self.maxDotProduct(nums1, nums2)\n        \n\n\n   :\n\n\n\n\n\n\n1\n\u00a0\n\n\n\n\n\n1\n\u00a0\n\n\nGiven two arrays nums1 and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    return maxDotProduct(self, nums1, nums2)\n\n\n\n   \n        pass\n\n\n\n\n\n\n1\n\n\n\nGiven two arrays nums1 and nums2.\n\n\n\n\nGiven two arrays nums", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nReturn the maximum dot product of the two arrays\n\n\n   \n\n\nGiven two arrays nums1 and nums2.\n\n   :\n        pass\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two arrays nums1\u00a0and nums", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n\n\n\n\n\n   :\n       ...\n                \n\n\n\n\n\n\n\n\n\n\n\nGiven two arrays nums1 and nums2.\n", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n   \n        return self.maxDotProduct(nums1, nums2)\n\n\n\n   :\n        pass\n\n\n\n\n\n1\n\u00a0\n\n\n\n\n1\n\u00a0\n\nGiven two arrays nums1\ufffd"], "prompt": "\nQUESTION:\nGiven two arrays nums1\u00a0and nums2.\nReturn the maximum dot product\u00a0between\u00a0non-empty subsequences of nums1 and nums2 with the same length.\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0[2,3,5]\u00a0is a subsequence of\u00a0[1,2,3,4,5]\u00a0while [1,5,3]\u00a0is not).\n\u00a0\nExample 1:\nInput: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\nOutput: 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.\nExample 2:\nInput: nums1 = [3,-2], nums2 = [2,-6,7]\nOutput: 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.\nExample 3:\nInput: nums1 = [-1,-1], nums2 = [1,1]\nOutput: -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 500\n-1000 <= nums1[i], nums2[i] <= 1000\nclass Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}