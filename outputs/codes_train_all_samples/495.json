{"495": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        return self.lastStoneWeightII()\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n1\n\u00a0\n\n\nWe have a collection of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    def smashStones(self, stones: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n\n\n\nWe have a collection of rocks.\n\n\n\n\nIf you have a", "\nUse Call-Based format\n\n\n    def smashStoneWeight(self, stones: List[int]) -> int:\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\u00a0\n\n    lastStoneWeightII(self, stones)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of rocks,", "\nUse Call-Based format\n\n\n    lastStoneWeightII(self, stones: List[int]) -> int\n\n\n\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= x <= y\n\n\n\nThe last stone", "\nUse Call-Based format\n\n\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n    \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\nNote:\n\n\n\n\n\n\u00a0\n\n\n\nWe have a collection of rocks\n\n\n\nIf you have", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nEXAMPLE:\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\u00a0\n\n        x,y\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\nWe have a collection of stones\n\n\n\nIf we have", "\nUse Call-Based format\n\n\n    1 <= self.lastStoneWeightII(stones) <= 1\n\n\n\n\n\n   \n    x, y = self.lastStoneWeightII()\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\nx = 1\ny", "\nUse Call-Based format\n\nInput: [2,7,4,8,1]\nOutput: 1\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n   \n        weight = 0\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\u00a0\n\n\nIf the stone of weight", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return 1\n\n\n\n\n\n   \n    return 1\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\nIf we have 2", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return stones[0]\n\n\n\n\n\n\n\n\n\n\n\n    lastStoneWeight = 1\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n1 <= x <= y\n\n\n\nx = 2\ny", "\nUse Call-Based format\n\n\n    stones: List[int]\n    weight: int\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n    lastStoneWeightII(self, stones) -> int\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n1 <= x <= y:\n2", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return 1\n\n\n\n\n   \n        return 1\n\n\n\n\n\u00a0\n\n       ...\n\n\n\n\n\n\n\n1 <= x <= y <= 1\n\n\n\n\n\n\n\n\nWe have a collection of rocks with", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return self.lastStoneWeightII(stones)\n\n\n\n\n\n\nUse Call-Based format\n\u00a0\nUse Call-Based format\n\n\u00a0\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nWe have a collection of rocks,", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\nWe have a collection of stones.\n\n\n\n\n\n\n\n\n\nWe have a collection of stones\n\n\n\n\n\nThe last stone weight is", "\nUse Call-Based format\n\n\n    weight = 1\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    weight = 1\n\n\n\n   \n    weight = 1\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n1 = 1\n\nIf we use call", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return 1\n\n\n\n\n\n   \n\n\n\n\n\n   \n        return 2\n\n\nThis function is a call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of rocks, each rock", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        return stones[i]\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n    lastStoneWeight(self, stones)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have a collection of rocks", "\nUse Call-Based format\n\n\n    self.lastStoneWeightII(stones)\n\n\n\nWe have a collection of stones, each rock has a positive integer weight\n\n\u00a0Note:\n\n\n   \n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\nx = 2;y = 1;", "\nUse Call-Based format\n\n\n    def lastStoneWeight(self, stones: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n    lastStoneWeightII(self, stones)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nWe have a collection of rocks", "\nUse Call-Based format\n\n\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n        return 0\n\n\n\n\n\n   \n\n\n\n\n\u00a0\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\nIf x == y, we have 1,"], "prompt": "\nQUESTION:\nWe have a collection of rocks, each rock has a positive integer weight.\nEach turn, we choose any two rocks\u00a0and smash them together.\u00a0 Suppose the stones have weights x and y with x <= y.\u00a0 The result of this smash is:\n\nIf x == y, both stones are totally destroyed;\nIf x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.\n\nAt the end, there is at most 1 stone left.\u00a0 Return the smallest possible weight of this stone (the weight is\u00a00 if there are no stones left.)\n\u00a0\nExample 1:\nInput: [2,7,4,1,8,1]\nOutput: 1\nExplanation: \nWe can combine 2 and 4 to get 2 so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1 so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0 so the array converts to [1] then that's the optimal value.\n\n\u00a0\nNote:\n\n1 <= stones.length <= 30\n1 <= stones[i] <= 100\nclass Solution:\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}