{"2874": {"code": [":\nUse Call-Based format:\n\n\t\nUse Call-Based format\n\n\t\nUse Call-Based format\nANSWER:\nUse Call-Based format:\n:\nUse JavaScript format\n:\n::\n\n\n-\n:\n:\n\n\n-\n\t\n:\n\n\nYour JavaScript\n:\n\n:\nJavaScript provides a built in\n\n:\nJavaScript", ":\nUse Call-Based format:\n\n\n\t\n\t\n:\n:\nUse JavaScript syntax\nQUESTION:\n\n    Use Javascript syntax\n:\n\n\n:\nUse JavaScript syntax:\n\n\n- `parseInt(\"10\"):\n\n:\n:\n\n-\n\t\n\n:\n\n\n-\n\n:\n\n:\n\n\n:\nJavaScript provides a", ":\nUse Call-Based format:\n\ndef my_parse_int(string):\n\t\nUse Call-Based format\n\n:\n:\n\n\n\n:\n:\n\n\n- `parseInt(\"10.9\")` returns `10`\n\n:\n:\n\n-\n\t\n:\n\n-\n:\n\n:\n\n\n:\nJavaScript provides a built", ":\nUse JavaScript format:\n\n\n:\n\nUse Call-Based format\n:\nUse Javascript format\n:\n\nUse Call-Based format\n:\n:\nUse Call-Based format:\nUse Javascript format\n\n\n-\n:\n:\n\n-\n\t\n\n:\n\n\n\n   \n\n:\nUse Javascript format\n:\n\n\n:\nJavaScript provides a", ":\nUse Call-Based format:\nUse Call-Based format\n\n\n:\n\nUse Javascript format\n:\n\n\n\n:\nUse Javascript format\n\nUse Call-Based format:\nUse Call-Based format\n\n\n-\n:\n:\n\n-\n\t\n\n:\n\n\nThe following functions are available:\n\n:\n:\n\n\n:\nJavaScript provides", ":\nUse Call-Based format:\n\n\n:\nUse Call-Based format\n:\nUse Call-Based format\n:\n\nThe following code is used to parse JavaScript\n:\n:\n:\nUse Call-Based format\n\n-\n:\n:\n\n-\n\t\n\n:\n\n\n-\n\n:\n\n:\n\n\n:\nJavaScript provides a built-", ":\nUse Javascript format\n\n- Use Call-Based format\ndef my_parse_int(string):\n\t\nUse Call-Based format\n\n:\n:\n:\n\n\n\n:\n:\n\n\n\n:\n\n:\n\n-\n\t\n\n:\n\n\nThe following code works:\n\n\n:\n\n:\n\n\n:\nJavaScript provides a built", ":\nUse JavaScript format:\n\n\n\t\t\n:\n\nUse Call-Based format\n:\nUse JavaScript format\n:\n\n\n\n\n:\nUse JavaScript format:\nUse Javascript format\n\n\n- `parseInt(\"10\")` returns `10`\n\n:\n:\n\n-\n\t\n:\n\n\n:\n\n:\n\n\n:\nJavaScript provides a", ":\nUse Call-Based format:\n\n\ndef myParseInt(string):\n\t\nUse Call-Based format\n\n:\n:\nUse JavaScript format\n:\n\n\n\n:\n:\n\n\n- `parseInt(\"10.\")`\n\n:\n:\n\n-\n\t\n:\n\n\n\n\n:\n\n:\n\n\n:\nJavaScript provides a built", ":\nUse Call-Based format:\n\nUse Call-Based format\n\n\n:\nJavaScript provides a built-in parseInt method.\n:\n:\n\n\n\n:\n:\nUse JavaScript format\n\n-\n:\n:\n\n\n\t\n\n:\n\n\n\n- It should return a number\n\n-\n:\n\n:\n\n\n:\n\nJavaScript provides a", ":\nUse JavaScript format:\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n:\n:\nUse Call-Based format\n\nNOTE:\n\n\n\n\n:\nUse JavaScript format\n\n\n- `parseInt(\"1\")` returns `1`\n\n:\n:\n\n-\n\t\n:\n\n\n:\n:\n\n:\n:\n", ":\nUse Call-Based format:\n\ndef myParseInt(string):\n\t\nUse Call-Based format\n\n:\n:\nUse JavaScript format\n:\n\n:\nUse Call-Based format:\nUse JavaScript format\n\n\n\n:\n:\n\n-\n\t\n\n:\n\n\nFROM:\n\n\n:\n\n:\n\n\n:\nJavaScript provides a", ":\nUse Call-Based format:\n\n\n:\nJavaScript provides a built-in parseInt method.\n\nUse Call-Based format\n:\nUse Javascript format\nQUESTION:\n\n:\n\n:\n:\n\n\n\n:\n:\n\n-\n\t\n\n:\n\n\n-\n:\n\n\n:\nJavaScript provides a built-in parseInt method.\n\n:", ":\nUse Call-Based format:\n\n\nUse Call-Based format\nANSWER:\nUse Call-Based format:\n:\nUse JavaScript format\n:\n\n\n:\n\nUse Call-Based format:\n\n\n- `parseInt(\"1\")` returns `1`\n\n:\n:\n\n\n\n:\n\n\n:\n:\n\n\n:\nJavaScript provides", ":\nUse Call-Based format:\n\nUse Call-Based format\n\n\n:\n\n:\nUse JavaScript format\n:\n\n\n\n:\nUse Call-Based format:\nUse JavaScript\n\n\n- `parseInt(\"10\")` returns `10`\n\n:\n:\n\n-\n\t\n:\n\n\n:\n\n:\n\n\n:\nJavaScript provides a", ":\nUse Call-Based format:\n\n\nmyParse_int(string)\n\nUse Call-Based format\nANSWER:\n\nUse Call-Based format\n\n:\n:\n\n:\n\n:\n:\n\n\n-\n:\n:\n\n\n-\n\n\n:\n\n\n-\n\n:\n\n\n:\n\n\n:\nJavaScript provides a built", ":\nUse Call-Based format:\n\n\n\n:\nJavaScript provides a built-in parseInt method.\n\nUse Call-Based format\n:\nUse Call-Based format:\n\n\n:\nUse Javascript format:\n\n\n-\n:\n:\n\n-\n\t\n:\n\n\nfunction:\n\n:\n\n:\n\n:\nJavaScript provides a built-in parseInt", ":\nUse Call-Based format:\n\n\nmy_parse_int(string)\n\nUse Call-Based format\nANSWER:\n\n:\n:\n\n\n:\n\n:\n:\n\n\n\n\n:\n:\n\n-\n\t\n\n:\n\n\n-\n\t:\n\n\n\n:\n\n\n:\nJavaScript provides a built-in parseInt method", ":\nUse JavaScript format:\n\n\n# Use Call-Based format\n\n:\n\nUse Call-Based format\n:\nUse Call-Based format\n:\n\n:\nUse JavaScript format:\n\n\n-\n\n:\n:\n\n\n\t\n\n:\n\n\n\t\nExample:\n\n\t\n\n:\n\n\n:\n\n\n:\nJavaScript provides a built", ":\nUse Call-Based format:\nUse Call-Based format\n\n\t\n:\nJavaScript provides a built-in parseInt method.\n\nUse Call-Based format:\n:\n\n\n:\n:\n\n\n- `parseInt(\"10\")` returns `10`\n\n:\n:\n\n\n\n:\n\n\n:\n\n:\n\n:\nJavaScript provides a built"], "prompt": "\nQUESTION:\nJavaScript provides a built-in parseInt method.\n\nIt can be used like this:\n\n- `parseInt(\"10\")` returns `10`\n- `parseInt(\"10 apples\")` also returns `10`\n\nWe would like it to return `\"NaN\"` (as a string) for the second case because the input string is not a valid number.\n\nYou are asked to write a `myParseInt` method with the following rules:\n\n- It should make the conversion if the given string only contains a single integer value (and possibly spaces - including tabs, line feeds... - at both ends)\n- For all other strings (including the ones representing float values), it should return NaN\n- It should assume that all numbers are not signed and written in base 10\ndef my_parse_int(string):\n\t\nUse Call-Based format\nANSWER:\n"}}