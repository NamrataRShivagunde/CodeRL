{"3050": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n Return a string.\n\n### Notes\n* Both arguments will be strings.\n\n\n\treturn x + y\n\n### Function\n\n\n\n\n\t\n\n\t\n\n\n\n\n\nWrite a function called `LCS`\n\n\n\n\n\t\n### References\n\n### *Three*", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nLCS:\n\n\n\n\n\n\n\n\n\n\n### Tests\n\n\n\n\n\n\n\t\n\n\n\t\n\n\tx\n\ty\n\n\n\n\n\n### Example\n\n\n\n\n\n\n\n### Example\n\n\tx = 1\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nReturn a string or a function\n\n### Example:\n\n### A subsequence\nA subsequence is different from a substring\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\t\n\t\tLCS\n\n\n\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n# LCS\n\n\n\n\n### Tests\n\n\n\n\n returns \"abc\"\n\n### Call-Based\n\n\n#\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n### Tips\n\n\n\n## Example:\n\n### Example sub", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function called `lcs` to return the longest common subsequence.\n\n\n\t\n\t\treturn x + y\n\n\n\n\t\n\n\n\n\n\n### Example:\n\n### Example subsequences\n\n\n\n\n\n\n### Example:\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nWrite a function called `LCS`\n\n### Note\n* Both arguments will be strings\n\n\n\n\t\n\n\n\n\t\n\n\n\n\n\nLCS( x, y )\n\n\n\n\n\n- If you need to test both strings and lists, please", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWrite a function called `LCS`\n\n returns \"123456\"\n```python\nlcs( \"abcdef\", \"abc\" )\n```\n\n### Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Subsequence\n\nA subsequence can be", "\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n- Call-Based\n\nUse Call-Based syntax\n\n\n\n### Example\n\n\n\n\n\n\n\treturn x\n\t\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n### Example:\n\n### Tests\n\n\n\n\n### Tips\n\n```python", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n-\n\n\n\n\n### Example calls\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\t\n\n### Tips\n\n\n### Recall-Based format\n\n-\n\n\n\n### Tips\n\n\t\n##", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n Return a value must be a string.\n\nreturn lcs( x, y )\n\n### Example:\n\nlcs( x, y )\n\n\n\n\n\n\n\n\n\n\n\n\n### Tips\n\n\n\n\n\n### Tips\n\n\n### Returns\n\n`lcs(", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n### Example\n\nUse Call-Based\n\n\n\n\n\t\n\n\n\n\tx + y\n\t\n\t\n\n\n\n\n\n\n\n\nWrite a function called `LCS` to find the longest common subsequence of the passed in sequences\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function called `LCS`\n\n returns \"abc\"\n\n\t\n\n\n\n\n\t\n\t\n\n\n\n\t\n\n\n\t\n\n### Tips\n\n\n### Tests\n\n\t\n\n\n\n\n\n\n\n\t\n```python", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n# Example\n\nlcs( x, y )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n### Example\n\n\n\n\n\n### Examples\n\n\n\tx = 1\ny", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n return \"abc\"\n\n### Example\n\nUse Call-Based format\n\nlcs( \"abc\", \"abc\" )\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Tests\n\n\n### Call-Based\n\nx = 1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n## Notes\n* Both arguments must be strings\n\n\n\n\n\treturn y\n\t\n### Example\n\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\n\n\n\n\n### Example:\n\n\n\n\t\n\n\n\n### Tips\n\n### T", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function called `LCS`\n\n\nReturns the longest common subsequence of the two passed in sequences.\n\n\n\n\n\n\n\n\n\n\n\n### Example\n\n\n\n\n\n\n\n# #!/usr/bin/env python", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nReturn a string containing the longest common subsequence.\n\n\n\n\n\n\n\treturn lcs( x, y )\n\n### Tests\n\n\n\n\n\n\n\n\n\n\n\n\t\n### Tips\n\n\n\n## Subsequences\nA sub", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based test\n\n\n\n\n\n\n\n### Tips\n\n\n\n\n\nreturns \"abc\"\n\n### Example\n\n\n\n\n\n\n\t\n\t\treturn lcs(x, y)\n\n\n\n\n\n\n\n\n\n\n\t\tThis function returns the longest common sub", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n### Function calls\n\nWrite a function called `lcs`\n\n\nReturn the longest common subsequence of x and y.\n\n### Example calls\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Tips\n\n\n```python\nprint(lcs", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based sequence\nUse Call-Based format\n\n\n\n\n\n\n\n\nreturns \"12356\"\n\n### Example\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n### Tips\n\n\n\t\n### Notes\n* Both"], "prompt": "\nQUESTION:\nWrite a function called `LCS` that accepts two sequences and returns the longest subsequence common to the passed in sequences.\n\n### Subsequence\nA subsequence is different from a substring. The terms of a subsequence need not be consecutive terms of the original sequence.\n\n### Example subsequence\nSubsequences of `\"abc\"` = `\"a\"`, `\"b\"`, `\"c\"`, `\"ab\"`, `\"ac\"`, `\"bc\"` and `\"abc\"`.\n\n### LCS examples\n```python\nlcs( \"abcdef\" , \"abc\" ) => returns \"abc\"\nlcs( \"abcdef\" , \"acf\" ) => returns \"acf\"\nlcs( \"132535365\" , \"123456789\" ) => returns \"12356\"\n```\n\n### Notes\n* Both arguments will be strings\n* Return value must be a string\n* Return an empty string if there exists no common subsequence\n* Both arguments will have one or more characters (in JavaScript)\n* All tests will only have a single longest common subsequence. Don't worry about cases such as `LCS( \"1234\", \"3412\" )`, which would have two possible longest common subsequences: `\"12\"` and `\"34\"`.\n\nNote that the Haskell variant will use randomized testing, but any longest common subsequence will be valid.\n\nNote that the OCaml variant is using generic lists instead of strings, and will also have randomized tests (any longest common subsequence will be valid).\n\n### Tips\n\nWikipedia has an explanation of the two properties that can be used to solve the problem:\n\n- [First property](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem#First_property)\n- [Second property](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem#Second_property)\ndef lcs(x, y):\n\t\nUse Call-Based format\nANSWER:\n"}}