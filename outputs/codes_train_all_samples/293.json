{"293": {"code": ["\nUse Call-Based format\n\n\nUsage Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n -> B -> idle\n\nExample 2:\n\nExample 3:\n\nUse Call-Based format\n\nExample 2:\n\n\n\n\n   \n       \n\nGiven\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a char array representing tasks", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n B -> B -> idle\n\nExample 2:\n\n\nExample 3:\n\n\nExample 4:\n\n\n\n\n\n   \n\n\nGiven\n\n\n\n\n\n\n\n\n\n\n B -> B -> idle\n\nExample 2:\nGiven", "\nUse Call-Based format\n\nExplanation: A -> B -> idle\n\nExample 2:\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n       ...\n\n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a char array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n -> B -> idle -> A -> B -> idle\n\nExample 2:\n\n\n\n\n\n   \n       \nGiven a char array representing tasks CPU need to do\n\nGiven a task list\n\n\n\n\n\n\n\n\n\n\n B -> B\n\n\n\nGiven a char", "\nUse Call-Based format\n B -> B -> idle -> A -> B -> idle -> A -> B -> idle\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n       \n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\nGiven a char array representing tasks CPU need to do\n\n\n\nGiven", "\nUse Call-Based format\n B -> idle\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nExample 2:\n\n   \n\n\n\n\nExample 2:\n   \n       \n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\n\nGiven a char array representing tasks\n\n\nGiven a", "\nUse Call-Based format\n B -> idle\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nExample 2:\n\nOutput: 8\nExplanation: 9\n\n\nExample 3:\n\n\n\n\n\n   \n\n\nGiven\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\nGiven a", "\nUse Call-Based format\n B -> B -> idle\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nExample 2:\n\nUse Call-Based format\nExample 3:\n\n   \n\n\n\n   \n        pass\n\n\nGiven a\n\n\n\n -> B -> idle -> A -> B\n\n\n\n\n\n\n\nGiven a char array", "\nUse Call-Based format\n\nExplanation: A -> B -> idle -> A -> B -> idle -> A -> B.\n\nUse Call-Based format\n\n\n\n\nExample 2:\n\n\nExample 3:\n\n   \n\n\n\n   \n\n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a", "\n\nUse Call-Based format\n\n\nExample 2:\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nExample 2:\n\n\nExample 3:\n\n\n\n\n\n   \n       \n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nExample 2:\n\nGiven a", "\nUse Call-Based format\n B -> B -> idle\n\n\n\n\n -> B -> B -> idle\n\n\nExample 2:\n\nUse Call-Based format\nNote:\n\nUse Call-Based format\n\n\n\n\n   \n       \n\nGiven a task list representing tasks CPU need to do\n\n\n\n\n\n\n\n\n\n\nExample 2:\n   \nGiven a", "\n\nUse Call-Based format\nExplanation: A -> B -> idle -> A -> B -> idle -> A -> B.\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n        \n\n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nExample 2:\n\nGiven a", "\n\nUse Call-Based format\n B -> idle -> B -> idle -> A -> B -> idle -> A -> B.\n\nUse Call-Based format\n\n\n\n\n\nExample 2:\n\n\n\n\n\n   \n       \n\nGiven a char array representing tasks CPU need to do.\n\n\n\n\n\n\n\n\nGiven a char array representing tasks\n\n\n\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n B -> B -> idle -> B -> B -> idle\n\n\n\n\n\n\n\n    __call__(self):\n\n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\nGiven a char array representing tasks CPU need to do\n\n\n\nGiven a", "\nUse Call-Based format\n B -> B -> idle\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n\n   \n       \n\nGiven a char array representing tasks CPU need to do.\n\n\n\nUse Call-Based format\n\n\n\n\nUsage:\n\n\n\n\n\n\nGiven a char array representing", "\nUse Call-Based format\n B -> B -> idle -> A -> B -> idle -> B -> B -> idle -> B -> B\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\nThe number of tasks can be negative\n\n\n\n\nGiven a char array representing tasks \n\n\n\n\nGiven a char", "\n\nUse Call-Based format\n A -> B -> idle\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nExample 2:\n\nExample 2:\n\nOutput: 4\nExplanation: 4\n\n\nExample 3:\n\n\n\n\n\n   \n       \n\nGiven\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a char array", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n B -> B -> idle\n\n\n   \n\nGiven a char array representing tasks CPU need to do\n\n\n\nExample 2:\n\n   \n       \n\nGiven a char array representing tasks CPU need to do\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\nGiven", "\nUse Call-Based format\n B -> idle\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nExample 2:\n\nclass Solution:\n    class leastInterval(self):\n       \n\n\n\n   \n       \n\nGiven a\n\n\n\n\n\n\n\n\n\n\n B -> idle\n\nExample 2:\n\nGiven", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n -> B\n\n\nExample 2:\n\nInput: tasks\n\n\n\n\n   \n       \nGiven a char array representing tasks CPU need to do\n\nGiven a tasks CPU need to do\n\n\n\n\n\n\n\n\nGiven a char array representing tasks\nExample 2\nGiven"], "prompt": "\nQUESTION:\nGiven a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.\n\nHowever, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle. \n\nYou need to return the least number of intervals the CPU will take to finish all the given tasks.\n\nExample 1:\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation: A -> B -> idle -> A -> B -> idle -> A -> B.\n\n\n\nNote:\n\nThe number of tasks is in the range [1, 10000].\nThe integer n is in the range [0, 100].\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}