{"3346": {"code": ["\n\n\n\n\ng(m,n) --> [m,n]\n\n\n\n\n\n\n\n\n\n# Note:\n\n\n\n`g` --> [m,n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n`g(0, 1)` --> [0, 1]\n\n# Note for C+\n\n\n\n\n\ngap(", "``\n`g` is a slice of the same length as `m`\n`n` is a slice of the same length.\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[0, 1]\n\n[1, 2]\n\n\n\n[0, 2]\n\n\n\n\ngap(2", "\n\n\n\n\n\n\n\n\n\n\n\n# Note:\n\n\n\n\n`g` --> [g, m, n]\n`m` --> [m, n]\n`n` --> [n, m]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note for C/F/Kotlin\n\n\n", "\n# Examples:\n\n\n\n\n\n\n\n\n\n\ng(m,n) --> [m,n]\n\n# Examples:\n\ng(m,n) --> [m,n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Note for C and F\n\n\n\n\n\n\n\n\n# Examples:\n\n\ng(", "\n\n\n\n\n\n\n\n\n[]\n\n# Examples:\n\n`gap(m,n)` --> [m,n]\n\n\n\n\n\n\n\n`g` --> [g, m]\n\n`g` --> [m, n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`g` --> [m, n]\n\n", "\n# Note:\n\n# Examples:\n\n# Example:\n\n# Example:\n\n# Example:\n\n\n\n\n\n\n\n\n# Example:\n#\n\n\n# Example:\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng(m, n) --> []\n\n\n\n\n\ng(", "\n# Examples:\n`gap(g)` --> [g]\n# Examples:\n`gap(g)` --> [g]\n\n\n\n\n\n\n\n\n\n\n\n`g` --> [g]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng\n[g]\n\ng\n[g]\n\n\n\n\n\ng = [3", "\n# Note:\n\n# Examples:\n\ng(m,n) --> [m,n]\n\n# Examples:\n\n\n\n\n# Note:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`g` --> [m, n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`[2,", "\n\n\n\n\n\n\n\n\ng(g)\n\n# Examples:\ng(g) --> [g, 1, 2, 3, 4, 5, 7, 6, 7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[0, 1]\n\n# Example:\n`gap(1, 2)`\n\n\n\ng", "`gap` is the last argument.\n\n\n\n\n\n\n\n\n\n\n\n`gap(m, n) --> [m, n]\n\n\n`gap(g) --> [m, n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`gap(m, n)` --> [m, n]\n\n\n\n\n# Examples:\n\n", "\n# Note for C and F\n# Note for Kotlin\n# Note for Go\n\n\n\n# Note for C and F\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Example:\n\n\n\n\n\n\ng(m, n) --> [m, n]\n\n\n\n\n# Example:\n\n#", "\n# Examples:\n\ng(m,n) --> [m,n]\n\n\n\n\n\n\n\n\n\n\n# Note for C and F\n\n\n\n\n`gap(m,n)` --> [m,n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng(m, n) --> [m, n]\n\n\n\n\n", "g` is the number of the gap to be searched.\n\n# Examples:\n\n\n\n\n\n\n\n\n\n\n# Note for C++\n# Examples for F++\n# Examples for Go\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngap(g, m, n)\n\n\n\n\n\n`[2, 3", "\n# Note:\n#\n\n\n\n\n\n\n\n\n\n# Note:\n#\n#\n`g` --> [m, n]\n# Note:\n#\n\n\n\n\n`g` --> [m, n]\n# Note:\n#\n\n\n\n\n\n\n\n[3, 5]\n\n# Note:\n#\n\n\n\ngap(", "`\n\n\n\n# Examples:\n\n`gap(m, n)` --> [m, n]\n\n# Examples:\n\n\n\n\n\n\n\n\n\n\n`g` --> [m, n]\n\n\n\n# Note for C++\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples:\n\n`gap(m)` -->\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n`gap(g, m, n)` --> [g, m, n]\n\n`gap(g, m, n) --> [m, n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`gap(2, 5, 7)` --> [3, 5]\n\n\n\n\n\n#", "\n# Examples:\n\ng(m,n,g) --> [m,n]\n\n# Examples:\n\n\n\n\n\n\n\n\n# Examples:\n\n\n\n\n`gap(m, n)` --> [m, n]\n\n\n\n\n\n\n\n\n\n\n\ng(m, n) --> [m, n]\n\n\n\n\n\n", "\n# Examples:\n# Gap\n# Examples:\n# Gap(g, m, n)\n# Examples:\n#\n\n\n#\n\n\n\n\n\n# Examples:\n#\n\n\n\n\n# Note for C and F\n\n\n\n`\n\n\n\n\n\n\n\n\n# Examples:\n\n\n\n\n\n\ng = [3]\n", "\n# Examples:\n\n# Example:\n# `gap(g)` --> [g, m, n]\n# Examples:\n#\n\n\n#\n\n#\n\n\n#\n\n\n\n\n`g` --> [g, m, n]\n\n# Examples:\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`m` --> [3", "\n# Examples:\n\n\n\n\n\n\n\n\n\n[0, 0, 0, 0, 0]\n\n# Note for C++ and F#\n\n\n`g` --> [1, 0]\n\n\n\n\n`g` --> [0, 0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples:\n\ng="], "prompt": "\nQUESTION:\nThe prime numbers are not regularly spaced. For example from `2` to `3` the gap is `1`.\nFrom `3` to `5` the gap is `2`. From `7` to `11` it is `4`.\nBetween 2 and 50 we have the following pairs of 2-gaps primes:\n`3-5, 5-7, 11-13, 17-19, 29-31, 41-43`\n\nA prime gap of length n is a run of n-1 consecutive composite numbers between two **successive** primes (see: http://mathworld.wolfram.com/PrimeGaps.html).\n\nWe will write a function gap with parameters:\n\n`g` (integer >= 2) which indicates the gap we are looking for\n\n`m` (integer > 2) which gives the start of the search (m inclusive)\n\n`n` (integer >= m) which gives the end of the search (n inclusive)\n\nIn the example above `gap(2, 3, 50)` will return `[3, 5] or (3, 5) or {3, 5}` which is the first pair between 3 and 50 with a 2-gap.\n\nSo this function should return the **first** pair of two prime numbers spaced with a gap of `g`\nbetween the limits `m`, `n` if these numbers exist otherwise `nil or null or None or Nothing` (depending on the language). \n\nIn C++ return in such a case `{0, 0}`. In F# return `[||]`. In Kotlin return `[]`\n\n#Examples:\n`gap(2, 5, 7) --> [5, 7] or (5, 7) or {5, 7}`\n\n`gap(2, 5, 5) --> nil. In C++ {0, 0}. In F# [||]. In Kotlin return `[]`\n\n`gap(4, 130, 200) --> [163, 167] or (163, 167) or {163, 167}`\n\n([193, 197] is also such a 4-gap primes between 130 and 200 but it's not the first pair)\n\n`gap(6,100,110) --> nil or {0, 0}` : between 100 and 110 we have `101, 103, 107, 109` but `101-107`is not a\n6-gap because there is `103`in between and `103-109`is not a 6-gap because there is `107`in between.\n\n# Note for Go\nFor Go: nil slice is expected when there are no gap between m and n.\nExample: gap(11,30000,100000) --> nil\n\n#Ref\nhttps://en.wikipedia.org/wiki/Prime_gap\ndef gap(g, m, n):\n\t\nUse Call-Based format\nANSWER:\n"}}