{"1713": {"code": ["\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\n* the number of function calls made inside the function recursively\n* the number of sub-function calls made recursively\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\nAim of this kata is", "\n\n\n\n\n\n\nUse Call-Based format\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\nThe kata kata is in a call-based format.\n\n\n\ncount_calls()\n\n\n * the function name.\n\n\n\n\n\n\n\n\n\n\n\n%count_calls(count_called", "\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata kata is to determine the number of sub-function calls made inside of an unknown function.\n\n* The function itself is not known.\n\n* The function itself is unknown.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* The a", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n):\n\t\n\n\n\n\n\n\n\n\n\nUse Python 3.4 format\n\n\nNOTE:\n\n\n\n\n\n\n\n_calls\n\n\n\n\n * the number of function calls made inside it recursively\n\n\n\n\n\n\n\n\n\n\n\n\n0:\nThe number of sub-", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\ncount_calls(func, *args, **kwargs)\n\n\n\n\n\n\n\n\n\n\ncount_calls(func)\n\n\n * the number of sub-function calls made inside it\n\n\n\n\n\n\n\n\n\n\n\nThe aim of this", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\ncount_calls(func, args, kwargs)\n\nUse Call-Recursive format\n\n\n\n\n\n\n\n\n * the number of sub-function calls made inside it recursively\n\n\n\n\n\n\n\n\n\n\n\n\nAim of this kata is to determine the a", "\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\nNB:\nThe function does not exist\n\n\n\n\n\n\nUse Python-Based format\n\n* the number of function calls made inside the function recursively\n\n\n\n\n\n *\n\n\n\n\n\n\n\n\nThe aim of this kata is to determine the number of sub-function\n\n", "\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nREQUIRE:\n\n1:\n\n\n\n1:\n\n\n* the number of function calls made inside it\n* the number of sub-called functions recursively\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1:\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python format\n\nUse Python 3 format\n\nNOTE:\n\n   * Use Python 2.7 format\n\n\n\n\n* the number of function calls made inside the function recursively\n\n\n\n\n *\n\n\n\n\n\n\n\n\n\n\n\n\n[a] The aim of this kata", "\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\nUse Recursive format\n\n\n\nUse Recursive-Based format\n\nNOTE:\n\n\n\n\n\n\n\n\n\n * the number of function calls made inside it recursively\n * the function return value.\n\n\n\n\n\n\n\n\n\n\n\nAim of this kata", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n_:\n\t\nUse Call-Based format\n\ncount_calls:\n\n\n*\n\n\n\n * the number of function calls made inside the function recursively\n\n\n\n\n\n\n\n\n\n\n    * The aim of this kata is", "\n\n\n\n\n\n\n\n\n\n\n\n\n):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata kata is responsible for counting the number of calls made inside all the sub-called functions recursively.\n\n\n\n\n\ncount_calls:\n\n *\n\n\n\n\n\n\n\n\n\n\n\n\n\n    The kata kata", "\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\ncount_calls(func, args, kwargs)\n\n\n\n\n\n\n\n* the number of sub-function calls made inside the function recursively\n\n\n\n\n * the number of sub-function calls made inside it recursively\n\n\n\n\n\n\n\n\n\n\n   .. code-block:: python", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nCount the number of function calls made inside the function recursively.\n\nEXAMPLE:\n\n\n\n\n\n* The function is not known to this kata.\n\n\n\n\n\n *\n\n\n\n\n\n\n\nThe kata kata is counting the number of sub-function\n\n", "\n\n\n\n\n\n\n\n\nUse Python 2.7 format\n\nEXAMPLE:\n\n\n\n\t\n\n\n\n\n\ncount_calls(func, *args, **kwargs)\n\n\n\n\n\nUse Better format\n\n\n\n\n * the function itself\n\n\n\n\n\n\n\n\n\n\n\n\n\nAim of this kata is to determine", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncount_calls(func, *args, **kwargs)\n\nUse Recursive format\n\n\n\n\n\n\n\n* the number of function calls made inside the function recursively\n* the function return value\n\n\n\n\n *\n\n\n\n\n\n\n\n\n\n\n\nThe aim of this kata is to", "\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n* the number of function calls made inside the function and inside all the sub-called functions recursively\n* the function return value\n\n\n\n\n * the number of function calls made recursively\n\n\n\n\n\n\n\n\n\n\nAim of this kata is to determine the", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\nUse Python-Based format\n\nUse Python-Extension format\n\nNOTE:\n\n\n\n\n\n\n\n\n\n\n\ncount_calls:\n *\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n    The kata was written to kata", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nUse Python-Based format\n\nNB:\n\nUse Python 3 format\n\nNB:\n\n\n\n\n\n\n_calls(func, *args, **kwargs):\n\n\n\n\n *\n\n\n\n\n\n\n\n\n\n\nAim of this kata is", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nNOTE:\n\n    The function name is not used.\n\nNOTE:\n   \n\n\n\n\n\n\n_calls(func, *args, **kwargs):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**RETURN DATA**\n"], "prompt": "\nQUESTION:\nThe aim of this kata is to determine the number of sub-function calls made by an unknown function.\n\nYou have to write a function named `count_calls` which:\n\n* takes as parameter a function and its arguments (args, kwargs)\n* calls the function\n* returns a tuple containing:\n\n * the number of function calls made inside it and inside all the sub-called functions recursively\n * the function return value.\n\nNB: The call to the function itself is not counted.\n\nHINT: The sys module may come in handy.\ndef count_calls(func, *args, **kwargs):\n\t\nUse Call-Based format\nANSWER:\n"}}