{"2340": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\\mathrm{merge}(\\ldots,b)$ = b$\n\n\n\n\n\n\np$=2n$\n\nDO NOT USE\n\nQUESTION:\n $p=2n$\n\n\n\nb$=1$\n\n\n\n\n\nb$=1$\n\n\np=2n$\n", "\n\n\n\n\n\n\n\n\n\n\n\n\nn$\nmerge-sort\n\n\nThe algorithm has nice property:\n\n$p$\n\n\nmerge-sort\n\n\nb_1=2$\n\nQUESTION:\n\n\n\n\nb_1=4$\n\n\n\n\n\nb_1=4$\n\n\np$ is not defined.", "\n\n\n\n\n\n\n\n\n\n\n\\mathrm{merge}(\\emptyset,\\ldots,b)$\n\nA permutation is a subroutine in merge-sort.\n\n\n\n\n\np=2n$\n\nQUESTION:\n\n\n\n\nb$\n\n\n\n\n\nb_1$\n\nb_1$\n\n\np=[1,", "\n\n\n\n\n\n\n\n\n\n\np$\n\n\n\n2n$ would be the first permutation of $a$ and $b$.\n\np$\n\nTHEN:\n\n$a$ and $b$ are non-empty arrays.\n\n\n\n\n\n\n\n\n\nn+m$\n\nb_1$\n\np=1$\n", "\n\n\n\n\n\n\n\n\n\n\np$\np=p$\n\n\n\n[2n]=p$, $n=2n$\n\np$\n\n\n\nNO ACTION:\n\n\n\n\nmerge-sort\n\nNEGATIVE ACTION:\n\nb$\n\n\n\nb_1$\n\nb$\n\n\n\\mathrm{merge", "\n\n\n\n\n\n\n\n$\\mathrm{merge}(a,[b])=[b_1,b_2,b_2]$\n\n\n\n\n\n\n\n\n\n\n\na_1>b_1$\n\n\n\nb_1$\n\n\n\n\n\nb_1$\n\n\n[2,n]=a$ and", "\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\np$\na_1$\nb_1$\n\n\n\n\n\nb_1$\n\nTHEN:\n\n\n$a$=b$\n$b$=a$\n\n\n\nb$=b$\n\n\n\n\nb$=b$\n\n\n\n\n\n\\", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np=p$\n\nEQUIV:\n\nThis algorithm is a subroutine for merge-sort.\n\nThe algorithm is a subroutine for merge-sort.\n\nEQUIV:\n\n\n\n\n\nb$\n\n\n\n\nb_1$\n\n\n\n\n\\mathrm", "\n\n\n\n\n\n\n\n\n\n\np$\n\nThe algorithm is a permutation of length $n$ and $m$\nb_1=1$. \n\nThis procedure is used as a subroutine in merge-sort.\n\n\n\n\n\n\n\n\n\n\n\n\n\nb$ \n\nb$ \n\n\np\n\n\nQUESTION:\nLet $", "\n\n\n\n\n\n\n\n\n\n\n\n\\mathrm{merge}(\\emptyset,\\ldots,b)$\n\nThe algorithm is a subroutine in merge-sort\n\nQUESTION:\n\nb$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb$\n\n\n[1,2,3]=a$ and $[2,", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np$\nb$\n\n\n\n\n\n\n\n\n\n\\mathrm{merge}([a_1,2],b)$\n\n\nEXAMPLE:\n\n\n\n\n\n\nb$\n\n\n\n\n\nb_1$\n\nb_1$\n\n\np=[", "\n\n\n\n\n\n\n\n\n\n\n\n\np$:\n[1,2,3]\n\n\n\n\n\np=2n$\n\nTHIS IS NOT a good algorithm.\n\nTHIS IS NOT a good algorithm.\n\nWARNING:\n\n\n\nb_1$\n\n\n\n\n\nb_1$\n\n\nmathrm{merge}", "\n\n\n\n\n\n\n\n\n$a$ = [a,b]\n$b$ = [b,p]\n\n\n\nmerge\n\nNote:\n\n\n\n\nb_1=3$. \n\n\n\nmerge-sort\n\n\n\n\n\nb_1=4$\n\nb$\n\n\nn=2n$ and $n$ are", "\n\n\n\n\n\n\n\n\n\n\n\nb$ is a sorted array of length $n$ and $m$.\n\nmerge\n\n\n\n\n\\mathrm{merge}(a,b)$ will be deleted.\n\nEITHER:\n\n\n\n\n\n\n\n\na_1>b_1$\n\n\np$ would be the new array $", "\n\n\n\n\n\n\n\n\n\n\n\np$ can be used to make a list of all possible permutations.\nmerge\n\nWHERE:\n\n$a$=[a_1,b_1]=b$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\mathrm{merge}(a,b)$\n\n\n\np_1$ will be the", "merge-sort:\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\\merge}(a,[b_1,b_1$,b_2,b_2,b_n$])$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np$ = [p]\n\nQUESTION:\n\n\nmathrm{merge}(a", "\n\n\n\n\n\n\n\n\n\n\n\np$=p$\n\nExample:\n\nmerge-sort: \n $p$=p$\n\nThe algorithm is a subroutine in merge-sort\n\nExample:\n\n\n\nb_1$\n\n\n\n\n\n\n\n\np$=p$\n\nQUESTION:\n\n\n\\mathrm{merge", "\n\n\n\n\n\n\n\n\n\n\n\\mathrm{merge}(\\emptyset,\\ldots,a)$\n\nb=b$\n\nTHEN:\n\n\n\n\np=p$\n\nTHEN:\n\n\n\n\n\n\n\n\n\nn$=2n$\n\nb$=a$\n\n\nn+m$ can be used as", "\n\n\n\n\n\n\n\n$\\mathrm{merge}\n(a,b)\n\n\n\n\n\n\na_1>b_1$\n\n\n\n\n\np=3n$\n\nEXAMPLE:\n\n\n\n\n$\\mathrm{merge}\n\n\n\n\n\n\nn$\nb_1$\n\n\np=2n", "\n\n\n\n\n\n\n\n\n\n\np$\n\nmerge-sort:\nLet $a$ and $b$ be two arrays of length $n$ and $m$.\n\n\n\nn+m$.\n\n\n\n\nmerge-sort: \n\nb$\n\n\n\nb_1$\n\nn$\n\n\nn$=2n$\n"], "prompt": "\nQUESTION:\nLet $a$ and $b$ be two arrays of lengths $n$ and $m$, respectively, with no elements in common. We can define a new array $\\mathrm{merge}(a,b)$ of length $n+m$ recursively as follows:  If one of the arrays is empty, the result is the other array. That is, $\\mathrm{merge}(\\emptyset,b)=b$ and $\\mathrm{merge}(a,\\emptyset)=a$. In particular, $\\mathrm{merge}(\\emptyset,\\emptyset)=\\emptyset$.  If both arrays are non-empty, and $a_1<b_1$, then $\\mathrm{merge}(a,b)=[a_1]+\\mathrm{merge}([a_2,\\ldots,a_n],b)$. That is, we delete the first element $a_1$ of $a$, merge the remaining arrays, then add $a_1$ to the beginning of the result.  If both arrays are non-empty, and $a_1>b_1$, then $\\mathrm{merge}(a,b)=[b_1]+\\mathrm{merge}(a,[b_2,\\ldots,b_m])$. That is, we delete the first element $b_1$ of $b$, merge the remaining arrays, then add $b_1$ to the beginning of the result. \n\nThis algorithm has the nice property that if $a$ and $b$ are sorted, then $\\mathrm{merge}(a,b)$ will also be sorted. For example, it is used as a subroutine in merge-sort. For this problem, however, we will consider the same procedure acting on non-sorted arrays as well. For example, if $a=[3,1]$ and $b=[2,4]$, then $\\mathrm{merge}(a,b)=[2,3,1,4]$.\n\nA permutation is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\nThere is a permutation $p$ of length $2n$. Determine if there exist two arrays $a$ and $b$, each of length $n$ and with no elements in common, so that $p=\\mathrm{merge}(a,b)$.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$) \u00a0\u2014 the number of test cases. Next $2t$ lines contain descriptions of test cases. \n\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 2000$).\n\nThe second line of each test case contains $2n$ integers $p_1,\\ldots,p_{2n}$ ($1\\le p_i\\le 2n$). It is guaranteed that $p$ is a permutation.\n\nIt is guaranteed that the sum of $n$ across all test cases does not exceed $2000$.\n\n\n-----Output-----\n\nFor each test case, output \"YES\" if there exist arrays $a$, $b$, each of length $n$ and with no common elements, so that $p=\\mathrm{merge}(a,b)$. Otherwise, output \"NO\".\n\n\n-----Example-----\nInput\n6\n2\n2 3 1 4\n2\n3 1 2 4\n4\n3 2 6 1 5 7 8 4\n3\n1 2 3 4 5 6\n4\n6 1 3 7 4 5 8 2\n6\n4 3 2 5 1 11 9 12 8 6 10 7\n\nOutput\nYES\nNO\nYES\nYES\nNO\nNO\n\n\n\n-----Note-----\n\nIn the first test case, $[2,3,1,4]=\\mathrm{merge}([3,1],[2,4])$.\n\nIn the second test case, we can show that $[3,1,2,4]$ is not the merge of two arrays of length $2$.\n\nIn the third test case, $[3,2,6,1,5,7,8,4]=\\mathrm{merge}([3,2,8,4],[6,1,5,7])$.\n\nIn the fourth test case, $[1,2,3,4,5,6]=\\mathrm{merge}([1,3,6],[2,4,5])$, for example.\nUse Standard Input format\nANSWER:\n"}}