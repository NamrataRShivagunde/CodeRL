{"4737": {"code": ["\n\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n`\n\nUse Call-Based format\n`\n\n\n\"\"\"\n\n\n\n\n\n`\n`\n\n`\n\n\n\n:\n`\n\n\n\n\n`\n\n`\n\n\n`\n\n\n\n\n\n\n\n```if:python", "\n\nUse C-Based format\n\nUse Call-Based format\n`\n\n\nUse Call-Based format\n`\n`\n\nUse Call-Based format\n\nEXAMPLE:\n\n```\n\n\n```\n\nUse Call-Based format\n\n\n\n``\n\n\n`\n`\n\n`\n\n`\n`\n\n`\n`\n```\n", "\n\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n`\n\nUse Call-Based format\n\n`\n\n`\n\nUse Call-Based format\n\n\n`\n`\n\n\n\n\n:\n`\n`\n\n\n\n`\n\n\n\n```\n\n\n\n`\n\n\n```\n``", "\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\n\n\n```\n\nUse Call-Based format\n\n\n```\n\n\n`\n`\n\n\n\n\n`\n\n\n`\n\n`\n\n`\n\n\n\n\n\n\n\n```if:python", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n`\n`\n\n`\n\nUse Call-Based format\n\n\n\n`\n\n`\n`\n\n\n\n:\n`\n`\n\n\n`\n\n`\n\n\n`\n\n```\n\n\n`\n\n``", "\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n`\n\nUse Call-Based format\n`\n\n\n\n\n\n```\n\n\n```\n\n\n`\n\n`\n\n\n\n\n`\n\n`\n\n`\n\n`\n\n`\n`\n\n\n\n`\n\n\n```", "\n\n`\n\nUse Call-Based format\n\n\nUse Python-Based format\n\nUse Call-Based format\n\n`\n\nif:csharp,java,javascript\n\n\n\n\n\n\n`\n\nif:csharp\n\n\n\n:\n`\n\n\n\n`\n\n`\n\n`\n`\n\n```\n\n\"\"\"\n\n\n``", "\n`\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\n\n\n```\n\n```\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n`\n\n\n\n:`\n`\n\n\n`\n\n```\n\n\n`\n\n`\n`\n```\n``", "\n`\n\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n`\n`\n\n`\n\nUse Call-Based format\n```\n`\n`\n`\n\n\n```\n\n:\n`\n\n`\n`\n`\n`\n\n`\n\n```\n\n```\n\n\"\"\"\n\n``", "\n\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n`\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n`\n`\n\n\n\n:\n`\n``\n\n`\n\n`\n```\n\n   \n\n   \n   \n```\n", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n`\n\nUse Call-Based format\n`\n\n```if:csharp,java,javascript\n\n\n```\n\n\n\n\n\n`\n\n\n\n:`\n\n``\n\n`\n\"\"\"\n\n\n\n\n\n\n```if:", "\n\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\n\n```\n\nUse Call-Based format\n\n\n```\n\n`\n`\n`\n\n\n\n`\n\n\n\n`\n\n`\n\n`\n\n```\n\n`\n\n```", "\n\nUse Call-Based format\n`\n\nUse Csharp-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\n`\n\n\n`\n\n\n\n\n`\n\n\n\n\n\n\n:\n\n`\n\n\n\n\n`\n\n\n\n`\n\n\n\n\n\n`\n\n\n\n```\n``", "\n\t\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Python-Based format\n`\n`\n\n`\n\nUse Call-Based format\n\n\n\n`\n`\n\n`\n\n\n\n`\n\n`\n`\n\n\n\n\n`\n\n\n\n```\n\n`\n\n```", "\n`\nUse Call-Based format\n`\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\n\n\n```\n\nCall-Based format\n\n\n```\n\n`\n`\n`\n\n\n\n`\n`\n\n`\n\n`\n\n```\n`\n\n```\n\"\"\"\n``", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\nuse Call-Based format\nPREDICATE:\n```\n\n\n\n\n\n\n`\n\n\n\n\n```if:csharp,csharp\n\n`\n\n`\n\n```\n`\n`\n\n```\n```\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\n`\n\n`\n\n\n\n`\n\n\n\n\n\n\n`\n\n`\n\n`\n\n```\n\n\n\n\n\n\n```endif```\n\n\n\n```", "\n\t\nUse Call-Based format\n`\n\nUse Call-Based format\n\n`\n\nUse Call-Based format\n`\n`\n\n```if:csharp,java,javascript\n`\n\n\n`\n`\n\n`\n\n\n\n\n`\n`\n\n`\n\n\n\n`\n\n1\n\n`\n\n\n\n```\n``", "\nUse Call-Based format\n```\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n`\n`\n\n```\n\nUse Call-Based format\n\n\n\n\n`\n`\n\n`\n\n\n\n:\n`\n\n\n\n`\n\n```\n\n\n`\n\n```\n\n\n\n\n```\n```", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\n\n```if:csharp,java,javascript\nUse Call-Based format\n\n```if:csharp,java,javascript\n\n`\n`\n\n\n\n\n`\n\n\"\"\"\n`\n`\n\n```\n\n\"\"\"\n\n``"], "prompt": "\nQUESTION:\n```if:python,php\nIn this kata you will have to write a function that takes `litres` and `price_per_litre` as arguments. Purchases of 2 or more litres get a discount of 5 cents per litre, purchases of 4 or more litres get a discount of 10 cents per litre, and so on every two litres, up to a maximum discount of 25 cents per litre. But total discount per litre cannot be more than 25 cents. Return the toal cost rounded to 2 decimal places. Also you can guess that there will not be negative or non-numeric inputs.\n\nGood Luck!\n```\n\n```if:csharp,java,javascript\nIn this kata you will have to write a function that takes `litres` and `pricePerLitre` as arguments. Purchases of 2 or more litres get a discount of 5 cents per litre, purchases of 4 or more litres get a discount of 10 cents per litre, and so on every two litres, up to a maximum discount of 25 cents per litre. But total discount per litre cannot be more than 25 cents. Return the toal cost rounded to 2 decimal places. Also you can guess that there will not be negative or non-numeric inputs.\n\nGood Luck!\n```\ndef fuel_price(litres, price_per_liter):\n\t\nUse Call-Based format\nANSWER:\n"}}