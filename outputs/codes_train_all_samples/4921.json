{"4921": {"code": [":\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n```\n\t\nUse Call-As-Keyword format:\n\nIn this kata, we're going to create a function `nato` that takes a `word`\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\t``` python\nnato(\"B", ":\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n``` python\nnato(word)\n``` ruby\nnato(word)\n\t\n```\n\n\n\n\n\n\nUse Python format\n\n\n\n\n\n\n\n\n\n``` ruby\n\n```\n\n\nIn this kata", ":\n\nUse Call-Based format\n\n\n\n\n\n\n\n``` python\n#!python\n\n``` ruby\n\ndef nato(word):\n\t\n\n:\n\nIn this kata,\n\n```\n\n\n\n\n\n:\n\nUse Python syntax\n\n\n\n\n\n\n\n\n\n\n\n\t# Note:\n\t# The k", "\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n``` python\nnato(\"Banana\") # == \"Bravo\"\n``` ruby\nnato(\"Banana\") # == \"Bravo\"\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n``` python\nnato", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n```\n```\n\ndef\n\t\nUse Call-Based format:\n\t\n\n\n\t\nUse Call-Only format\n\n\n\n\nUse Call-Based format\n\n\n```\n\n\n\n```\n\n\n\n```\n\n\n\t\"\"\"\n\n   ", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nIn this kata, we're going to create a function `nato` that takes a `word`.\n\n\n\n\t\n\n\n\n\n\nUse Python-Based format\n\n\n\n\n\nThis kata is a kata\n`\n\n\n\n\n\t# The", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```\nimport kata\n\n\n```\n\ndef nato(word):\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n```\n\n\n\nUse Python-based format\n\n\n\n```\n\n```\nruby\n\n\n\n\n", ":\n\n\nUse Call-Based format\n\n\n\n\n\n```\ndef nato(word):\n\t\nUse Call-Based format\n```\n\n:\n\nIn this kata:\n\n```\n\n\n\n\n\n\nUse Function-Based format\n:\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n``` python\nnat", ":\n\n\nUse Call-Based format\n\n\n\n\n\n```\n\n\t\nUse Call-Based format\n\nIn this kata, we're going to create a function `nato`\n\n```\n\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\tIn this kata, we're going to", ":\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\t\n\n\n\n\n``` python\nnato(word)\n``` ruby\nnato(word)\n\n\n``` ruby\n\n\n\n\n\n\n:\n\n\n\n\n\nThis kata will take you to say:\n\n```\n\n\n\n``` python\n", ":\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\ndef\n\n\nIn this kata, you're going to create a function `nato` that takes a `word` that takes a `str`.\n\n\n\t\n\n\n\t\nUse Function-Based format\t:\t\n\n:\t\n:\n\n\n\n\tIn this kata,", ":\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```\n\n\n\t\nUse Call-Based format\n\nIn this kata, we're going to create a function `nato`\n\n\n\t\n\n\n\n\nUse Python-based format\n:\n\n\n\n\n\n\n``` python\n\n``` ruby\n\n\n\n\tI'd", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nIn this kata, we're going to create a function `nato` that takes a `word` and returns a string that spells the word\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t``` python\nnat", ":\nUse Call-Based format\n\n\n\n\n\n\n\n```\n\n\t\nUse Call-Based format\n\nIn this kata, we're going to create a function `nato` that takes a `word`.\n\n\n\n\t\n\n\n\n\n:\n\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n\t\"\"\"\n    #", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n```\n\t\nUse Call-Based format:\n\nIn this kata, we're going to create a function `nato`.\n\n\n\n\n\n\n\n\n:\n\n\n```\n\n\nUse Python format\n\n\n\n```\n\n\n\n\t``", ":\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n``` python\n\nimport kata\n\n``` ruby\n\n\n\t\n\n\n```\n\t\nUse Call-Based format\n\n\n\n\nUse Python-Based format\n:\n\n```\n\n\n\n``` ruby\n\n``` ruby\n\n\n\t\n```", ":\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\t\nUse Python-based format\n\nIn this kata, we're going to create a function `nato`\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n```\n\n\n\n``` python\nnato(\"Banana\")\n\n\n\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Format\n\nIn this kata, we're going to create a function `nato` that takes a `word` and returns a `string`.\n\n\n\n\n\n\n\n\n:\n\n\n\n\n```\n\n\n\n\n\n``` ruby\n\n\n\t# The", ":\n\n\nUse Call-Based format\n\n\n\n\n```\n\n\t\nUse Call-Based format:\n\nIn this kata, we're going to create a function `nato` that takes a `word`.\n\n\n\n\n\t\n\n\nUse Python format\n\n\n\n\n\n\n\n\n\n\n\n\n``` python\n\n\n\n\n\n\t", ":\n\n\nUse Call-Based format\n\n\n\n\n\n```\n\n\n\nIn this kata, we're going to create a function `nato` that takes a `word` that takes a `str`\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Python or Ruby format\n\n\n\n\n\n\t``` python\n"], "prompt": "\nQUESTION:\nIn this kata, we're going to create the function `nato` that takes a `word` and returns a string that spells the word using the [NATO phonetic alphabet](https://en.wikipedia.org/wiki/NATO_phonetic_alphabet).\n\nThere should be a space between each word in the returned string, and the first letter of each word should be capitalized.\n\nFor those of you that don't want your fingers to bleed, this kata already has a dictionary typed out for you.\n\n``` python\nnato(\"Banana\") # == \"Bravo Alpha November Alpha November Alpha\"\n```\n``` ruby\nnato(\"Banana\") # == \"Bravo Alpha November Alpha November Alpha\"\n```\ndef nato(word):\n\t\nUse Call-Based format\nANSWER:\n"}}