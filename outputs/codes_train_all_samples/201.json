{"201": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n -> int:\n        return n\n\nUse Call-Based format\n\n\n     2     1      1\n   \n\nUse Call-Based format\nGiven n, how many unique BST's?\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n                 \\\n\nGiven n, how many structur", "\n\nUse Call-Based format\n\n\n\n\n\n\n -> int) -> int:\n\n\n\n\n        \\      \\\n   1     3     2      2      1\n\n\nInput: 2\nOutput: 5\n\nExample:\n\n\nInput: 3\nOutput: 5\n\n\n\n\n\n\n\n\n\n\n\n\n      \\\n\nGiven n, how", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n -> int):\n        return n\n\n\n\n   \n\nUse Call-Based format\nGiven n, how many binary search trees are available?Given n, how many unique BST's are available?\n\n\n\n\n\n\n\n\nGiven n = 3,\n         \\\n\nGiven n, how many", "\nUse Call-Based format\n\n\n\n\n\n\n   ) -> int:\n        \"\"\"\n\n\nUse Call-Based format\n\n\nInput: n\nOutput: 5\n\nExample:\n\n\n\n\n\n   \n\nGiven n, how many trees?\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n      2\n   \nGiven n, how many", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n -> int:\n        return self.numTrees()\n\n\n\n   \n\nGiven n, how many unique BST's are unique?\n  1  2  3  2\n\n\n       1\n\nGiven n, how many unique BST's?\n\n      \\\n\nGiven n, how many", "\n\n\n\nUse Call-Based format\n\n\n\n) -> int:\n        return n\n\nUse Call-Based format\n\n\n   \n        return self.numTrees(n)\n\nGiven n, how many unique BST's are stored in values 1...... n?\n\n\n\n\n\n\n\n\nGiven n = 3,\n\n\n       \\\n\nGiven n", "\nUse Call-Based format\n\n\n\n\n\n\n -> int) -> int:\n        \"\"\"\n\n\n\n\n\nInput: 3\nOutput: 5\n    def numBSTs(self, n: int):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n = 3,\n    \nGiven n, how many structur", "\nUse Call-Based format\n\n\n\n\n\n\n -> int:\n        return n\n\n\nuse Call-Based format\n\n\nExample:\n\nInput: 2\nOutput: 5\n   \n\n\n\nExample:\n\n\nInput: 3\nOutput: 5  \n\n\n\n        \\\n\n\nGiven n, how many unique BST's?\n\n    \nGiven", "\n\n\n\n\nUse Call-Based format\n\n\n\n -> int:\n        return self.numTrees(n)\n\n\nExample:\n\n\nInput: 3\nOutput: 5\nExplanation:\n\n\n\n\n   \n\n\nGiven n, how many unique BST's?\n\n\n\n\n\n\n\n\nGiven n = 3\n         \\\n\nGiven n", "\nUse Call-Based format\n\n\n\n\n\n\n -> int:\n        return n\n\nUse Call-Based format\n\n\nExample:\n\nInput: 2\nOutput: 5\n\n   \n\n\nGiven n, how many unique BST's?\n\n\n\n\n         \\\n\n\nGiven n = 3, how many unique BST's?\n    \nGiven n,", "\nUse Call-Based format\n\n\n\n\n\n\n -> int):\n        return self.numTrees(n)\n\nUse Call-Based format\n\n\n\n   \n\nGiven n, how many unique BST's?\nGiven n, how many\n\n\n\n\n\n    1  2  3\n\n\n\n    \\      \\      \\\n\nGiven n, how many", "\n\n\n\n\nUse Call-Based format\n\n\n\n    -> int:\n        return self.numTrees(n)\n\n\nUse Call-Based format\n\n\n   \n\n\nGiven n, how many unique BST's (binary search trees) store values 1... n?\n\n\n\n\n\n\n\nGiven n = 3\n    \nGiven n, how many unique B", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n -> int:\n        return n\n\n\nUse Call-Based format\n\n\n     1      2      1\n    \n\nclass\n\n\nGiven n, how many unique BST's?\n\n\n\n\n      \\      \\\n\n\n\nGiven n = 3\n    \nGiven n, how many", "\n\n\n\nUse Call-Based format\n\n\n\n -> int) -> int:\n        \"\"\"\n\n\nExample:\n\n\nInput: 2\nOutput: 5\nExplanation:\n\n        \\\n -> int:\n\nGiven n, how many unique BST's\n\n\n\n\n\n\n\nGiven n, how many unique BST's?\n   \nGiven n, how", "\n\n\n\nUse Call-Based format\n\n\n\n -> int:\n        return n\n\nUse Call-Based format\n\n\n    \n    pass\n\nGiven n, how many unique BST's store values 1...\u00a0n?\n\n\n\n\n\n      / \\      \\\n\n\nGiven n, how many unique BST's\n    \nGiven n, how many struct", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n -> int) -> int:\n\n   \n\n\n      / \\      \\      \\\n\n\nGiven n, how many unique BST's are stored in 1... n?\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n      / \\      \\\n\nGiven n, how many", "\n\n\n\n\nUse Call-Based format\n\n\n\n   -> int:\n    \n   \n\nExample:\n\n\nInput: 1\nOutput: 5\nExplanation:\n\n\n   ) -> int:\n\nGiven n, how many unique BST's?\n\n\n\n\n\n\nUse Call-Based format\n\nGiven n = 3\n  \nGiven n, how", "\n\n\n\nUse Call-Based format\n\n\n\n\n -> int:\n        return self.numTrees(n)\n\n\nExample:\n\nUse Call-Based format\n\n\n\n\n   \n\nGiven n, how many unique BST's\nGiven n = 3\n\n\n\n\n\n\n\nGiven n = 3\n\n     1                 2\n\nGiven n, how", "\n\n\n\n\nUse Call-Based format\n\n\n\n -> int:\n        return self.numTrees(n)\n\n\nUse Call-Based format\n\n\n     1      2      3\n\nclass\n\n\nGiven n, how many unique BST's are stored values 1... n?\n\n\n\n\n\n\n\n\n\n         \\\n   \nGiven n, how", "\n\n\n\nUse Call-Based format\n\n\n\n\n -> int) -> int:\n\n\n\nUse Call-Based format\n\nInput: 3\nOutput: 5\nExplanation:\n\n\n\n       \n\nGiven n, how many binary search trees?\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven n,\n    \nGiven n, how many struct"], "prompt": "\nQUESTION:\nGiven n, how many structurally unique BST's (binary search trees) that store values 1 ...\u00a0n?\n\nExample:\n\n\nInput: 3\nOutput: 5\nExplanation:\nGiven n = 3, there are a total of 5 unique BST's:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}