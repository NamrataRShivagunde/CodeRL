{"1723": {"code": ["\n```\n\n\n## Bezier curves\n\nNote:\n\n\n\n\n\n### Examples\n\n### B\u00e9zier curves\n\n```\n\nB\u00e9zier curves\n\n#####\n\nThis section shows how the animation starts at the points\n\n\n\n\n```\n\n\n\n```\n\n\"\"\"\n\n```\n```\n\n\n\n", "\n```\n\n\n\n\n## Bezier curves\n\n\n\n\n\n# B\u00e9zier curves\n\n\n#\n\n## subsegments\n\n\n\n```\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\nclass B\u00e9zierCurve(", "\n```\n\n\n### Bezier curves\n\n### B\u00e9zier curves\n\n### B\u00e9zier curves\n\n### Bezier curves\n\n###\n\n\n\n\n\n\n\n## Bezier curves\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\n", "\n## B\u00e9zier curves\n\n\n\n\n\n```\n\n\n## B\u00e9zier curves\n\nNote:\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n PointAt(t):\n    \"\"\"\n", "\n```\n\n\n## B\u00e9zier curves\n\n#\n\n\n\n## B\u00e9zier curves\n\n###\n\n## B\u00e9zier curves\n\n###\n\n###\n\n\n\n\n```\n\n```\n```\n\n\n\n\n\n\n\n\n```\n```\n\n\n```\n\n\n\n```\n SubSegment:", "\n```\n\n\n## Constructing B\u00e9zier curves\n\n## This section shows how the animation is made.\n\n## Example of the Examples\n\n###\n\n\n\n\n\n## Methods\n\n## Bezier curves\n\n###\n\n\n\n\n```\n\n```\n```\n```\n``\n```\n\n\n\"\"\"defmethod```\n Sub", "\n## B\u00e9zier curves\n\n\n\n\n\n\n## B\u00e9zier curves\n\n###\n\n## B\u00e9zier curves\n\n###\n\n## Points\n\n###\n\n\n\n\n```\n```\n```\n\n\n```\n\n```\n\n```\n\n\n``\n\n\n\n```\n\ndef\n```\n P", "\n\n\n## B\u00e9zier curves\n\nNote:\n\n\n\n\n\n\n```\n\n# B\u00e9zier curves\n\n## B\u00e9zier curves\n\n\n# Bezier curves\n\n\n## Bezier curves\n\n\n\n\n\n\n\n```\n\n```\n```\n```\n\n```\n\n\n\ndef\n```\n", "\n```\n\n\n\n### B\u00e9zier curves\n\n\n### The following code shows how to construct a kata class.\n\n\n\n\n\n\n\n## Bezier curves\n\n\n```\n\n\n\n\n\n```\n\n\n```\n\n```\n\n```\n\n\n\n\n\n\n\n\n\n PointAt(t):\n    P", "\n```\n\n\n## Kata\n\n## B\u00e9zier curves\n\n## B\u00e9zier curves\n\n## B\u00e9zier curves\n\n\n\n\n\n\n\n\n\n```\n```\n\n```\n\n\n```\n\n```\n```\n\n\n\n\n\n\n\n```\n\n\nmethod\n```\n\n A,", "\n```\n\n\n#### Examples\n\n### B\u00e9zier curves\n\n### This section shows how to grow B\u00e9zier curves\n\n#### Examples\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n Subsegment0", "\n\n\n\n## B\u00e9zier curves\n\n\n\n```\n\nB\u00e9zier curves\n\n```\n\n## Bezier curves\n\n\n### Bezier curves\n\n#####\n\nThis section shows how to construct a curve\n\n\n\n\n\n\n\n\n```\n```\n\n```\n\n``\n\n\n\n\ndef\n```\n", "\n```\n\n\n## Bezier curves\n\n### The B\u00e9zier curves\n\n###\n\n## Lattice\n\n### Lattice\n\n\n\n\n\n## Methods\n\n###\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n Subsegment0", "\n```\n\n\n## B\u00e9zier curves\n\n## The B\u00e9zier curve animation\n\n## The B\u00e9zier curve animation\n\n## The B\u00e9zier curve\n\n\n\n\n\n\n\n```\n\n```\n```\n```\n```\n```\n```\n``\n```\n``\n\n\ndef\n```\n", "\n```\n\n\n## B\u00e9zier curves\n\n## The following section shows how the curve growing is done:\n\n\n\n\n\n\n## The kata\n\n### Bezier curves\n\n\n## B\u00e9zier curves\n\n\n\n\n```\n\n\n\n```\n```\n```\n``\n``\n\n\n\ndef\n``` A", "\n\n\n## Example of the kata example:\n\n## Bezier curves\n\n## B\u00e9zier curve\n\n## Bezier curve\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n\n\n PointAt(t):\n", "\n\n\n### B\u00e9zier curves\n\n\n\n## Constructor\n\n\n\n\n\n```\n\n\n\n\n\n\n\n### B\u00e9zier curves\n\n### Bezier curves\n\n\n```\n\n\n\n## Constructing B\u00e9zier curves\n\n## Bezier curves\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n B\u00e9", "\n## B\u00e9zier curves\n\n\n## Constructing B\u00e9zier curves\n\n## This section shows how to construct a B\u00e9zier curve animation\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n\n\n\n\n\n```\n\n```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n B\u00e9zier curves", "\n```\n\n\n\n\n## B\u00e9zier curves\n\n\n\n\n###\n### Bezier curves\n\n###\n\n## Shapes\n\n###\n\n### Bezier curves\n\n###\n\n\n\n\n\n\n```\n\n\n```\n```\n\n```\n```\n\n\n\n\n```\n\n\n\n```\n A[", "\n```\n\n\n### Bezier curves\n\n## Examples\n\n### Bezier curves\n\n### Bezier curves\n\n### Bezier curves\n\n### Bezier curves\n\n\n\n\n\n\n###\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n PointAt(t"], "prompt": "\nQUESTION:\n## Bezier curves\n\nWhen a shape is described using vector graphics, its outline is often described as a sequence of linear, quadratic, and cubic Bezier curves. You can read about [B\u00e9zier curves](https://en.wikipedia.org/wiki/B%C3%A9zier_curve) on Wikipedia. \n\nYou don't need to know much about Bezier curves to solve this kata. Just know that the equations of the linear, quadratic, and cubic curves are given by (respectively):\n\n1. `P(t) = (1 - t) * P0 + t * P1`\n2. `P(t) = (1 - t)**2 * P0 + 2 * (1 - t) * t * P1 + t**2 * P2`\n3. `P(t) = (1 - t)**3 * P0 + 3 * (1 - t)**2 * t * P1 + 3 * (1 - t) * t**2 * P2 + t**3 * P3`\n\nThe points `P0`, `P1`, `P2`, `P3` are called the control points of the curve, and `t` is a variable, which, when taking values from `0` to `1`, will cause `P(t)` to trace the curve.\n\nThis should suffice to implement the `point_at(t)` method of the classes you are to implement.\n\nTo implement the `sub_segment(t)` method, see, in particular, the section on Constructing B\u00e9zier Curves of the above referenced Wikipedia article.\n\nThis section shows animations of how the B\u00e9zier curves grow. The animations are showing longer and longer subsegments, hence showing how subsegments are constructed. If you look closely at the quad curve animation, you can see how the control points move from starting all at P0 and ending up at P0, P1 and P2 respectively. Now look closely at the animation of the cubic curve. See how the control points of the growing subsection start at P0 and end up at P0, P1, P2, and P3. No need to read anything, just look. At the end of the referenced subsection there is a link to de Casteljau's algorithm, which you might find helpful, but I wouldn't go there. Just look carefully at the animations.\n\nIn this kata, you are asked to implement a class for each of the linear, quadratic, and cubic B\u00e9zier curves. These classes must extend the following abstract base class and implement the abstract methods:\n\n```Python\nfrom abc import ABCMeta, abstractmethod\n\n\nclass Segment(metaclass=ABCMeta):\n\n    @property\n    @abstractmethod\n    def control_points(self):\n        pass\n\n    @abstractmethod\n    def point_at(self, t):\n        pass\n\n    @abstractmethod\n    def sub_segment(self, t):\n        pass\n```\n\n`control_points` is a property that returns the coordinates of the points that define the curve. Since the linear curve has two control points (the start and end of the segment), `control_points` will hold 4 floats, which are the x- and y-coordinates of the first point followed by the x- and y-coordinates of the second point.  For the quadratic and cubic curves there are 6 and 8 control points respectively.\n\nThe method `point_at(t)` should return the point obtained when inserting `t` in the equation for the curve. This method will be tested for values of `t` in the interval `[0, 1]` only (although it's possible to extrapolate the curve). \n\nThe method `sub_segment(t_0)` should return the curve that starts at the first point and ends at the point returned by `point_at(t_0)` and follows the curve of the object that this method is invoked on otherwise. For example, if `quad` is a quadratic curve, then `quad.sub_segment(t_0)` is a quadratic curve that starts at `quad`'s first point and ends at `quad.point_at(t_0)` and follows `quad`'s curve. More precisely, \n\n```\nquad.point_at(t_0 * t) == quad.sub_segment(t_0).point_at(t)\n```\nfor all values of `t` in the interval `[0, 1]`.\ndef control_points(self):\n\t\nUse Call-Based format\nANSWER:\n"}}