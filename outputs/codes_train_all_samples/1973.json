{"1973": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return N\n\n\n\n2\u00a03 x N\n\n\n    def numTiles(self, N: int) -> int:\n\n   \n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n3\u00a02\ufffd", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n        return self.numTilings(N)\n\n\n\n\n   ) -> int:\n        \n\n\n\n\n\n\n\n\n\n2x1\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    We have two types", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        return N\n\n\n\n\n   \n       ...\n\nWould you like to answer the number of tilings?\n\n\n\n\n\n\n\n\n\n\n\n1\u00a02\n2\u00a03\n\n\n\n\n\n\nN\u00a0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n        return self.numTilings()\n        \nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n3 tilings\n4 tilings\n\n\n\n\n\n\n\nN\u00a0 =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n        return self.numTilings(N)\n        \n\n\n   \n        N\n        \n\n\n\n\n\n\n\n\n\n\n\n\n1 x N\n1 x N x 1 tilings\n\n\n\n\n\n\n\nN\u00a0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n        return self.numTilings(N)\n\n\n\n\n\n   \n        \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\u00a0x 1\n\n\n\n\n\n\nN\u00a0", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    def numTiles(self, N: int):\n        return N\n\n\nUse Call-Based format\n\n        return self.numTiles()\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have two types:\n", "\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n    def numTiles(self, N: int):\n        return self.numTiles(N)\n\n\nUse Call-Based format\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1.  2.  2", "\n\n\n\nN\u00a0 will be at least 3.\n\n\n\n\n\n\n\n   \n        return self.numTilings(N)\n        \n\n\n\n\n    def numTiles(self, N: int):\n       \n        \n\n\n\n\n\n\n\n\n\n\n\n\n3\u00a0\n\n\n\n\n\n3\u00a0\n\n    We", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n          \n        \nUse Call-Based format\n\nYou have three tilings on a board:\n\n\nXX  <- domino\n\nXX  <- \"L\" tromino\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    X  <-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def numTiles(self, N: int):\n        return N\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nXX  <- dom", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        \n\n\n\nN\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN\u00a0\ufffd", "\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        return N\n\n\n\n\n   \n        return self.numTilings\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nWe have a tiling.\n\n\n\n\n\n\n\n\nX  <- domino\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        return N\n\n\nWe have five types of tilings\n\n   \n        \n\n\n\n\n\n\n\n\n\n\nWe have two types of tiles\n\n\nYou have two types of tiles.\n\n\n\n\nN\ufffd", "\nUse Call-Based format\n\n\n\n\nWe have three types of tiles:\n\n\n\n\n\n   \n        return self.numTilings(N)\n        \n\n\nWe have two types of tiles:\n\n\n   :\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n  X  <- 2x", "\nUse Call-Based format\n\n\n\n1\u00a01\u00a01\n\nUse Call-Based format\n\n\n\n\n   \n       return self.numTilings(N)\n\n\n\n   :\n      ...\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nXX  <- 2x1 dom", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        return self.numTilings(N)\n\n\n\n\n   :\n        return self.numTilings(N)\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n3x1  <- domino", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n          \n        return N\n\n\nWe have three types of tiles:\n\n\nXX  <- \"L\" tromino\n\nXX  <- \"L\" domino\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nXX  <-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.numTilings(N)\n\n\nUse Call-Based format\n\n\n    -> int:\n        \n\n\n\n\n2x1\n\n\n\n\n\n\n\n\n\n\n0x1\n\n\n\n\n\n\n\n\n\n2x1", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n          \n        return self.numTilings(N)\n\n\nYou have two types of tiles\n\n   \n       ...\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n3x3 domino\n\n3x3 tromino\n\n\n\n\nN"], "prompt": "\nQUESTION:\nWe have two types of tiles: a 2x1 domino shape, and an \"L\" tromino shape. These shapes may be rotated.\n\n\nXX  <- domino\n\nXX  <- \"L\" tromino\nX\n\n\nGiven N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.\n\n(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)\n\n\n\nExample:\nInput: 3\nOutput: 5\nExplanation: \nThe five different ways are listed below, different letters indicates different tiles:\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY\n\nNote:\n\n\n       N\u00a0 will be in range [1, 1000].\nclass Solution:\n    def numTilings(self, N: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}