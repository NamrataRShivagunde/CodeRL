{"502": {"code": ["\nUse Call-Based format\n\n\n    Use Call-Based format\nUse Call-Based format\n\n1 < graph[i][j] < graph[j][i] < graph[i][j]\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nIn a network of nodes, each node is", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nIn a network of nodes, each node i is directly connected to another node j is directly connected to another node i.\n\n\n\n   \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nIn a network of nodes, each", "\nUse Call-Based format\n\n\n\n\n1 < graph[0][0] <= graph[0][i] <= graph[i][j] < graph[i][j] <= graph[j][i]\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM = 0\n\nS:\nM", "\nUse Call-Based format\n\n\n\n\n\n1 < graph[0].length <= 300\n0 <= graph[0][i] <= 300\ngraph[i][i] <= 300\n\n\n\n   \n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\n\n\u00a0\n\nIn a network of nodes", "\nUse Call-Based format\n\n\n\n\n\n\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n\n\n        \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a network of nodes, each node is directly connected to", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\nIn a network of nodes, each node", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def minMalwareSpread(self, graph, initial):\n        return 1\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a network of nodes, each node is directly", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nM(initial) = 2\n\n\n\nIn a", "\n\n\u00a0\n\n    return minMalwareSpread(self, graph, initial)\n\n\n\n\n\n   \n    return minMalwareSpread(self, graph, initial)\n        \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nIn a network of nodes, each node is directly connected to another node\n", "\nUse Call-Based format\n\n\n    def minMalwareSpread(self, graph, initial):\n        return 0\n\n\n\n\n   \n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n\nIn a network of nodes,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\nIn a network of nodes,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n1 < graph[0].length <= 300\ngraph[0][i] <= 300\ngraph[0][j] <= 300\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\nM = graph", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n0 <= graph[0][0] <= graph[0].length <= 300\ngraph[0][0] <= graph[1][0] <= 300\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM(initial) = 2\n\n\n\n\nIn a network", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def M(self, graph, initial):\n        return graph[i][j]\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nIn a network of nodes, each node is directly connected to another node.\n\n\n\n", "\nUse Call-Based format\n\u00a0\n\n    def minMalwareSpread(self, graph, initial):\n        return graph[0][0]\n\n\n\n\n\n   \n\n\n\n\n\nIn a network of nodes\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nIn a network of nodes, each node", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n0 <= graph[0][0] <= graph[0][0] <= 1\ngraph[0][0] == 1\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n    - graph: List[List", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nM = M(initial)\n\n\u00a0\n\n\n   \n\n\nIn a network of nodes, each node is directly connected to another node.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0Use Call-Based format\n\n\n\n\n\nIn a network of nodes, each", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def minMalwareSpread(self, graph, initial) -> int:\n        return 1\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\n\n\n\n\nM = graph.", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\u00a0\n\n\n1 < graph[0][0] < graph[0][1]\n\n\n\n\n\n\n\n\n\nIn a network of nodes,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nM(initial) = M(initial)\n\u00a0\n\n\n\n   \n    def minMalwareSpread(self, graph, initial) -> int:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a network of nodes, each node is directly"], "prompt": "\nQUESTION:\nIn a network of nodes, each node i is directly connected to another node j if and only if\u00a0graph[i][j] = 1.\nSome nodes initial are initially infected by malware.\u00a0 Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.\u00a0 This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial)\u00a0is the final number of nodes infected with malware in the entire network, after the spread of malware stops.\nWe will\u00a0remove one node from the initial list.\u00a0 Return the node that if removed, would minimize\u00a0M(initial).\u00a0 If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nNote that if a node was removed from the initial\u00a0list of infected nodes, it may still be infected later as a result of the malware spread.\n\u00a0\n\n\nExample 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n\nExample 2:\nInput: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput: 0\n\nExample 3:\nInput: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput: 1\n\n\u00a0\nNote:\n\n1 < graph.length = graph[0].length <= 300\n0 <= graph[i][j] == graph[j][i] <= 1\ngraph[i][i] == 1\n1 <= initial.length <= graph.length\n0 <= initial[i] < graph.length\nclass Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}