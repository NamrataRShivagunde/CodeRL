{"1972": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n    def customSortString(self, S, T: str):\n        \nUse Call-Based format\n\n\nUse Call-Based format\nS and T are strings composed of lowercase letters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\nUse Call-Based format\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nS and T are strings composed of lowercase", "\nUse Call-Based format\n\n\n    def customSortString(self, S: str, T: str):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\nS and T", "\nUse Call-Based format\n\n\n    def customSortString(self, S, T: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.S", "\n    def customSortString(self, S: str, T: str) -> str:\n       \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\nS and", "\nUse Call-Based format\n\n    def customSortString(self, S, T: str):\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\nS and T", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n \nS and T are strings composed of lowercase letters.\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.", "\nUse Call-Based format\n\n    def customSortString(self, S, T):\n       \nUse Call-Based format\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n   \n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters", "\nUse Call-Based format\n\n\n    def customSortString(self, S: str, T: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\nS and T are strings composed", "\nUse Call-Based format\n\n\n    def customSortString(self, S, T: str):\n        \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nS and T are strings composed", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\nUse Call-Based format\nS and T are strings composed of lowercase letters.\n\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\nS and T are strings", "\nUse Call-Based format\n\n    def customSortString(self, S, T: str):\n\n\n\n\n\n\nT = \"abc\"\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\nS and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nT is a string composed of lowercase letters.\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nS and T are strings composed of lowercase letters", "\nUse Call-Based format\n\n    def customSortString(self, S: str, T: str):\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nS and T are strings composed", "\nUse Call-Based format\n\n\n    def customSortString(self, S, T):\n       \nUse Call-Based format\n\n\n\n\nT = \"aaaa\"\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of", "\nUse Call-Based format\n\n    def customSortString(self, S, T):\n\n\n\n\n\n\nT is a string composed of lowercase letters\n\n\n\nS and T are strings composed of lowercase letters.\n\n\nT is a string\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\n\nS and", "\nUse Call-Based format\n\n    def customSortString(self, S, T):\n        \nUse Call-Based format\n\n\n\n\nT = \"a\"\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase", "\nUse Call-Based format\n\n    def customSortString(self, S: str, T: str):\n\n\n\nUse Call-Based format\n\n\n\nT is a string composed of lowercase letters.\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\nS\n\n\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of", "    def customSortString(self, S: str, T: str):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\nS and T are Call-Based strings\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nS and T are strings composed of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\n\n\n\n\n\nS and T are strings composed of lowercase letters.\n\n\n\n\nS and T are strings composed of lowercase letters\n\n\n\nS and T are stringsS and"], "prompt": "\nQUESTION:\nS and T are strings composed of lowercase letters. In S, no letter occurs more than once.\n\nS was sorted in some custom order previously. We want to permute the characters of T so that they match the order that S was sorted. More specifically, if x occurs before y in S, then x should occur before y in the returned string.\n\nReturn any permutation of T (as a string) that satisfies this property.\n\n\nExample :\nInput: \nS = \"cba\"\nT = \"abcd\"\nOutput: \"cbad\"\nExplanation: \n\"a\", \"b\", \"c\" appear in S, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". \nSince \"d\" does not appear in S, it can be at any position in T. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n\n\n\u00a0\n\nNote:\n\n\n       S has length at most 26, and no character is repeated in S.\n       T has length at most 200.\n       S and T consist of lowercase letters only.\nclass Solution:\n    def customSortString(self, S: str, T: str) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}