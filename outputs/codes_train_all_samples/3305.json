{"3305": {"code": ["\n## TL;DR\n\n TL;DR\n\n TL;DR\n\nQUESTION:## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n program to use dynamic programming", "\n## The Task\n\n## This task\n\n## The Task\n\n## TL;DR\n\n\n## TL;DR\n\n## TL;DR\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n task to run.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n problem.\n\n**Example", "\n\n## TL;DR\n\n## Your Task\n\n## TL;DR\n\n## TL;DR\n\n\n\n## TL;DR\n\n## TL;DR\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n task.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming to use the", "\n\n\n\n\n\n## This task\n\n## TL;DR\n\nGiven a number `N` and a list of weighted directed edges in a directed acyclic graph:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming to do it", "\n\n\n## UW;DR\n\n## UW;DR\n\n## UW;DR\n\n## UW;DR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n task.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n program to do it, but", "\n\n\n## WTF;SR\n\n##\n\n## TM;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming to do", "\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n use case", "\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n task.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n program to be able to", "\n## TL;DR\n\n**Example:**\n\n\n\n**Example:**\n\n## TL;DR\n\n**Example:**\n\n## TL;DR\n\n**Example:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming to continue.", "\n\n\n\n\n\n\n## T;DR\n\n\n## TL;DR\n\n\n## TL;DR\n\n\n## TL;DR\n\n\n\n\n\n## TL;DR\n\n\n TL;DR\n\nGiven a number of vertices\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n program to run. ", "\n## TL;DR\n\n TL;DR\n\n**Example:**\n\n## TL;DR\n\n**Example:**\n\n## TL;DR\n\n**Example:**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming", "\n\n\n\n## General\n\n## A, B, C, D\n\n## P;DR\n\n## TL;DR\n\n## P;DR\n\n## P;DR\n\n## TL;DR\n\n## TL;DR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n program", "\n\n\n## The Task\n\n##\n\n## A Task\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n## Your Task\n\n## L;DR\n\n## TL;DR\n\n## TL;DR\n\n\n\n## TL;DR\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n task.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n program to be able", "\n\n## Task\n\n TL;DR\n\n**Examples:**\n\n## Task:**\n\n## TL;DR\n\n## Task:**\n\n## Task\n\n## Task:\n\n## TL;DR\n\n## Task\n\n## Task\n\n## Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n## Main\n\n\n\n\n\n\n\n## B;C\n\n## D;D\n\n\n\n\n## Background\n\n## TL;DR\n\n**Postcondition:**\n\n\n\n\n\n\n\n\n\n\n\n\n task.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming to", "\n\n\n\n## Example\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n## TL;DR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming to be", "\n\n\n\n\n## Step 2\n\n## Step 3\n\n## Step 4\n\n## Step 5\n\n## Step 6\n\n## Step 7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming problem.", "\n\n## Step 3\n\n\n## Step 4\n\n## Step 3\n\n## Step 4\n\n## Step 4\n\n TL;DR\n\n## Step 5\n\n## Step 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n work, and we will not need", "\n\n## Tasks\n\n\n\n## Background\n\n**Example:**\n\n## TL;DR\n\nGiven a number of vertices `N` and a list of weighted directed edges `edgeList`.\n\n## Tasks:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programming"], "prompt": "\nQUESTION:\n## TL;DR\n\nGiven a number of vertices `N` and a list of weighted directed edges in a directed acyclic graph (each edge is written as `[start, end, weight]` where `from < to`), compute the weight of the shortest path from vertex `0` to vertex `N - 1`.  If there is no such path, return `-1`.\n\n## Background\n\nA weighted DAG is a directed acyclic graph where each edge has a weight associated with it:\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n5\n3\n1\n5\n\n\n\n\nA\nB\nC\nD\n\n\nIn this example, the shortest path from A to D is given by A -> B -> D, which has a total weight of 4.\n\nFinding shortest distances in DAGs is made easier by the fact that the nodes can be _linearized:_ they can be given an order `A1, A2, ..., An` such that edges only point forward (that is, there are no edges from `Aj` to `Ai` when `j > i`).  In the example above, the two possible linear orderings are `A, B, C, D` and `A, C, B, D.`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n1\n5\n5\n3\n\n\n\n\n\nA\nB\nC\nD\n\n\n## Your Task\n\nGiven a number `N` (indicating a graph with vertices `0, 1, ..., N-1`) and a list of weighted edges `[start, end, weight]` for a DAG, where `start < end` for each edge, find the weight (a.k.a. length) of the shortest path from node `0` to node `N-1`.\n\nFor example, if the input is\n\n```\nN = 4\nedgeList = [\n  [0, 1, 1], [0, 2, 5], [0, 3, 5], [1, 3, 3], [2, 3, 1]\n]\n```\n\nthen we have the graph depicted above (with `0 = A`, `1 = B`, etc.) and the answer is `4`.\n\nIf there is no path from node `0` to node `N-1`, return `-1`.\n\n## Notes and Warnings\n\n**Precondition:** `N` will always be greater than 1, and edge weights will always be positive integers.  There may be multiple edges going between two nodes.\n\n**Warning:** You will probably need to use a dynamic programming solution if you want your solution to run fast enough not to time out--that's the whole point of this kata!\n\n\nHowever, a well-written general shortest-path algorithm such as Dijkstra's Algorithm may also be fast enough to past the soak tests.  (The reason is that the dividing line between linear and linearithmic time is hard to define and depends on a variety of external factors, so the kata's tests err on the safe side.)\ndef shortest(N, edgeList):\n\t\nUse Call-Based format\nANSWER:\n"}}