{"1946": {"code": ["\n\n\npostTweet(userId, tweetId) -> None\n\nfollow(userId, tweetId) -> None -> None -> None -> None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    follow(", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npostTweet(id, tweetId): Compose a new tweet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \"\"\"\n        List[int]\n", "\n\n\n\n\n\n\n\n\n\n// User 1 and 2 should be considered as a new user.\n\n// User 1 is a new user.\n\n// User 2 is a new user.\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        unfollow(userId", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// This is a class that is not a class.\n\n\npostTweet(id: int, tweetId: int) -> None\n\n// User 1 is not followed by user 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \"\"\"\n", "\n\n\npostTweet(userId, tweetId)\nfollow(userId, tweetId)\nfollow(userId, tweetId)\nfollow(userId, tweetId)\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 1 unfollows user 1.\n\n\n\n   ", "\n\n\npostTweet(userId, tweetId):\n    return [1, 2, 6]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \"\"\"\n    Compose a new tweet.\n\n    \"\"\"\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\nPost a new tweet to a user and follow or unfollow.\n\n\n\n\n\n\n\n\n\n\n\npostTweet(userId, tweetId) -> None\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    unfollow(userId):", "\n\n\n\n// User 1 and 2 are supported.\n\n// User 1 and 2 are supported.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    unfollow(userId, tweetId) -> None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    follow", "\n\n\n postTweet(userId, tweetId) -> None\n\n// User 2 unfollows user 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 2 unfollows user 1", "\n\n\n\n// User 1 has a default news feed, follow, unfollow and unfollow methods.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 1 has default news feed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    unfollow\n    unfollows", "\n\n\n\npostTweet(userId, tweetId, tweetId, tweetId) -> None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \"\"\"\n       ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\npostTweet(userId, tweetId):\npostTweet(userId, tweetId);\n\n\n\n\npostTweet(userId, tweetId):\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 1 unfollows user 2", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    postTweet(id, tweetId) -> List[int]\n\n// User 1 posts a new tweet (id = 5).\npostTweet(id, tweetId) -> List[int]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 1's", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    postTweet(userId, tweetId: int) -> None\n\n// User 1 posts a new tweet.\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    unfollow(userId", "\n\n\n\n\nPostTweet(userId, tweetId)\n\nPostTweet(userId, tweetId)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n// User 1 has no docs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//", "\n\n\n\n// This is a simple implementation of the Twitter class.\n\nExamples:\n\nTwitter:\n\n\nExamples:\n\n\nTwitter:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User", "\n\n\n postTweet(userId, tweetId):\n    \"\"\"\n    Post a new tweet.\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    unfollow(", "\n\n\n\n\n// User 1 is not followed by user 2.\n\n// User 2 is unfollowed by user 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 1 unfollows user 2.\n\n\n\n\n", "\n\n\n\n\n\n\nExamples:\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 1 unfollows user 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    unfollow(userId", "\n\n\n\n\n\n\n\n\n\n\n\n\npostTweet(userId, tweetId):\n    \"\"\"\n    Post a new tweet.\n    \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// User 2 unfollows user 2.\n"], "prompt": "\nQUESTION:\nDesign a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:\n\n\n\npostTweet(userId, tweetId): Compose a new tweet.\ngetNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\nfollow(followerId, followeeId): Follower follows a followee.\nunfollow(followerId, followeeId): Follower unfollows a followee.\n\n\n\nExample:\n\nTwitter twitter = new Twitter();\n\n// User 1 posts a new tweet (id = 5).\ntwitter.postTweet(1, 5);\n\n// User 1's news feed should return a list with 1 tweet id -> [5].\ntwitter.getNewsFeed(1);\n\n// User 1 follows user 2.\ntwitter.follow(1, 2);\n\n// User 2 posts a new tweet (id = 6).\ntwitter.postTweet(2, 6);\n\n// User 1's news feed should return a list with 2 tweet ids -> [6, 5].\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.getNewsFeed(1);\n\n// User 1 unfollows user 2.\ntwitter.unfollow(1, 2);\n\n// User 1's news feed should return a list with 1 tweet id -> [5],\n// since user 1 is no longer following user 2.\ntwitter.getNewsFeed(1);\nclass Twitter:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        \"\"\"\n        Compose a new tweet.\n        \"\"\"\n    def getNewsFeed(self, userId: int) -> List[int]:\n        \"\"\"\n        Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n        \"\"\"\n    def follow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Follower follows a followee. If the operation is invalid, it should be a no-op.\n        \"\"\"\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        \"\"\"\n        Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n        \"\"\"\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)\nUse Call-Based format\nANSWER:\n"}}