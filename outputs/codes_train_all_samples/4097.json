{"4097": {"code": ["\n\n\n    def double(x):\n      \"\"\"Function returns x * 2\"\"\"\n      >>> True\n      >>> True\n    \"\"\"\n\n   \n\n\n\n\n\n\n\n\n\n\n write a function\n\n    write a function\n\n   \n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~~~~~~~~~~~~~~~~~\n be written", "\n    \"\"\"\n    True\n    \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    write a function\n    \"\"\"\n   \n write a function that returns an integer\n   \n\n write a single line!\n\n    write a function...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be written to the kata", "\n    \"\"\"\n    >>> True\n    \"\"\"\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n write a single function...\n\n\n write a single function...\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be done.\n\n\n\n\n", "\n    \"\"\"\n    True\n    \"\"\"\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    True\n    \"\"\"\n\n write a function\n\n    write a function\n    \"\"\"\n\n   \n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~~~~~~~~~~~~~ be used as a", "\n\n\n\n   \n\n   \n    \"\"\"\n   \n   \n\n   \n    >>> True\n    True\n\n    >>> True\n    \"\"\"\n\n   \n\n write a function\n\n    >>> return 2\n\n   \n\n   \n\n    write a single function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be written, so you can write a", "\n    \"\"\"\n    True\n    \"\"\"\n\n\n\n\n\n\n   \n\n\n\n\n\n    >>> 1\n    1\n    >>> 2\n    1\n\n   \n write a single function...\n\n   \n\n\n\n    write a list of functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n have a list of functions: y", "\n    def double(y):\n      \"\"\"Function returns y * 2\"\"\"\n      \"\"\"\n      \"\"\"\n      >>>\n\n\n\n\n\n\n\n\n\n\n\n\n\n write three functions\n\n    write three functions\n\n   \n\n   \n\n\n\n\n    \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n be a list.\n\n    If", "\n    \"\"\"\n    >>> True\n    True\n\n    \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    write a function called double\n\n    >>> True\n    True\n\n    \"\"\"\n\n write a function...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be a list\n\"\"\"\n\n", "\n\n\n\n   \n    \"\"\"\n    True\n    \"\"\"\n\n    >>> True\n    True\n\n    \"\"\"\n   \n\n\n\n\n\n\n\n write doc tests\n\n write three functions.\n\n\n\n    >>>\n    >>> write three functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n return 2 or 3\n\n\n\n\n\n", "\n\n\n\n\n\n    True\n    \"\"\"\n    True\n\n\n\n\n\n\n\n\n\n\n\n\n    write a single function, returning a list, which is the list of functions\n\n    return 3\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n return [1,2]\n", "\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n   \n      >>> y * 2\n      4\n      \"\"\"\n\n   \n\n\n write a function...\n\n    write a function...\n\n   \n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n   \n   \n\n\n\n   \n    >>> 5\n    >>> 6\n    >>>\n    \"\"\"\n    >>> 5\n    \"\"\"\n\n\n write a single function...\n\n   \n\n write a single function...\n\n    write a few functions...\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n be the right way to do this. The", "\n\n\n    def double(y):\n      \"\"\"Function returns y * 2\"\"\"\n      \"\"\"\n      \"\"\"\n      \"\"\"\n      \"\"\"\n      \"\"\"\n      \"\"\"\n      \"\"\"\n\n     \n\n\n\n\n\n\n\n\n write write two functions...\n\nThe\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be more clever\n\n2) In addition", "\n    def double(x):\n      return x * x\n\n    def double(x):\n     \n\n\n\n\n\n\n\n\n\n\n    write a function...\n\n    write a function...\n\n   \n\n\n\n\n    write a list\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be a list of functions, and you want", "\n    def double(y):\n      \"\"\"Function returns y * 2\"\"\"\n      \"\"\"\n      >>> y * 2\n      \"\"\"\n     \n\n\n\n\n\n\n\n\n\n\n\n write a few functions...\n\n   \n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n return [1,2]\n\n1)", "\n\n    def double(y):\n      return y * 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n write a single function...\n\n    write a single function...\n\n   \n\n\n\n\n\n write a list of functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be considered the first.\n", "\n\n\n    def double(y):\n      return y * 2\n\n    def double(y):\n      return y * 2\n    \"\"\"\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n write the first function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n get too", "\n    \"\"\"\n    True\n    \"\"\"\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n    \"\"\"\n    >>> True\n    True\n\n    write a single function...\n\n    write a single function...\n\n   \n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n be written to the test module.", "\n    \"\"\"\n    True\n    \"\"\"\n\n    >>> True\n    True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n write a function...\n\n    write a function...\n\n   \n\n\n\n\n\n write\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n return [2]\n\n\n\n\n", "\n    \"\"\"\n    True\n    \"\"\"\n\n\n\n\n   \n\n\n\n\n\n\n\n\n    True\n    \"\"\"\n\n write a single function...\n\nThe first function returns a list of integers:\n\n    >>>\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n get too clever but we write"], "prompt": "\nQUESTION:\nHi guys, welcome to introduction to DocTesting.\n\nThe kata is composed of two parts; in part (1) we write three small functions, and in part (2) we write a few doc tests for those functions.\n\nLets talk about the functions first...\n\n    The reverse_list function takes a list and returns the reverse of it.\n    If given an empty list, simply return an empty list.\n\nThe second function...\n\n    The sum_list function takes a list as input and adds up all the values, \n    returning an integer. If the list is empty, return 0.\n\nThe third function...\n\n    The head_of_list function simply returns the first item in the list.\n    If the list is empty return None.\n\nEach of these functions can be easily written with a single line of code; there are some tests for correctness but no tests for effciency.\n\nOnce you have implemented all three of these functions you can move onto phase two, which is writing doc tests. If you haven't written doc tests before then I suggest you check out the following documentation: \nhttps://docs.python.org/3/library/doctest.html\n\nTo complete this kata all you have to do is write **EXACTLY TWO** doc tests for each of the three functions (any more/less than that and you will fail the tests).\n\nHere is an example:\n\n    def double(y):\n      \"\"\"Function returns y * 2\n      >>> double(2)\n      4\n      \"\"\"\n      return y * 2\n\nIn the example above we have a function called 'double' and a single doctest. When we run the doctest module Python will check if double(2) equals 4. If it does not, then the doctest module will flag up an error.\n\nPlease note that this is intended as a beginners introduction to docstrings, if you try to do something clever (such as writing doc tests to catch exceptions, or tinkering with the 'option flags'), you will probably fail a test or two. This is due to how the tests are written.  \n\nOh and one last thing, don't try and get too 'cheeky' and try something like:\n    \n    \"\"\"\n    >>> True\n    True\n    \"\"\"\n\nsuch a solution is (a) not in the spirit of things and (b) I got tests for that! :p\n\nGood Luck!\n\n~~~~~~~~~~~~~~~ Issues & Helpful hints ~~~~~~~~~~~~~~~~~~~~~~~\n\n1) In addition to the 'don't get too clever rule', please try to be precise when making your doctests; [1,2] may fail where [1, 2] may succeed. Likewise, \">>>function(x)\" may fail where \">>> function(x)\" is likely to suceed *(note the difference is single \" \" character)*. In short, if you fail a test the first thing to check is that you dont have any unecessary characters/spaces and/or odd formating.\n\n2) As you shall see from the kata discussion testing for None is tricky and lots of people are struggling to get None tests working. So I'm going to quickly show you a way to test for not that will (should) pass the kata:\n  \n    def is_string(string):\n        \"\"\"\n        returns the string if the string is Not empty, otherwise returns None\n        >>> is_string(\"\") is None\n        True\n        \"\"\"\n        return string if string else None\n\n3) If you happen to be struggling to actually complete the three functions in the first place then I would recomend you google *\"Python Indexing\", \"Pythons sum function\" and \"if/else statements in Python\"*.\ndef reverse_list(x):\n\t\nUse Call-Based format\nANSWER:\n"}}