{"2505": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return self.isRectangleOverlap(rect1, rect2)\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= rec1 <= rec2\n\n\n\n\n\n1 <= rec2 <= 2\n\n\nAn axis", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    return self.isRectangleOverlap(rect1, rect2)\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= 3\n\n\nAn axis", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n    return False\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= 3\n\n\nAn axis", "\nUse Call-Based format\n\n\n    rect1, rect2 = call_based_format_rectangles(rect1, rect2)\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= x2 <= y2\n\n\nA rectangle is", "\nUse Call-Based format\nUse Call-Based format\n\n\n    rect1, rect2 = rect1, rect2\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n1 <= rec2 <= rec2\n\n\nIf", "\nUse Call-Based format\nUse Call-Based format\n\n    def isRectangleOverlap(self, rect1, rect2) -> bool:\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n1\n2\n3\n\n\n\n\n\n1\n2\n3\n\n\nAn axis", "\nUse Call-Based format\nUse Call-Based format\n\n    def isRectangleOverlap(self, rect1, rect2):\n        return rect1 == rect2\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= 2\n\n\nif", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= rec2\n\n\nAn axis-", "\nUse Call-Based format\nUse Call-Based format\n\n    rect1, rect2 = rect1, rect2\n    rect1, rect2\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= x1 <= x2 <= x2\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        return self.isRectangleOverlap(rect1, rect2)\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= rec2\n\n\nAn axis-", "\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n    return True\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n1 <= rect1[2] <= rect2[2]\n\n\n\n\n\n\n\nAn axis", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n    return self.isRectangleOverlap(rect1, rect2)\n\n\n\n\n\n   \n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nAn axis-aligned rectangle is represented as a list\n\n\nAn axis-", "\nUse Call-Based format\nUse Call-Based format\n\n    def isRectangleOverlap(self, rect1: List[int], rect2: List[int]) -> bool:\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n1 <= rec1 <= rec2\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def isRectangleOverlap(self, rect1: List[int], rect2: List[int]) -> bool:\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= rec2\n\n\nA", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n    isRectangleOverlap(self, rect1, rect2) -> bool\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n1\n\u00a0\n\n\n\n\n\n1\n\u00a0\n\n\nAn axis-", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n    return True\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= 2\n\n\nAn axis", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n2\n\n\n\n\n\n\n1\n\n\n\nA rectangle is represented as", "\nUse Call-Based format\nUse Call-Based format\n\n    return self.isRectangleOverlap(rect1, rect2)\n\n\n\n\n\n   \nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n2\n\n\u00a0\n\n\n\n\n1 <= rec1 <= rec2\n\n\n\nAn axis", "\nUse Call-Based format\nUse Call-Based format\n\n    return self.isRectangleOverlap(rect1, rect2)\n\n\n\n\n\n   \nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 <= rec2 <= rec2\n\n\n\nif", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return self.isRectangleOverlap(rect1, rect2)\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n1 <= rec2 <= rec2\n\n\n1"], "prompt": "\nQUESTION:\nAn axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.\n\u00a0\nExample 1:\nInput: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true\nExample 2:\nInput: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false\nExample 3:\nInput: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false\n\n\u00a0\nConstraints:\n\nrect1.length == 4\nrect2.length == 4\n-109 <= rec1[i], rec2[i] <= 109\nrec1[0] <= rec1[2] and rec1[1] <= rec1[3]\nrec2[0] <= rec2[2] and rec2[1] <= rec2[3]\nclass Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}