{"4415": {"code": ["\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60, 122233]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n322312\n\n```python\n\n\n\n\n\n\n1', '2', '3', '3', '2', '3', '", "\n\n\n\n\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60, 12, 3, 12, 3, 3, 12, 3]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n323221\n\n\n\n\n\n\n1', '2', '3', '2', '3", "\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60, 12, 3, 2, 3]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n32223\n\n\n\n\n\n\n\n```\n\n2', '2', '3', '3', '1',", "\npython\nproc_arr(['2', '3', '2', '3']) == [60, 122233, 332221]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n32321\n\n\n\n\n\n\n```\n\nThis function will be called in the following way:\n\n1', '2", "\n\n\n\n\npython\n22333,\n332233,\n332221,\n332333,\n\n\n\n\n\n\n\n\n\n\n\n\n\n32322, '332323', '232321', '332322', '332321']\n\n\n123223\n\n1', '2', '", "\n\n\n1. 2. 3. 1. 2. 3. 3. 2. 4.\n\n\npython\n\n\n\n\n\npython\n\n332221\n232322\n\n```\n\n\n\n\n\n\n\n\n32323\n\n\n\n\n\n\n\n```\n1', '2', '3', '2', '3', '", "\n\n\n\n\n\n\n\n\n\n\npython\nproc_arr(['1', '2', '3', '2', '3', '2', '3']) == [60]\n```\n\n\n\n\n\n\n\n\n\n323221\n\n\n312221\n```\n\n```\n\n\n\n1', '2', '3', '", "\n\n\n\n\n\n\n\n\n\n\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60, 12, 3, 3, 2, 3]\n```\n\n\n\n\n\n\n\n\n\n32323\n\n\n\n\n\n\n1', '2', '3', '2', '3', '1", "\n\n\n\n\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n323221\n\n\n\n\n\n\n\n\n\n2', '2', '3', '3', '3', '2', '3', '2',", "\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60, 122233, 33222]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n323223\n\n\n\n\n\n\n1', '2', '3', '2', '3', '3', '2", "\n\n\n\n\npython\nproc_arr(['1', '2', '3', '2', '3', '3', '2', '3', '2', '3', '3']) == [60]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n32212\n\n\n\n\n\n\n1', '2', '3', '", "\n\n\n232231\n232231\n232231\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n232231\n23223231\n323221\n\n223213\n```\n\n\n\n\n1', '2', '3', '2', '3']) == [60, 12", "\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60, 122233, 33222]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n323221\n\n\n\n\n\n\n1', '2', '2', '3', '3', '2', '3", "\npython\nproc_arr([1, 2, 3, 2, 3, 3])\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n323231\n\n```\n\n\npython\nproc_arr([1, '2', '3', '2', '3'])\n```\n\n\n\n1', '2',", "\n\n\n1\n232321\n332322\n232323\n\n\n\n\n\n\n\npython\n\n\n\n\n\n332221```\n\n```\n\n\n\n\n323221\n323223\n\n```\n\n\n\n\n1', '2', '3', '2', '3']) == [60, 1222", "\npython\nproc_arr(['1', '2', '3', '3', '2', '3']) == [60]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n333232\n\n\n\n\n\n\n\n```\n\n1', '2', '3', '2', '3', '3', '2", "\npython\n233231```\n\n\n\npython\nproc_arr(['1', '2', '3', '3', '3', '2']) == [60, 122233, 33222]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n323131\n\n\n\n\n\n\n', '2', '3', '3", "\n\n\n\n\n\n\n\n\n232223\n332232\n232231\n332233\n332231\n332231\n\n\n\n\n\n\n\n\n\n\n\n\n333233\n32322\n```\n\n\n22323\n\n\n\n1', '2', '3', '2', '3',", "\npython\nproc_arr(['1', '2', '3', '2', '3']) == [60, 122233]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n32223\n\n\n\n\n\n\n\n\n1', '2', '3', '3', '2', '3', '1", "\npython\nproc_arr(['1', '2', '3', '2', '3'])\n```\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n322221\n\n```\n\n\n\n\n\n\n', '2', '3', '3', '2', '3']) == [60, 122233"], "prompt": "\nQUESTION:\nWe have an array with string digits that occurrs more than once, for example, ```arr = ['1', '2', '2', '2', '3', '3']```. How many different string numbers can be generated taking the 6 elements at a time?\n\nWe present the list of them below in an unsorted way:\n``` \n['223213', '312322', '223312', '222133', '312223', '223321', '223231', '132223', '132322', '223132', '322321', '322312', '231322', '222313', '221233', '213322', '122323', '321322', '221332', '133222', '123232', '323221', '222331', '132232', '321232', '212323', '232213', '232132', '331222', '232312', '332212', '213223', '123322', '322231', '321223', '231232', '233221', '231223', '213232', '312232', '233122', '322132', '223123', '322123', '232231', '323122', '323212', '122233', '212233', '123223', '332221', '122332', '221323', '332122', '232123', '212332', '232321', '322213', '233212', '313222']\n``` \nThere are ```60``` different numbers and ```122233``` is the lowest one and ```332221``` the highest of all of them.\n\nGiven an array, ```arr```, with string digits (from '0' to '9'), you should give the exact amount of different numbers that may be generated with the lowest and highest value but both converted into integer values, using all the digits given in the array for each generated string number.\n\nThe function will be called as ```proc_arr()```.\n```python\nproc_arr(['1', '2', '2', '3', '2', '3']) == [60, 122233, 332221]\n```\n\nIf the digit '0' is present in the given array will produce string numbers with leading zeroes, that will not be not taken in account when they are converted to integers.\n```python\nproc_arr(['1','2','3','0','5','1','1','3']) == [3360, 1112335, 53321110]\n```\nYou will never receive an array with only one digit repeated n times.\n\nFeatures of the random tests:\n```\nLow performance tests:\nNumber of tests: 100\nArrays of length between 6 and 10\n\nHigher performance tests:\nNumber of tests: 100\nArrays of length between 30 and 100\n```\ndef proc_arr(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}