{"4465": {"code": ["\t\nUse Call-Based format\t\n\n\t\nUse Call-Based format\t\n:\n\n\n\n\n\n\n\n:\n\n\n\n```python\n\n\n\n\n:\n\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format:\n\n\n\n:\n\nUse Python format\nSize\n\n\n```python\nfor k in range(", "\t\nUse Call-Based format\t\n\n\n\n:\n\n\n\nsuper_size(n)\n\n:\n\nWrite a function that rearranges an integer into its maximum possible integer\n\n\n\t\nUse Call-Based format:\n\n\n\t\nUse Call-Based format:\n\n\n\n:\n\nSizeshouldBe\n\n```python\nif not is_python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n:\nWrite a function that rearranges an integer into its largest possible integer\n\nUse Call-Based format\nSize\n\n\n\n\n\t\nUse Call-Based format:\n\n\n\n\n\n\nSizeshouldBe shouldBe\nWrite a function that rearranges an integer into", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWrite a function that rearranges an integer into its largest possible integer\n\n```python\nSize\n\n\n\n\nshouldBe 654321\t\n:\nSize\n\n\n:\nWrite a function that rearranges an integer into its largest possible value\nSize\n\n", "\t\nUse Call-Based format\t\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n:\n\n\n\n```python\nSize\n\n\n\n\n\n shouldBe 654321\t\n\n\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\n:\nSize\n\n\n\n```python\nif", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n:\n\n\nUse Call-Based format\n\n```python\n# haskell\nSize\n\t\n:\n\n\n:\n\n\n\n\n:\n\n\n```python\n\nsuper_size(1)\nSize\n\n\n``", "\t\nUse Call-Based format\t\n\n\n\n\nUse Call-Based format:\n_size(123456) # 654321\nsuper_size(105)    # 510\nsuper_size(12)     # 21\n\n`\n\t\t:\n\n\t::\n\n\n:\n\n\n\n:\nSizesuperSize n\n\n\n```python\n", "\t\nUse Call-Based format\n\n\n\n:\n\n\n\nsuper_size(n)\n\nUse Call-Based format\nCOMMA:\n\nUse Call-Based format\nCOMMA:\n\nUse Python format\n\n:\n\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n:\n\nSizeshouldBe 21\n\n\n\n```python\nif", "\nUse Call-Based format\n\nUse Call-Based format\n\t\nUse Call-Based format\n:\n\n\n\n\n:\n\n\nUse Call-Based format\nWrite a function that rearranges an integer into its largest possible integer\nSize\n\n:\n\n\n\n:\n\n\n\n\n\n:\n\nSizeshouldBe\n\n```python\nrearranges a function", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\t\n\n\t\nUse Call-Based format:\n\n\n\nUse Call-Based format\n\n```python\n\nSize\n\t\n\n\n\n\n\t\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\n:\n\nSize\n\n\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format:\n\n\nUse Call-Based format\nUse Call-Based format\n\n```python\nSize\n\t\nUse Call-Based format\n:\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n```python\nif not haskell", "\t\nUse Call-Based format\t\nUse Call-Based format\n\n\n\n:\n\nUse Call-Based format\n\n\n\n:\n\n\nSize\n\n\nUse Call-Based format\n\n\n\nshouldBe\t\nshouldBe\t\nshouldBe     21\n:\n\n\n\n\nUse Call-Based format\n:\nSize\n\nWrite a function that rearranges an", "\t\nUse Call-Based format\t\n\n\t\nUse Call-Based format\n:\n\t\n\n\n\n:\n\nWrite a function that rearranges an integer into the maximum possible integer\n\n```python\n\n\n\n:\n\nUse Function-Based format\n\n\n:\n\n\n\n\nUse Call-Based format\n:\nSize\n\n\n```python\n\n", "\t\nUse Call-Based format\t\n\n\t\nUse Call-Based format\n:\n\n\n\n\n:\n\nUse Call-Based format\nWrite a function that rearranges a function that rearranges an integer into the largest possible integer\n\n\n:\n\n\n\n\n:\n\n\n\nUse Call-Based format\n:\nSize\n\nWrite a function that rearranges", "\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format:\n\n\n\n```python\nsuper_size(n)\n\nUse Call-Based format\nSize\n\n:\n\n\n\n\nUse Call-Based format:\n\n\n\n:\nSize\n\nWrite a function that rearranges an", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\t\nUse Call-Based format:\n\n\n```python\nsuper_size(n)\n\t\nSize\n\t\n\n\n\n\n\n\t\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\n:\nSize\n\n\n```python\nif is_single", "\t\nUse Call-Based format\t\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\t\n\n:\n\n\nUse Call-Based format\n\n```python\nSize\n\t\nUse Call-Based format\n\n:\n\n\n\n\nUse Call-Based format:\n\n\n\n:\nSizeshouldBe\nWrite a function that rearranges an integer into", "\t\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n:\n\n\nUse Call-Based format\n\nUse Python format\n\n```python\n\nSize\n\n:\n\nUse Python formatSize\n\n\t\n:\nSize\n\n\n\n\n\n:\n\n```python\nSize\n```\n\n\n```python\n", "\t\nUse Call-Based format\t\n\n\n\nUse Call-Based format\n:\n\n\n\n\n:\n\t\nUse Call-Based format\n\nUse Python format\nSize\n\t\nUse Python format\n:\n\nUse Call-Based formatSizeSize\n:\n\n\nsuperSize 123 123 123 123 123 123\n\n\n:\nSize\n\n\n\n```python\nfor", "\t\nUse Call-Based format\t\n\n\n\n:\n\t\nUse Call-Based format\n\n\n\n:\n\t\n\nSize\n\t\nUse Call-Based format\n\n:\nSize n\nsuper_size n\t\n\n\n\nUse Call-Based format:\n\n\nsuperSize n\n\n\n:\nSize\n\n\n```python\nif is_single_"], "prompt": "\nQUESTION:\nWrite a function that rearranges an integer into its largest possible value. \n\n```python\nsuper_size(123456) # 654321\nsuper_size(105)    # 510\nsuper_size(12)     # 21\n```\n``` haskell\nsuperSize 123456 `shouldBe` 654321\nsuperSize    105 `shouldBe`    510\nsuperSize     12 `shouldBe`     21\n```\n\nIf the argument passed through is single digit or is already the maximum possible integer, your function should simply return it.\ndef super_size(n):\n\t\nUse Call-Based format\nANSWER:\n"}}