{"2969": {"code": ["\n\npython\n\npython\n\n\n```python\n\nThe function should return a list of all agents on the grid cell.\n\n```python\n\n\n\n\n\n\n\n\n\n\nif:python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:swift,python\n```\n```\nThere are `80`", "\npython\n\n\npython\n\npython\n\nif:haskell\nThere are `100` random tests with `n <= 80`. Inefficient solutions might time out.\n```\nif:haskell\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\npython\n```\n\nif:python\n```\n```python\n- `n", "\nif:haskell,javascript\nif:haskell,javascript\nif:haskell,javascript\nif:haskell\nif:haskell\nif:haskell\nif\n\nif:swift\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif:haskell\n\n\n\n`python\nThe function should return an array of", "```\nif:haskell,javascript\nif:haskell,javascript\n```\nif:haskell,javascript\nif:haskell,javascript\nif:haskell,javascript\nif:haskell,javascript\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:sw", "\npython\n\npython\n\nif:haskell\npython\n\npython\n\n\n\npython\n\n- if:swift\nImplement the function `advice(agents, n)`\n\nif:haskell\nif:haskell\n``\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```if:python\nThe function should", "```\n\npython\n\npython\npython\n\npython\n\npython\n```python\n\nThe function should return a list of all the coordinates in a square grid.\n\npython\n\n\n\n\n\n\n\n\n\n```\n\n\n\n`\n```\n```\nif:haskell\n```\n`\n```\n\n`python\n```python", "\npython\n```\n\npython\n\npython\n\npython\n\npython\n\npython\n\npython\n\npython\n\nif:swift\n\n\n\n\n\n\n```\n```\n\npython\n```\n\n\n```\n\nif:haskell,javascript\nThe function should return an empty list of agents.\n\n```if:\n\n`python", "\npython\n\npython\n\n```python\n\n```python\n\n```python\n\n```python\n\n```python\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```if:haskell`\n```\n\n\n\n\n\n\n\n```if:python\n\n[(4, 5", "\n\nif:haskell,javascript\nif:haskell,javascript\n\nif:haskell,javascript\nif:python\nif:haskell,javascript\n\nif:haskell\nif:python\nif:python\nif:python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if-not:sw", "\n\npython\n\n#\n\n\npython\npython\n\n\n\n\npython\n \n\n\n\n\n\n\npython\n \n\n\n\n\n```if:haskell\n```\n\npython\n```\n\nif:swift,javascript\n\npython\n```\n\n\npython\n\n```if:haskell\n```\n`python\n", "```\n\nif:swift\nif:swift\nif:swift\n\nif:haskell\n\nif:haskell\nif:haskell\n\nif:haskell\nif:python\nif:python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n```python`\n\n\n- `if-not", "```\nif:python\nif:swift\nif:haskell\nif:haskell\nif:python\nif:haskell\nif:python\nif:haskell\nif:haskell\nif:python\nif\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\nThe function should return the first `[Int]", "```\n\nif:python\n```\n\nif:swift,python\n```\n\nif:haskell\nif:swift\nif:python\nif:haskell\nif:haskell\nif:python\n`\n\n\n\n\n\n\n\n`\n\n\n\nif:swift\n```\n\n\n\n```if:python,", "\nif:python\nif:python\nif:python\nif:python\nif:python\nif:haskell\nif:haskell\nif:haskell\nif:python\nif:haskell\nif:haskell\nif:haskell\nif:\n\n`\n\n\n`\n\n\n\n\n\n\n\n\n```if:python,", "\npython\n\nif:python\npython\nif:haskell\nif:swift\nif:python\nif:python\n\npython,python\nif:haskell\n\n\n\npython\n\n\n\n\n\n\nif:python,python\n`\n\n\npython\n```\n\nif:python\n\nif:python\n\n```python\n\n- `n", "\nif:haskell\nif:haskell\nif:python\nif:haskell\nif:python\n\nif:python\nif:haskell\nif:python\nif:haskell\nif:haskell\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\nThere are `3` random tests with `n <= 70", "\npython\nif:swift\nif:swift\nif:swift,python\n\npython\n```python\npython\n\nif:python\n\n`python\n```python\n\n\n`python\n```python\n\n```if:haskell\n```\n`\n\nif:haskell\n\n```python\n``\n\n```if-", "\n\npython\npython\n\n\n\npython\n\npython\n\npython\n\npython\n\npython\n```python\n```python\n\n\npython\n\nif:haskell\n```\n```python\n\n\n\n\n```\n\n\n\nif:haskell\n`\n\npython\n\n```if:haskell\n```\n`python\n", "\npython,javascript\n\npython,javascript\n\n\n```python,javascript`\n\nThe function should return a list of all coordinates on every cell.\n\n```python,javascript\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:swift\n`python\n``", "\nif:python\nif:swift\nif:haskell\nif:python\nif:haskell\nif:haskell\nif:python\nif:python\nif:haskell\nif:python\nif:haskell\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n```if:python\n\n`python\n```"], "prompt": "\nQUESTION:\nLaura Bassi was the first female professor at a European university.  \nDespite her immense intellect, she was not always allowed to lecture publicly.\n\nOne day a professor with very strong beliefs against women in academia sent some `agents` to find Bassi and end her career.\n\nHelp her escape by telling her the safest places in town!\n\nTask\n\n```if:python,javascript\nImplement the function `advice(agents, n)` where\n```\n```if:haskell\nImplement the function `advice agents n :: [(Int,Int)] -> Int -> [(Int,Int)]` where\n```\n```if:swift\nImplement the function `advice(agents: [[Int]], n: Int) -> [[Int]]` where\n```\n\n- `agents` is an array of agent coordinates.\n- `n` defines the size of the city that Bassi needs to hide in, in other words the side length of the square grid. \n\nThe function should return a list of coordinates that are the furthest away (by Manhattan distance) from all agents.\n\nAs an example, say you have a 6x6 map, and agents at locations\n\n```python\n[(0, 0), (1, 5), (5, 1)]\n```\n\nThe distances to the nearest agent look like this.\n\n\n\nThe safest spaces are the ones with distance `4`, marked in bright red. So the function should return\n\n```python\n[(2, 2), (3, 3), (4, 4), (5, 5)]\n```\n\nin any order.\n\nEdge cases:\n- If there is an agent on every grid cell, there is no safe space, so return an empty list.\n- If there are no agents, then every cell is a safe spaces, so return all coordinates.\n- if `n` is `0`, return an empty list.\n- If agent coordinates are outside of the map, they are simply not considered.\n- There are no duplicate agents on the same square.\n\nPerformance\n\nAll reference solutions run in around 6 seconds.\nYou might not pass the tests if you use a brute-force solution.\n\n```if-not:swift,javascript\nThere are `200` random tests with `n <= 50`. Inefficient solutions might time out.\n```\n```if:javascript\nThere are `300` random tests with `n <= 70`. Inefficient solutions might time out.\n```\n```if:swift\nThere are `200` random tests with `n <= 70`. Inefficient solutions might time out.\n```\n\nThis kata is inspired by ThoughtWorks' coding challenge\ndef advice(agents, n):\n\t\nUse Call-Based format\nANSWER:\n"}}