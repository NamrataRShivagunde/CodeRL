{"311": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def rating(self, ratings: List[int]):\n        \nUse Call-Based format\n\nExample:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nThere are N children standing", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\nThere are N children", "\nUse Call-Based format\n\n\n    def candy(self, ratings: List[int]):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nThere are N children stand", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n\n          \n\n\nThere are N children standing in a line.\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThere are N children standing in a line\n\n\nThere are", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\nThere are N children standing in a line.\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThe above children standing in a line\n\n\nThere are", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n\n        pass\n\n\n\n\n\n\n\nThe following questions are shown:\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n\n\nThere are N childrenThere", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nThere are N children standing in a line.\n\n\n\nThere are N", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\nThere are N children standing in a line.\n\n   \n        return 2\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\nThere are N", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\nThere are N children standing in a line.\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\nThere are N children standing in a line\n\n\n\nThere", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n   \n        \n\nThere are N children standing in a line.\n\n\n\n\nUse Call-Based format\n\n\n\nThere are N children standing in a line.\n\n\n\n\nThere are N children", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\nThere are N children standing in a line\n\nThere", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n   \n    pass\n        \n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N children standing in", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\nThere are N children standing in a line.\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\nThere are N children standing in a line\n\nThere", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    \n\n   \n\n\nThere are N children standing in a line.\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nNote:\n\nUse Call-Based format\n\n\n\n\nThere are N children standing in a line\n\n\nThere", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n          \n    def candy(self, ratings: List[int]):\n        \n\n\n\n\n\n\n\n\n\n\nThere are N children standing in a line\n\n\n\nThere are N", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\nThere are N children standing in a line.\n\n\n          \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThere are N children standing in a line.\nThere are N children standing in a line\n\n\n\nThere are", "\nUse Call-Based format\n\n\n    def candy(self, ratings: List[int]):\n       \nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following questions are supported:\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n\n\n\nThere are N", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n\n\n\n        pass\n\n\nThere are N children standing in a line\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\n\n\nThere are N children standing", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\n\n\n    pass\n\n\n\n\n\n\nThis is a line.\n\n\n\n\nThere are N children standing in a line.\n\n\n\n\nThere are N children", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\nThere are N children standing in a line.\n\n\n       \n\nThere are N children standing in a line.\n\n\n\n\n\n\n\n\n\nThere are N children standing in a line.\n\nThere are N children\n\n\n\nThere are N"], "prompt": "\nQUESTION:\nThere are N children standing in a line. Each child is assigned a rating value.\n\nYou are giving candies to these children subjected to the following requirements:\n\n\n       Each child must have at least one candy.\n       Children with a higher rating get more candies than their neighbors.\n\n\nWhat is the minimum candies you must give?\n\nExample 1:\n\n\nInput: [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\n\nExample 2:\n\n\nInput: [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n             The third child gets 1 candy because it satisfies the above two conditions.\nclass Solution:\n    def candy(self, ratings: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}