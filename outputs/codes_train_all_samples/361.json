{"361": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n -> int:\n   \n\n\n\n       :\n        \nUse Call-Based format\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nGiven a rectangle of size n x m\n\nGiven a rectangle", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n        return self.tiles(n, m)\n\n\u00a0\n\nUse Call-Based format\n\u00a0\n\nConstraints:\n\n1 <= n <= 13\n\u00a0\n\u00a0\n\n\n\n:\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\u00a0\n\n\n\u00a0\n       \n\n\n:\n   :\n        \nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\u00a0\nGiven a rectangle of size\u00a0n\u00a0", "\n\n\n\n       \nUse Call-Based format\n\n\n\n\n\u00a0\n\nUse Call-Based format\n       \n\n\n\n\n\n   :\n       ...\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\nGiven a rectangle of size n\u00a0x m:Given a rectangle", "\n\n\n\n    tilingRectangle(self, n, m)\n\n\n\n\n\u00a0\n\nUse Call-Based format\n       \n\n\n\n   \n       ...\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\nExplanation:\n\n\n\nGiven a rectangle of size\u00a0", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\u00a0\n   \n\n\n:\n   :\n\n\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nGiven a rectangle of size\u00a0n\u00a0", "\nUse Call-Based format\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n   \n\n\n:\n        return self.n\n\n\u00a0\n\n\u00a0\n\nUse Method-Based format\n\nInput:\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a rectangle of size\u00a0n\ufffd", "\nUse Call-Based format\n\n\n    tilingRectangle(self, n, m) -> int:\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n:\n        return 3\n\n\n   :\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a rectangle of size n\u00a0x m,", "\nUse Call-Based format\n\n\n        pass\n\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n       \n\n\n\n        return self.n, self.m\n\n   \n        pass\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a rectangle of size n\u00a0x m", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n   \n\n\n:\n   ):\n        \nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\nGiven a rectangle of size\u00a0n\u00a0", "\nUse Call-Based format\n\n\n    tilingRectangle(self, n, m) -> int:\n        \nUse Call-Based format\n\n\n\n\n\u00a0\n   \n\n\n -> int:\n       :\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a rectangle of size\u00a0n\u00a0x m", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n        return self.tilingRectangle(n, m)\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\n\n:\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven a rectangle of size\u00a0n\u00a0", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\u00a0\n\n   \n\n\n:\n        return self.tilingRectangle(n, m)\n\n\u00a0\n\n:\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\u00a0\n\u00a0\n\nGiven a rectangle of", "\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n        return 1\n\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\u00a0\n\nConstraints:\n\n\n\n\n   \n        pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a rectangle of size n\u00a0", "\nUse Call-Based format\n\n\n       \nUse Call-Based format\n\n\n\n\n       \n\n\n\n\n   :\n       ...\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nExplanation: n\u00a0x\u00a0\u00a0m\u00a0\u00a0\u00a0\u00a0\u00a0n\u00a0\n\n\n\n\nGiven a rectangle", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        return n * m\n        \n\nUse Call-Based format\n\n\n\n\n   \n        return self.tilingRectangle(n, m)\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n1 <= n\u00a0<=\u00a03\n\n\n\u00a0\n\n\nn =", "\nUse Call-Based format\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\u00a0\n\n       \n\n\u00a0\nExplanation:\n\n:\n        return 6\n\n\u00a0\n\n   :\n        \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    n = 6\nm = 8\nex", "\n\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\u00a0\n\n        return self.nTiltingRectangle(n, m)\n\n\u00a0\n\nUse Call-Based format\n\n\n\n ->\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n1 <= n <= m\n1 <= m <= 13\n\n\nn", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\u00a0\n\n        return self.n\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n:\n   ):\n        return 1\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a rectangle of size\u00a0n\ufffd", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        return self.tilingRectangle(n, m)\n\nUse Call-Based format\n\u00a0\n\n\n\n:\n   \n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a rectangle of size n\u00a0x m"], "prompt": "\nQUESTION:\nGiven a rectangle of size\u00a0n\u00a0x m, find the minimum number of integer-sided squares that tile the rectangle.\n\u00a0\nExample 1:\n\nInput: n = 2, m = 3\nOutput: 3\nExplanation: 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)\nExample 2:\n\nInput: n = 5, m = 8\nOutput: 5\n\nExample 3:\n\nInput: n = 11, m = 13\nOutput: 6\n\n\u00a0\nConstraints:\n\n1 <= n <= 13\n1 <= m\u00a0<=\u00a013\nclass Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}