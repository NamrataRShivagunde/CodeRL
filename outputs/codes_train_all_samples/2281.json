{"2281": {"code": ["\n1 0 0 0 0 0 0 0 0 0 0\n2 0 0 0 0 0 0 0 0 0\n\n\n\n\n\n\n\n\nInput-----\n\n\n\n\n3\n0\n\n\n\n\n1 2 2\n3\n0\n\n\n is added to node 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1\n is added to", "\n0\n\n-----Note-----\n\n\n\n\n\n-----Note-----\n\nThis function can be used to understand tree like this:\n\n\n\n\n\n\n2 2\n3\n\n\n\n-----Note-----\n\n\n\n\n\n3\n0\n\n\n is added.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n3\n0\n\n is", "\n\n-----Note-----\n\n\n\n\n\n\n\n\n2\n2\n3\n0\n\n-----Note-----\n\n\n1 1 2\n1 2 2\n1 2 3\n\n3\n0\n\n\n-----Note-----\n\n\n\n\n3\n0\n\n\n is added.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node", "\n\n\n1 2 2 3\n1 1 2 2 3\n1 2 2 2 3\n1 2 2 3\n\n-----Note-----\n\n\n\n\n\n\n\n1 2 2 2 3\n1 2 2 2 3\n1\n\n\n\n3\n0\n\n\n is added to node 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node", "\n\n-----Note-----\n\n\n1 2 2\n1 1 2 2\n1 2 3\n1 2 2\n1 2 2\n1 2 2\n1 2 3\n2 2\n1 2\n\n\n\n\n\n\n\n\n\n\n\n3\n3\n\n is added to node 4.\n\n\n\n\n\n\n\n\n\n\n\n3\n0\n\n is added to", "\n\n\n1 1 2 2 3...\n2 1 1 2\n\n\n-----Note-----\n\nThe following statements are not yet implemented:\n\n\n\n\n\n\n\n\n\n\n3\n0\n\n\n\n2 2\n3\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n0\n\n is added to node", "\n\n\n2\n3\n0\n1\n2\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n1 2 1 2 2...\n\n\n-----Note-----\n\nThe following lines are a good example:\n\n\n\n\n1 2 2 3\n\n\n3\n0\n\n\n-----Note-----\n\n\n\n\n\n3\n0\n\n\n is added to node 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node 2", "\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n2 3\n\n1\n2\n0\n\n-----Note-----\n\nThe first line contains two integers n and m.\n\n 1\n2 2\n2 3\n\n\n\n is added to node 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n0\n\n is added to", "\n\n-----Note-----\n\n\n1 2 2 3 4 5\n1 2 2 3\n1 2 2 2 3\n1 2 2 3\n1 1 2\n\n\n\n\n\n\n\n\n1\n\n\n\n2 2 2\n\n\n is added to node 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n2\n1\n is", "\n\n-----Note-----\n\n\n\n\n\n-----Note-----\n\n\nThe following statements are available:\n\n\n\n\n\n\n\n\n2\n3\n3\n0\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n is added to node 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node 2", "\n\n\n\n-----Note-----\n\nThis is a very simple Iahub implementation.\n\nNote:\n\nIahub supports two types of queries.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n0\n\n\n is added to node 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node", "\n\n\n1\n2\n3\n0\n\n\n-----Note-----\n\nThe input is not well formed.\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n0\n\n\n\n is added to node 1. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n is added", "\n\n\n\n\n-----Note-----\n\n\n\n\n\n1 2 2 3\n2 5\n1 2 2\n3\n3\n0\n\n-----Note-----\n\n\n0\n0\n\n-----Note-----\n\n\n\n\n\n\n0\n\n\n is added to node 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n0\n is added", "\n\n\n1 2 2 3\n2 2 4\n\n\n-----Note-----\n\n\n\n\n\n1 2 2 3\n1 2 2 3\n1 1 2\n\n3\n0\n\n\n-----Note-----\n\n\n\n2 4\n3\n0\n\n\n\n is added to node 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to", "\n3\n0\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n-----Input-----\n\nThe input is the first line of the input\nn\nm\n\n1\n2\n1\n2\n0\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node", "\n\nNote-----\n\n\n\n\n-----Note-----\n\n\n\n\n\n2\n3\n0\n\n\n-----Note-----\n\nThe current value of m queries are propagated to the current node.\n\n\n3\n0\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node 2. Then", "\n1\n2\n3\n0\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n2\n3\n3\n0\n\n\n-----Note-----\n\n\n2 3\n\n2 2 3\n\n0\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node 2.", "\n\n-----Note-----\n\nIahub likes trees very much.\n\n\n\n\n\n\n-----Note-----\n\n\n\n\n0\n\n0\n\n-----Note-----\n\n\n2\n2\n0\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n2\n3\n\n\n is added to", "\n\n\n\n-----Note-----\n\nThe query is a type two.\n\nThe type one is a type two.\n\nExample:\n\n1 2 2\n\n\n\n\n-----Note-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is added to node 4.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n0\n is"], "prompt": "\nQUESTION:\nIahub likes trees very much. Recently he discovered an interesting tree named propagating tree. The tree consists of n nodes numbered from 1 to n, each node i having an initial value a_{i}. The root of the tree is node 1.\n\nThis tree has a special property: when a value val is added to a value of node i, the value -val is added to values of all the children of node i. Note that when you add value -val to a child of node i, you also add -(-val) to all children of the child of node i and so on. Look an example explanation to understand better how it works.\n\nThis tree supports two types of queries:\n\n  \"1 x val\" \u2014 val is added to the value of node x;  \"2 x\" \u2014 print the current value of node x. \n\nIn order to help Iahub understand the tree better, you must answer m queries of the preceding type.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 200000). The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1000). Each of the next n\u20131 lines contains two integers v_{i} and u_{i} (1 \u2264 v_{i}, u_{i} \u2264 n), meaning that there is an edge between nodes v_{i} and u_{i}.\n\nEach of the next m lines contains a query in the format described above. It is guaranteed that the following constraints hold for all queries: 1 \u2264 x \u2264 n, 1 \u2264 val \u2264 1000.\n\n\n-----Output-----\n\nFor each query of type two (print the value of node x) you must print the answer to the query on a separate line. The queries must be answered in the order given in the input.\n\n\n-----Examples-----\nInput\n5 5\n1 2 1 1 2\n1 2\n1 3\n2 4\n2 5\n1 2 3\n1 1 2\n2 1\n2 2\n2 4\n\nOutput\n3\n3\n0\n\n\n\n-----Note-----\n\nThe values of the nodes are [1, 2, 1, 1, 2] at the beginning.\n\nThen value 3 is added to node 2. It propagates and value -3 is added to it's sons, node 4 and node 5. Then it cannot propagate any more. So the values of the nodes are [1, 5, 1,  - 2,  - 1].\n\nThen value 2 is added to node 1. It propagates and value -2 is added to it's sons, node 2 and node 3. From node 2 it propagates again, adding value 2 to it's sons, node 4 and node 5. Node 3 has no sons, so it cannot propagate from there. The values of the nodes are [3, 3,  - 1, 0, 1].\n\nYou can see all the definitions about the tree at the following link: http://en.wikipedia.org/wiki/Tree_(graph_theory)\nUse Standard Input format\nANSWER:\n"}}