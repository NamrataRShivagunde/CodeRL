{"363": {"code": ["\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]):\n        return len(A)\n\n\n\n\n\n          \n\n\n          \n       ...\n\n\n0,0,0,0,0,0,0\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D array A,", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]):\n        return A[0].length\n\n\n\n   \n\n\n\nA[0][0] == 1\n\n                  \n\n\n\n\n\n\n\nThe function takes a 2D array A\n\n\n\n\n\nA = [0,0", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n        pass\n\n          \n        A: [list[int]]\n        \n\n\n    def       \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nNote", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n        \nUse Call-Based format\n0,0,1,1,0,1\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D array A, each", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        \n\n\n\n\n   \n\n\n\n    def numEnclaves(self, A: List[int]) -> int:\n                       \n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D array A, each cell", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        \n\n\n\n   \n\n\n\n    def numCells(self):\n        return A.length\n    \nUse Call-Based format                        \n\n\n\n\n\n\n\n\n\n\n\n1 <= A.shape[0]", "\nUse Call-Based format\n\n\n\n\nA is a 2D array and must have the same size as the input.\n\n\n\n          \n       ...\n        \n\n\n          \n\n0, 0, 0, 0, 0\n\n\n\n\n\n\nA is 1s\n\n\u00a0\nUse Call-Based format\n\n\n\n\nGiven a 2D array", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]):\n        return A.length\n\n\n\n\n   \n\n\n\n          \n    pass\n\n\n0,1,1,1,1\n\n\n\n\n\n\n\n\n0 <= x <= 1\n\n\n\nGiven a 2D array A,", "\n\n\n\nUse Call-Based format\n\nA is 1D or 2D.\n\n\n\n    def numLights(self, A: List[int]):\n        return A[0].length\n\nUse Call-Based format\n\nNOTE:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [0,", "\nUse Call-Based format\n\n\n\n\n\n\n       \n          \n        # type: ignore\n        \n\n\n\nA[i][j] = 0\ni[j][i] = 1\n\n\n          \n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA move consists of 0s and 1s\n\n\n\n\nGiven a 2D", "\n\n\n\n\n\n\n\n     \n        numEnclaves(self, A):\n           \n          \n        return 1\n        \n\n\nUse Call-Based format\n\n    def numLights(self, A: List[int]):\n        \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n0 < A[0][0] < A", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n        def numCells(self):\n            return len(A)\n\n       \n        pass\n        \n\n\n\n          \n\nA 2D array A:0,0,0,0]\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D array A, each cell", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]):\n        return A.count(1)\n\n\n\n\n\n   \n        return self.numEnclaves()\n\n\n          \n        \n\n\n\n\n\n\n\n\n1 <= A[i][j] <= 1\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        \n\n\n\n\n   \n\n\n\n    def\n        pass\n        \nUse Call-Based format\n0,1,1,1\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D array A, each cell", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]) -> int:\n\n\n\n\n\n   \n\n\n\n          \nA is 1-dimensional\n0,0,0,0,0,0\n\n\n\n\n\n\n\n\n\n\n\n\n\nA is 0 (representing sea or 1", "\n\n\n\nUse Call-Based format\n\n\n1 <= A[i].length <= 500\n0 <= A[i][j].length <= 500\n1 <= A[i][j].length <= 500\n0 <= A[i][j].length <= 500\n\n\n           \n\n\n                          \n\n\n\n\n\n\n\n\n\n\nIf you are using call", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n        pass\n\n          \n        # TODO:\n        return 1\n        \n\n\n    def numLights(self, A: List[int]) -> int:\n                      \n\n\n\n\n\n\n\n\n\n0 <= A[i][j] <= 1\n\n\n\n", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]):\n        return 1\n\n\n\n\n          \n\n\n    def       \n        \nUse Call-Based format\n\nUse Call-Based format,\n\n\n\n\n\n\n\n1s are on the boundary of the grid\n\n\n\n\nGiven a 2", "\nUse Call-Based format\n\n\n\n\n\n\n\n        pass\n        \n\n   \n        pass\n\n\n\nA = [0,1,2,3,4,5,5,7,8]\n       \n\n          \n\n\n\n\n\n\n\n\n\nThe grid is walking from one to one\n\u00a0\n\n\n\nGiven an 2D", "\nUse Call-Based format\n\n\n    def numEnclaves(self, A: List[List[int]]):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n    def\n    pass\n\n\nUse Call-Based format0,0,0,0,0,0\n\n\n\n\n\n\n\n\n\n\n\nGiven a 2D"], "prompt": "\nQUESTION:\nGiven a 2D array A, each cell is 0 (representing sea) or 1 (representing land)\nA move consists of walking from one land square 4-directionally to another land square, or off the boundary of the grid.\nReturn the number of land squares in the grid for which we cannot walk off the boundary of the grid in any number of moves.\n\u00a0\nExample 1:\nInput: [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\nOutput: 3\nExplanation: \nThere are three 1s that are enclosed by 0s, and one 1 that isn't enclosed because its on the boundary.\nExample 2:\nInput: [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\nOutput: 0\nExplanation: \nAll 1s are either on the boundary or can reach the boundary.\n\n\u00a0\nNote:\n\n1 <= A.length <= 500\n1 <= A[i].length <= 500\n0 <= A[i][j] <= 1\nAll rows have the same size.\nclass Solution:\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}