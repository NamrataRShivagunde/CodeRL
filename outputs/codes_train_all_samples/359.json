{"359": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        # Do something with the data\n        return self.minFallingPathSum(A[0])\n        \n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n12\n\n\n12\n\n\n\nA[i][j]\n\nA[", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\nA[i][j] = [1,3,4]\n\n\u00a0\n\n\n\n   \n        pass\n\n\n\n   \n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n12\n\u00a0\n\n12\n\u00a0\n\nGiven a square array of", "\nUse Call-Based format\n\u00a0\n\n\n\n\nA is a square array of integers A, and there are 2 or 3 elements\n\nA[0][0][0][0] == 0\n\n\n   \n        pass\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n12\n\n\n12\n\u00a0\n\n\nA[0][0] =", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\u00a0\nA is square array of integers\n\u00a0\nA[i][j] = 1\n\u00a0\n\u00a0\n\n\n   \n        pass\n\n\nA = A[0]\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [1,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n   \n        return self.minFallingPathSum(A)\n\n\n\n   \n    pass\n\nThe minimum sum of a falling path through A is 12.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nA\n\n\n\nThe first element in", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\u00a0\n\n\n   \n    pass\n\n\nA[i][j] == 12\n\u00a0\n\u00a0\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\u00a0\n\n12\n\n\nA[i][j]\n\u00a0\n\n\nA[i", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n   \n        pass\n        \n\nA[i][j] = [3,4,5,6,8]\n\n\n   \n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n12\n\u00a0\n\n\n\nA[i][j] =", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n   \n        return 0\n\n\nA[i][j] = minFallingPathSum(A[i])\n\u00a0\n\n   \n        pass                \u00a0\n\n\n\n\n\n\n\n\n\n12\n\n\n12\n\nGiven a square array", "\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n   \n        return self.minFallingPathSum(A)\n\n\nA is a square array of integers\nA.sort()\n\nExample 2:\n\n   \n        pass\n        \n\n\n\n\n\n\n\n12\n\n\n12\n\n\n12\n\nA = [1,2,", "\nUse Call-Based format\n\n\n\n\n\nA[i][j] = 1\n\n\u00a0\n\u00a0\n\n\n   \n        pass\n        \n\n\nA[i][j] = 1\n\u00a0\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n12\n\n\nA[i][j] = 1\n\n\n\nA[", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n        return self.minFallingPathSum(A)\n\n\n\nA[i][j] = 0\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n12\n\n\n12\n\n\nA[i][j]\n\n\n\nGiven a square array", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\u00a0\n\n\n   \n        return self.minFallingPathSum(A)\n\n\n\n   \n    pass\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n12\n\n\n\nThe first row in A can be 2 or", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nInput: [1,2,3]\nOutput: 1\n\n\n   \n\n\n\n\n   \n        pass\n\n\nA = [1,2,3,4,5,6]\n\n\n\n\n\n\n\n\n\n\n\n\n12\n\nA = [1,2,", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.minFallingPathSum(A[0])\n\n\n\n   \n       ....\n\n\n\u00a0\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n12\n\n\n\n\nA = [[4,5,", "\n\n\n\nUse Call-Based format\n\n\n\nA[i][j] = [1,2,3]\n\n\u00a0\n\n\n   \n        return self.minFallingPathSum(A)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n12\n\n\n12\n\nThe minimum sum of a square array", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n        pass\n\n\n\n   \n        return self.minFallingPathSum(A)\n\n\n\n\n\n\n\n\n\n\n\u00a0\n12\n\u00a0\n\n12\n\n\n12\n\n\n[1,4,8,", "\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\nInput: A\nOutput: A\n\n\u00a0\n\n\n   \n        pass\n\n\n\u00a0\n       \n    pass\n\n\n\n\u00a0\u00a0\n\n\n\n\n\n\n\n12\n\n\n12\n\n\n\n12\n\n\n\nA: [1,2", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nA[i][j] = 0\n\nA[i][j] = 1\n\n\u00a0\n\n\n   \n       ...\n\n\n\n   \n       ...\n\n\u00a0\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n12\n\nExample 2:\n\n\n\n[1,", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        return self.minFallingPathSum(A)\n        \n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n12\n\n12\n\n\n12\n\n\u00a0\n\n\n\n\nA = [3,5", "\n\n\n\n\n\nUse Call-Based format\nInput: [1,2,3]\nOutput: [1,2]\n\nUse Call-Based format\n\nConstraints:\n\n0 <= x <= y <= x <= y <= x\n\n\n\n\n   :\n\n\n   \n        \n\n1\n\n\n\n\n\n\n\n\n\n12\n\n\nA["], "prompt": "\nQUESTION:\nGiven a square array of integers A, we want the minimum sum of a falling path through A.\nA falling path starts at any element in the first row, and chooses one element from each row.\u00a0 The next row's choice must be in a column that is different from the previous row's column by at most one.\n\u00a0\nExample 1:\nInput: [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 12\nExplanation: \nThe possible falling paths are:\n\n\n[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]\n[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]\n[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]\n\nThe falling path with the smallest sum is [1,4,7], so the answer is 12.\n\u00a0\nConstraints:\n\n1 <= A.length == A[0].length <= 100\n-100 <= A[i][j] <= 100\nclass Solution:\n    def minFallingPathSum(self, A: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}