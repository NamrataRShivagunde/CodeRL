{"3515": {"code": ["\n# Use Call-Based format\ndef encode(text, key):\n\t\n\n\n\n# Another example\n\n\n\n\n\n# The example\n\n# Introduction\n\n# Introduction \n\n\n\n\n\t\n# Call-Based \n\n\n\n\n\n.\n\n\n\n\n\n\n# Decoding\n\n\n# Introduction\n", "\n\n\n\n\n# Broduction\n\n# Decryption\n\ndef decode(text, key):\n\t\nUse Call-Based format\n\n# Example\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n# Use Call-Based\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\n\n\n# Run\n\n\n# Intro", "\n# Example\n\n# Passphrase\n\n\n\n\n\n\n\n# Test\n\n# Note\n\n- `text` consists only of lowercase letters\n- `key` consists only only lowercase letters\n-\n\n\n\n\n\ndef\n\t\n\n\n\n\n\n\n\n\n\n# Task\n\n# Example\n\n\n e       i       p       h      \n\n# Int", "\nUse Call-Based format\n\n\n\n\n\n\n# Introduction\n\n# Introduction\n\n# Wirate functions `decode`\n\n\n\n\n\n\n\n\n\n# Introduction\n\n\n\ndef\n\t\n\n\n\n\n\n\n.\n\n\n\n\n\n.\n\n\n# A simple example\n\n# Introdu", "\n\nUse Call-Based format\n\n\n\n\n\n\n# Introduction\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n# Augment\n\n\n\n# Introduction \n\n\n\n\n\n# Introduction \n\n\n\n\n\n\n\n\n\n\n\n c      \n# Introduction \n\n#", "\nUse Call-Based format\n\n\n\n\n# Introduction\n\nI'll use a call-based format\n\ndef decode(text, key):\n\t\n\n\n\n\n\n\n\n\n\n\n\ndef decode(text, key):\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n.\n\n# Introduction \n\n# Int", "\n\n\n# Introduction \n\nUse Call-Based format\n\ndef decode(text, key):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n# Call-Based \n\n\n# Task\n\n\n\n\n\t\n# Introduction \n\n\n\n\n\n\n\n# End of Introduction\n\n\n\n\n\n# Intro", "\n# Example\n\n- use Call-Based format\ndef decode(text, key):\n\t\n\n\n\n\n\n\n\n# Introduction \n\n# Introduction \n\n# Introduction\n\n\n# Example\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n    # Example\n\n\n# Introduction\n\n\n", "\n# Example\n\nuse Call-Based format\n\n\n\n\n\n# Input\n\n- `text` - string - a text to encode/decode\n\n# Example\n\n\n\n\n\n# Input\n\n# Example\n\n\n\ndef\n\t#\n# Example\n\n\n\n\n\n\n\n\n# Example\n\n\n.\n\n\n# Introduction \n\n", "\n# Example\n\n- encode(text, key)\n\t\nUse Call-Based format\n\n\n\n\n# Introduction\n\n\n\n\n\n\n# Example\n\n# Introduction\n\n\ndef\n\t\n# Task \n\n\n# Task\n\n\n\n\n\n\n.\n\n\n\n\n.\n\n# Introduction \n\n# Int", "\n# Example\n\n\tencode('hello world', key)\n\t\n\n\n\n\n# A simple example\n\n\n\n\n\n\n# Test\n\n- use Call-Based format\n\ndef decode(text, key):\n\t\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n.\n\n# Task\n\n\n#", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n# Example\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\ndef\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n.      \n\n\n# Introduction \n\n", "\n\n\n\nUse Call-Based format\n\n- handle Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n# Note\n\n\n\n\n\n\n\n\n\n# Note\n\n\n\n\n\n\n\t\n# Introduction \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding \n\n\n# Intro", "\n\n- use Call-Based format\n\ndef decode(text, key):\n\t\nUse Call-Based format\n\n# Introduction\n\n# Introduction\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n# Task\n\n\n\n\n.\n\n\n\n\n\n\n       \n# Decoding\n\n\n# Introduction \n", "\n# Example\n\ndef encode(text, key):\n\t\nUse Call-Based format\n\n\n\n\n\n# Example\n\n# Testing\n\n# Testing \n\n# Another example\n\n# Testing \n\n#            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Text\n\n\n# Introduction", "\n\n# Example\n\n# Note\n\n# The example code.\n\n\n\n\n\n\n# Example\n\n# Call-Based format\n\n# Pre-Process\n\n- handle case-Based format\n\ndef decode(text, key):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#", "\n# Introduction\n\ndef introduction(text, key):\n\t\nUse Call-Based format\n\n\n# Introduction\n# Introduction\n\n\n\n\n\n\n## Task\n\n\n\n\n\t\t\n# Task\n\n\n\n\n\n\n\n\n\n\n\n# Text\n\n\n# Introduction \n\n#", "\n# Introduction\n\n# Call-Based format\n\n\n\n# Call-Based format\n\n\n\n\n\n\n# Example\n\n-\n\n# Call-Based format\n\n:\n# Introduction \n\n\n\ndef\n\t\n\n# Example\n\n\n\n\n.\n\n\n\n\n\n.\n\n\n\n# Introduction\n\n", "\n\t\nUse Call-Based format\n\n\n\n\n\n\n# Introduction \n\n\n\n# The function\n\n# Example\n\n# Example\n\n#\n\n\n\n\n\n\n# Task\n\n\n\ndef\n# Call-Based\n\n\n\n\n\n.\n\n\n\n\n# Example\n\n\n.\n\n\n\n#\n# Introdu", "\n# Call-Based format\n\ndef decode(text, key):\n\t\t\n\n\n\n\n\n\n\n\n\n\n# Call-Based format\n\n# Introduction \n\n# Introduction \n\n\t\n\n\ndef\n\t# Introduction\n\n\n\n\n\n\n\n\n\n\n.\n\n\n# Task\n\n\n# Intro"], "prompt": "\nQUESTION:\n# Introduction \n\nThe ragbaby cipher is a substitution cipher that encodes/decodes a text using a keyed alphabet and their position in the plaintext word they are a part of.\n\nTo encrypt the text `This is an example.` with the key `cipher`, first construct a keyed alphabet:\n```\nc       i       p       h       e       r       a       b       d       f       g       j       k       l       m       n       o       q       s       t       u       v       w       x       y       z\n```\n\nThen, number the letters in the text as follows:\n```\nT       h       i       s               i       s               a       n               e       x       a       m       p       l       e       .\n1       2       3       4               1       2               1       2               1       2       3       4       5       6       7        \n```\n\nTo obtain the encoded text, replace each character of the word with the letter in the keyed alphabet the corresponding number of places to the right of it (wrapping if necessary). \nNon-alphabetic characters are preserved to mark word boundaries.\n\nOur ciphertext is then `Urew pu bq rzfsbtj.`\n\n# Task\n\nWirate functions `encode` and `decode` which accept 2 parameters:\n- `text` - string - a text to encode/decode\n- `key` -  string - a key\n\n# Notes\n\n- handle lower and upper case in `text` string\n- `key` consists of only lowercase characters\ndef encode(text, key):\n\t\nUse Call-Based format\nANSWER:\n"}}