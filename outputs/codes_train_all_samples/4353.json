{"4353": {"code": ["\n\n\n> could_be(\"carlos Ray Norris\", \"carlos Ray\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n```python\n\n> could_be(\"Fred\")\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be(\"\")\n\n```python\n> could_be(\"\")\n``` \n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# This is the main function. It will", "\n\n\n\n\n\nThe function is not call-based format\n\n\n\n\n\n\n\n\n\n\n# should return True if the original name is the same as the other one\n> could_be(\"Carlos\", \"Carlos\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # Let's start simple\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\npython\n\n> could_be(\"\", \"Norris\")\n```\n\n\n\n\n\n\n\n\n\n```python\n\n> could_be\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# This is for a simple example:\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n> could_be(\"\", \"\")\n\n\n\n\n\n\n\n\n```python\n# should return True if the function is case sensitive for now \n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n# should return True if", "\n\n\n```python \n\n> could_be(\"norris\", \"norris\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python \n\n> could_be(\"Carlos Ray Norris\", \"norris\")\n\n\n\n\n\n\n\n\n\n\n\n\n# should return True if", "\n\n\n\n\n\n\n\n\n> could_be(\"Carlos\", \"Norris Carlos\")\n\n> could_be(\"Ray Norris\", \"Ray\")\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be(\"Carlos", "\n\n\n\n```python\n# should return True if the original name is not a name!\n> could_be(\"name\", \"name\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n```python\n#\n> could_be\n\n\n\n# should_be", "```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```python\n# should return True if the function is case sensitive\n> could_be(\"Chuck Norris\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n# should return True if", "\n\n\n\n\n```python\n# the function is not call-based format\n\n\n\n\n\n\n\n\n\n \n\n# should be return True if the original is a name\n> could_be(\"\", \" \")\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n```python\n# should return True if the original is a\n\n``", "\n\n\n\n# Use Call-Based format\n\n# should return True if all the names are equal\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python \n\n\n```python \n\n\n\n\n\n\n\n\n\n\n\n```python \n\nif could_be(original, another):\n\n\n> could_", "\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be(original, another) : True\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#\n\n\n\n\n\n# should be True if the name is case sensitive\n\n\n```", "\n```python\n# should return True if the original name is the same as another\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```python\n# should return True if the original name is the same\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be(\"Ray Norris", "\n\n\n\n```python\n# should return True if the name could be matching the other name.\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n\n    if not is_string", "\n\n\n# should be a simple call-based format\n\n> could_be(original, another)\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n# should be return True if\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be(\"", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be\n\n\n\n\n```python\n# should return True if your function is not symmetrical\n>\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# should return True if the", "```\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n---\n\n> could_be(original, another):\n\n>>>\n\n\n\n>\n\n```python \n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> could_be(\"C\u00e9r", "\n\n\n\n\n\n```python \n\n#\n\n\n\n\n```python\n\n# should return True if the original name is an exact match\n> could_be(\"\", \" \")\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# should return True if the original is a", "\n```python\n# should return True if the original name is not a name.\n\n\n\n\n\n\n\n\n\n\n\n# should not return True if it should be symmetrical\n\n\n\n\n\n\n\n\n```python \n\n\n\n\n```python\n# should be a string\n\n>\n\n\n\n\n\n\n\n\n\n\n\n```python", "\n```python \n\n\n\n\n\n\n\n\n\n\n\n\n*\nshould_be(\"\", \"\")\n*```\n\n\n\n\n\n\n\n```python \n\n> could_be(\"\", \"\")\n```\n\n\n\n\n```python \n\n\n\n\n```python \n\n\n\n\n\n\n\n\n\n\n```python \n"], "prompt": "\nQUESTION:\nThe objective is to disambiguate two given names: the original with another\n\nLet's start simple, and just work with plain ascii strings. \n\nThe function ```could_be``` is given the original name and another one to test\nagainst. \n\n```python\n# should return True if the other name could be the same person \n> could_be(\"Chuck Norris\", \"Chuck\")\nTrue\n\n# should False otherwise (whatever you may personnaly think)\n> could_be(\"Chuck Norris\", \"superman\")\nFalse\n``` \n\nLet's say your name is *Carlos Ray Norris*, your objective is to return True if\nthe other given name matches any combinaison of the original fullname:\n\n```python\ncould_be(\"Carlos Ray Norris\", \"Carlos Ray Norris\") : True\ncould_be(\"Carlos Ray Norris\", \"Carlos Ray\") : True\ncould_be(\"Carlos Ray Norris\", \"Norris\") : True\ncould_be(\"Carlos Ray Norris\", \"Norris Carlos\") : True\n```\n\nFor the sake of simplicity:\n\n * the function is case sensitive and accent sensitive for now\n * it is also punctuation sensitive\n * an empty other name should not match any original\n * an empty orginal name should not be matchable\n * the function is not symmetrical\n\nThe following matches should therefore fail:\n\n```python\ncould_be(\"Carlos Ray Norris\", \" \") : False\ncould_be(\"Carlos Ray Norris\", \"carlos\") : False\ncould_be(\"Carlos Ray Norris\", \"Norris!\") : False\ncould_be(\"Carlos Ray Norris\", \"Carlos-Ray Norris\") : False\ncould_be(\"Ray Norris\", \"Carlos Ray Norris\") : False\ncould_be(\"Carlos\", \"Carlos Ray Norris\") : False\n```\n\nToo easy ? Try the next steps: \n\n* [Author Disambiguation: a name is a Name!](https://www.codewars.com/kata/author-disambiguation-a-name-is-a-name)\n* or even harder: [Author Disambiguation: Signatures worth it](https://www.codewars.com/kata/author-disambiguation-signatures-worth-it)\ndef could_be(original, another):\n\t\nUse Call-Based format\nANSWER:\n"}}