{"2491": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\u00a0\n\n    def buddyStrings(self, A, B):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings A of lowercase letters, swap", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    def buddyStrings(self, A: str, B: str):\n\n\n\n\n\n   ...\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two strings A of lowercase letters, return", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    def buddyStrings(self, A: str, B: str):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings A of lowercase letters, swap", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nA and B consist of lowercase letters.\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\nA and B are strings of lowercase letters\n\n\n\n\nGiven two strings A and B of", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nA and B consist of lowercase letters.\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n    return False\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings A of lowercase letters", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    return self.buddyStrings(A, B)\n\n\n\n\n\n    pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven two strings A and B of lowercase letters:\n\n\n\n\nGiven two strings A", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA and B consist of lowercase letters.\n\n\n    def buddyStrings(self, A, B):\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings A and B of lowercase letters:\n\n\n\n\nGiven two strings A", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def buddyStrings(self, A, B):\n        return True\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven two strings A of lowercase letters", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    def buddyStrings(self, A: str, B: str) -> bool:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings A and B", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n    def buddyStrings(self, A: str, B: str) -> bool:\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings A of lowercase letters, swap", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n    def swapStrings(self, A, B):\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA and B are two strings of lowercase", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    def buddyStrings(self, A: str, B: str):\n        return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA and B must be lowercase letters.\n\n\n\n\n\nGiven two strings A and B", "\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def buddyStrings(self, A, B):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings A and B of lowercase", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n   \n    pass\n\nUse Call-Based format\n\nCompare two strings A and B\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = \"aaaa\"\nB", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n    def buddyStrings(self, A, B):\n        \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings A and B of lowercase", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    def buddyStrings(self, A, B) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA and B are lowercase letters.\n\n\n\nGiven two", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    def buddyStrings(self, A: str, B: str):\n        return A == B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings A and B of lowercase letters\n\n\n\n\nGiven two strings", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def buddyStrings(self, A: str, B: str):\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings A of lowercase letters,", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n    def swapStrings(self, A: str, B: str):\n\n\n\n\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two strings A and B of lowercase letters\n\n\n\n\nGiven two strings A", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def buddyStrings(self, A, B):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings A and B of lowercase"], "prompt": "\nQUESTION:\nGiven two strings A and B of lowercase letters, return true if you can swap two letters in A so the result is equal to B, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at A[i] and A[j]. For example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".\n\u00a0\nExample 1:\nInput: A = \"ab\", B = \"ba\"\nOutput: true\nExplanation: You can swap A[0] = 'a' and A[1] = 'b' to get \"ba\", which is equal to B.\n\nExample 2:\nInput: A = \"ab\", B = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are A[0] = 'a' and A[1] = 'b', which results in \"ba\" != B.\n\nExample 3:\nInput: A = \"aa\", B = \"aa\"\nOutput: true\nExplanation: You can swap A[0] = 'a' and A[1] = 'a' to get \"aa\", which is equal to B.\n\nExample 4:\nInput: A = \"aaaaaaabc\", B = \"aaaaaaacb\"\nOutput: true\n\nExample 5:\nInput: A = \"\", B = \"aa\"\nOutput: false\n\n\u00a0\nConstraints:\n\n0 <= A.length <= 20000\n0 <= B.length <= 20000\nA and B consist of lowercase letters.\nclass Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}