{"4336": {"code": ["\n* The number of redistributions is\n* The number of blocks in the selected banks\n*\n\n\n\n\n\n\n\n\n\n\n\n\n* The last block redistribution is done: 1 1 2 3\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n* The reallocation routine operates in cycles\n\n*\n\n\n\n\n* The above code was", "\n\n*\n\n\n\n\n* The reallocation routine operates in cycles:\n\n* The reallocation routine operates in cycles:\n\n* The reallocation routine operates in cycles:\n\n*\n\n*\n*\n\n\n*\n\n\n\n\n\n\n\n\n\n\n* The above example:\n\n*\n\n* The above example:\n\n*\n\n", "\n*\n\n*\n*\n* The number of redistributions is between two banks (2, 7, 3, 4, 1, 2, 3, 4, 4, 7, 5).\n\n*\n\n\n\n\n*\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n\n* The above example\n\n*\n\n* The", "\n*\n*\n\n* This example is used to find the number of blocks of the banks that are connected to the server.\n*\n\n\n\n*\n\n\n\n\n\n\n* The number of redistributions in the above example:\n\n*\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n* The above", "\n*\n*\n\n*\n\n\n\n\n\n\n\n\n\n* The first block redistribution is done after the second block redistribution\n* The second block redistribution is done after the third block redistribution.\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* The first block redistribution is done\n*\n\n\n\n\n\n* The above code", "\n*\n\n\n*\n\n\n* The user is free to find a block redistribution cycle:\n\n*\n\n*\n The last block redistribution cycle:\n\n* The second block redistribution cycle:\n\n*\n\n\n\n*\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n* This is a good example", "\n\n\n* This is a very simple example:\n\n* The first memory bank gets the most blocks.\n* The second memory bank gets the most blocks.\n\n*\n\n\n\n\n*\n\n*\n\n\n\n*\n\n\n\n*\n\n\n\n\n\n\n\n\n\n* The above example:\n\n*\n\n\n\n\n\n* The above example:", "\n*\n*\n*\n**\n*\n*\n*\n*\n*\n*\n*\n\n*\n\n*\n\n\n*\n\n\n*\n*\n*\n\n\n\n*\n\n*\n\n\n\n\n\n\n\n*\n*\n*\n*\n*\n*\n\n\n*\n\n*\n\n\n\n*\n\n\n* The", "*\n*\n*\n*\n*\n*\n*\n*\n\n\n* The number of redistributions can be found:\n\n*\n\n*\n*\n*\n*\n\n\n*\n*\n\n*\n\n\n\n*\n\n*\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n* The last block is the one bank. The", "* The database is not yet initialized.\n\n\n* The database is not yet initialized.\n\n* The database is not yet initialized.\n\n\n\n\n\n\n*\n\n\n\n\n\n\n* The database is not yet initialized.\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n#\n# The first redis", "\n*\n\n*\n\n\n*\n\n*\n\n*\n\n\n*\n* The above example:\n\n*\n\n* The above example:\n\n*\n\n* The last block redistribution\n\n*\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n\n* The above example:\n\n*\n\n*", "\n*\n\n* This is the number of blocks redistribution is done for each memory bank.\n\n*\n\n\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n* The main loop is completed\n\n* The main loop is completed\n* The main loop is completed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Examples\n\n", "*\n\n* The loop is done with the current configuration.\n\n* The loop is done with the current configuration.\n\n* The loop is done with the current configuration.\n\n\n\n\n\n\n\n*\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n* The following code works:\n\n*\n\n\n*\n\n* The above code works", "\n\n\n* The loop starts here:\n\n* The loop starts over:\n\n* The loop stops:\n\n* The loop ends:\n\n*\n\n\n\n*\n\n*\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* The above example\n\n*\n* This is a random example\n\n\n*", "\n\n\n*\n\n*\n\n* A simple example:\n\n* A simple example:\n\n* The number of redistributions is done:\n\n*\n* The number of redistributions is done:\n\n*\n\n*\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n\n* The above example:\n\n*\n\n\n* The", "\n*\n\n*\n\n*\n*\n\n*\n\n\n*\n* The above example:\n\n*\n\n*\n The current iteration:\n\n* The current iteration:\n\n* The current iteration:\n\n*\n*\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**\n\n**\n\n**\n\n*", "\n* The number of redistributions is at the current cycle:\n\n* The number of redistributions is at the current cycle:\n\n* The number of redistributions is at the current cycle:\n\n\n\n\n\n\n*\n\n*\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n* The", "\n\n*\nThe reallocation routine operates in the above example:\n\n*\n\n\n\n\n*\n\n*\n\n* The reallocation routine operates in the above example:\n\n*\n*\n\n* The reallocation routine operates in the above example:\n\n*\n\n\n\n\n\n\n\n\n\n\n\n*\n\n*\n\n* The most-", "\n*\n* Repetition:*\n*\n*\n\n*\n*\n*\n\n* Repetition:*\n\n*\n\n*\n\n*\n\n\n\n*\n\n\n\n\n\n\n*\n\n*\n\n\n\n\n\n\n* The reallocation routine operates in cycles :)*\n\n*\n\n*\n\n*\n\n\n* The", "*\n*\n\n*\n*\n*\n\n\n* The most-numbered memory banks are not reproducible.\n*\n\n\n\n\n\n\n*\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* The following two lines are the same:\n\n*\n* The second block redistribution\n\n*\n\n*\n\n\n"], "prompt": "\nQUESTION:\n*Shamelessly stolen from Here :)*\n\nYour server has sixteen memory banks; each memory bank can hold any number of blocks. You must write a routine to balance the blocks between the memory banks.\n\nThe reallocation routine operates in cycles. In each cycle, it finds the memory bank with the most blocks (ties won by the lowest-numbered memory bank) and redistributes those blocks among the banks. To do this, it removes all of the blocks from the selected bank, then moves to the next (by index) memory bank and inserts one of the blocks. It continues doing this until it runs out of blocks; if it reaches the last memory bank, it wraps around to the first one.\n\nWe need to know how many redistributions can be done before a blocks-in-banks configuration is produced that has been seen before.\n\nFor example, imagine a scenario with only four memory banks:\n\n* The banks start with 0, 2, 7, and 0 blocks (`[0,2,7,0]`). The third bank has the most blocks (7), so it is chosen for redistribution.\n* Starting with the next bank (the fourth bank) and then continuing one block at a time, the 7 blocks are spread out over the memory banks. The fourth, first, and second banks get two blocks each, and the third bank gets one back. The final result looks like this: 2 4 1 2.\n* Next, the second bank is chosen because it contains the most blocks (four). Because there are four memory banks, each gets one block. The result is: 3 1 2 3.\n* Now, there is a tie between the first and fourth memory banks, both of which have three blocks. The first bank wins the tie, and its three blocks are distributed evenly over the other three banks, leaving it with none: 0 2 3 4.\n* The fourth bank is chosen, and its four blocks are distributed such that each of the four banks receives one: 1 3 4 1.\n* The third bank is chosen, and the same thing happens: 2 4 1 2.\nAt this point, we've reached a state we've seen before: 2 4 1 2 was already seen. The infinite loop is detected after the fifth block redistribution cycle, and so the answer in this example is 5.\n\nReturn the number of redistribution cycles completed before a configuration is produced that has been seen before.\n\nPeople seem to be struggling, so here's a visual walkthrough of the above example: http://oi65.tinypic.com/dmshls.jpg\n\nNote: Remember, memory access is very fast. Yours should be too.\n\n**Hint for those who are timing out:** Look at the number of cycles happening even in the sample tests. That's a _lot_ of different configurations, and a lot of different times you're going to be searching for a matching sequence. Think of ways to cut down on the time this searching process takes.\n\nPlease upvote if you enjoyed! :)\ndef mem_alloc(banks):\n\t\nUse Call-Based format\nANSWER:\n"}}