{"3843": {"code": ["\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n* Use Call-Based format\n* Use Call-Based format\n*\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfor region in [1,2,3,4]:", "\n\n\n\n\n\n\n\nReplace first letter and second letter! (This region is zero-based! :-)\n\nThis region is index-based!\n\nSimple example:\n\nSimple example:\n\n* Input: \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\n*\n* Step 4: `\"&61kujla\"`\n\n\n\n\n\n\n\n\n\n\n\n\nFor encrypting strings this region of chars is given.\n\n* Step 5: `\"C#\"`\n*\n\n\n\n\t\"\"\"\n\n#", "\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n* Input:  \"Business\"\n* Input: \"Business\"\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEncrypt(text)\n\n\n\n\n\n* Input:  \"Business\"\n* Region:  \"Business\"`\n", "\n\n\n\n\n\n\n\n\n\n\nThe code:\n\n\n\n\n\n\n\nTo encrypt the text:\n\n* Input:  ``'Business\"`\n*\n\n\n\n\n1 -\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code:\n\n* Prechecks:\n\n* If the input string has chars that are not all upper case", "\n\n\n\n\nUse Call-Based format:\n\n* Apython -> A\n* A -> A -> B -> B\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf the input-string is empty, return the encrypted string.\n\n*\n\n\n* Apython -> Apython\n", "\n\n\n\n\n\n Encrypt the string\n\n    Example:\n\n    ```python -c python -s``\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first step of this function is for encrypting strings that are not empty.\n\n```python\n\nfor (1, 2,", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format:\n\n* Input:  ``'Business\"`\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n```python\n\nfor i in range(1, 77, 2):\n\n1. If the first", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Simple Encryption Series:\n\n* Input:  `\"Business\"`\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* Step 1:\n\n* If the region of chars is null or empty\n* `Region[null] = \"", "\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format:\n\n* Input:  `B61kujla\"`\n* Input:  `B61kujla\"`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nencrypt(text)\n\n\nThe code for the encrypted string is as follows:\n\n\n\n\n1.", "\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n*\n* Step 3: `\"&61kujla\"`\n* Step 4: `\"&61kujla\"`\n\n\n\n\n\n\n\n\n\n\n\n\n(1)\n\n1. Use Call-Based format:\n\n1.\n\n\n\n1. If the input-string has only one", "\n\n\n\n\n\n\n\n\n\n\nTo encrypt a string:\n\n* Encrypt the text!\n* Encrypt the string!\n* Encrypt the string!\n\n* Encrypt the input string:\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEncrypt(text)\ndef encrypt(text):\n\n\n\n\n\n\n### Simple Encryption", "\n\n\n\nUse Call-Based format:\n\n* Input:  `\"Business\"`\n* Encrypt:  `\"B\"`\n* Decrypt:  `\"&\"`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function is the function used by the Simple Encryption Series:\n\n\n\n\n\n\n\n\n\n### Testing\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n The region of chars:  `[A-B;$%&]`\n*\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo more methods:\n\n*\ndef encrypt(text):\n*\n* For encrypting strings this region of chars is given. \n\n* Step", "\n\n\n\n\n\n\n\n\n\nReplace the first letter by the first character of the input-string.\n\nThis is the Simple Encryption Series:\n\n* Input:  `\"Business\"`\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe function for decrypting strings:\n\n\n\n\n    If the input-string", "\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based:\n\n   \n\n\n*\n\n\n\n\n\n\n\n\n\n\n\nEncrypt(text)\n\n\n    NOTES:\n\n    If you use the Python-based format you can use the C# format.\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use C#\n   \n\t\n\n    Use JavaScript\n\n    Use C#\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n(1)\n\n(2)\n\n(3)\n\n\n\n\n\n\n\t1.\n\n\t2.\n\n\n1", "\n\n\n\n\n\n\n\n\n\n\nA:  'b'\nA:  'c'\nB:  'c'\nB:  'b'\n\n\nThe same way:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# The Simple Encryption Series\n\t\n\t\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nWrite two methods:\n\n**Compress\n**Encrypt\n**Decrypt\n\n**Call\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* Decrypt\n\n**Encryption example:\n\n**Encrypt\n\n**Decrypt\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nSimple example:\n\n\n\n\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\nencrypt(text)\ndef encrypt(text)\ndef decrypt(text):\n\n\n\n\n\n\n\n\n\n\n\n"], "prompt": "\nQUESTION:\nFor encrypting strings this region of chars is given (in this order!):\n\n* all letters (ascending, first all UpperCase, then all LowerCase)\n* all digits (ascending)\n* the following chars: `.,:;-?! '()$%&\"` \n\nThese are 77 chars! (This region is zero-based.)\n\nWrite two methods: \n```python\ndef encrypt(text)\ndef decrypt(encrypted_text)\n```\n\nPrechecks:\n1. If the input-string has chars, that are not in the region, throw an Exception(C#, Python) or Error(JavaScript).\n2. If the input-string is null or empty return exactly this value!\n\nFor building the encrypted string:\n1. For every second char do a switch of the case.\n2. For every char take the index from the region. Take the difference from the region-index of the char before (from the input text! Not from the fresh encrypted char before!). (Char2 = Char1-Char2)\nReplace the original char by the char of the difference-value from the region. In this step the first letter of the text is unchanged.\n3. Replace the first char by the mirror in the given region. (`'A' -> '\"'`, `'B' -> '&'`, ...)\n\nSimple example:\n\n* Input:  `\"Business\"`\n* Step 1: `\"BUsInEsS\"`\n* Step 2: `\"B61kujla\"`\n  * `B -> U`\n    * `B (1) - U (20) = -19`\n    * `-19 + 77 = 58`\n    * `Region[58] = \"6\"`\n  * `U -> s`\n    * `U (20) - s (44) = -24`\n    * `-24 + 77 = 53`\n    * `Region[53] = \"1\"`\n* Step 3: `\"&61kujla\"`\n\nThis kata is part of the Simple Encryption Series:\nSimple Encryption #1 - Alternating Split\nSimple Encryption #2 - Index-Difference\nSimple Encryption #3 - Turn The Bits Around\nSimple Encryption #4 - Qwerty\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\ndef decrypt(encrypted_text):\n\t\nUse Call-Based format\nANSWER:\n"}}