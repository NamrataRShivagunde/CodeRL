{"4403": {"code": ["\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nNOTE: bitwise operators are not used :)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nbig-endian:\n    00 6D\n\nBig-Endian:   \n\n\n\n", "\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nNB:\n\nCall-Based format\n\nNB:\n\nUse Call-Based format\n\nEXAMPLE:\n\n:\n\n,\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbig-endian:    00\n\nbig-endian:    00\n\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format:\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNB:\n\nif you are", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nRETURN:\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\nBig-Endian:    00\n\nBig-Endian:    00\n\n\n\n\n\n", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nreturn switch_endian(n, bits)\n\n\n\n:\n\n\n\n   \n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBig-Endian:\n\nF4\n\n\n\n\n\n    The function returns", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\nHint: bitwise operators can handle :)\n\nFunction: switch_endian(n, bits):\n\t\nUse Call-Based format\n\n\n\n:\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\t\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n\n\n\n:\n\n\n\n\n, bit_size\n\nAnswer:\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n\nBig-Endian:\n   \n\n\n\n\n\n\n\n.. code-", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\nUse Call-Based format\n:\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe function should return an integer\n\nAn integer is unsigned\n\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\ndef switch_endian(n, bits):\n\t\n:\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbig-endian:\n    00 C9 F4\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\nUse Call-Based format\n\nExample:\n\nswitch_endian(n, 8):\n\n\n\n:\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n\nBit-Size:\n\n\n\n\n\n\n\n\n\nNB:\n", "\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n\n\n:\n\nUse Call-Based format\n\n\nbig-endian:  F4\n:\n:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nBig-Endian:\nF4\n\n\n# ---", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n:\n\n\n\nreturn switch_endian(n, bits)\n\n\n:\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n\n\n\n* The first argument must be a power of", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\t\n\t\nUse Call-Based format\n\nQUESTION:\n:\n\n,\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nreturn 0x01\n\n\n\n\n\n\n\n\nBit-Based:\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* The two", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nreturn switch_endian(n, bits)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNB:\n\n16-bit:\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\nHint: bitwise operators can handle\n\nHint: bitwise operators can handle\n\nConfirm:\n\n\n\n\n:\n\n\n\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Python format\n\n\n\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n:\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nNB:\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n    if the number of arguments is not a", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n# Use Call-Based format\n\n:\n\nUse Call-Based format\n\n,\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbig-endian:    00\n\n\n\n\n\n\n\n\n# ---", "\n\n\nUse Call-Based format\n\nUse Call-Based format\nANSWER:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n:\n\n\n\n\n   \n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE:\n\n\n\n\n\n\n\n\nNOTE:\n\n\t"], "prompt": "\nQUESTION:\nIn computing, there are two primary byte order formats: big-endian and little-endian. Big-endian is used primarily for networking (e.g., IP addresses are transmitted in big-endian) whereas little-endian is used mainly by computers with microprocessors.\n\nHere is an example (using 32-bit integers in hex format):\n\nLittle-Endian: 00 6D F4 C9 = 7,206,089\n\nBig-Endian:    C9 F4 6D 00 = 3,388,239,104\n\nYour job is to write a function that switches the byte order of a given integer. The function should take an integer n for the first argument, and the bit-size of the integer for the second argument. The bit size must be a power of 2 greater than or equal to 8. Your function should return a None value if the integer is negative, if the specified bit size is not a power of 2 that is 8 or larger, or if the integer is larger than the specified bit size can handle. In this kata, assume that all integers are unsigned (non-negative) and that all input arguments are integers (no floats, strings, None/nil values, etc.). Remember that you will need to account for padding of null (00) bytes.\n\nHint: bitwise operators are very helpful! :)\ndef switch_endian(n, bits):\n\t\nUse Call-Based format\nANSWER:\n"}}