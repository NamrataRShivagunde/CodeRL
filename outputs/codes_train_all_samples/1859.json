{"1859": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n        return sum(self[i][j] for i in matrix)\n        \n\nUse Call-Based format\n\n\n\n\n   \n    \"\"\"\n\n\u00a0\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros.\n\n\n\nGiven a m * n matrix", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        return self.countSquares(matrix)\n\nUse Method-Based format\n\n\nGiven a m * n matrix of ones and zeros.\n\n          \n\nUse Call-Based format\u00a0\n\n\n\u00a0\n\u00a0\n\n\n\nTotal number of squares = 7\n\nExample 3:\n\nGiven", "\nUse Call-Based format\n\n\n    def countSquares(self, matrix: List[List[int]]) -> int:\n\n\n\n\n\n   \n       \n\nGiven a m * n matrix of ones and zeros, return how many squares are there.\n\n                   \u00a0\n\n\n\n\n\n\n\n\n\n\n  1 <= matrix[0][0", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        return self.countSquares(matrix)\n\n   \n       ...\n        \n\nGiven a m * n matrix of ones and zeros, return how many squares have all zeros.\n\n       \n\n\u00a0\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros\n\n\nGiven a m", "\nUse Call-Based format\n\n\n\n\n\n\n   \n        return self.countSquares(matrix)\n        \nUse Call-Based format\n\n\n\nGiven a m * n matrix of ones and zeros.\n\n   \n       \n\n\u00a0\n\n\n\u00a0\n\n\n\nGiven a m * n matrix of ones and zeros.\n\n\n\n\nGiven a m", "\nUse Call-Based format\n\n\n    arr: List[List[int]] = [0,0,0,0]\n\n\n\n\n\n              \n\n\nGiven a m * n matrix of ones and zeros\n\n          \n\n\u00a0\n\n\n\n\n\nGiven a m * n matrix of ones and zeros\n\n\n\nGiven a m * n matrixGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return self.countSquares(matrix)\n\n\u00a0\n\nUse Call-Based format\n\n\nGiven a m * n matrix of ones and zeros.\n\n   \n\n\n\u00a0\n\n\n\u00a0\n\n\nGiven a m * n matrix of ones and zeros.\n\n\n\nGiven a m * n", "\nUse Call-Based format\n\n\n    def countSquares(self, matrix: List[List[int]]) -> int:\n\n\n\n\n\n   \n\n\nGiven a m * n matrix of ones and zeros.\n\n   \n    pass\n\nUse Call-Based format\u00a0\n\n\n\n\n\n\n\n\n\nGiven a m * n matrix of zeros.Given", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n        return self.countSquares(matrix)\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        \n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\nGiven a m * n matrix of ones and zeros.\n\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n        return self.countSquares(matrix)\n        \nUse Call-Based format\n\nReturns:\n\n    int:\n\n\n\n\n   \n       \n\n\u00a0\n\n\n\n\n\nUse Call-Based format\n\u00a0\n\n\nGiven a m * n matrix of ones and zeros\n\nGiven", "\n\n\n\n    def countSquares(self, matrix: List[List[int]]) -> int:\n        \nUse Call-Based format\n\n\n\n\n          \n\n\nGiven a m * n matrix of ones and zeros.\n\n   \n\n\n\u00a0\n\n\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros\n\nGiven a m", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n        return self.countSquares(matrix)\n\n\u00a0\nUse Method-Based format\n\nInput: matrix = arr\nOutput: matrix\n\n\n\n   \n        \n\u00a0\n\n\n\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros.\n        Given", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n        return self.countSquares(matrix)\n\n\u00a0\nUse Call-Based format\n\n\n\n\n   \n\n\n\u00a0\n\n\n\u00a0\n\n\n\nGiven a m * n matrix of ones and zeros.\n\n\n\n\nGiven a m", "\nUse Call-Based format\n\n\n    matrix = [\n    [1,1,1,1]\n        \nUse Call-Based format\n\n\n\n\n\n       \n\n\nGiven a m * n matrix of ones and zeros.\n\n   \n        \n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\n\u00a0\n\n\n\nGiven a m * n", "\nUse Call-Based format\n\n\n    @CountSquares\n\n\n\n\n\n\n        return self.countSquares(matrix)\n\nUse Function-Based format\n\n\n\nGiven a m * n matrix of ones and zeros.\n\n   \n        \n\u00a0\n\n\n\u00a0\n\n\n\n\nGiven a m * n matrix of zeros\n\n\nGiven a m", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n        return self.countSquares(matrix)\n\n   \n\n\nGiven a m * n matrix of ones and zeros.\n\n   \n    pass\n        \n\n\u00a0\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros\n\n\n\nGiven a m *", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return self.countSquares(matrix)\n\nUse Call-Based format\n\nOutput: list\n\n\n\nGiven a m * n matrix of ones and zeros.\n   \n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros\n\n\nGiven a m", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return matrix[0][0].countSquares(matrix[1])\n\n   \n\n\nGiven a m * n matrix of ones and zeros, count the number of squares.\n\n\n   \n                \u00a0\n\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros\n\n\nGiven m", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return self.countSquares(matrix)\n\n\n\nUse Call-Based format\n\n\n\nGiven a m * n matrix of ones and zeros and returns how many square submatrices have all zeros.\n\n                          \u00a0\n\n\n\u00a0\n\n\n\n\n\nGiven a m * n matrix of", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n        return sum(matrix[i][j] for i,j in enumerate(matrix))\n\n\nUse Call-Based format\n\n\n\n\n    def\n   ...\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven a m * n matrix of ones and zeros,\n\n\u00a0\n\n\nGiven a"], "prompt": "\nQUESTION:\nGiven a m * n matrix of ones and zeros, return how many square submatrices have all ones.\n\u00a0\nExample 1:\nInput: matrix =\n[\n\u00a0 [0,1,1,1],\n\u00a0 [1,1,1,1],\n\u00a0 [0,1,1,1]\n]\nOutput: 15\nExplanation: \nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is  1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15.\n\nExample 2:\nInput: matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\nOutput: 7\nExplanation: \nThere are 6 squares of side 1.  \nThere is 1 square of side 2. \nTotal number of squares = 6 + 1 = 7.\n\n\u00a0\nConstraints:\n\n1 <= arr.length\u00a0<= 300\n1 <= arr[0].length\u00a0<= 300\n0 <= arr[i][j] <= 1\nclass Solution:\n    def countSquares(self, matrix: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}