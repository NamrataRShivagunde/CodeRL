{"409": {"code": ["\nUse Call-Based format\n\n\n    arr, k = 1, 3\n\nUse Call-Based format\n\n\n\n\n   \n        return 0\n\n\n\n    def k(self, arr, k):\n        return 10\n\n\u00a0\n\n\n            \n\n\n\n\n\n\n\n\n\n\n\nmodulo 10^10 + 3\n\n\nFor each", "\n\n\n\n    kConcatenationMaxSum(self, arr, k):\n        return 0\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\u00a0\nUse Method-Based format\n\n\n   \n        pass\n                \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nArray arr = [1,2,3", "\n\n\n\n    k: int\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n    arr[i] = [i]\n        k = 4\n\n\n   \n       ...\n        \nUse Call-Based format\n\n\n\n\nmodulo\u00a010^9\n\n\n\n\n\nmodulo\u00a010^9\n\nFor a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.kConcatenationMaxSum(arr, k)\n\n\n   \n        pass\n\n\nUse Function-Based format\n\n\n\n\n\nmodulo\u00a010^9\n\n\n\u00a0\n\n\n\nmodulo\u00a010^10\n\n\u00a0\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n   :\n        arr: List[int]\n        k: int\n\n\n\n\n\n\n\nmodulo\u00a010^9 + k.\n\n\n\n\n\nmodulo\u00a010^9 + k\n\n\n\n#", "\nUse Call-Based format\nUse Call-Based format\n    return self.kConcatenationMaxSum(arr, k)\n\n\n\n\n\n   \n    return self.kConcatenationMaxSum(arr, k)\n\n\n\n   \n        pass\n                        \n\n\n\n\n\n\n\n\n\nA value is returned.\n\n\n\n\nFor each array element", "\nUse Call-Based format\n\n\n    arr = List[int]\n    k = 3\n\n\n\n\n\n   \n        return 0\n        \n\n    return arr[k]\n\n\u00a0\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n10^9\n\n\n10^9\n\n\nmodulo 10^9\n\n", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n        return arr[k]\n\n\u00a0\n\nUse Method-Based format\n\n\n\n\n   :\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nmodulo 10^9 + 1.\n\n10", "\n\n\n\n\n\nUse Call-Based format\nInput: arr\nOutput: k\n\n\u00a0\nConstraints:\n\n0 <= arr <= k\n\n\n   \n        pass\n\n\n\n   \n        pass\n\n\nUse Python-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nmodulo 10^10 + 3\n\n\nFor arr =", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n        return self._kConcatenationMaxSum(arr, k)\n\n\nUse Call-Based format\n\n\n   \n        pass\n\n\n\n\n\n\n\n\nmodulo\u00a010^9 + k\n\n\n\n\n\n\n\nGiven an integer array arr and k, modify", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        return arr[k]\n        \n\n\n\n   :\n        return arr[k]\n\n\n\n\n\n\n\n\nmodulo\u00a010^9 + 1.\n\n\n\n\n\n\n\n    arr = [1, 2, 3", "\nUse Call-Based format\n\n    arr: List[int]\n    k: int\n\nUse Call-Based format\n\n\n\n\n   \n        return self.kConcatenationMaxSum(arr, k)\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nmodulo 10^9 + 1\n\n\nFor an integer", "\nUse Call-Based format\n\n\n    arr: List[int]\n    k: int\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n   :\n    pass\n\n\nUse Python-based format\n\n\n\n\n\nmodulo\u00a010^10\n\n\n\n\n1 <= arr <= 10^9\n\n\ngiven an integer", "\n\n\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n    def\n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    1 <= arr <= 10^9\n\n   \n\n    For", "\nUse Call-Based format\n\n\n    arr, k\n        \nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n        return self.kConcatenationMaxSum(arr, k)\n\n\n\n   \n        pass\n                \n\n\n\n\n\n\n\nReturns the maximum sum of the modified array.\n\n\n\n\nFor each element of", "\nUse Call-Based format\n\n\n    arr: List[int]\n    k: int\n\nUse Call-Based format\n\n\n\n\n   \n        return self.kConcatenationMaxSum(arr, k)\n\n\n\n   \n        pass                \n\n\n\n\n\n\n\n\n\n\n\n\n\nmodulo 10^9 + 1.\n\narr\ufffd", "\nUse Call-Based format\n\n\n    kConcatenationMaxSum(self, arr, k) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n       ...\n\n\nUse Call-Based format\n\n\n\n\n\nmodulo\u00a010^9\n\n\n\u00a0\n\n\n\n\nIf arr is not an integer array", "\nUse Call-Based format\n\n    arr: List[int]\n\nUse Call-Based format\n\n\n\n\n   \n        return self.kConcatenationMaxSum(arr, k)\n\n\n\n   \n        pass\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nmodulo 10^9\n\n\nFor arr =", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   \n        return self.kConcatenationMaxSum(arr, k)\n\n\n\n    return arr[-1]\n\n\u00a0\n\n    pass\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\nExample 1:\n    arr = [1]\n\n\n\n   ", "\nUse Call-Based format\n\n    arr: List[int]\n\nUse Call-Based format\n\n\n\n\n   \n        return self.kConcatenationMaxSum(arr, k)\n\n\n\n\n          \n\n\n\n\n\n\n\n\nmodulo\u00a010^9 + k\n\n\n\n\n\n\n\nFor each integer array arr, modify the array"], "prompt": "\nQUESTION:\nGiven an integer array arr\u00a0and an integer k, modify the array by repeating it k times.\nFor example, if arr\u00a0= [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0\u00a0and its sum in that case is 0.\nAs the answer can be very large, return the answer\u00a0modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: arr = [1,2], k = 3\nOutput: 9\n\nExample 2:\nInput: arr = [1,-2,1], k = 5\nOutput: 2\n\nExample 3:\nInput: arr = [-1,-2], k = 7\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= k <= 10^5\n-10^4 <= arr[i] <= 10^4\nclass Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}