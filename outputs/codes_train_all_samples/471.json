{"471": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\nOutput:\n\n\n\n    def numIslands(self, grid: List[List[str]]):\n        \n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\nOutput", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    def numIslands(self, grid: List[List[str]):\n        return self.numIslands(grid)\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 island\n\n2\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n    def numIslands(self, grid: List[str]) -> int:\n\n:\n       ...\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n1\n\nExample 2:\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    def:\n        \n\n\n\n\n\n\nUse Call-Based format\n\n\n  A 1-land island island island surrounded by water\n\n\nA 1-land island island\n\n\n\n100", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n\n\nUse Call-Based format\n\n\n\n    def numIslands(self, grid: List[str]) -> int:\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a 2d grid map of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nUse Call-Based format\n\n\n    def numIslands(self, grid: List[str]) -> int:\n        \n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a 2d grid map of '", "\nUse Call-Based format\n\n\n    def numIslands(self, grid: List[str]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n    def\n        pass\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nInput:\n11110", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n        return 2\n\nclass\n\n\n\n\n    def numIslands(self, grid: List[List[str]):\n            return 3\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\nYou can see the following\n\n\n\n\n\nInput:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n    def numIslands(self, grid: List[List[str]):\n        return 3\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput:\u00a03\n\n\nExample 3:\n\n\nFor", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n    def numIslands(self, grid: List[List[str]):\n        return len(grid)\n\n   \n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nTrue island is not surrounded", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n\n    def numIslands(self, grid: List[str]) -> int:\n        \n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n1:\n\n1:\n\n2:\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n    def numIslands(self, grid: List[str]):\n        \n\n:\n\n\n\nExample:\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n1:\n2d", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n    def numIslands(self, grid: List[List[str]]) -> int:\n       :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nExample 1:\n\n\n\n\n\nGiven a 2", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a 2d grid map of '1's (land) and '0's\n\n", "\nUse Call-Based format\n\n\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \n\n\n\n\n\n   \n\n\n\n\n   :\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a 2d grid map of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    def:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nGiven a 2d grid map of land and water\n\n\nGiven a 2", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n    def numIslands(self, grid: List[str]):\n        return self.numIslands(grid)\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nYou can count islands\n\n\n\nGiven a 2", "\nUse Call-Based format\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\n       \n\n\nExample 3:\n    numIslands = self.numIslands(grid)\n\n\n\n\n   :\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nInput:\n\n11110\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    def numIslands(self, grid: List[List[str]):\n\n       \n\n\n\n\n   :\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nGiven a 2d grid map:\n\n\nGiven a 2d", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n\n   :\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nGiven a 2d grid map of '1's (land) and '0's (water)'\n\n\n"], "prompt": "\nQUESTION:\nGiven a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\nExample 1:\n\n\nInput:\n11110\n11010\n11000\n00000\n\nOutput:\u00a01\n\n\nExample 2:\n\n\nInput:\n11000\n11000\n00100\n00011\n\nOutput: 3\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}