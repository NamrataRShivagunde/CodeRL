{"4917": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n### Syntax\n\n\nUse Call-Based format\n\n## Examples\n\n\n# Valid Braces\n\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n### Validation\n\nValid Parentheses:\n\n\nWrite a function that takes a", "\nUse Call-Based format\n\n\n\n\n\n\n\n### Testing\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nWrite a function that takes a string of braces\n\nUse Call-Based format\nWrite a function that takes a string of braces\n\n\n\n\n\n\n\n\n\n\n\n\n### Further Examples\n\n\n\n\nUse Function-Based", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n## Valid\n\n\n\n\n\n\n\nWrite a function that takes a string of braces.\n\nUse Call-Based format\nWrite a function that takes a string of braces.\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n\nWrite a function that takes a string of braces", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\n### Use Call-Based format\n\n\t\nUse Call-Based format\nWrite a function that takes a string of braces\nWrite a function\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\nThe `#validBra", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n### Functions\n\ndef validBraces(string):\n\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n## Valid Parentheses\n\nWrite a function that", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n## Use Call-Based format\n\n\n\n\n\n\n\nWrite a function that takes a string of braces.\nWrite a function that takes a string of braces.\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string of braces, determines if", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nWrite a function that takes a string of braces\nUse Call-Based format\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string of braces,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n## Examples\n\ndef validBraces(string):\n\t\nUse Call-Based format\n\n\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nWrite a function that takes a string of braces,", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n### Examples\n\ndef validBraces(string):\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nWrite a function\nWrite a function\n\n\n:\n\n\n\n\n\n\n\n## Validation\n\nuse Call-Based format\nWrite a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nWrite a function that takes a string of braces\n\n\n\nUse Call-Based format\nWrite a function that takes a string of braces.\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nWrite a function that takes a string of braces, determines if the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n## Examples\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string of braces\nWrite a function that takes a string of braces.\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n## Example\n\n\n\n\nWrite a function that takes", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\nWrite a function that takes a string of braces\nWrite a function that takes a string of braces\n\n\n\nUse Call-Based format\n\n\n\n## Examples\n\n\n\n\n\nWrite a function that takes a string of braces", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\nWrite a function that takes a string of braces\nWrite a function that takes a string of braces\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nWrite a function that takes a string of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n### Valid\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\nUse Call-Based format\n\nWrite a function that takes a string of braces\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n## Examples\n\nWrite a function that takes a", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that takes a string of braces, and returns a boolean\n\n\n\n\nUse Call-Based format\nWrite a function that takes a string of braces\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    The Kata function is written", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n## Braces\n\ndef validBraces(string):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that takes", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n## Valid Braces\n\n\n\nWrite a function that takes a string of braces\n\n\n\nWrite a function that takes a string of braces\nWrite a function\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n## Validation\n\nValid Parentheses:\nWrite", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nWrite a function that takes a string of braces\nUse Call-Based format\nWrite a function that takes a string of braces, which is a string of valid braces.\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThis Kata is similar", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nWrite a function that takes a string of braces\nWrite a function that takes a string of braces\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nWrite a function that takes a string of braces, and determines if", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\ndef validBraces(string):\n\t\nUse Call-Based format\n\n\n\n\n\n\nWrite a function that takes a string of braces\n\n\n\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n\n## Example\n\n\n\n\nUse Function-Based format\n\nQUEST"], "prompt": "\nQUESTION:\nWrite a function that takes a string of braces, and determines if the order of the braces is valid. It should return `true` if the string is valid, and `false` if it's invalid.\n\nThis Kata is similar to the [Valid Parentheses](https://www.codewars.com/kata/valid-parentheses) Kata, but introduces new characters: brackets `[]`, and curly braces `{}`. Thanks to `@arnedag` for the idea!\n\nAll input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: `()[]{}`. \n\n\n### What is considered Valid?\n\nA string of braces is considered valid if all braces are matched with the correct brace.\n\n\n## Examples\n\n```\n\"(){}[]\"   =>  True\n\"([{}])\"   =>  True\n\"(}\"       =>  False\n\"[(])\"     =>  False\n\"[({})](]\" =>  False\n```\ndef validBraces(string):\n\t\nUse Call-Based format\nANSWER:\n"}}