{"1934": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n \n\nUse Call-Based format\n\nUse Call-Based format\n\n   \n       \n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n       \n\nUse Call-Based format\n\n       \n\n\nUse Call-Based format\n\n        \n\n   \n\n\nGiven a binary tree", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n \n\n\n\n   \n\n\nUse Call-Based format \n\n\n\nUse Call-Based format\n\nUse Call-Based format\n  [3,9,20,null,null,15]\n\n\n\n\n\n\n \n\n\n  [", "\nUse Call-Based format\n\n\n        \nUse Call-Based format\n\n\n\n\n\nnull\n \n\n\nUse Call-Based format\n  \n\n\nUse Call-Based format\n\nUse Call-Based format  \n\n        \nUse Call-Based format\n\n \n \n  1\n  2\n\n\n \n  3\n\n\nGiven a binary tree", "\nUse Call-Based format\n\n\n\n\n\n\n\n \n\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n        val\n\nUse Call-Based format\n\n      val\n\n \n        val\n\n\n\n\n \n\n\n\n  root  3\n  ", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n \n\nUse Call-Based format\n\n\n   \n    \nUse Call-Based format\n\n\n\n\n\n        \nUse Call-Based format\n\nUse Call-Based format\n\n   \n\n\n\n\n\n \n\n\n  Given a binary tree,", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n  \n        \nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format  \n\n\n        pass\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n   \n\n\n\nGiven a binary tree, return", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n \n\nUse Call-Based format\n\n \n\nUse Call-Based format\n\nUse Call-Based format \n\n  # value\n\nUse Call-Based format\nUse Call-Based format\n\n       \n\n\n\n\n\nUse Call-Based format \n\nGiven a binary tree", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format \n\n\nUse Call-Based format\n            # type: TreeNode\n\n\n\n\n\nUse Call-Based format\n\n\n  \n\n\nGiven a binary tree, return", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\nUse Call-Based format\n\nUse Call-Based format \n\n    # Definition for a binary tree node.\n       \nUse Call-Based format\n\n\n\n\n        \nUse Call-Based format\n\n  \n\nGiven a binary tree,", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n20\n9\n15\n7\n\n\nUse Call-Based format\n\n / \\\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n 20  9\n \n\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    [3,9,20,null,15,7]\n        \nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n \n\n\n\nGiven a binary tree,", "\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n \n        \nUse Call-Based format\n\nUse Call-Based format\n  \n    \n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\n  9  20\n   7\n        \nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n \n  9  20\n  null  15\n    7\n        null\n        \n\nUse Call-Based format\n\n  \n\n\n\n\n\n\nUse Call-Based format\n\n\n \n\n\n\n\n\n\n\n  null  null\n \n\n\n\nGiven a", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n \n\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\n\n \n\n\nUse Call-Based format\n    # Definition for a binary tree node.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n \n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n \n\nUse Call-Based format\n\n  \n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n   \n    left\n    right\n        null\n        null\n        null\n        \n\n\n   \n\nGiven a", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n  \n  \n\nUse Call-Based format\n\n\nUse Call-Based format\n \n\n\n\n  \n\n    def __init__(self):\n        pass\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n null   null\n \n        \nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nGiven a binary tree, return the zigzag level order traversal of its nodes' values.\n\nUse Call-Based format\n\n \n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n \n\nGiven a binary tree,", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n \n\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    null = None\n        left = null\n        right = null\n\n\nUse Call-Based format\n\n   \n\n\n\n  \n\n\nGiven a binary tree", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n \n\nUse Call-Based format\n\nGiven a binary tree, return the zigzag level order traversal of its nodes' values.\n \n\n\n\n\n\n       ...\n        \n\n\n\n     \n       ...\n\n\n\n  \n\n\n\n\n    Given a binary tree", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n  \n\nUse Call-Based format\n\n \n\nUse Call-Based format\n\nUse Call-Based format\n\n   \n    / \\ \\\n    __init__(self, val=0):\n\n\n\n       \n        null\n        null\n\n\n\n\n\n\nGiven a binary"], "prompt": "\nQUESTION:\nGiven a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\n\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\nreturn its zigzag level order traversal as:\n\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:\n        \nUse Call-Based format\nANSWER:\n"}}