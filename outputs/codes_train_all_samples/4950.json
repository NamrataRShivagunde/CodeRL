{"4950": {"code": ["\nUse Call-Based format\t\nCall-Based format\n\n\n### Task\n\nUse Call-Based format\n### Task\n\nTask\n\n### Euclid\n\n\n### Task\n### Task\n\n\n\n\n\t### Task\n### Task\n\n\n \n}\n\n\n### Task\n\n\n### Task\n### Task\n\n\n\n### Task\n\n### Task", "\nUse Call-Based format\n\t\nTask\n\n\t\n### Task\n\nUse Call-Based format\t\nTask\n\n### Restrictions\n\n### Task\n\n### Task\n### Task\n\n\n\n### Task\n\n### Task\n \n\n\n### Task\n\n### Task\n\n\t\n### Task\n### Task\n\n### Task\n\n\n### Task\n\nYou", "\nUse Call-Based format\nCall-Based format\n\n\n### Task\n\nUse Call-Based format\n### Task\nTask\n\nTask:\n### Task\n\n\n### Task\n### Task\n\n\n\n\n\t### Task\n### Task\n\n \n\n### Task\n### Task\n\n### Task\n\n### Task\n### Task\n\n\n### Task\n\n### Task\n", "\nUse Call-Based format\nTask\n\nUse Call-Based format\n\n\nUse Call-Based format\n### Task\n### Task\nTask\n\n\n\n### Task\n### Task\n\n\n\n\n### Task\n\n### Task\n### Task\n\n\n \n}\n```\n\n### Task\nTask\n\n### Task\n### Task\n\n       \n \n### Task\n", "\nUse Call-Based format\nCall-Based format\n\nUse Call-Based format\n### Task\n\nUse Call-Based format### Task\n\nCSharp:\n### Task\n\n\n### Task\n### Task\n\n\n\n\n### Task\n### Task\n\n\n \n\n### Task\n### Task\n\n\n\t### Task\n\n### Task\n\n\n### Task\n\n", "\n\nRun\nUse Call-Based format\n\nUse Call-Based format\n\n### Task\n### Task\n\nThe GCD is calculated using Call-Based format\n\n\n\n### Task\n### Task\n\n\n\n\n\t### Task\n### Task\n \n}\n\n### Task\n### Task\n\n\t\n\t### Task\n\n### Task\n\n\n### Task\n\nThis", "\nUse Call-Based format\nTask\n\nUse Call-Based format\n\n\n### Task\n### Task\n\n### Task\n\nCSharp:\n### Task\n\n\n### Task\n### Task\n\n\n\n\n\t\n### Task\n### Task\n \n}\n```\n\n\n### Task\n\n\n\n\n### Task\n\n\n### Task\n \n### Task", "\nUse Call-Based format\nCall-Based\n\nUse Call-Based format\n### Task\n\nUse Call-Based format\n### Task\n\nTask\n\n\n### Call-Based\n\n\n\n### Task\n### Task\n\n\n### Task\n### Task\n \n\t\n### Task\n### Task\n### Task\n\n### Task\n\n       \nGCD:\n\t### Task", "\nUse Call-Based format\nTask\n\nUse Call-Based format\n\nUse Call-Based format\n\n### Task\n### Task\nTask\n\n\n\n### Task\n### Task\n\n\n\n\t### Task\n### Task\n \n \n \t# Task\n### Task\n### Task\n\n\n### Task\n### Task\n\n### Task\n\n\n### Task\n\nA", "\nUse Call-Based format\nRun the program with `find_initial_numbers`\n\nUse Call-Based format\n### Task\n\nUse Call-Based format\nTask\n\n\n\n\n### Task\n### Task\n\n\n\n\n### Task\n### Task\n\n \n\t### Task\n### Task\n\n\n\n### Task\n\n### Task\n\n### Task\n### Task\n", "Use Call-Based format### Task\n### Task\n\n\n### Task\n### Task\n### Task\n\nA simple number generator to find two numbers\n\n\n### Task\n### Task\n\n\n\n\t### Task\n### Task\n\n\t\n\n### Task\n\n### Task\n\n\n### Task\n\n### Task\n### Task\n\n### Task\n\n\n### Task\n\nA call", "\n### Precondition\nUse Call-Based format\n\nUse Call-Based format### Precondition\n### Task\n### Task\n\nA simple example with an Euclid algorithm\n\n\n\n### Task\n### Task\n\n\n\n### Task\n### Task\n\n\t\n\n### Task\n### Task\n### Task\n\n\n\n\n### Task\n\n\n\n\n### Task\n\n", "\n### Call-Based format\n\nTask\n\nUse Call-Based format\n\n\n### Task\n### Task\n\nGreatest common divisor of two numbers will be `divisor` and `iterations`\n\n\n\n\n### Task\n### Task\n\n\n\n\n### Task\n \n\t### Task\n\n### Task\n### Task\n\n### Task\n\n\n### Task\n\n", "\n### Task\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n### Task\n### Task\nTask:\n### Task\n\nYour program should work with two numbers(` >= 0 `):\n\n\n\n\n### Task\n\n\n\n\n### Task\n\n\n\n\n\n\n\n\n### Task\n\n\n### Task\n\n\n### Task", "Use Call-Based format### Task\nUse Call-Based format\n\n### Task\n\nUse Call-Based format### Task\nTask:\n### Task\n\nCSharp:\n### Task\n\n\n\n### Task### Task\n\n\n\n### Task\n### Task\n \n\n### Task\n### Task\n\n\n\n### Task\n\n\n### Task\n\n\n### Task\n\n", "\n### Call-Based format### Call-Based\nUse Call-Based format\n\nUse Call-Based format\n### Task\n### Task\nTask\n\nCSharp:\n### Task\n\n\n### Task\n### Task\n\n\n\t\nUse Call-Based format### Task\n### Task\n \n\n### Task\nTask\n\n\n### Task\n\n\n\n### Task\n### Task", "\nUse Call-Based format\nTask\n\nUse Call-Based format\n### Task\n### Task\n### Task\n\n\n\n### Task\n\nUse Call-Based format### Task\n\n\n\n### Task\n### Task\n\n \n\n\t\n### Task\n### Task\n### Task\n\n\n### Task\n### Task\n\n### Task\n\n\n\n### Task\n\nA task", "\nUse Call-Based format\nTask\n\n\nUse Call-Based format\n### Task\n\nUse Call-Based format### Task\nTask\n\n### Task\n\n\n### Task\n\n\n\n### Task\n### Task\n\n\n\n\n### Task\n### Task\n \n\t\nUse Call-Based format\n### Task\n\n\n\n\n\n\n\n### Task\n\n### Task", "\nUse Call-Based format\nTask\n\n\n\n### Task\n\nUse Call-Based format\n### Task\n### Task\n\n\n\n### Task\n\n### Task\n### Task\n\n\n\n\t\nUse Call-Based format### Task\n### Task\n\n \n}\n\n\n### Task\n\n\n### Task\n### Task\n\n\n\n### Task\n\n### Task\n", "\nUse Call-Based format\n### Call\n\nUse Call-Based format\n\n\n### Task\n### Task\n\n### Task\n\nA\n\n### Task\n### Task\n\nCSharp\n\n\n\t### Task\n\n### Task\n\n\n \n}\n```\n\n\n### Task\n\n\n\n\n### Task\n\n\n### Task\n\n\n\n### Task"], "prompt": "\nQUESTION:\n### Task\n\nYour main goal is to find two numbers(` >= 0 `), greatest common divisor of wich will be `divisor` and number of iterations, taken by Euclids algorithm will be `iterations`.\n\n### Euclid's GCD\n\n```CSharp\nBigInteger FindGCD(BigInteger a, BigInteger b) {\n  // Swaping `a` and `b`\n  if (a < b) {\n    a += b;\n    b = a - b;\n    a = a - b;\n  }\n  \n  while (b > 0) {\n    // Iteration of calculation\n    BigInteger c = a % b;\n    a = b;\n    b = c;\n  }\n  \n  // `a` - is greates common divisor now\n  return a;\n}\n```\n\n### Restrictions\n\nYour program should work with numbers\n\n`0 < divisor < 1000`\n\n`0 <= iterations <= 50'000`\ndef find_initial_numbers (divisor, iterations):\n\t\nUse Call-Based format\nANSWER:\n"}}