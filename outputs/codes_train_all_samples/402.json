{"402": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    return self.isEscapePossible(blocked, source, target)\n\nuse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTarget square is inaccessible\n\n\n\nIf you encounter an", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nsource[i] == target[i] == target[j]\n\n\n    def isBlocked(self, blocked, source, target):\n        return True\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following two ways can", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nsource == target\ntarget == source\n\n\u00a0\nNote:\n\n\n\n   \n        return False\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nThe following is the question:\n\n\n\n\n\n\n\n\n\n\n\nThe following is an example:\n\n1", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nsource == target\nsource == target\nsource == target\n\n\u00a0\n\n\n   \n    pass\n        \n\n\n\n   \n    self.isEscapePossible()\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nx, y = 0,", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n0 <= blocked[i].length <= 200\n0 <= source[i].length <= 10^6\n0 <= target[i].length <= 10^6\nsource[i][j].length == 10^6\ntarget[i][j].length == 10^6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a 1 million by 1 million grid,\n\nIn a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n0 <= blocked.length <= 200\n0 <= source.length <= 10^6\nsource!= target\n\n\n\n\n   \n    return False\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBecause we're walking through a 4", "\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nsource.length == target.length\nsource.length == target.length\n\n\u00a0\nNote:\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    source[i][j] =", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n        return False\n        \n\n\n\n\n\nsource == target\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif source == target, we can", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\nNote:\n\n\n\n\u00a0\n0 <=", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n0 <= blocked.length <= 200\n0 <= source.length <= 10^6\nsource[i].length == 10^6\ntarget[i].length == 10^6\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= source.length <= 1", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nsource[i][j]!= target[i][j]\n\n\u00a0\n\n          \n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe source square is inaccessible.\n\n\n\nIf we can walk", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nsource == target\ntarget == source\nsource == target\n\n\n\n\n   \n        return True\n        \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a 1 million by 1 million grid\n\n\nIn a 1", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n0 <= blocked.length <= 200\n0 <= source.length <= 10^6\nsource!= target\n\n\n\n   \n   ...\n\n\n\n\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n\n\n\n\nSource square is inaccessible\n\n\n\nA square is located", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n0 <= blocked[i].length <= 200\nblocked[i][j].length == 2\n\n\n\n\n   \n\n\n\n\n\n\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nIn a 1 million by 1", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    return self.isEscapePossible(blocked, source, target)\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nSource square, target square\n\n\n\nIn a 1 m", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return self.isEscapePossible(blocked, source, target)\n\n\n\n\n\n   \n    return self.isEscapePossible(blocked, source, target)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= blocked.length <= 200\n\n\n1 million by", "\nUse Call-Based format\n\n\n\n\n\nsource!= target\n\n\u00a0\n\nsource!= target\n\n\u00a0\n\n    def isEscape(self, source, target):\n        return False\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA list of blocked cells is a 1 million", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return False\n\n   \n    return self.isEscapePossible(self, blocked, source, target)\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00a0\n\n\n \u00a0\n \u00a0\n", "\nUse Call-Based format\nUse Call-Based format\n\n    self.isEscapePossible(self, blocked, source, target)\n\n\n\n\n\n   \n\n\n\n\n\n\n\nThe following is a valid call-based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nThe target square is not accessible\n\n\n\nIf the target", "\nUse Call-Based format\n\n\n\n\n0 <= blocked[i].length <= 200\n0 <= source[i].length <= 10^6\n0 <= target[i].length <= 10^6\nsource[i][j].length == 10^6\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    If blocked = ["], "prompt": "\nQUESTION:\nIn a 1 million by 1 million grid, the coordinates of each grid square are (x, y) with 0 <= x, y < 10^6.\nWe start at the source square and want to reach the target square.\u00a0 Each move, we can walk to a 4-directionally adjacent square in the grid that isn't in the given list of blocked squares.\nReturn true if and only if it is possible to reach the target square through a sequence of moves.\n\u00a0\nExample 1:\nInput: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\nOutput: false\nExplanation: \nThe target square is inaccessible starting from the source square, because we can't walk outside the grid.\n\nExample 2:\nInput: blocked = [], source = [0,0], target = [999999,999999]\nOutput: true\nExplanation: \nBecause there are no blocked cells, it's possible to reach the target square.\n\n\u00a0\nNote:\n\n0 <= blocked.length <= 200\nblocked[i].length == 2\n0 <= blocked[i][j] < 10^6\nsource.length == target.length == 2\n0 <= source[i][j], target[i][j] < 10^6\nsource != target\nclass Solution:\n    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}