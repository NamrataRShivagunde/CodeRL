{"203": {"code": ["\nUse Call-Based format\n\n    def uniquePaths(self, m, n) -> int:\n\n\n\n   \n\n\n\n    -> int:\n        \nUse Call-Based format\nUse Call-Based format\nA robot is located at the top-left corner of a m x n grid\n\n\n\n\n\n\n\n\n\n\n\nA robot is located at\nA", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n   \n\nA robot is located at a top-left corner of a m x n grid.\nA robot is located at a top-left corner of a m x n grid\n\n\nUse Call-Based format\n\n\n\nA robot is located at the top corner\n\n\nA robot is located at the", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\nA robot is located at the top-left corner of a m x n grid\n\n\n\n\n\n\n\nA robot is located at bottom-right corner\n\n\n\nA", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nA robot is located at the top-left corner of a m x n grid.\n\n\n   \n\n\n\n   \n        pass\nA robot is located at the top-left corner of a m x n grid\nA\n\n\n\n\n\n\n\nA robot is located at the bottom-right corner\n\nA", "\nUse Call-Based format\n\n    def uniquePaths(self, m, n):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n       ...\n\n\nDown -> Down -> Right -> Right\n\n\nA robot is located at the top-left corner of a m x n grid\n\n\n\n\n\n\nA robot is located at the topA", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n        \"\"\"\nUse Call-Based format\nA robot is located at a top-left corner of a m x n grid\n\nA robot is located at a top-left corner\n\n\n\nUse Call-Based format\n\n\n\n\nA\n\n\nA robot is located atA robot", "\nUse Call-Based format\n\n\n    def uniquePaths(self, m: int, n: int):\n        \nUse Call-Based format\n\n\n\n   \n\n\n\n   :\n        \nUse Call-Based format\n\nDown -> Right -> Right\n\n\n\nDown -> Down -> Right\n\n\n\n\nA robot is located at the bottom\n\n\n\nA robot", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n   \n\n\n\nA robot is located at the top left corner of a m x n grid\n\n\nA robot is located at the top left corner of a m x n grid\n\n\n\n\nA robot is located\n\n\n\nA robot", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\nUse Call-Based format\nA robot is located at the top-left corner of a m x n grid\n\n\n\n\n\n\n\n\n\n\n\n\n\nA robot is located at", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nA robot is located at the top-left corner of a m x n grid\n\n\n   \n\n\n   \n        \nA robot is located at the top-left corner of a m x n grid\n\n\n\n\n\n\nDown -> Down -> Right\n\n\n\n\n\n\nA robot is located at the top", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n   :\n        \nUse Call-Based format\nUse Call-Based format\nDown -> Down -> Right\nDown -> Right -> Right -> Down\n\n\n\n\n\n\n\n\nA robot is located at the bottom left corner\n\n\n\n\nA", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int):\n        \n\n\n\n\n   \n\n\n\n   :\nUse Call-Based format\nA robot is located at a top-left corner of a m x n grid\n\n\nUse Call-Based format\n\n\n\n\nA robot is located at\n\n\n\n\nA robot", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n   :\n       ...\nThe robot is located at a top-left corner of a m x n grid\nThe robot is located at the bottom-right corner\n\n\n\n\n\n\n\nA robot is located\n\n\n\n\nA robot is located", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n        \n\nA robot is located at top-left corner of a m x n grid\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe robot is located at", "\nUse Call-Based format\n\n    def uniquePaths(self, m, n):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n        \n\nUse Call-Based format\nA robot is located at the bottom-right corner of a m x n grid\n\n\n\n\n\n\n\n\n\nA robot is located at the bottom-right corner", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n        \n\nA robot is located at the top-left corner of a m x n grid\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nA robot is located at the", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int):\n       \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        pass\n\n\nA robot is located at a top-left corner of a m x n grid\n\n\n\n\n\n\n\nA robot is located at bottom-right corner\n\n\n\n", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int):\n        \n\n\n\n\n   \n\n\n\n   \n        \"\"\"\n\n\n\nA robot is located at a top-left corner of a m x n grid\nDown -> Down -> Right\n\n\n\n\n\n\n\nA robot is located\n\n\n\nA robot is located", "\nUse Call-Based format\n\n    def uniquePaths(self, m: int, n: int) -> int:\n        \nUse Call-Based format\n\n\n\n   \n\n\n\n   :\n        \nUse Call-Based format\nA robot is located at the top left corner of the grid\n\n\n\n\n\n\n\nA\n\n\n\n\nA robot is located at", "\nUse Call-Based format\n\n    def uniquePaths(self, m, n):\n        \n\n\n\n\n\n\n\n\n\n   \n       \nA robot is located at the top-left corner of a m x n grid\nA robot is located at the top-left corner of a m x n grid\n\n\n\n\n\n\n\n\n\n\nA robot is located atA"], "prompt": "\nQUESTION:\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?\n\n\nAbove is a 7 x 3 grid. How many possible unique paths are there?\n\nNote: m and n will be at most 100.\n\nExample 1:\n\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Right -> Down\n2. Right -> Down -> Right\n3. Down -> Right -> Right\n\n\nExample 2:\n\n\nInput: m = 7, n = 3\nOutput: 28\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}