{"162": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   :\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2:\n\n\n\nGiven two strings text", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nOutput: 3\n\n\u00a0\nConstraints:\n\n0 <= len(text1) <= 1\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2, return", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nGiven two strings text1 and text2, return the length of the longest common subsequence of both strings.\n\n\n   :\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2,", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n    -> int:\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2, return", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n    -> int:\n   \n\n\n\n\n\nUse Call-Based format\n\n\nThe string is not call-based.\n\n\n\n\nGiven two strings text1 and text2", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nGiven two strings text1 and text2, return the length of the longest common subsequence.\n\n\n   :\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings text1 and text2,", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n    return self.longestCommonSubsequence(text1, text2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2,", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nGiven two strings text1 and text2:\n\n\n   \n    pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings text1 and text", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nExample 4:\n    -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nOutput: 1\n\n\n\nUse Call-Based format\n\n\n   :\n    pass\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n    pass\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven two strings text1 and text", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven two strings text1 and text2, return the length of their longest common subsequence\n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nGiven two strings text1 and text2, return the length of the longest common subsequence of the two strings.\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2,", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   :\n    pass\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2, return the length of the longest common subsequence\n\n\n\n\nGiven two strings", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   :\n    return self.longestCommonSubsequence(text1, text2)\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings text1 and text2", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n   :\n    pass\n        \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\nGiven two strings text1 and text2, return", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return self.longestCommonSubsequence(text1, text2)\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings text1 and text2:\n\n\n\nGiven", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n    -> int:\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings text1 and text2", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nExample:\n\n\nUse Call-Based format\n\n\n\n   :\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings text1 and text2,", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n    -> int:\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings text1"], "prompt": "\nQUESTION:\nGiven two strings text1 and text2, return the length of their longest common subsequence.\nA subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\u00a0A common subsequence\u00a0of two strings is a subsequence that is common to both strings.\n\u00a0\nIf there is no common subsequence, return 0.\n\u00a0\nExample 1:\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n\nExample 2:\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n\nExample 3:\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n\n\u00a0\nConstraints:\n\n1 <= text1.length <= 1000\n1 <= text2.length <= 1000\nThe input strings consist of lowercase English characters only.\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}