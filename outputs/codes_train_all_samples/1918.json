{"1918": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented by pairs of departure and arrival airports [from, to]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline", "\nUse Call-Based format\nEXAMPLES:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented by pairs of departure and arrival airports [from, to]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented by pairs of departure and arrival airports [from, to]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nExplanation:\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented by pairs of departure and arrival airports\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\nNOTE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJFK\", \"MUC\", \"LHR\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    Returns a list of valid itineraries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    Airline tickets represent two or three capital letters.\n\n\n    Airline tickets represent three capital letters.\n\n    Airline tickets represent three capital letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nNote:\n\n\n       Aforeport departs from JFK\n\nNote:\n\n      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct itinerary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of", "\nUse Call-Based format\n\n    Use Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented by pairs of departure and arrival airports\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented by pairs of departure and arrival airports [from, to]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n    You have to use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findItinerary(self, tickets: List[str]) -> List[str]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    Returns a list of airline itineraries in lexical order\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline tickets represented", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    for each airline ticket, reconstruct the itinerary that is represented by a pair of airline tickets\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    For example,\n\n   \n\n\n\nGiven a list of airline", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\n    for from, to, from in [0, 1]:\n        return [\"JFK\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of air", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    def findItinerary(self, tickets: List[str]) -> List[str]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of airline", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nNote:\n\n    Auction is represented by a single string.\n\nNote:\n\n   \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\nGiven a list of", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a list of air", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    tickets = [[\"J", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nNote:\n\n\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a list of airline"], "prompt": "\nQUESTION:\nGiven a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.\n\nNote:\n\n\n       If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\n       All airports are represented by three capital letters (IATA code).\n       You may assume all tickets form at least one valid itinerary.\n\n\nExample 1:\n\n\nInput: tickets = [[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]]\nOutput: [\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"]\n\n\nExample 2:\n\n\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"]. But it is larger in lexical order.\n\n\nCredits:\nSpecial thanks to @dietpepsi for adding this problem and creating all test cases.\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        \nUse Call-Based format\nANSWER:\n"}}