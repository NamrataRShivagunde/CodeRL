{"4216": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n:\n\n\n\nevery(array, interval, start_index = 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)                          array.every(interval)\nevery(array, start_index)                          array.every\n\n\n\n\n\n\n\nCreate a", "\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\nuse Call-Based format\n\ndef every(array, interval = 1):\n\t\nUse Call-Based format\n\n### Translator notes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\n\n```\n\n\n\n\nevery(array, interval)", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nCreate a method (**JS**: function) `every` \n\n\n\nevery(array, interval = 1)\nevery(interval = 2)\n\n\n\n\n\n\n \n\n\n\n\n\n\n### Translator notes\n\n\n\n\n\nevery(array)\nevery(array)\n\n\n**", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nevery(array, interval = 1, start_index = 0):\n\n```\njavascript:                          ruby:          every(array, interval)\nevery(interval)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\n\n\nCreate a method (**", "\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\nevery(array, interval)\nevery(array, interval)\nevery(array, interval)\nevery(array, interval)\n\n```\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\nevery(interval)\n\n\n\n\nCreate a", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nevery(array, interval, start_index)\nevery(array, interval)\nevery(array, interval)\nevery(array, start_index)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\n\n\nCreate a method (**", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nevery(array, interval, start_index = 0)\n\n\n\n\nevery(array, interval, start_index = 0):\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n### Translator notes\n\nUse JS and ruby\n\n\n\n\n\n\nevery(array, interval)                          # array.", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n`every` is a function with the above format\n```\n\n\n\n\nevery(array, interval, start_index)\n\n```\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\nevery(array, interval)\n\n\n\n\n\n\n```js:\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nevery(array, interval = 1, start_index = 0)\n\n### Translator notes\n\nUse Call-Based format\nAnswer:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)                         array.every(interval)\n\n\nCreate a method (**JS", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nEvery(array, interval)                                                array.every\n\n\n\n\nevery(array, interval = 1, start_index = 0)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)                                  \nevery(interval)\n\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\nUse JavaScript format\n\njavascript:                          ruby:  every(array, interval)  array.every\n\njavascript:                          ruby:  every(array, interval)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Translator notes\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\nUse JS format\n\nUse Call-Based format\n\nAnswer:\n\njavascript: \nevery(array)                          array.every\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\n\n\n\n\n### Translator notes\n\n\nevery(array,", "\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\nUse JS format\n\nUse Call-Based format\n\nanswer:\n\nevery(array, interval, start_index)\n\nanswer:\n\nevery(array)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array)\n\n\n\nevery(array, interval)", "\nUse Call-Based format\n\n\n\nevery(array, interval = 1, start_index = 0):\n\n\n:\n\n\n\n\n\nUse JS format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Translator notes\n\njs:\nuse js\njavascript:\nevery(array)\nevery(array)\n\n\n\n\n\n\nevery(array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\nCreate a method (**JS**: function) `every` \n\nQUESTION:\nCreate a method (**JS**: function) `every`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\n\n\n\n```javascript", "\n\n\n\nevery(array, interval, start_index = 0):\n\n\n:\n\n\n\n\n\n\nuse Call-Based format\n\n### Translator notes\nJavascript:\n\nUse Call-Based format\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n### Test\n\n\n\n\nevery(array, interval)\n\n\n### Examples\n\n\n```", "\n\n\n\nevery(array, interval = 1)\nevery(array, interval = 1, start_index = 0)\n\n\n:\n:\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\nevery(array, interval)                   array.every(interval)\n\n\n\n\nevery(array, interval)                         array.every\n\n\n\n\tif not array", "\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n# Usage\n\nevery(array, interval, start_index = 0)\n# Function that returns every element of an array\n#\n\n\n:\n\n\n\n\n\n\n\n\n\nevery(array, interval, start_index)\nevery(interval)\n\n\n\n\n\n\n\n    array[", "\n\n\n\nevery(array, interval = 1)\nevery(array, interval = 1)\nevery(array, interval = 0)\n\n:\n:\n:\n:\n\n\n:\n:\n\n\n\n:\n\n\n\n\n\n\nevery(array, interval)                            array.every\nevery(array, interval)\n\n\n\n\n\n\n\n\tevery(", "\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\nevery(array, interval = 1, start_index = 0):\n\n\n\n\n\n\n\n\n\nevery(array, interval = 1, start_index = 0):\n\n\n\n\n\n\n\n\n\n\nevery(array, interval)\n\n\n\n\n### Translator notes\n\n\njavascript"], "prompt": "\nQUESTION:\nCreate a method (**JS**: function) `every` which returns every nth element of an array.\n\n### Usage\n\nWith no arguments, `array.every` it returns every element of the array.  \nWith one argument, `array.every(interval)` it returns every `interval`th element.  \nWith two arguments, `array.every(interval, start_index)` it returns every `interval`th element starting at index `start_index` \n\n**Note**: due to fact JS translation ask for a function instead of an Array method the above uses will be :\n```\njavascript:                          ruby:\nevery(array)                         array.every\nevery(array, interval)               array.every(interval)\nevery(array, interval, start_index)  array.every(interval, start_index)\n\n```\n\n### Examples\n\n### Notes\nTest cases:  \n\n`interval` will always be a positive integer (but may be larger than the size of the array).  \n`start_index` will always be within the bounds of the array.  \n\nOnce you have completed this kata, try the **advanced version** (http://www.codewars.com/kata/every-nth-array-element-advanced) which allows negative intervals and unbounded start\\_indexes \n\n### Translator notes\nRuby is the original language for this kata.\ndef every(array, interval = 1, start_index = 0):\n\t\nUse Call-Based format\nANSWER:\n"}}