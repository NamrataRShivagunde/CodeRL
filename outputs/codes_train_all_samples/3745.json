{"3745": {"code": ["\n\n\n\n# Decoding\n\n# State\n\n\n\n\n\nDecoding Algorithm\n\nThe encoding algorithm was used by G4EGG\n\nThe encoding algorithm was created by:\n\n# Initialization\n\n1\n\n# Decoding\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n# Output\n", "\n# Extraction\n# References\n# References\n\n# Efficient\nIntroduction\n\n# Integrity\n\n# Age\n\n2\n\n\n\n\n\nEncoding\n\nInc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n# Decoding steps\n\n-\n\n\n\n\n\n# Decoding\n\n `", "\n\n Generator\n\n# Run Algorithm\n\nCondi (Conduction)\n\n# Output\n\n1 - 3 - 2 - 3\n2 - 4 - 5\n3 - 4 - 5\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n\n\n\n\n\n\n# Output\n\n", "\n# Example\n\n\n\n# Output\n\n# Encoding\n\nIntroduction\n\n# Decoding\n\n# Output\n\nintroduction\n\n\n\n# Decoding Algorithm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n- Encode the first letter and number of occurrences\n-\n `message", "\n Creation\n\n# Creation\n\nIntroduction\n\n# Creation\n\n# Creation\n\n# Creation\n\n# Creation\n\n# Creation\n\n# Creation\n\n# Creation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\nDecoding\n\n\n\n\n\n\n# The encoding algorithm is as", "\n# Init\n\n\n\n# Run\n\n# Initialization\n\n# Decryption\n\n# Initialization\n\n# Computation\n\n# References\n\n# References\n\n# References\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n- `initShift", "\n# Branding\n\n# Branding\n\n\n\n\n\n\n\n\n# Decoding\n\n# Decoding Algorithm\n\nThe encoding algorithm is described in the above example:\n\n# Preparation\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n10 = 1,2", "\n\n Run with an initial key\n\n# References\n\n1 1 2 2 3 4 4 5 5 6 7 8 8 9 10 10 11 11 12 12 12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n# Decoding steps\n\n-\n\n\n\n\n\n\n# Decoding\n\n `", "\n# Interactions\n\n# Brains\n\n Introduction\n\n# Exchanges\n\n# Decoders\n\n# Computer\n\n# Computer\n\n# Computer\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Keep repeating, and the first", "\n# Regression\n\n# Description\n\n Inference\n\n Input\n\n# Decoding\n\n- Decoding\n\n- Upper\n\n- Upper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n1  2 ", "\n\n\n\n# Initialization\n\n# Step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n- `key` - a string to encode/decode\n- `message` - a string to decode\n\n# Post\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n- `message` - a string to encode/", "\n Independent\n\n# Algorithm\n\n# Computation\n\n# Computation\n\n\n\n\n\n\n\n\nDecoding Algorithm\n\n# Decoding Algorithm\n\n```python\n1  2  3  4  5  6  9 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n- First position, and last position, are all", "\n\n Initializer\n\n# Step 1\n\n\n# Step 2\n\n\n# Step 3\n\n\n# Step 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n\n\n\n\n1  2  3  4  5", "\n\n Encodes\n\n# Decodes\n\n-\n\n# Decoders\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n- Create two functions\n\n- Create two functions -\n1 1 2 2", "\n\n Extraction\n\n# Conduction\n\n# Burning\n\n1\n\n# Decoding\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n# Decoding steps\n\n- End with an initial key\n\n1\n\n\n\n\n\n\n\n- Use the `message` - the new string", "\n\n Generator\n\n# Initialization\n\n# Initialization\n\n# Initialization\n\n# Initialization\n\n# Initialization\n\n# Initialization\n\n# Initialization\n\n# Initialization\n\n# Initialization\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding Algorithm\n\n `message`", "\n\n\n\n\n# Initialization\n\n# Initialization\n\n# Conduction\n\n#\n\n\n\n\n\n\n# Decoding\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding\n\n\n\n\n# Decoding Algorithm\n\n```python\n-\n2  3  4  5  6  7  8  9\n\n\n `", "\n\n Introduction\n\n# Description\n\n# Description\n\n# Description\n\n# Description\n\n# Description\n\n# Description\n\n# Description\n\n# Description\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Decoding\n\n\n\n- The first occurrence of the first letter is", "\n Outcome\n\n# Inference\n\n\n\n\n\n\n Decoding Algorithm\n\n# Algorithm\n\n# Encoding\n\n- Pre-Encoding\n\n- Repeated\n\n1  2  3  4  5  6  7  8  9  10  11 11 11 11 12 12 12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n Extraction\n\n# Extraction\n\nIntroduction\n\n# Extraction\n\n# Edition\n\n1 1 2 3 4 5 5 6 7 7 8 9 10 11 11 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- The first step is:\n\n1"], "prompt": "\nQUESTION:\n# Introduction\n\nThe Condi (Consecutive Digraphs) cipher was introduced by G4EGG (Wilfred Higginson) in 2011. The cipher preserves word divisions, and is simple to describe and encode, but it's surprisingly difficult to crack. \n\n# Encoding Algorithm\n\nThe encoding steps are:\n- Start with an `initial key`, e.g. `cryptogram`\n- Form a `key`, remove the key duplicated letters except for the first occurrence\n- Append to it, in alphabetical order all letters which do not occur in the `key`.  \n  The example produces: `cryptogambdefhijklnqsuvwxz`\n- Number the `key alphabet` starting with 1.\n```python\n1  2  3  4  5  6  7  8  9  10 11 12 13\nc  r  y  p  t  o  g  a  m  b  d  e  f \n14 15 16 17 18 19 20 21 22 23 24 25 26\nh  i  j  k  l  n  q  s  u  v  w  x  z\n```\n- One of the inputs to encoding algorithm is an `initial shift`, say `10`\n- Encode the first letter of your `message` by moving 10 places to the right from the letter's position in the key alphabet. If the first letter were say `o` then the letter 10 places to the right in the `key alphabet` is `j`, so `o` would be encoded as `j`. If you move past the end of the key alphabet you wrap back to the beginning. For example if the first letter were `s` then counting 10 places would bring you around to `t`.\n- Use the position of the previous plaintext letter as the number of places to move to encode the next plaintext number. If you have just encoded an `o` (position 6) , and you now want to encode say `n`, then you move 6 places to the right from `n` which brings you to `x`.\n- Keep repeating the previous step until all letters are encoded.\n\nDecoding is the reverse of encoding - you move to the left instead of to the right.\n\n# Task\n\nCreate two functions - `encode`/`Encode` and `decode`/`Decode` which implement Condi cipher encoding and decoding.\n\n# Inputs\n\n- `message` - a string to encode/decode\n- `key` - a key consists of only lower case letters\n- `initShift` - a non-negative integer representing the initial shift\n\n# Notes\n- Don't forget to remove the duplicated letters from the `key` except for the first occurrence \n- Characters which do not exist in the `key alphabet` should be coppied to the output string exactly like they appear in the `message` string\n- Check the test cases for samples\ndef encode(message, key, shift, encode=True):\n\t\nUse Call-Based format\nANSWER:\n"}}