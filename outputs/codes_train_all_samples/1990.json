{"1990": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nExample 2:\n\n\n\n   \n        \n\n\nYou are given n pairs of numbers\n\n   \n        pass\n\n\n\nYou are given n pairs of numbers.\n\n\n\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample", "\nUse Call-Based format\n\n\n    def findLongestChain(self, pairs: List[List[int]]):\n        \nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n    findLongestChain(self, pairs)\nUse Python format\n\n\n\n\n\n\n\n\n\n\nYou are given n pairs of numbers\n\n\nYou are", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n    __init__(self):\n\nYou are given n pairs of numbers\n\n\n\n\n -> [c,d]\n\n\nExample 2:\n\n\n\n\n\n\nA number can be found as long", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        pass\n\n\n\n\n\nYou are given n pairs of numbers\n\n    def findLongestChain(self, pairs: List[List[int]):\n       \n        \n\nYou are given n pairs of numbers\n\n\n\n\n\n\n\n\n\n\n\n\n\nA number is always smaller than any", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        pass\n        \n\nYou are given n pairs of numbers.\n\n\nExample 2:\n\nInput: [1,2,3,4]\nOutput: 2\n\n    __init__:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    If you", "\nUse Call-Based format\n\n\n    def findLongestChain(self, pairs: List[List[int]]) -> int:\n\n\n\n\n\n   \n       ...\n\n\n\nYou are given n pairs of numbers.\n\n   \n\n\n\n\n\n\n\n\n\nYou are given n pairs of numbers\n\n\n\n\n\n\n    [1]:\n   ", "\nUse Call-Based format\n\n\n    findLongestChain(self, pairs: List[List[int]):\n    print(pairs)\n\n\n\n\n\n   \n        pass\n\n\n\n    __init__(self):\nYou are given n pairs of numbers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n   \n        print(\"Hello world\")\n        \n\n\nYou are given n pairs of numbers\n\n   \n        pass\n\n\n\nYou are given n pairs of numbers.\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\nInput", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n         \n       ...\n\n\n\n\n\n   \n        \n\n\nYou are given n pairs of numbers.You are given n pairs of numbers.\n\n\n\n\n\n\n\n\n\n\nYou are given n pairs of numbers.\n\n\n\nIf you define", "\nUse Call-Based format\n\n\n    def findLongestChain(self, pairs: List[List[int]]) -> int:\n\n\n\n\n   \n        \n\nYou can select n pairs of numbers\n    __init__(self):\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nA number is always smaller than any", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\nYou are given n pairs of numbers\n\n\nExample 2:\n\nInput:\n\nOutput: 1\nExplanation:\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA number is always smaller than", "\nUse Call-Based format\n\n\n    pass\n    pass\n\n\n\n\n          \n        pass\n\nYou are given n pairs of numbers\n\n   \n        pass\n        \nYou are given n pairs of numbers\nYou are given n pairs of numbers. \n\n\nUse Call-Based format\n\n\n\n\n\n\n\nYou are given n pairs of numbers. \nYou are", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n          \n\n\nYou are given n pairs of numbers.\n\n\nExample 2:\n\nInput: [1,2,3]\nOutput: 2\n\n\nExample 3:\n\nExample 4:\n\n    __init__:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given", "\nUse Call-Based format\n\n\n\n\nYou are given n pairs of numbers.\n\n\n\n   \n        pass\n\n\nYou are given n pairs of numbers\n\n   \n        pass\nYou are given n pairs of numbers\nYou are given n pairs of numbers.\n\n\n\n\n\n\nYou are given n pairs of numbers\n\n\n\n\n\n\n\nExample 2:", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        pass\n\n\nYou are given n pairs of numbers.\n\n\n\n    def\n\n\n\n\n\nExample 2:\nYou are given n pairs of numbers\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nYou are given n pairs of numbers\nYou are", "\n\n\n\n\nUse Call-Based format\nYou are given n pairs of numbers\n\n\n\n\n\n   \n        return self.findLongestChain(pairs)\n\nYou are given n pairs of numbers\n\n    findLongestChain(self, pairs):\n\n\n\n\n\n\n\n\n\n\n\nYou are given n pairs of numbers\n\n\n\n\n\nYou are", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nYou are given n pairs of numbers.\nUse Call-Based format\n\n\n   \n        \n\nYou are given n pairs of numbers\n\n    __init__(self):\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n    Question:\n    You", "\n\n\n\n\n\n\n\n\n   \n        print('This is a Call-Based format')\n\n\n\n    def findLongestChain(self, pairs: List[List[int]):\n       \n        \nUse Call-Based format\nPlease use a function\n\n\n\n\n\n\n\n\n\nYou are given n pairs of numbers\n\n\n\n1) A pair of", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        pass\n\n\n\n\n    def findLongestChain(self, pairs: List[List[int]]) -> int:\n       :\n\n\n\n\n\n\n\n\n\n\n\nYou are given n pairs of numbers.\n\n\n\nYou", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    pass\n\n\nExample 2:\n\nYou are given n pairs of numbers.\n\n\n    __init__(self)\n\nYou are given n pairs of numbers\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\n\n\n    A number is always smaller"], "prompt": "\nQUESTION:\nYou are given n pairs of numbers. In every pair, the first number is always smaller than the second number.\n\n\n\nNow, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion. \n\n\n\nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.\n\n\n\nExample 1:\n\nInput: [[1,2], [2,3], [3,4]]\nOutput: 2\nExplanation: The longest chain is [1,2] -> [3,4]\n\n\n\nNote:\n\nThe number of given pairs will be in the range [1, 1000].\nclass Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}