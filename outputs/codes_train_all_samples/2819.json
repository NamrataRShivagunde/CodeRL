{"2819": {"code": ["\n### General Context\n\n### Recursion Context\n\n### Fibonacci Number\n\n```python\ndef fibonacci(n):\n\t\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\nThis algorithm uses memoization\n\n\n\n\n### Problem Context\n\n```", "\n### Problem Context\n### Problem Context\n\n### Problem Context\n\n\n\n```python\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n### Problem Context", "\n### Problem Context\n### Problem Context\n\n# Do not use this function!\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n### Problem Context", "\n### Fibonacci Number\n\n\n### Fibonacci Number\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n### Problem Context\n\nThe\n\n\n\n### Problem Context\n\n```python", "\n### Problem Context\n### Problem Context\n\n### Recursion Context\n\n\n\n\n### Problem Context\n\n\n# Problem Context\n\n### Problem Context\n\nThe Fibonacci Number\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n### Problem Context", "\n### Fibonacci Number\n\n\n### Recursion Context\n\n```python\ndef fibonacci(n):\n\t\nUse Call-Based format\n\n## Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n### Problem Context\n\n```python", "\n### Recursion Context\n\n### This algorithm uses a memoization cache\n\n### Reduction Context\n\n### Fibonacci Number\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\nThis algorithm uses memoization\n\n###\n\n\n\n\n\n", "\n### Explanation\n### Problem Context\n\nFibonacci:\n\n### Problem Context\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\nThe\n\n\n\n### Problem Context\n\n", "\n### Explanation\n### The Fibonacci number\n\n### Recursion\n\n\n\n\n### Problem Context\n\n\n\n\n\n### Recursion Context\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n### Problems Context\n\nThe\n\n\n\n\n### Problem Context\n", "\n### Problem Context\n\n## Functions\n\n#\n\n### Recursion\n\n# Fibonacci\n\n### Recursion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n``", "\n### Problem Context\n\n### Sicp\n\n### Recursion Context\n\n\n\n\n### Problem Context\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n### Problem Context\n\nThe Fibonacci algorithm works well well well.\n\n\n\n\n###\n\n\n\n### Problem Context", "\n### Problem Context\n### Problem Context\n\n# Functional\n\n### Recursion Context\n\n### Problem Context\n\n#\n\n\n\n\n### Problem Context\n\nThe Fibonacci number\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n### Problem Context", "\n### Problem Context\n\n# Use Call-Based format\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n### Problem Context\n\nThe Fibonacci number\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem", "\n### A Fibonacci number\n### A Call-Based format\n\n\n\n\n### A Call-Based format\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\nThe following algorithm\n\n```python\n\n\n\n\n```", "\n### Problem Context\n\nThe Fibonacci algorithm uses the Call-Based format\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n\n\n\n\n```", "\n### Problem Context\n### Problem Context\n\n### Fibonacci Number\n\n### Fibonacci Number\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n    ### Problem Context\n", "\n### Problem Context\n### Problem Context\n\n### Fibonacci Number\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n```python", "\n### Refactored format\n\n### Fibonacci Number\n\n### Call-Based format\n\n\n\n### Problem Context\n\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\nFibonacci number\n\n```python\n\n\n\n###\n\n\n### Problem Context\n\n", "\n### Problem Context\n\n# Problem Context\n\n### Problem Context\n\n### Problem Context\n\n\n\n\n### Problem Context\n\n\n\n\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n\n### Problem Context\n\nThe algorithm is simple\n\n\n\n### Problem Context\n\n\n\n\n\n\n", "\n### Problem Context\n### Problem Context\n\n### The function for calculating Fibonacci numbers\n\n```python\n\n\n### Problem Context\n\n\n\n### Problem Context\n\n\n\n\n\n\n\n\n\n\n### Problem Context\n### Problem Context\n\n\n\n\n\n\n\n\n### Problem Context\n\n\n### Problem Context\n\n\n\n\n\n### Problem Context\n"], "prompt": "\nQUESTION:\n### Problem Context\n\nThe [Fibonacci](http://en.wikipedia.org/wiki/Fibonacci_number) sequence is traditionally used to explain tree recursion.  \n\n```python\ndef fibonacci(n):\n    if n in [0, 1]:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n```\n\nThis algorithm serves welll its educative purpose but it's [tremendously inefficient](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2), not only because of recursion, but because we invoke the fibonacci function twice, and the right branch of recursion (i.e. `fibonacci(n-2)`) recalculates all the Fibonacci numbers already calculated by the left branch (i.e. `fibonacci(n-1)`).\n\nThis algorithm is so inefficient that the time to calculate any Fibonacci number over 50 is simply too much. You may go for a cup of coffee or go take a nap while you wait for the answer. But if you try it here in Code Wars you will most likely get a code timeout before any answers.\n\nFor this particular Kata we want to **implement the memoization solution**. This will be cool because it will let us *keep using the tree recursion* algorithm while still keeping it sufficiently optimized to get an answer very rapidly.\n\nThe trick of the memoized version is that we will keep a cache data structure (most likely an associative array) where we will store the Fibonacci numbers as we calculate them. When a Fibonacci number is calculated, we first look it up in the cache, if it's not there, we calculate it and put it in the cache, otherwise we returned the cached number.\n\nRefactor the function into a recursive Fibonacci function that using  a memoized data structure avoids the deficiencies of tree recursion Can you make it so the memoization cache is private to this function?\ndef fibonacci(n):\n\t\nUse Call-Based format\nANSWER:\n"}}