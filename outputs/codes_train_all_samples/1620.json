{"1620": {"code": ["\n\n### Call-Based\n\n# The kata task\n\n## Call-Based format\n\n\n\n\n\n\n\n\n\n\n# Example\n\n## n_linear\n\n#\n\n\n\n1. `U(2, 3) = [1, 2, 3]`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Call-Based\n\n", "\n\t\t# Runs without kata first\n\t\t# Runs without kata first\n\n\n\n\n\n\n\n\n\n\n1. For each integer in `m`, find the `n`th value.\n\n2.\n\n\n\n\n\n\n\n\n\n\n\n### Tips\n\n## Task\n\n\n\n\n\t\n\n### Task\n\n### Task", "\n1 produces 5 and 7.\n1 produces 6 and 10.\n\n\n\n\n\n\n\n\n\n# Functional\n\nU = n_linear(m,n)\n\n## Functional Examples\n\n#### `U(m)` = [1]\n\n\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Run-Based\n\n###", "\n\n\n\n# Run-Based format\n\n### Run-Based format\n\n# Wake-linear\n\n#\n\n\n\n\n\n\n\n\nTest-Based format\n\n\n\n\n1 produces 2 and 4.\n1 produces 6 and 7.\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n### Kata\n\n\n\n\n# `U(", "\n# A call-based format\n\n\n\nUse Call-Based format\n\n# A sequence\n\n## Example\n\n# A sequence of 1 and 2\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n# A sequence of 1 and 2\n\n\n\n\n\n\n\n\n\n\n\n### Performance\n\n\n\n## Performance\n\n\n* Test", "\n# n_linear(m,n)\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n# n_linear\n\n* Use Call-Based format\n\n\n\n\n\n\n## Task\n\n### Task Examples\n\n\n\n3\n\n\n\n\n\n\n\n\n\n### Task Examples\n\n#### Tests use large n\n\n\n\n\n", "\n\t\t# Reimplement the `n_linear` function\n\t\t# Reimplement the `n_linear` function\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tU(2, 3)\n\t\n\n\n\n\n\n\n\n\n1 produces 6 and 41.\n1 produces 8 and 9.\n\n2\n\n\n\n\n\n\n### Tips", "\n\n\n\n\n\n\n# Example:\n\n## Example:\n\n### Wide Linear\n\n### Slow Linear\n\n# Slow linear run time\n\n# Slow linear run time\n\n\n\n\n\n\n\n\n\n\n\n\n\n2\n\t\n\n\n\n\n\n\n\n\n\n### Task Examples\n\n####\n\n\n\n\t# Baseline", "\n\nUse Call-Based format\n\n### Call-Based Example\n\n# Example 1\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Testing\n\n#\n\n\n\n\n#\n\n\n\n\n\n\n### Task Examples\n\n## Task Examples\n\n#\n\n\n\n\n\n\n\n\n\n# Task Examples\n\n####\n\n##", "\n\tU(1,2) = [1]\n\n## Task\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1. `m` is a set of positive integers.\n2.\n\n\n\n\n\n\n\n\n\n\n\n\n## Tips\n\n### Call-Based\n\n\n\n\n## Tips\n\n", "\n\n## General\n\n### Examples\n\n### m,n\n\nUse Call-Based format\n\n# Run-Based\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\t\n# Run-Based\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example\n\n## Example\n\n\n\n## Example\n\n\n", "\n\t\"\"\"\n\n\n\n\n\n\n\n1. A simple algorithm\n\n2. A simple sequence\n\n3. A simple sequence\n\n4. A simple sequence\n\n5. A simple sequence\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Task\n\n\n\nUse Call-Based format\n\n\n\n\n\n## Tips\n\n", "\n\n# Examples\n\n## Simple\n\n# [n]\n\n\n\n\n\n\n\n\n\n\n1. No elements in `m` are not defined.\n\n2. No elements in `m` are not defined.\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Task Examples\n\n\n\n\n# [2]\n#", "\n\t\t# Test-Based format\n\n\n\n\n\n\n\n# Test-Based format\n\n# Two-Work\n\n#\n\n\n\n\n# Two-Work\n\n#\n\n\n\n1.\n2.\n5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Task\n\n\n\n## Task\n\n\n# Tests use", "\n\n\n\n# Example\n\n# [m,n]\n\n## Example\n\n# [m,n]\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\t\n\n\n#\n\n1 produces 2 and 4.\n1 produces 7 and 9.\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n## Examples\n\n### T", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n## Numerical Examples\n\n#### `U(m, n)` = [1, 2, 3, 4]`\n\n1 produces 2 and 4.\n\n2 produces 5 and 9.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Linear\n\n\n\n## S", "\n\n\n\n0, 1, 2, 3, 4, 5, 6, 7, 8\n\n# All the examples\n\n### Tests\n\n*\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Task\n\n\t\n\n\n\t\n\n\n\n\n\n\n## Run-Based\n\n## Run\n\n\n\n\n\n# Example 1\n\n1", "\n# Run-Based\n\n# Test-Based\n\n# Test-Based\n\n# Test-Based\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\tU(m)[0] = 1\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Reports\n\n# Reports\n\n#\n\n\n\n# `", "\n\t\tn_linear(m,n)\n\n## Example\n\n## Example (nLinear):\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n## Call-Based\n\n\n\t\n\n\n### Data\n\n\n\n\n\n\n\n\n\n\n\n### Task Examples\n\n\n\n\n\n\n\n\n### Tasks\n\n### Tests", "\n\n## Usage\n\n# [n_linear]\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata algorithm is kata.\n\n### Parameters\n\n# `m`\n\n# [n]\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis kata generalizes a set of integers.\n\n\n\n\n\n# [1]\n"], "prompt": "\nQUESTION:\nThis kata generalizes [Twice Linear](https://www.codewars.com/kata/5672682212c8ecf83e000050). You may want to attempt that kata first.\n\n## Sequence\n\nConsider an integer sequence `U(m)` defined as:\n\n1. `m` is a given non-empty set of positive integers.\n2. `U(m)[0] = 1`, the first number is always 1.\n3. For each `x` in `U(m)`, and each `y` in `m`, `x * y + 1` must also be in `U(m)`.\n4. No other numbers are in `U(m)`.\n5. `U(m)` is sorted, with no duplicates.\n\n### Sequence Examples\n\n#### `U(2, 3) = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]`\n\n1 produces 3 and 4, since `1 * 2 + 1 = 3`, and `1 * 3 + 1 = 4`.\n\n3 produces 7 and 10, since `3 * 2 + 1 = 7`, and `3 * 3 + 1 = 10`.\n\n#### `U(5, 7, 8) = [1, 6, 8, 9, 31, 41, 43, 46, 49, 57, 64, 65, 73, 156, 206, ...]`\n\n1 produces 6, 8, and 9.\n\n6 produces 31, 43, and 49.\n\n## Task:\n\nImplement `n_linear` or `nLinear`: given a set of postive integers `m`, and an index `n`, find `U(m)[n]`, the `n`th value in the `U(m)` sequence.\n\n### Tips\n\n* Tests use large n values. Slow algorithms may time-out.\n* Tests use large values in the m set. Algorithms which multiply further than neccessary may overflow.\n* Linear run time and memory usage is possible.\n* How can you build the sequence iteratively, without growing extra data structures?\ndef n_linear(m,n):\n\t\nUse Call-Based format\nANSWER:\n"}}