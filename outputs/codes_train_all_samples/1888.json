{"1888": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    \n\n      v = 1\n       d = 1\n\n\n\n\n\n\n\n\n    self.val = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    In this case a given depth", "\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n         \\   / \n  1   1   5   \n\nd = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv = 1\nd = 2\n\nOutput: \n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\nv = 0\nd = 1\n\n\n\n\n\n\n\n\n\n    v = 1\n\n\n\n\n\n\n\n\nGiven the", "\nUse Call-Based format\n\n    v = 1\n    d = 1\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n    \n     / \\     \\\n \n       \n\n\n\n\n    def addRow(self, root, v, d):\n        return root\n\n\n\n\n\n\n\n\n\n\n  v = 2\n  d", "\n\nUse Call-Based format\n\n    v = 1\n     d = 2\n    \n     \n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n v = 1\n   d = 2\n\n\n\n    def add(self):\n\n\n\n\n\n\n \n \n\n\n\nGiven the root of", "\nUse Call-Based format\n\n\n   \n    # Definition for a binary tree node\n    v = 0\n    d = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n 2   1    \n\n\n\n\n    # Definition for a binary tree node\n\n\n\n\n\n\n\n\n\n\nGiven the root of a binary tree,", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    v = 1\n    d = 1\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n     / \\     \\\n  1   1   5   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv = 0\n\nd = 1\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n v\n    d = 1\n\n\n\n\n\n  v = 0\n  d = 1\n\n\n\n\n\n\n\n\n\nGiven the root of a binary tree,", "\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n         \\   \\     / \n  1   1   5   \n\n\n\n v = 1\n     d = 2\n\n\n\n    v = 0\n        d = 1\n\n\n\n\n\n\n\n\n\n\n\nGiven the root of a binary tree", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n     / \\     \\ \n    2   1    \n     / \\     \\ \n    \n\n\n\n\n\n\n\n    def addOneRow(self, root):\n\n\n\n\n\n\n\n\n\n\nGiven the root of a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nAdd a row of tree nodes with value v and depth d\n\n\n\n\n\n\n\n\naddOneRow(self, root, v, d)\n\n\n\n\n\n    # Definition for a binary tree node\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the root of", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    v = 0\n      d = 0\n\n\n\n\n\n\n\n\nv = 1\nd = 2\n\n\n\n\n\n\n\n\n\n \n \n\nGiven the root of a binary tree", "\nUse Call-Based format\n\n   \n    # Use Call-Based format\n\n\n\n    # Value v and depth d\n   \n\n\n\nUse Call-Based format\n\n\n\n    \n   \n\n\n\n v  # Value v = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    v = 2\n    d", "\nUse Call-Based format\n\n\n    Add one row of nodes with value v and depth d.\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n 1   1   2   3   3   5   \n\n\n\n\n\n\n\n\n\n\nGiven the root of a binary tree:\n\n\n\n\nGiven the", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n     / \\     \\ \n  1   1   5   \n\nv = 1\n\nd = 2\n\nOutput: \n       4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the root of a binary tree,", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n     \\     \\     \\     \\\n  1   1   5   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the root of a binary tree", "\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nNote:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv = 2\nd = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    given the root", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nNote:\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n 1   1   2   3   5   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv = 1\n\nd = 2\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nExample:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Definition for a binary tree\n\n\n\n\n\n\n\nGiven the root of a", "\nUse Call-Based format\n\n\n    # Definition for a binary tree:\n    root = TreeNode\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n    v = 1\n    \n    d = 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    For each root node at depth 1,"], "prompt": "\nQUESTION:\nGiven the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1. \n\nThe adding rule is: given a positive integer depth d, for each NOT null tree nodes N in depth d-1, create two tree nodes with value v as N's left subtree root and right subtree root. And N's original left subtree should be the left subtree of the new left subtree root, its original right subtree should be the right subtree of the new right subtree root. If depth d is 1 that means there is no depth d-1 at all, then create a tree node with value v as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\nExample 1:\n\nInput: \nA binary tree as following:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n\nv = 1\n\nd = 2\n\nOutput: \n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n\n\n\n\n\nExample 2:\n\nInput: \nA binary tree as following:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n\nv = 1\n\nd = 3\n\nOutput: \n      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n\n\n\nNote:\n\nThe given d is in range [1, maximum depth of the given tree + 1].\nThe given binary tree has at least one tree node.\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def addOneRow(self, root: TreeNode, v: int, d: int) -> TreeNode:\n        \nUse Call-Based format\nANSWER:\n"}}