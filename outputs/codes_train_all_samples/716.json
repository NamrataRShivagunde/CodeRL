{"716": {"code": ["\n\n\n\n\n\n\nType 0 Operation\n\nType 1 Operation\n\n---\n\n\n\n\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(T,M)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\nThe function LeastPrimeDivisor(x)\n\n\n\n\n\n1 \ufffd", "\n\n\n\n\n\n\n\n\n\n\nT = 10\n\nAi = 100\n\nM = 10\n\n-----Functions-----\n\nThe function LeastPrimeDivisor(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdate(L,R):\n\t\ta[L]\n\n-----Output-----\n\n- 1", "\n\n\n\n\n\n\n\n\nType 0 Operation\n\nType 1 Operation\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(a)\n\nThe function LeastPrimeDivisor(a)\n\nType 0 Operation\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u2264 L \ufffd", "\n\n\n\n\n\n\n\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(x)\n\n Ai = 0\n\tT = 1\n\n-----Subtasks-----\n\nThe function LeastPrimeDivisor(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n L \u2264 N \ufffd", "\n\n\n\n\n\n\n\n\n\n\n\n1 - L - M - Ai - N\n- 1 - M - N - M - Ai\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\n\n\n\n\n\n-----Subtasks-----\n\nThe number of test cases is a number of query.\n- 1", "\n\n\n\n\n\n\nType 0 Operation\n\nType 1 Operation\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(x)\n\nThe function LeastPrimeDivisor(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\n\n\n\n\n-----Constraints-----\n\nType 0 Operation\n\n\n", "\n\n\n\nType 0 Operation\n\nType 1 Operation\n\n-----Constraints-----\n\nAi = 1\n\nAi = 2\n\n-----Subtasks-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nT = 106\nM = 103\n\n\n- 1", "\n\n\n\nType 0 Operation\n\nType 1 Operation\n\n\n\n\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(x)\n\nAi = a[0];\n\n-----Subtasks-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- 1 \u2264 T \ufffd", "\n\n\nType 0 Operation\n\nType 1 Operation\n\nType 2 Operation\n\nType 3 Operation\n\nType 4 Operation\n\nType 3 Operation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\n\n\n\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(x):\n\n-", "\n\n\n\n\n\n\n\n\n\n\tAi = 0\n\tL = 0\n\tR = 0\n\tT = 0\n\tAi = 0\n\n-----Tests-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Constraints-----\n\n\n\nUpdate(L,R)\n\n-----Constraints-----\n\nType 1 Operation\n\n\n N =", "\n\n-----Description-----\n\nDescription of the function LeastPrimeDivisor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL \u2264 T \u2264 T \u2264 1\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\nType 0 Operation\n\n-----Subtasks-----\n\nType 1 Operation\n\n\n- 1 ", "\n\n\n\n\n\n\n\n\n  Ai = T;\n\n \n \n\n\n  Ai = T;\n\n  T = 100;\n\n \n  Ai = T;\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\nThe function LeastPrimeDivisor(\ufffd", "\n\n\n\n\n\n\nType 0 Operation\n\nType 1 Operation\n\nNote:\n\n\n\nAi,L,R,T\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Constraints-----\n\n\n\nAi = N\nT = M\n\n-----Subtasks-----\n\n\n Ai is a prime number", "\n\n\n\n\n\n\n-----Constraints-----\n\n\nAi = 1;\n\nT = 2;\n\nAi = 3;\n\n-----Subtasks-----\n\nAi = 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\n\n\u2264 Ai \ufffd", "\n\n\n\n\n\n\n\n\n\t0 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\n\n\n\n\n \u2264 \u2264 ", "\nUpdate(L,R)\n\n-----Constraints-----\n\nAi is a prime number\n\nAi is a prime number.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Subtasks-----\n\n\nAi = 0;\nL = 1;\nR = 0;\n\n\n\n\n\n1 ", "\n\n-----Syntax-----\n\nThe special dividing machine operations are implemented in the first line.\n\n\n\n\n\n\n\nConstraints-----\n\nType 0 Operation\n\nType 1 Operation\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Exit-----\n\n\n\n\n\n\n\n\n-----Subtasks-----\n- 1 ", "\n\n\n\n\n\n\n\n\n\n\n    T = 106\n\tAi = 106\n\n       \n\n\n\n\n\n\n  T is a number of test cases\n  Ai is a number of query\n\n-----Constraints-----\n\n\n\n\n\n\n-----Constraints-----\n\n\n\n\n\n\n N \u2264 M \u2264 N \ufffd", "\n\n\n\n\n\n-----Description-----\n\nThe description of your special dividing machine.\n\n\n\n\n\n\n\n\n\n\nAi is a prime number.\n\nAi is an integer.\n\n-----Constraints-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u2264 M \u2264 N ", "\n\n\n\n\n\n\n\n\nAi = 0\nT = 1\n\n-----Constraints-----\n\nThe function LeastPrimeDivisor(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType 0 Operation\n\n1: (5 points)\n\nType 1 Operation\n\n-----Subtasks-----\n\n\n\n\n-----Constraints-----\n\n- 1 \ufffd"], "prompt": "\nQUESTION:\nChef has created a special dividing machine that supports the below given operations on an array of positive integers.\nThere are two operations that Chef implemented on the machine.\nType 0 Operation\n\nUpdate(L,R):\n\tfor i = L to R:\n\t\ta[i] = a[i] / LeastPrimeDivisor(a[i])\n\nType 1 Operation\n\nGet(L,R):\n\tresult = 1\n\tfor i = L to R:\n\t\tresult = max(result, LeastPrimeDivisor(a[i]))\n\treturn result;\n\nThe function LeastPrimeDivisor(x) finds the smallest prime divisor of a number. If the number does not have any prime divisors, then it returns 1.\nChef has provided you an array of size N, on which you have to apply M operations using the special machine. Each operation will be one of the above given two types. Your task is to implement the special dividing machine operations designed by Chef. Chef finds this task quite easy using his machine, do you too?\n\n-----Input-----\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each test case contains two space-separated integers N, M, denoting the size of array A and the number of queries correspondingly.\n\nThe second line of each test case contains N space-separated integers A1, A2, ..., AN denoting the initial array for dividing machine.\nEach of following M lines contain three space-separated integers  type, L, R - the type of operation (0 - Update operation, 1 - Get operation), and the arguments of function, respectively\n\n-----Output-----\nFor each test case, output answer of each query of type 1 (Get query) separated by space. Each test case from the same file should start from the new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 Ai \u2264 106\n- 1 \u2264 L \u2264 R \u2264 N\n- 0 \u2264 type \u2264 1\n-  Sum of M over all test cases in a single test file does not exceed 106\n\n-----Subtasks-----\nSubtask #1: (10 points) \n- 1 \u2264 N, M \u2264 103\n\nSubtask #2: (25 points)\n- 1 \u2264 N, M \u2264 105\n-  Ai is a prime number. \n\nSubtask #3: (65 points)\n- 1 \u2264 N, M \u2264 105\n\n-----Example-----\nInput:\n2\n6 7\n2 5 8 10 3 44\n1 2 6\n0 2 3\n1 2 6\n0 4 6\n1 1 6\n0 1 6\n1 4 6\n2 2\n1 3\n0 2 2\n1 1 2\nOutput:\n5 3 5 11\n1\n\n-----Explanation-----\nExample case 1.The states of array A after each Update-operation:\nA: = [2 1 4 10 3 44]\nA: = [2 1 4 5 1 22]\nA: = [1 1 2 1 1 11]\nUse Standard Input format\nANSWER:\n"}}