{"2431": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def findK(self, nums, k: int) -> int:\n\n\n\n\n\n\n\n    def findPairs(self, nums, k: int):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer k", "\nUse Call-Based format\n\n\n    def findPairs(self, nums: List[int], k: int):\n\n\n\n\n\n\n\n\n\n\n\n    def findPairs(self, nums, k: int):\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer k,", "\nUse Call-Based format\n\n\n    def findPairs(self, nums, k):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findPairs(self, nums: List[int], k: int):\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nOutput: 0\n\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\n    def findPairs(self, nums: List[int], k: int):\n\n\n\n\n\n\n\n\n\n\n\n\n    def findPairs(self, nums, k: int):\n        \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer", "\nUse Call-Based format\n\n\n    def findPairs(self, nums: List[int], k: int):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n    def findPairs(self, nums, k: int):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer k", "\nUse Call-Based format\nUse Call-Based format\n    def findPairs(self, nums: List[int], k: int):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    def findPairs(self, nums, k):\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def findKDiffPairs(self, nums: List[int], k: int) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nInput: [1, 2, 3]\n   \n\nGiven", "\nUse Call-Based format\n\n\n    def findPairs(self, nums: List[int], k: int) -> int:\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n    def findPairs(self, nums, k):\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\nUse Call-Based format\n\n    def findPairs(self, nums: List[int], k: int):\n        \n\n\n\n\n\n\n\n\n\n\n\n    def findPairs(self, nums: List[int], k: int) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and", "Use Call-Based format\n\n    def findPairs(self, nums: List[int], k: int):\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    def findPairs(self, nums, k):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n    :param nums:", "\nUse Call-Based format\nUse Call-Based format\n    def findPairs(self, nums, k: int):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer k, you need to find the number of unique k-diff pairs\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def findPairs(self, nums: List[int], k: int):\n\n\n\n\n\n\n    def findPairs(self, nums, k: int) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1e7]\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n    def findKDiffPairs(self, nums: List[int], k: int):\n\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer k", "\nUse Call-Based format\nUse Call-Based format\n    def findPairs(self, nums: List[int], k: int):\n\n\n\n\n\n\n   \n\n\n\n\n\n    def findPairs(self, nums, k: int):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer k", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\n\n\nGiven an array of integers and an integer k:\n\n    nums: [0, 1, 2, 3]\n\n\n\n    def findPairs(self, nums, k):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer", "\nUse Call-Based format\n\n\n    def findPairs(self, nums: List[int], k: int) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n\n    def findKDiffPairs(self, nums, k: int) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findPairs(self, nums: List[int], k: int):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array of integers and", "Use Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n\n    def findPairs(self, nums: List[int], k: int):\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers and an integer", "\nUse Call-Based format\n\n    def findPairs(self, nums: List[int], k: int):\n\n\n\n\n\n   \n\n\n\n\n\n\n    def findPairs(self, nums: List[int], k: int):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer", "\nUse Call-Based format\nUse Call-Based format\n    def findPairs(self, nums: List[int], k: int) -> int:\n\n\n\n\n   \n\n\n\n\n\n\n    def findPairs(self, nums: List, k: int):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers and an integer"], "prompt": "\nQUESTION:\nGiven an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.\n\n\n\nExample 1:\n\nInput: [3, 1, 4, 1, 5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).Although we have two 1s in the input, we should only return the number of unique pairs.\n\n\n\nExample 2:\n\nInput:[1, 2, 3, 4, 5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\n\n\nExample 3:\n\nInput: [1, 3, 1, 5, 4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\n\n\n\nNote:\n\nThe pairs (i, j) and (j, i) count as the same pair.\nThe length of the array won't exceed 10,000.\nAll the integers in the given input belong to the range: [-1e7, 1e7].\nclass Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}