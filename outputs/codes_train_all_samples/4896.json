{"4896": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nThe kata kata uses [trie](https://en.wikipedia.org/wiki\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n>>> kata = kata.kata()\n>>> kata.build_trie()\n>>> build_trie", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n>>> build_trie()\n{}\n>>> build_trie()\n{}\n\n\n\n\n>>>\n\n\n\n\n\n\n\n\n\nThis kata has the following structure:\n\n1. the dictionary keys are", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nThe kata build_trie function is called with a prefix tree\n\n>>> build_trie()\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#  This is the kata build trie", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n>>> build_trie()\n{}\n>>> build_trie()\n{}\n\n\n\n\n>>> build_trie()\n\n\n\n\n\n\n\n\n\n\n\n\n    1. the first word is always the", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata is built from the following:\n\n\n\n\n\nA", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following kata can be used:\n\n* kata()\n* kata()\n\n\n\n\n\n\n* kata()\n* kata()", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n>>> build_trie()\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Examples\n\n>>> build_trie()\n{}\n", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n>>> build_trie(1, 2)\n{}\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata is built using k", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n>>> build_trie(\"a\")\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>> build_trie(\"foo\")\n", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThe kata is built using a dictionary (or prefix tree) using a hash table\n\n\n\n\n\n\n\n\n\n\n\nThe kata is built using a call-based dictionary\nQUESTION:\n\n\n\nThe kata is", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n>>> build_trie(['A', 't', 'tr', 'trus'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata kata uses [prefix tree](", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nThe kata is built using the call-Based format\n\n>>> build_trie()\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata is built using the [trie](https://en", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n>>> build_trie(__prefix__)\n{}\n>>> build_trie(\"\")\n{}\n\n\n\n\n>>>\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nA:\n\n>>> build_trie", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n>>> build_trie()\n{}\n>>> build_trie(\"\")\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>> build_trie(k=\"tru", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\t\n\n\n>>> build_trie()\n{}\n>>> build_trie()\n\n\n\n\n>>> build_trie(\"\")\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n>>> build_trie(\"A\")\n{}\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe kata can implement a kata.trie.Trie object (or prefix tree).\n\n\n\n\nThe kata can implement", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Example:**\n\n\n>>> build_trie(\"\", \"\")\n{}\n\n\n\n\n** Example:**\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata kata provides a kata trie (or prefix tree)\n\n\n\n\n\n\n\n**Examples**\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\nThe kata kata uses [prefix tree]\n\nThe kata kata uses [prefix tree]\n\n\n\n\n\n* Example\n*\n\n"], "prompt": "\nQUESTION:\nThe goal of this kata is to implement [trie](https://en.wikipedia.org/wiki/Trie) (or prefix tree) using dictionaries (aka hash maps or hash tables), where:\n\n1. the dictionary keys are the prefixes\n2. the value of a leaf node is `None` in Python, `nil` in Ruby and `null` in Groovy, JavaScript and Java.\n3. the value for empty input is `{}` in Python, Ruby, Javascript and Java (empty map) and `[:]` in Groovy.\n\n**Examples:**\n\n```python\n>>> build_trie()\n{}\n>>> build_trie(\"\")\n{}\n>>> build_trie(\"trie\")\n{'t': {'tr': {'tri': {'trie': None}}}}\n>>> build_trie(\"tree\")\n{'t': {'tr': {'tre': {'tree': None}}}}\n>>> build_trie(\"A\",\"to\", \"tea\", \"ted\", \"ten\", \"i\", \"in\", \"inn\")\n{'A': None, 't': {'to': None, 'te': {'tea': None, 'ted': None, 'ten': None}}, 'i': {'in': {'inn': None}}}\n>>> build_trie(\"true\", \"trust\")\n{'t': {'tr': {'tru': {'true': None, 'trus': {'trust': None}}}}}\n```\n\nHappy coding! :)\ndef build_trie(*words):\n\t\nUse Call-Based format\nANSWER:\n"}}