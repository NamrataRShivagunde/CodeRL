{"169": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    def integerMax(self, n: int):\n        \n    \n\n\n\n    def integerMax(self, n: int):\n        return n\n\n\n\n\nUse Call-Based format        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a positive", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    pass\n    def integerBreak(self, n: int) -> int:\n       \n\n\n       \n\n\n\n          \nUse Call-Based format\n\n\n\n\n\n\n\n3 + 4 + 3\n\n\n\n\n\n\n\n\nUse Python format\n\nGiven a positive", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    def integerBreak(self, n: int):\n        \n\n\n\n\n\nUse Call-Based format\n\n\n\n          \nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n   \nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n              \n\n\n\n          \n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \nGiven a", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def integerBreak(self, n: int):\n        return n\n\n\nUse Call-Based format    return self.integerBreak(n)\n\n\n       \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a positive integer n", "\nUse Call-Based format\n\nUse Call-Based formatUse Call-Based format\n\n\n\n          \n\n\n\n\n    def integerBreak(self, n: int):\n        return self.n * n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n          \n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    def integerBreak(self, n: int):\n        return 1\n\n\n\n\nUse Call-Based format    \n\n\n    def    return n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nGiven a positive integer n:\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    def integerMax(self, n: int):\n        return n\n        \n\n\nUse Call-Based format        \n\n\n\n          \n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven n:\n   \nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n          \n\n\n    def integerBreak(self, n: int) -> int:\n\n\n    pass\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nGiven n = 2\nGiven n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n    def integerBreak(self, n: int):\n\n   \n\n\n\n          \n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\n\n\n\n          \n\n\n\n\n    def integerBreak(self, n: int):\n        return n + 1\n\n\n\nUse Call-Based format    pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a positive integer n\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    pass\n    def integerBreak(self, n: int):\n        return n\n\n\n\n\nUse Call-Based format        \n\n\n\n\n       \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n          \n    return self.integerBreak(n)\n\n\n\n\n\n\n\n\n\n\n\n    def integerMax(self, n: int):\n        return n + n\n\n\n\n\n\n\nUse Call-Based format\n    \n\n\n\n\n\n\n\n\n\n\n   \n\n    given n", "\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n              \n\n\n\n\n\n\n\n\n\n\n       return n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n          \n\n\n\n\n\n\n\n       \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def integerBreak(self, n: int) -> int:\n       \n\n\n\n\nUse Call-Based format\n\n\n\n       pass\n\n\n\n\n\n\n\n + 2\n\n\n\n\n\n\nGiven a positive integer n:\n\n\nGiven a", "\nUse Call-Based format\n\n    pass\n\n\n\n    def integerBreak(self, n: int) -> int:\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n          \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n    pass\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def integerBreak(self, n: int):\n       \n\n       \n\n\n\n       \n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n    Given a positive integer n", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n       return self.integerBreak(self, n)\n\n\n\n\n\n    def integerBreak(self, n: int):\n        return n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n    Given a"], "prompt": "\nQUESTION:\nGiven a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\n\n\n\nFor example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).\n\n\n\nNote: You may assume that n is not less than 2 and not larger than 58.\n\n\nCredits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}