{"487": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nA string is called happy if it does not have any strings.\n\n\n\n   :\n    \n\n\n   :\n        \n\nA string is called happy\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA string is called happy if it does", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nA string is called happy if it does not have any substrings\nUse Call-Based format\nUse Call-Based format\n\n\n   :\n\n\n\n   ()\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA string is called happy if", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nA string is called happy if it does not have any strings\n\n\n\n   :\n\nA string is called happy\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA string is called happy if it does", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n   :\n        pass\n        \n\nA string is called happy if it doesn't have any substrings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA string is called", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   :\n        return \"\"\n\n\n\n   :\n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA string is called happy if it does not", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   :\n        pass\n\n\n\n   :\n        pass\n\n\nA string is called happy\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nA string is called happy", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n        \n\n\n\ns is happy if there is no string s.\n\ns is call-based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA string is called happy if it", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n    -> str:\n        \nUse Call-Based format\n\nA string is called happy\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nA string is called happy if it does", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\nA string is called happy if it does not have any substrings.\n\n   (self):\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nA string is called hap", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nA string is called happy if it does not have any strings.\n\n\n\n   :\n        \n\n\n   :\n        pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA string is called happy if it does not", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\u00a0\nUse Call-Based format\n\n\n   (self) -> str:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nA string is called happy if it", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   :\n        pass\n\n\n\n   (self) -> str:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA string is called happy if it does not", "\nUse Call-Based format\n\n\nUse Call-Based format\nA string is called happy if it does not have any strings in any of the strings in any of the strings\n\n\n\n\n   :\n        \n\n\n\n   ():\n        pass\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nA string is called happy if it", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nA string is called happy if it does not have any strings\n\n\n   :\n        \n\n\n\n   :\n        pass\n\nA string is called happy\n\n\n\n\n\n\n\n\n\n\n\nA string is called happy if it does not", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   :\n\n\n\n   :\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA string is called happy if it does not", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   :\n        pass\n        \n\n\n\n\n\n\nA string is called happy\n\n\nUse Call-Based format\n\n\n\n\nA string is called happy if it", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   :\n        pass\n\n\n\n\n   :\n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA string is called happy if it does", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n   :\n        pass\n        \n\n\nA string is called happy if it does not have any strings\n\n\n\n\n\n\n\n\n\n\n\nA string is called happy if it", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\u00a0\nExplanation:\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nA string is called happy if it does not", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nA string is called happy if it does not have any strings.\nUse Call-Based format\n\n\n\n   :\n        pass\n\n\n\n   (self)\n\n\n\n\n\n\n\n\n\nA string is called happy.\n\n\n\n\nA string is called happy"], "prompt": "\nQUESTION:\nA string is called happy if it does\u00a0not have any of the strings 'aaa', 'bbb'\u00a0or 'ccc'\u00a0as a substring.\nGiven three integers a, b and c, return any string s,\u00a0which satisfies following conditions:\n\ns is happy\u00a0and longest possible.\ns contains at most a\u00a0occurrences of the letter\u00a0'a', at most b\u00a0occurrences of the letter 'b' and at most c occurrences of the letter 'c'.\ns\u00a0will only contain 'a', 'b' and 'c'\u00a0letters.\n\nIf there is no such string s\u00a0return the empty string \"\".\n\u00a0\nExample 1:\nInput: a = 1, b = 1, c = 7\nOutput: \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.\n\nExample 2:\nInput: a = 2, b = 2, c = 1\nOutput: \"aabbc\"\n\nExample 3:\nInput: a = 7, b = 1, c = 0\nOutput: \"aabaa\"\nExplanation: It's the only correct answer in this case.\n\n\u00a0\nConstraints:\n\n0 <= a, b, c <= 100\na + b + c > 0\nclass Solution:\n    def longestDiverseString(self, a: int, b: int, c: int) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}