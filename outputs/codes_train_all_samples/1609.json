{"1609": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nSum_of_intervals(intervals):\n\nUse Call-Based format\n\n\n\n\n\n\n\n[1,4]\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sumIntervals()`\n\n\n\n\nWrite a function called `sum_of", "\nUse Call-Based format\n\n\nSumIntervals(intervals):\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n[1,5]\n[2,4]\n[2,10]\n\n\n\n\n\n\n\n\n\n\n\n\nC#\n\n\nWrite a function called `sumIntervals`", "\nUse Call-Based format\n\nSum_of_intervals(intervals)\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n[1,4,7,10]\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sum_intervals()`\n\n\n\n\nWrite a function called `sum", "\nUse Call-Based format\n\n\nSum_of_intervals(intervals)\n\nUse Call-Based format\n\n\n\n\nSum_of_intervals(intervals)\n\nUse Call-Based format\n\n### Examples:\n\nList containing disjoined intervals:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sum_", "\nUse Call-Based format\n\nSum_of_intervals(intervals):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n[1,4,5]\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sum_intervals()`\n\n\n\n\n\nWrite a function called `sum", "\nUse Call-Based format\n\nSumIntervals(intervals)\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nSum_of_intervals(intervals):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\nWrite a function called `sum_of_intervals()`\n\n\n\n\n\nWrite a function called", "\nUse Call-Based format\n\nSum_of_intervals(intervals):\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n\n\nUse Call-Based format\n\n\n\n[1,4,5]\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sum_intervals()`\n\n\n\nWrite a function called `sum", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nSum_of_intervals(intervals):\n\nUse Call-Based format\n\n\n\n\n\n\n[1,4,5,3]\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sumIntervals()`\n\n\n\n\nWrite a function called `", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nSum_of_intervals(intervals)\n\nUse Call-Based format\n\n\nSum_of_intervals(intervals)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called sum_intervals()\n\n\n\n\nWrite a function called `", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nWrite a function called `sum_of_intervals()`/`sum_intervals()`\nUse Call-Based format\n\n### Examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\nWrite a function called `sum_intervals()`\n\n\n\n\nWrite a function", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nSumIntervals\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n[1,4,5,6,10]\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sum`\n\n\n\n\n\n## Examples:\n\n", "\nUse Call-Based format\n\n\nSum_of_intervals(intervals):\n\t\nUse Call-Based format\n:\n\n\n\n\nUse Call-Based format\n\nWrite a function called `sum_intervals()`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSumIntervals(intervals):\n\nSum of intervals\n\n### Examples:\n\n\nWrite", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nWrite a function called `sum_of_intervals()`/`sum_intervals()`\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n# Use Call-Based format\n\n\n#\n#\nSumIntervals(intervals)\n#\n\n# Write a function called `", "\nUse Call-Based format\nUse Call-Based format\n\nSum_of_intervals(intervals):\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n[2,3]\n\n\n\n\n\n\n\n\t\n\n\n\n\nWrite a function called `sum_intervals()`\n\n\n\n\nWrite a function called `sum_", "\nUse Call-Based format\n\nSumIntervals(intervals):\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n[1,6,10]\n\n\n\n\n\n\t\n\nWrite a function called `sum_intervals()`\n\n\n\n\n\n\n\n\nWrite a function called `sumIntervals`", "\nUse Call-Based format\n\nSum_of_intervals(intervals):\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n[1,4,7,10,2,5]\n\n\n\n\n\n\t\n\n\n\n\n\nWrite a function called `sumIntervals()`\n\n\n\nWrite a function called `sumIntervals`", "\nUse Call-Based format\n\nSum_intervals(intervals)\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n# List containing disjoined intervals:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a function called `sum_intervals()`\n\n\n\n\nWrite a function called `sum_", "\nUse Call-Based format\n\nSum_of_intervals(intervals):\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n[7, 10]\n\n\n\n\n\n\n\n\n\nSumIntervals(intervals);\n\n\n\nWrite a function called sum_intervals()\n\n\n\n\nWrite a function", "\nUse Call-Based format\n\nSum_of_intervals(intervals)\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nWrite a function called `sum_of_intervals()`\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nWrite a function called `sumIntervals()`\n\n\n\n\nWrite a function", "\nUse Call-Based format\n\n\nSum_of_intervals(intervals):\n\t\nUse Call-Based format\n\n\nWrite a function called `sum_of_intervals()`\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nWrite a function called `sum_intervals()`\n\n\n\n\n\nWrite a function called `sum"], "prompt": "\nQUESTION:\nWrite a function called `sumIntervals`/`sum_intervals()` that accepts an array of intervals, and returns the sum of all the interval lengths. Overlapping intervals should only be counted once.\n\n### Intervals\n\nIntervals are represented by a pair of integers in the form of an array. The first value of the interval will always be less than the second value. Interval example: `[1, 5]` is an interval from 1 to 5. The length of this interval is 4.\n\n### Overlapping Intervals\n\nList containing overlapping intervals:\n\n```\n[\n   [1,4],\n   [7, 10],\n   [3, 5]\n]\n```\n\nThe sum of the lengths of these intervals is 7. Since [1, 4] and [3, 5] overlap, we can treat the interval as [1, 5], which has a length of 4.\n\n### Examples:\n\n```C#\n// empty intervals\nIntervals.SumIntervals(new (int, int)[]{ });  // => 0\nIntervals.SumIntervals(new (int, int)[]{ (2, 2), (5, 5)});  // => 0\n\n// disjoined intervals\nIntervals.SumIntervals(new (int, int)[]{\n  (1, 2), (3, 5)\n});  // => (2-1) + (5-3) = 3\n\n// overlapping intervals\nIntervals.SumIntervals(new (int, int)[]{\n  (1, 4), (3, 6), (2, 8)\n});  // (1,8) => 7\n```\ndef sum_of_intervals(intervals):\n\t\nUse Call-Based format\nANSWER:\n"}}