{"347": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings s1 and s2, write a function to return true if s2 contains the permutation of s1.\n\n\n\n\ns2 = \"eid\"\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n\nGiven two strings s1 and s", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nExplanation: s1 and s2 do not contain any permutations of s1.\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven two strings s1 and", "\nUse Call-Based format\n\n    pass\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns1 = \"eid\"\ns2 = \"eidoooo\"\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven two strings s1 and s2,\n\n\n\n\nGiven two strings s1", "\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nExplanation: s2 contains one permutation of s1 (\"ba\")\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven two strings s1 and s2, write a function\n\n\nGiven two strings", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Python-Based format\nGiven two strings s1 and s2, write a function to return true if the first string's permutations are the substring of s2\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n\n\nGiven two strings s1 and", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nGiven two strings", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based formats2 = \"eid\"\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two strings s1 and s2\n\n\nGiven two", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Method-Based format\n\n\n\n\n\nUse Call-Based format\n\n\nExplanation: s2 contains one permutation of s1\n\nUse Call-Based format\n\n\n\n\n\n\nGiven two strings s1 and s2\n\n\nGiven two", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nExplanation: s2 contains one permutation of s1 (\"ba\")\n\n\n\nUse Call-Based format\n\n\n\n\nUse Python-Based format\n\n\n\nGiven two strings s1 and s2", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\nUse Python-Based format\nUse Python-Based format\n\nExplanation: s1 contains one permutation of s2 (\"ba\")\n\nUse Call-Based format\n\n\n\n\n\n\nGiven two strings s1 and s2", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nExplanation: s2 contains one permutation of s1 (\"ba\")\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven two strings s1 and s", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nGiven two strings s1 and s2:\n\n\nGiven two", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    def checkInclusion(self, s1: str, s2: str):\n       \n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nGiven two strings s1 and", "\n\n\n\n\nUse Call-Based format\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Python-Based format\n\n\n\n\nUse Call-Based format\nUse Python-Based format\n\nExplanation: s2 contains one permutation of s1 (\"ba\").\n\n\n\n\n\n\nGiven two strings s1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nGiven two strings s1 and s2, write a function to check the inclusion of the first string's permutations\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven two strings s1 and s2:\n\n\n\nGiven two strings", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nExplanation: s2 contains one permutation of s1 (\"ba\")\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nGiven two strings s1 and s2", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven two strings s1 and s2:\n\n\nGiven two strings", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\ns2 = \"eidbaooo\"\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nGiven two strings s1 and s2\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Python-based format\nUse Python-based formats2= \"eidba\"\n\n\n\n\nUse Call-Based format\n\n\n\nUse Python-Based format\n\n\n\nGiven two strings s1 and s2", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Python-Based format\n\n\nUse Python-Based format\nUse Python-Based format\n\n\n\n\nGiven two strings s1 and s2\n\n\nGiven"], "prompt": "\nQUESTION:\nGiven two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.\n\nExample 1:\n\nInput:s1 = \"ab\" s2 = \"eidbaooo\"\nOutput:True\nExplanation: s2 contains one permutation of s1 (\"ba\").\n\n\n\nExample 2:\n\nInput:s1= \"ab\" s2 = \"eidboaoo\"\nOutput: False\n\n\n\nNote:\n\nThe input strings only contain lower case letters.\nThe length of both given strings is in range [1, 10,000].\nclass Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}