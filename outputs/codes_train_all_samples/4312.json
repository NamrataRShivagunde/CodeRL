{"4312": {"code": ["\nif:php\nif:csharp\n\nif:java\n\nif:csharp\n\nif:java\n\nif:csharp\n~if:csharp\n\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n~~~\n\n\n~~~\n\nThe output is defined as follows:\n\n~~~\n don", "\nif:php\npos = [0, 0]\n\n~~~if:csharp\n\n\n\n~\n\n~~~if:php\nThe output will be an associative array with two key-value pairs: `pos` and `peaks`\n\n\n\n\n\n\n\n\n\n\n\n\n\n~\n\n\n~~~\n\n\n~~~\n don't need to", "\n~~~\nif:php\nif:csharp\n\n~~~\n\n\n\n~~~\n\n\n\n\n~~~\n\n\n~~~\n\n\n~~~\n\n should be a `PeakData`\n\n\n\n\n\n\n~~~\n\n\n~~~\n\n\npos, peaks\n\n~~~\n\n~~~if:php\n\n don't", "\n~~~\nif:csharp\n\n~~~if:php\n~\n\n\n~~~\n\n~\n\n\n\n\n\n~~~\n\n\n\n\n~~~if:php\n\n\n~~~\n\n\n\n~~~\n\n\n\n\n\n~~~\n\n\n\n~~~\n\n\n\n\n~~~\n\n\n\n~~~\n\n know", "\nif:php\nif:cpp\n\n~~~if:csharp\nif:java\n\n~~~if:cpp\n\n~~~if:java\n\n\n\n~~~if:csharp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n~~~\n\n\n\n~~~\n don't know what is after and", "\n```\n\npos, peaks\n```\n\n\n\n\nif:php\n\n~~~if:csharp\nThe output will be an object of type `PeakData`.\n\n~~~if:vector\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n\n~~~\n don't need to validate the", "\nif:php\nif:csharp\nif:php\nif:java\nif:csharp\n~if:java\nThe output will be an associative array with two key-value pairs: `pos` and `peaks`.\n~if:csharp\n~\n~~\n\n\n\n\n\n\n\n~\n\n\n\n\n\n don't know what is after and", "\n```\n\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\npos\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n\n~~~\n don't need to validate the output", "\nif:php\n\nif:csharp\n\nif:cpp\n\nif:csharp\n\nif:java\n\nif:cpp\n\nif:csharp\n\nif:csharp\n\nif:php\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n\n~~~\n have to iterate over the", "\nif:php\nif:cpp\n\nif:csharp\nif:csh\n\nif:cpp\n~\n\nif:php\n\n\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~if:csharp\nThe output will be an object of type `PeakData`\n~\n\n~~~ can't use the", "\n~~~\nif:php\nThe output will be a `PeakData` with two key-value pairs: `pos` and `peaks`.\n~~~\n\n\n\n~\n\n\n\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n~~~\n\n\n~~~\n don't need to validate the input.\n\n~~~", "\nif:php\nif:csharp\nif:cpp\nif:csharp\n\n~\n\nif:cpp\nThe output will be an associative array with two key-value pairs: `pos` and `peaks`.\n\n\n~\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n~~~\n don't need to validate the output.", "\nif:php\npos = [5, 7]\n~~~if:csharp\n\nif:cshar\n\nif:cshar\n~if:java\n~if:cpp\n\nif:cshar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n don't need to validate the input. ", "\nif:php\nif:cpp\n\nif:csharp\n\nif:cpp\n\nif:csharp\n\nif:cpp\n\nif:csharp\n\n\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n~~~\n\n~~~\n\n don't know what is after and before and therefore", "`\nif:php\nThe output will be an object of type `PeakData`.\nif:csharp\nif:java\nif:csharp\n~\n~\n~\n\n~\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\nNote:\n\n\n~~~\n\n\n\n~~~\n\n don't know what is after and before and therefore", "\nif:php\npos = [0, 1]\n~~~if:csharp\n\nif:java\n\nif:csharp\n\nif:csh\n\nif:csh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n~~~\n\n\n\n~~~\n\n\n return a ``PeakData`` with", "\nif:php\nif:csharp\nif:java\nif:csharp\n~\n~\n\nif:csharp\nThe output will be a `List` of two arrays with two members: pos and peaks.\n\n~~~\n~\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n\n\n\n don't need to validate the input", "`\nif:php\nif:cpp\nif:csharp\nif:cpp\n~if-not:csharp\n~if:csharp\n~if:java\n~if:java\n~if:csharp\n~\n\n\n\n\n\n\n\n\n\n\n\n~~~else\n\n\n\n\n~~~else\n\n know what is after", "\n~~~\nif:php\nThe output will be a `PeakData` with two keys: `pos` and `peaks`.\n\n~~~\n\n\n~\n\n\n\nif:csharp\n\n\n\n\n~~~\n\n\n\n\n\n\n\n~~~\n\n\n\n~~~\n\n~~~if:php\n\n won't know what is after and", "```\nif:php\nif:cpp\nif:csharp\nif:csh\n~\n~\n\n~~~\nif:csh\nThe output will be an object of type `PeakData`.\n~~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~~~\n\n~~~\n\n\n\n~~~\n will need to return an"], "prompt": "\nQUESTION:\nIn this kata, you will write a function that returns the positions and the values of the \"peaks\" (or local maxima) of a numeric array.\n\nFor example, the array `arr = [0, 1, 2, 5, 1, 0]` has a peak at position `3` with a value of `5` (since `arr[3]` equals `5`).\n\n~~~if-not:php,cpp,java,csharp\nThe output will be returned as an object with two properties: pos and peaks. Both of these properties should be arrays. If there is no peak in the given array, then the output should be `{pos: [], peaks: []}`.\n~~~\n~~~if:php\nThe output will be returned as an associative array with two key-value pairs: `'pos'` and `'peaks'`.  Both of them should be (non-associative) arrays.  If there is no peak in the given array, simply return `['pos' => [], 'peaks' => []]`.\n~~~\n~~~if:cpp\nThe output will be returned as an object of type `PeakData` which has two members: `pos` and `peaks`.  Both of these members should be `vector`s.  If there is no peak in the given array then the output should be a `PeakData` with an empty vector for both the `pos` and `peaks` members.\n\n`PeakData` is defined in Preloaded as follows:\n\n~~~\n~~~if:java\nThe output will be returned as a ``Map>` with two key-value pairs: `\"pos\"` and `\"peaks\"`. If there is no peak in the given array, simply return `{\"pos\" => [], \"peaks\" => []}`.\n~~~\n~~~if:csharp\nThe output will be returned as a `Dictionary>` with two key-value pairs: `\"pos\"` and `\"peaks\"`. \nIf there is no peak in the given array, simply return `{\"pos\" => new List(), \"peaks\" => new List()}`.\n~~~\n\nExample: `pickPeaks([3, 2, 3, 6, 4, 1, 2, 3, 2, 1, 2, 3])` should return `{pos: [3, 7], peaks: [6, 3]}` (or equivalent in other languages)\n\nAll input arrays will be valid integer arrays (although it could still be empty), so you won't need to validate the input.\n\nThe first and last elements of the array will not be considered as peaks (in the context of a mathematical function, we don't know what is after and before and therefore, we don't know if it is a peak or not).\n\nAlso, beware of plateaus !!! `[1, 2, 2, 2, 1]` has a peak while `[1, 2, 2, 2, 3]` does not. In case of a plateau-peak, please only return the position and value of the beginning of the plateau. For example: \n`pickPeaks([1, 2, 2, 2, 1])` returns `{pos: [1], peaks: [2]}` (or equivalent in other languages)\n\nHave fun!\ndef pick_peaks(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}