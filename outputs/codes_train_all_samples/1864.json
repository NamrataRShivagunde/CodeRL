{"1864": {"code": ["\u00a0\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\nQUESTION:\n\nexplanation:\n\n\u00a0\n\n\n\u00a0\nConstraints:\n\n\u00a0\n\n <=", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n\u00a0\n\n\u00a0\n\n <= 2\n\n\u00a0\n\nExample", "\n\n\n\n\n\n\n\n\n\n\n\n\n <= 2\n\n\n\n\n\n\u00a0+\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\nConstraints:\n\n1 <= expr.length\u00a0= 2\n\n <= 2\n", "\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\n\u00a0\nInput: {expr}\n\n\u00a0\nOutput: {expr}\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n <= 2\n1 = {", "\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nConstraints:\n\n1 <= expression.length\n\n\n\n\ufffd", "\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0= {e_1}\n\u00a0\n\u00a0\n\n\n\u00a0\n\n\n\n\n <= 2\n\n\n\n\n\n\n", "\u00a0\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n <= 2\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n", "\n\n\n\n\n\nExamples:\n\n\nExample 1:\n\nInput: \"{{a,b,c}}\"\nOutput: {\"a\",\"b\",\"c\"}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n <= 2", "\n\n\n\n\n\n\n\n\n\nExplanation:\n\nR(a,b) = {a,b}\n\nR(a) = {a,b}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n <= 2", "\n\n\n\n\n\n\n\n\n\n\n\n\n <= 2\n\n\n\n\n\u00a0\nExplanation:\n\n\u00a0\nExplanation:\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 <= expression.length\n", "\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\nExplanation:\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n <= expression.count\n2 <= expression", "\"\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n <= 2\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\u00a0\n <= 2\n\n\u00a0\nExample", "\"\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\u00a0= {\"a\",\"b\",\"c\"}\n\n\u00a0\nConstraints:\n\n1 <= expression.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n <= 2\n2 <= expression.", "\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n\n\u00a0\nExplanation:\n\u00a0\n\n\n\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\nQUESTION:\n\n   ", "\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\u00a0\u00a0\u222a\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\n\n\n\nQUESTION:\n\nQUESTION:\n\n\u00a0\n\n\n <= expression.group_size\n\n\u00a0", "\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n <= 2\n\n\n\n\n\u00a0\nExplanation:\n\n\u00a0\nInput: {expr}\n\n\u00a0\nOutput: {expr}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n <= 2", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\u00a0\n\",\"ab\",\"ad\",\"bc\",\"bd\"\n\n\u00a0\nConstraints:\n\n1 <= expr.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 <= expr.length\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\n\u00a0\n\n\n\u00a0\nConstraints:\n\n1 <= expr.length\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n2 <= expression", "\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\u222a\n\n\u00a0\nConvention:\n\u00a0\n\u00a0\nExpression:\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n2 <= expression.length\n3 <= expression.length\n", "\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\u00a0\nR(\"a\")\u00a0 = {\"a\"}\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n   "], "prompt": "\nQUESTION:\nUnder a grammar given below, strings can represent a set of lowercase words.\u00a0 Let's\u00a0use R(expr)\u00a0to denote the set of words the expression represents.\nGrammar can best be understood through simple examples:\n\nSingle letters represent a singleton set containing that word.\n        \nR(\"a\") = {\"a\"}\nR(\"w\") = {\"w\"}\n\n\nWhen we take a comma delimited list of 2 or more expressions, we take the union of possibilities.\n        \nR(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}\nR(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"}\u00a0(notice the final set only contains each word at most once)\n\n\nWhen we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n        \nR(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}\nR(\"a{b,c}{d,e}f{g,h}\")\u00a0= {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}\n\n\n\nFormally, the 3 rules for our grammar:\n\nFor every lowercase letter x, we have R(x) = {x}\nFor expressions e_1, e_2, ... , e_k\u00a0with k >= 2, we have R({e_1,e_2,...}) = R(e_1)\u00a0\u222a R(e_2)\u00a0\u222a ...\nFor\u00a0expressions e_1 and e_2, we have R(e_1 + e_2) = {a + b for (a, b) in\u00a0R(e_1)\u00a0\u00d7 R(e_2)}, where + denotes concatenation, and \u00d7 denotes the cartesian product.\n\nGiven an expression representing a set of words under the given grammar, return the\u00a0sorted list of words that the expression represents.\n\u00a0\n\nExample 1:\nInput: \"{a,b}{c,{d,e}}\"\nOutput: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]\n\n\nExample 2:\nInput: \"{{a,z},a{b,c},{ab,z}}\"\nOutput: [\"a\",\"ab\",\"ac\",\"z\"]\nExplanation: Each distinct word is written only once in the final answer.\n\n\u00a0\nConstraints:\n\n1 <= expression.length <= 60\nexpression[i] consists of '{', '}', ','or lowercase English letters.\nThe given\u00a0expression\u00a0represents a set of words based on the grammar given in the description.\nclass Solution:\n    def braceExpansionII(self, expression: str) -> List[str]:\n        \nUse Call-Based format\nANSWER:\n"}}