{"127": {"code": ["\n\n\n\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int], group: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe group of G members could commit any crimes.\n\n\n\n\nG =", "\n    return 1\n\n\n\n    return 1\n\n\n\n0 <= G <= 100\n1 <= P <= 100\n1 <= group[i] <= group[j] <= group[j] <= group[j] <= 100\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG = 10\nP =", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n\n   \n    pass\n\n\n\n\n1 <= G <= 100 and P <= 100\n\n\n1 <= G <= 100\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= G <= 100\n\n1 <= P <= 100\n\n\n\n\nP =", "\n    return profitableSchemes(self, G, P, group, profit)\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= G <= 100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= G <= 100\n\n1 <= P <= 100\n\n\n\n\n\nG", "\n    def profitableSchemes(self, G, P, group, profit) -> int:\n        return 1\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nG = 10\nP = 10\n\n\n\n\n\nG", "\n    pass\n\n\n\n    def profitableSchemes(self, G, P, group, profit):\n        pass\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe group of G members could commit any crime.\n\n\n\n\n\n\nThe group of G members could", "\n    def profitableSchemes(self, G, P, group, profit):\n        return 1\n\n\n\n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n1 <= G <= 100\n\n1 <= P <= 100\n\n\n\n\n\n\n\n\n\n\n1 <= G <= 100\n\n0 <= P <= 100\n\n\n\n\n", "\n\n\n\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= profit <= 100\n0 <= profit <= 100\n\n\n\n\n\nG", "\n\n\n\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]) -> int:\n        \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n1 < G <= P < 100\n\n0 < G <= 100\n\n\n\n\n1 <= G <= 100\n", "\n    self.group = group\n    self.profit = profit\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= P <= G <= 100\n\n\n\n\nG = 10", "\n    pass\n\nUse Call-Based format\n\n\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA group of G crimes can commit any crime.\n\n\n\nA group", "\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]):\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 < G < P\n\n1 < P < G\n\n\n\n1 < G < P\n\n\n\nG =", "\n\n1 <= G <= 100\n1 <= P <= 100\n\n\n    def profitableSchemes(self, G, P, group, profit):\n        return 7\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n    G = 10\nP", "\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n0 <= G", "\n    return profitableSchemes(self, G, P, group, profit)\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n1 <= G <= 100\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= G <= 100\n0 <= P <= 100\n\n\n\n\n\n1 <= G <= 100\n0 <=", "\n    def profitableSchemes(self, G, P, group: List[int], profit: List[int]) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= G <= P <= 100\n\n\n\n\n\n\n\n\n\n\n1 <= G <= 100\n\n\n0 <= G <= 100\n\n\n\nG =", "\n    print \"No class to use Call-Based format\"\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\nThe group of G members is a list of crimes.\n\n\n\n\n\n\n\n\n\n\nThe group of G members is a list of", "\n\nUse Call-Based format\n\n\n    def profitableSchemes(self, G, P, group, profit: List[int], profit: List[int]) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe group has a number of crimes.\n\n\n\n\n\n    i = 0", "\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]):\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG = 10\nP = 10\ngroup = [2]\n\nG", "\n\n\n\n    def profitableSchemes(self, G, P, group: List[int], profit: List[int]) -> int:\n   ...\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\n\n\u00a0\n\n\nG = 10\nP = 3\n"], "prompt": "\nQUESTION:\nThere is a group of\u00a0G members, and a list of various crimes they could commit.\nThe ith\u00a0crime generates a profit[i] and requires group[i]\u00a0members to participate in it.\nIf a\u00a0member participates in one crime, that member can't participate in another crime.\nLet's call a profitable\u00a0scheme\u00a0any subset of these crimes that generates at least P profit, and the total number of\u00a0members participating in that subset of crimes is at most G.\nHow many schemes can be chosen?\u00a0 Since the answer may be very\u00a0large, return it modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: G = 5, P = 3, group = [2,2], profit = [2,3]\nOutput: 2\nExplanation: \nTo make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.\n\n\nExample 2:\nInput: G = 10, P = 5, group = [2,3,5], profit = [6,7,8]\nOutput: 7\nExplanation: \nTo make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n\n\u00a0\n\nNote:\n\n1 <= G <= 100\n0 <= P <= 100\n1 <= group[i] <= 100\n0 <= profit[i] <= 100\n1 <= group.length = profit.length <= 100\nclass Solution:\n    def profitableSchemes(self, G: int, P: int, group: List[int], profit: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}