{"1919": {"code": ["\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    findOrder(self, numCourses, prerequisites)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0           \u00a0           \u00a0           \u00a0\n\n\n\n\n\n\nThere are a total of n courses you", "\nUse Call-Based format\n\n    FindOrder(self, numCourses, prerequisites) -> List[int]\n\nUse Call-Based format\n\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n            0.1.2.3\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n    findOrder(self, numCourses, prerequisites) -> List[int]\n\nUse Call-Based format\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    The number of courses you have", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have to take.\n\n\n\n\nThere are a total", "\n\nUse Call-Based format\n\n            0.9\n\n\n\n\n\n\n\n   \n        findOrder(self, numCourses, prerequisites)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe number of courses you have to take is n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of", "\n\n\n    Use Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    findOrder(self, numCourses, prerequisites) -> List[int]\n\n\n   \n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nThere are a total of n courses you have to take.\n\n\n\n\nThere are a total of n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]):\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use Call-Based format\n\n\n\n\n\nThere are a total", "\n\nUse Call-Based format\n\u00a0\n\n\n\n\nUse Call-Based format\n\n\n\n    def findOrder(self, numCourses, prerequisites):\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n            1. \n            2.\n\n\n\n\n\n\n\n\nThere are a total of n courses", "\nUse Call-Based format\n\n\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\nUse Call-Based format\n\n\n\n\n\n\n       \n\n\n\nThere are a total of n courses you have to take\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses\n\n\n\n\n  The", "\n\n    Use Call-Based format\n\n\n\n\n\n\n    def findCourseOrder(self, numCourses: int, prerequisites: List[List[int]):\n\n        Return the correct course order.\n\n\n   \n\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n    findOrder(self, numCourses, prerequisites) -> List[int]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses to take\n\n\n\n\nThere are", "\nUse Call-Based format\n\n        Return an ordering of courses in the correct order.\n\n\nUse Call-Based format\n\n\n\n       \n\n       \n\n\n\nThere are a total of n courses you have to take\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have to take\n\n\n\n\n\nThere are a total", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n    findOrder(self, numCourses: int, prerequisites: List[List[int]):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have to take\n", "\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n    def findCourseOrder(self, numCourses: int, prerequisites: List[list[int]):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]):\n    return [0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have to finish\n\n\n\n\nThere are a", "\nUse Call-Based format\n\n            0\n\n\n        1\n        2\n        3\n\n        4\n        3\n\n\n\n\nUse Call-Based format\n\n\n\n\n       \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\u00a0            course 1\n            course 2\n\n\n\n\n\n\n\nThere are a total of n courses\n\n", "\nUse Call-Based format\n\n\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]):\n       \n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nThere are a total of n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n\n\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have to take\n\n\n\n\n\n\n ", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n    findOrder(self, numCourses, prerequisites) -> List[int]\n\n\n   \n\n\nThere are a total of n courses you have to take\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses \n\n", "\n\nUse Call-Based format\n           \n    findOrder(self, numCourses, prerequisites) -> List[int]\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a total of n courses you have to take, labeled from 0 to n\n\n\n\n\n   "], "prompt": "\nQUESTION:\nThere are a total of n courses you have to take, labeled from 0 to n-1.\n\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\n\nGiven the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.\n\nThere may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.\n\nExample 1:\n\n\nInput: 2, [[1,0]] \nOutput: [0,1]\nExplanation:\u00a0There are a total of 2 courses to take. To take course 1 you should have finished   \n\u00a0            course 0. So the correct course order is [0,1] .\n\nExample 2:\n\n\nInput: 4, [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,1,2,3] or [0,2,1,3]\nExplanation:\u00a0There are a total of 4 courses to take. To take course 3 you should have finished both     \n             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. \n\u00a0            So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .\n\nNote:\n\n\n       The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\n       You may assume that there are no duplicate edges in the input prerequisites.\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}