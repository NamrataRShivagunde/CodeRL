{"1817": {"code": ["\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n\n\n\n\n    def swimInWater(self, grid: List[List[int]):\n\n\n\n\nOn a N x N grid:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid.\n\n\n\n\nOn an N x N", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nOn a N x N grid:\n\n\n    def swimInWater(self, grid):\n        \n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn a N x N grid:\n\n\n\n\n\n\n\nOn an N x N", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nOn a 2 x 2 grid, everywhere is t = 0.\n\nOutput: 4\nExplanation:\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nOn a N x N grid, each square", "\nUse Call-Based format\n\n\nCall-Based format:\nUse Call-Based format\n\n\n\n\n\n\nOn an N x N grid, each square represents a square and its elevation represents a distance between the two sides.\n\n\n\n\n\n\n\n\nRun the main loop\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid,", "\nUse Call-Based format:\n\n\n    swimInWater(self, grid) -> int\n\n\n\n\n\n\n\nOn an N x N grid:\n\n\n\n\n\n    grid = [0,1,2,3]\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid.\n\n\n\n\n\n\nOn an N x", "\nUse Call-Based format:\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid, you can swim from each square to another.\n\n\n\n\n\n\n\n\n\n\nOn a N x N grid, we are in the grid location.\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid,\n\nOn an N", "\n\n\nUse Call-Based format:\n    def swimInWater(self, grid: List[int]) -> int:\n\n\n\n\n\n\n\n\n\nOn an N x N grid:\n\n\n\n\n  1  2  3  4\n\n\n\n\n\n\n\n\n\nOn a N x N grid\n\n\nOn a N x N grid:\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nN x N grid\n\nUse Call-Based format\n\nExample 0:\n\n\n    self.swimInWater(grid)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid\n\n\n\nOn an N x N grid, you", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nOn an N x N grid.\n\n\n\n\n\n\nOn an N x N grid.\n\nExample:\n\n\n\n\n\n\n\n\nOn a N x N grid, points are at the same time.\n\n\n\n\nOn an N x N grid", "\n\nUse Call-Based format:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nOn a N x N grid, each square is an elevation.\n\nOutput: 4\nExplanation:\n\n\n\n\n\n\n\n\n\n 0  1  2  3\n\n\n\n\n\n\n\n\n\n\n\nOn a N x N grid, each", "\nUse Call-Based format:\n\n\n\nUse Call-Based format:\nUse Call-Based format\n\n\n\n\n\n\n\nOn an N x N grid, each square has an elevation of t = 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid, each square is at most t = 0.\n\n\n\nOn", "\nUse Call-Based format:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nOn an N x N grid, you have to call the swimInWater method.\n\nExample 3:\n\n\nInput: [0,2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid, each square", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nOn an N x N grid, everywhere is t = 0.\n\n\n\n\n\n\n\n\nUse Call-Based format\n 2  3  4\n\n\n\n\n\n\n\n\n\nOn an N x N grid, each square", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nN x N -> [N] -> [N]\n\n\nOn an N x N grid.\n\n\n\n\n\n\n\n\n\n\n\nOn a N x N grid.\n\n\n\n\nOn a N x N grid,\n\nOn an N x", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nOn an N x N grid.\n\nInput: N x N\nOutput: 16\nExplanation:\n\n\n\n\n\nOn an N x N grid.\n\n\n\n\n\n\n\n\n\nRun a call-based format\n\n\n\n\n\n\nOn an N x N grid", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nOn a N x N grid, each square is an elevation and is the depth of the water\n\n\n\n\n    def rain(self, grid):\n\n\n\n\n\n\n\n\n\nOn a N x N grid:\n\n\n\n\n\nOn an N x N", "\n\n    def swimInWater(self, grid: List[int]) -> int:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid\n\nOutput: 16\nExplanation:\n\n\n\n\n\n\n\n\n\nN x N grid\n\n\n\n\nOn a N x N grid\n\nOn an N", "\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n    self.swimInWater(grid)\n\n\n    -> int\n\n\nOn an N x N grid.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn a N x N grid:\n\n\n\n\n\nOn an N x N grid", "\nUse Call-Based format:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nRun a single time\n\n\n\n\n\n\n\n    def swimInWater(self, grid: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\nOn a N x N grid:\n\n\n\nOn a N x", "\nUse Call-Based format:\n\n\nUse Call-Based format\n\nOn an N x N grid.\n\n\n\n\n\n\n\n\n\nOn an N x N grid.\n\n\n\n\n    grid[i][j]\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn an N x N grid.\n\n\nOn an"], "prompt": "\nQUESTION:\nOn an N x N grid, each square grid[i][j] represents the elevation at that point (i,j).\n\nNow rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are\u00a0at most\u00a0t. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nYou start at the top left square (0, 0). What is the least time until you can reach the bottom right square (N-1, N-1)?\n\nExample 1:\n\n\nInput: [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\n\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n\n\nExample 2:\n\n\nInput: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation:\n 0  1  2  3  4\n24 23 22 21  5\n12 13 14 15 16\n11 17 18 19 20\n10  9  8  7  6\n\nThe final route is marked in bold.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n\n\nNote:\n\n\n       2 <= N <= 50.\n       grid[i][j] is a permutation of [0, ..., N*N - 1].\nclass Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}