{"196": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return maxSubarraySumCircular(self, A)\n\n\n\n\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\nThe following is a correct solution.\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\u00a0\n\n\n\nGiven a circular\u00a0array C", "\nUse Call-Based format\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1. C = A[0] = 1\n\n\n\n\n\n\n\nGiven a circular array", "\n\nUse Call-Based format\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\nExample 6:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\u00a0circular\u00a0array of integers represented by C\n\n\n\n\n\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n\n\n\n\n\n\n   \n\n\n\n\n\nExample 5:\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= i < A.length\n\n\n\nGiven a circular\ufffd", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return maxSubarraySumCircular(self, A)\n\n\n\n\n\n\n    def\n        return maxSubarraySum(self, A)\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array C of integers represented by", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n        \"\"\"\n\n   \n\n\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\u00a0\n\n\n\u00a0\n\nGiven a circular\u00a0array", "\nUse Call-Based format\nUse Call-Based format\n\n\n    maxSubarraySumCircular(self, C: List[int]) -> int:\n\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n    maxSubarraySumCircular(self, C)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array C of integers represented", "\nUse Call-Based format\n\n\n    maxSubarraySumCircular(self, A) -> int\n\n\n\n\n\n   \n\n\n\n\n\n   \n    maxSubarraySum(self, A) -> int\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array A of integers represented by C, find the maximum possible sum\n\n\n\nGiven a circular", "\nUse Call-Based format\n\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\u00a0circular array:\n\n\n\n\n\nGiven a circular array", "\nUse Call-Based format\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\nExample 5:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nA = [3,2,-", "\nUse Call-Based format\n\n\n\n\n\n\n   \n    maxSubarraySum(self, A: List[int]) -> int:\n\n   \n\n\n\n\n\n\u00a0\n\n\n    maxSubarraySumCircular(self, A)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array C of integers represented by A", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n\n\n\n\n\n\n   \n\n\n\n\n\nExample 6:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array C of integers represented by A, find", "\n    \"\"\"\nUse Call-Based format\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n       \n\n\n\n\n\n   \n        return self.maxSubarraySum(A)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array C of integers represented by", "\nUse Call-Based format\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n    \n\n\n\n\n\n   \n\n\n\n\n\nExample 5:\n   \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\nIf there is no array C, return 1.\n\n\n\n\n\n\n\nGiven a circular array", "\nUse Call-Based format\n\n\n    def maxSubarraySum(self, A: List[int]) -> int:\n\n\n\n\n\n\n   \n    maxSubarraySum(self, A)\n        \n\n\n\n\n\n   ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\nIf C is a circular array, then", "\nUse Call-Based format\n\n\n    maxSubarraySumCircular(self, A: List[int]) -> int\n\n\n\n\n\n\n   \n    maxSubarraySumCircular(self, A)\n\n\n\n\nExample 6:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array C of integers represented by A", "\n\nUse Call-Based format\n\n\n\n    def maxSubarraySum(self, C: List[int]) -> int:\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n    maxSubarraySumCircular(self, C)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a circular array C of integers represented", "\nUse Call-Based format\n\n\n    maxSubarraySumCircular(self, A) -> int\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n   \n    pass\n\n\n\n\n\u00a0\n\n    maxSubarraySum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    For a circular array,\n\n   \n\n\n    Given a", "\nUse Call-Based format\n\n\n    maxSubarraySumCircular(self, A: List[int]) -> int\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n   \n    maxSubarraySum(self, A)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2:\n\n\nGiven a circular\u00a0array C", "\nUse Call-Based format\n\n\n    def maxSubarraySum(self, C: List[int]) -> int:\n        \n\n\n\n\n\n   \n    pass\n\n\n\n\nExample 6:\n   \n    maxSubarraySumLinear\n\n\n\n\n\n\n\n\n\n\n\n\n\n    A.append(3)\n\n\n\n\n\n    Given"], "prompt": "\nQUESTION:\nGiven a circular\u00a0array\u00a0C of integers represented by\u00a0A, find the maximum possible sum of a non-empty subarray of C.\nHere, a\u00a0circular\u00a0array means the end of the array connects to the beginning of the array.\u00a0 (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i]\u00a0when\u00a0i >= 0.)\nAlso, a subarray may only include each element of the fixed buffer A at most once.\u00a0 (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length\u00a0= k2 % A.length.)\n\u00a0\n\nExample 1:\nInput: [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3\n\n\nExample 2:\nInput: [5,-3,5]\nOutput: 10\nExplanation:\u00a0Subarray [5,5] has maximum sum 5 + 5 = 10\n\n\nExample 3:\nInput: [3,-1,2,-1]\nOutput: 4\nExplanation:\u00a0Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4\n\n\nExample 4:\nInput: [3,-2,2,-3]\nOutput: 3\nExplanation:\u00a0Subarray [3] and [3,-2,2] both have maximum sum 3\n\nExample 5:\nInput: [-2,-3,-1]\nOutput: -1\nExplanation:\u00a0Subarray [-1] has maximum sum -1\n\n\u00a0\nNote: \n\n-30000 <= A[i] <= 30000\n1 <= A.length <= 30000\nclass Solution:\n    def maxSubarraySumCircular(self, A: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}