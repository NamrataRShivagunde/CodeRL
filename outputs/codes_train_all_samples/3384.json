{"3384": {"code": ["```\n\n\n\n\n\n\n\n\n```\n\n\n```\n\n\n\n```\n\n```\n\n>\n\n> if `p` is not prime, then we can take advantage of `p`\n\n>\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n```\n\n", "\n\n\n```\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n>\n```\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n```\n\n```\n\n\n```\n\n`\n\n```\n\n```", "```\n\n[Lucas-Lehmer Prime Search](https://en.wikipedia.org/wiki/Lucas-Lehmer_primality_test)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n`\n\n```\n\n```\n", "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n\n>\n\n```\n\n\n```\n\n\n\n```\n\n\n```\n\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n```\n\n`", "```\n\n[Mersenne Primes](https://en.wikipedia.org/wiki/Mersenne_primality_test)\n\n\n\n\n\n\nMore detailed test:\n\n>\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n>\n\n\n`\n\n```\n\n```", "\n```\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\n```\n\n```\n\n\n```\n\n\n```\n\n\n\n\n```\n\n\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n>\n\n```\n\n\n\n`\n\n```\n\n```\n\n", "```\n\n[Lucas-Lehmer Test](https://en.wikipedia.org/wiki/Lucas-Lehmer_test)\n\n\n\n\n\n\n>\n\n\n\n\n\n\n>\n\n```\n\n\n\n\n\n\n\n\n\n\n>\n\n```\n\n`\n\n```\n\n```\n\n``", "```\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n```\n\n> if `p = 2^n` is not prime, then we can use the difficulty of `p``\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n```\n\n\n\n```\n\n`\n\n``", "```\n\n\n\n\n\n\n```\n\nMersenne Primes are used to compute the primality of the Lucas-Lehmer test.\n\n```\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n[Mersenne Primes](https://en.wikipedia.org/\n\n\n`", "```\n\n\n\n\n\n\n>\n\n\n```\n\nMersenne Primes are the only primalities of the primality of the test\n```\n\n>\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nIf n = 2,\n\n>\n\n\n\n\n`\n\n", "```\n\n\n\n\n\n\n\n\n\n\n\n```n` is a prime number\n```p = 2^n`\n\n```p = 2^n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n```p` is the number of the primality of `n`\n\n` \n", "\n\n\n\n\n\n\n```kata`\n\nYour example:\n\n```n = 2```\n\n```p = 2\n\n\n\n\n\n\n\n\n\n```k = 2^n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n```p` is odd\n\n>\n\n\n`\n", "\n```\n\n[Lucas-Lehmer Primes](https://en.wikipedia.org/wiki/Lucas_Lehmer_primality_test)\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n\n`\n\n```\n\n", "\n\n\n```\n\n[Lucas-Lehmer Prime Search](https://en.wikipedia.org/wiki/Lucas-Lehmer_primality_test)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n```\n\n```\n", "```\n\n\n\n\n\n\n\n\n\n```\n\n> for `p` and `n`\n\n>\n\n```\n\n```\n\n```\n\n\n```\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n` and `n`\n\n```\n\n", "\n\n\n```p`\n\n```Mp`\n\n```\n\n\n\n\n\n\n\n\n\n`\n\n```p`\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n```\n\n\n\n> `p` is not prime, \n\n>\n\n`", "```\n\n\n\n\n\n\n```\n\n```\n\n>\n\n```\n\n\n\n\n```\n\n\n\n\n>for `p = 2^n` then we can use this test for an odd number of bits.\n\n>\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n```", "\n```\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n>\n```\n\n```\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n```\n`\n\n```\n\n", "\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n```\n\n```\n\n\n\n```\n\n```\n\n```\n\n\n\n\n\n\n\n\n```\n\n```\n\nThe primality of `n` is calculated using the following:\n\n```\n\n\n\n`", "```\n\n```\n\n```\n\nThe most accurate test is:\n\n```\n\n\n```\n\n\n\n\n\n\n>\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n> for `p`\n\n\n```\n`\n\n```\n\n"], "prompt": "\nQUESTION:\nGeneral primality test are often computationally expensive, so in the biggest prime number race the idea is to study special sub-families of prime number and develop more effective tests for them. \n\n[Mersenne Primes](https://en.wikipedia.org/wiki/Mersenne_prime) are prime numbers of the form: Mn = 2^(n) - 1. So far, 49 of them was found between M2 (3) and M74,207,281 which contains 22,338,618 digits and is (by September 2015) the biggest known prime. It has been found by GIMPS (Great Internet Mersenne Prime Search), wich use the test srudied here. (plus heuristics mentionned below)\n\nLucas and Lehmer have developed a [simple test](https://en.wikipedia.org/wiki/Lucas%E2%80%93Lehmer_primality_test) for Mersenne primes: \n\n> for `p` (an odd prime), the Mersenne number Mp is prime if and only if `S(p \u2212 1) = 0 mod Mp`,\n\n>where `S(n + 1) = S(n) * S(n) \u2212 2` and `S(1) = 4`\n\nThe goal of this kata is to implement this test. Given an integer `>=2`, the program should calculate the sequence `S(n)` up to `p-1` and calculate the remainder modulo `Mp`, then return `True` or `False` as a result of the test. The case `n = 2` should return `True`.\n\nYou should take advantage of the fact that:\n\n```k = (k mod 2^n + floor(k/2^n)) mod Mn```\n\nOr in other words, if we take the least significant `n` bits of `k`, and add the remaining bits of `k`, and then do this repeatedly until at most `n` bits remain, we can compute the remainder after dividing `k` by the Mersenne number `2^n\u22121` without using division.\n\nThis test can be improved using the fact that if `n` is not prime, `2^n-1` will not be prime. So in theory you can test for the primality of `n` beforehand. But in practice the test for the primality of `n` will rapidly outgrow in difficulty the Lucas-Lehmer test. So we can only use heuristics to rule out `n` with small factors but not complete factorization algorithm. You don't need to implement such heuristics here. \n\nThe rapid growth of `s^2` makes javascript reach its integer limit quickly (coherent result for `n = 13`, but not `17`). Whereas python seems to be only limited by the execution time limit and let us see that M11,213 is prime (contains 3376 digits).\ndef lucas_lehmer(n):\n\t\nUse Call-Based format\nANSWER:\n"}}