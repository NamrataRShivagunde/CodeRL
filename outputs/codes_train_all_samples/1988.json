{"1988": {"code": ["\nUse Call-Based format\n\n\n    red_edges = []\n    blue_edges = []\n\n\n\nUse Call-Based format\n\n   \n   \n\n\n\n\n\u00a0\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n0 <= n <= 100\n\n\n\n\n\n\n\nn = 3\n", "\nUse Call-Based format\n\n\n    # use Call-Based format\nUse Call-Based format\n\n\n\n   \n        return self.shortestAlternatingPaths(n, red_edges, blue_edges)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n    i = 0", "\nUse Call-Based format\n\n\n    print(self)\n\nUse Call-Based format\n\nUse Call-Based format\n\n   \n   \n    print(self)\n\n\n\n   \n    return self.shortestAlternatingPaths(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nred_edges = [[0, 1],[", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n    shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    red_edges:\n       ", "\nUse Call-Based format\n\n\n    def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n        return []\n\nUse Call-Based format\n\n\n   \n   \n\n\n\n   \n    return self.shortestAlternatingPaths()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    n = 100\n\nExample", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nn <= n <= 100\nn <= n <= 400\n\nUse Call-Based format\n\nExamples:\n\n\n\n   \n\n\n\n   \n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n-1\n\n\u00a0\n\n\nX", "\nUse Call-Based format\n\n\n    self = CallBased()\n\nUse Call-Based format\n\n\n\n    self = CallBased()\n\nUse Call-Based format\n   \n    self = CallBased()\n\n\n       \n\n\n\n\n\n\n\n\n\n\nReturns:\n\nn\n\n\n\n\n\n\n\n\nn = n\nred_edges =", "\nUse Call-Based format\n\n\n    return shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n\n\n\n\n   \n\n\nUse Call-Based format\n\n   \n    return shortestAlternatingPaths(self, n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 0\nred_edges =", "\nUse Call-Based format\n\n\n    def shortestAlternatingPaths(self, n, red_edges: List[List[int], List[int], List[int]):\n        return -1\n\n\n\n\n   \n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nn = 0\n\nInput", "\nUse Call-Based format\n\n\n    return shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n\n\n\n   \n   \n    return shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    n = 100\n    red", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nself.colorIndex = n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 100\n\n\n\nX = 0", "\nUse Call-Based format\n\n\n    n = 100\n\nUse Call-Based format\n\n\n\n\n    self = n\n\n\u00a0\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nn = 3\n\n\n\n\n\nn = 100\nred_edges =", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\nUse Call-Based format\n\n\n   \n   \n    use shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrue\u00a0if all of the nodes are", "\nUse Call-Based format\n\n\n    return shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n\n\n\n   \n   \n\n\n\n\n       \n\n    return shortestAlternatingPaths(n, red_edges, blue_edges)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 400\n\n", "\nUse Call-Based format\n\n   \n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def shortestAlternatingPaths(self, n, red_edges: List[int], blue_edges: List[int]) -> List[int]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 3\n", "\nUse Call-Based format\n\n\n    # Use Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n       \n    # Use Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nTrue, False, 1, 2,", "\n\nUse Call-Based format\n\n\n    self = CallBased()\n\nUse Call-Based format\nUse Call-Based format\n\n\n    self = CallBased()\n\n   \n\n\n\n\n   \n    self = CallBased()\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    return shortestAlternatingPaths(n", "\nUse Call-Based format\n\n\n    return shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nn = n-1\n\n#", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nconsider a directed graph with nodes labeled 0, 1,..., n-1.\n\n\n   \n    pass\n\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nConsider a directed graph, with nodes", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n        return shortestAlternatingPaths(self, n, red_edges, blue_edges)\n\n   \n\n\n\n   \n\n\n\n\n\n1, -1, -1, 0\n\n\n\n\n\n\n\n\n\tred_edges = [[0,1],"], "prompt": "\nQUESTION:\nConsider a directed graph, with nodes labelled 0, 1, ..., n-1.\u00a0 In this graph, each edge is either red or blue, and there could\u00a0be self-edges or parallel edges.\nEach [i, j] in red_edges denotes a red directed edge from node i to node j.\u00a0 Similarly, each [i, j] in blue_edges denotes a blue directed edge from node i to node j.\nReturn an array answer\u00a0of length n,\u00a0where each\u00a0answer[X]\u00a0is\u00a0the length of the shortest path from node 0\u00a0to node X\u00a0such that the edge colors alternate along the path (or -1 if such a path doesn't exist).\n\u00a0\nExample 1:\nInput: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []\nOutput: [0,1,-1]\nExample 2:\nInput: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]\nOutput: [0,1,-1]\nExample 3:\nInput: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]\nOutput: [0,-1,-1]\nExample 4:\nInput: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]\nOutput: [0,1,2]\nExample 5:\nInput: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]\nOutput: [0,1,1]\n\n\u00a0\nConstraints:\n\n1 <= n <= 100\nred_edges.length <= 400\nblue_edges.length <= 400\nred_edges[i].length == blue_edges[i].length == 2\n0 <= red_edges[i][j], blue_edges[i][j] < n\nclass Solution:\n    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}