{"3077": {"code": ["\n# Use Call-Based format:\n\n\n\n\n\n# Use Call-Based format\n\n`\n`\n\n\n\n##Task:\n:\n#Task:\n\n`\n\n\n\t\n\n\n#Task:\n\n   \n\n\n\n\n   \n   \n\n##Examples:\n\n##Task:\n##Examples:\n\n   \n\n##Example:\n", "\n##Task:\n\nUse Call-Based format\n\n\n\n\n##Task:\n\n\n\n\n`\n\n\t\n\n##Task:\n\n##Task:\n\n`\n\n#Task:\n\n\n\n\n##Task:\n\n\n\n\n\n\n\n\n\n\n\n\n##Examples:\n\n\n##Task:\n\n\n   \n\n\n##Task", "\n##Task:\n\n\n\n\n##Task:\n\n`\n\n`\n\n\n\t\n\n##Task:\n\n`\n\n\n#Task:\n\n\n##Task:\n\n##Task:\n\n##Examples:\n\n\n\n\n\n\n\n##Example:\n\n\n   \n   \n\n##Task:\n\n##Examples:\n\n\n\n\n##", "\n##Example:\n\nUse Call-Based format:\n\n\nUse Call-Based format\n\n\n##Example:\n\n\n\n\n\n\n\n\n\n`\n\n\n\t\n\n\n##Task:\n\n\n##Examples:\n\n\n\n\n\n\n##Examples:\n\n\n##Example:\n\n\n\n\n   \n\n##Task:\n\n\n##Task", "\n##Example:\n\nuse Call-Based format:\n##Example:\n\n\n   \n\n##Task:\n\nUse Call-Based format\n##Examples:\n\n`\n\n`\n\n\n\t\n:\n##Task:\n\n`\n\n\t\n:\n\n\n\n\n\n\n##Examples:\n\n\n\n\n##Task:\n\n   \n\n\n##", "\n##Task:\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n`\n\n\n#Task:\n\n##Task:\n\n`\n\n\n#Task:\n\n\n##Task:\n\n\n##Task:\n\n\n\n\n\n\n\n##Examples:\n\n\n\n\n\n\n##Task:\n\n\n\n\n##", "\n:\n\n\n   \n\nUse Call-Based format\n\n##Description:\n\n\n`\n\n`\n\n\n\n\n##Task:\n\n`\n\n\n\n##Task:\n\n\n\n##Task:\n\n\n\n##Examples:\n\n\n\n\n##Example:\n\n\n\n\n##Task:\n\n##Task:\n\n\n\n\n\n##", "\n:\n\n\n   \n\n##Task:\n\n\n##Examples:\n\n`\n\n`\n\n\n\n##Task:\n\n\n\n##Task:\n\n`\n\n\n\t\n\n##Task:\n\n\n##Task:\n\n   \n\n\n\n\n\n   \n   \n\n##Task:\n\n\n##Examples:\n\n\n   \n\n##", "\n##Task::\n\n\n\n\nUse Call-Based format\n\n##Example:\n\n\n##Examples:\n\n`\n`\n\n\n\n#Task:\n\n##Examples:\n\n##Example:\n\n\n\n`\n\n\n\t\n\n\n\n\n\n\n\n\n##Task:\n\n\n\n\n##Task:\n\n\n\n\n##Task:", "\n\n\n   \nUse Call-Based format\n\n##Task:\n\nUse Call-Based format\n\n\n`\n`\n\n\t\n\n\n##Task:\n\n`\n\n\n\n\n\n##Task:\n\n##Examples:\n\n   \n\n\n\n\n##Examples:\n\n\n   \n\n##Task:\n\n\n\n\n   \n\n#\n##", "\n:\n\t\n\n\n\n\nUse Call-Based format\t\n\n##Task:\n\n`\n`\n\n\n\n:\n##Task:\n\n\n`\n\n\n\n#Task:\n\n\n:\n##Task:\n\n   \n   \n\t\n\n\n   \n   \n   \n##Task:\n\n\n\n   \n\n##Example:\n\n##", "\n# Use Call-Based format\n#\n\n\n#\n\n`\n\n```\n\n\n\n#\n#Task:\n\n`\n\n\n\t\n#\n#Task:\n#\n#Task:\n\n##Task:\n\n\n\n\n\n#Task:\n\n\n\n\n\n\n#Task:\n\n\n\n\n\n\n\n\n##Task:\n", "\n##Task:\n:\n\n\n\n\nUse Call-Based format\n##Task:\n\n\n\n\n\n\n\n#Task:\n\n\n`\n\n\n\n#Task:\n\n\n\n##Task:\n\n   \n   \n\n\n##Example:\n\n\n   \n   \n##Example:\n\n##Task:\n\n   \n\n\n##Task:\n", "\n##Task:\n\nUse Call-Based format\n\n\n   \n\n##Task:\n\nUse Call-Based format\n\n`\n\n`\n\n\t\n:\n##Task:\n\n\n`\n\n\n\t\n\n##Task:\n\n\n\n##Examples:\n\n\n\n\n\n\n\n   \n\n##Task:\n\n\n\n\n\n\n##Task", "\n# Example:\n##Example:\n# Task:\n##Examples::\n#\n\n\n\n# Example:\n#\n\n`\n`\n\n\n\n\n#Task:\n\n\n`\n\n\n\t\n##Example:\n\n#:\n\n   \n\n\n\n\n##Example:\n\n   \n\n\n##Task:\n\n\n\n\n\n###Task", "\n##Arguments:\n:\n##Example:\n\n\n\nUse Call-Based format\n##Examples:\n\n\n\n\n`\n\n\t\n\n##Task:\n\n`\n\n\n\n\n##Examples:\n\n   \n\n#Task:\n\n\n\n\n   \n   \n   \n##Task:\n##Task:\n\n   \n\n\n##Task:\n\n", "\n##Task::\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n##Task:\n\n##Example:\n\n\n`\n\n\n\t\n\n##Task:\n\n\n##Examples:\n\n\n\n\n\t\n\n\n\n\n##Example:\n\npattern(5):\n\n\n\n##Examples:\n\n   \n\n\n##", "\n# Example:\n##Examples:\n\n\n\nUse Call-Based format\n#Example:\n#Task:\n\n\n`\n`\n\n\n#Task:\n##Task:\n#Example:\n##Examples:\n:\n\n`\n\n\t#\n\n\n\n\n\n\n##Example:\n\n\n\n\n##Task:\n\n   \n\n\n#Task:", "\n\n# Description\n\n\n\nUse Call-Based format\n\n##Example:\n\n# Description\n##Examples:\n\n\n\n`\n\n`\n\n\n\t\n\n\n\n`\n\n\n\t\n\n##Task:\n\n# Example:\n\n\n\n\n\n\n##Task:\n\n\n\n\n\n##Task:\n\n\n\n\n\n\n##Task", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n##Task:\n\n`\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n##Example:\n\n\n   \n##Task:\n\n##Examples:\n\n\n   \n##Task:\n\n\n\n\n##"], "prompt": "\nQUESTION:\n##Task:\n\nYou have to write a function **pattern** which creates the following pattern upto n number of rows. *If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.*\n   \n##Examples:\n\npattern(4):\n\n    1234\n    234\n    34\n    4\n    \npattern(6):\n \n    123456\n    23456\n    3456\n    456\n    56\n    6\n\n\n\n```Note: There are no blank spaces```\n\n```Hint: Use \\n in string to jump to next line```\ndef pattern(n):\n\t\nUse Call-Based format\nANSWER:\n"}}