{"1902": {"code": ["\n\n\n\n        pass\n\n\nUse Call-Based format\n\n\n\n        pass\n\n\nUse Class-Based format\n\nUse Call-Based format\n\nConstraints:\n\n10 <= low <= high <= 10^9\n\nConstraints:\n\nlow <= high <= 10^9\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n        pass\n\n\nUse Call-Based format\n\n\n\n       \n        pass\n\n\n\n        pass\n\nclass\n        pass\n\n\nAn integer has sequential digits\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n1 <= low <= high\n\n2 <= low <= high\n\nUse Call-Based format\n\n\n\n\nAn\u00a0", "\nUse Call-Based format\n\n\n        pass\n\n\n\n\n\n        pass\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\nlow <= high <= 10^9\n\nConstraints:\n\nlow <= high <= 10^9\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n", "\n\n\n       \n        pass\n\n\nUse Call-Based format\n\n\n        return [1]\n\nUse Call-Based format\n\nUse Call-Only format\n\nUse Call-Based format\n\nConstraints:\n\nlow <= high <= 10^9\n\nConstraints:\n\nlow <= high <= 10^9\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn integer has sequential digits\nAn integer has sequential digits\n\nExample 1:\nAn\nAn", "\n\nUse Call-Based format\n\n\n       \n\n\n\nUse Call-Based format\n\n\n\n        pass\n\n\nUse Python format\n\nUse Call-Based format\n\nUse Call-Based format\n\nInput:\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n123\n\n\n\n\nA number has a single\ufffd", "\nUse Call-Based format\n\n\n        pass\n\n\n\n\n\n        return self.sequentialDigits(low, high)\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n10 <= low <= high <= 10^9\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n        pass\n\n\n\nUse Call-Based format\n\n\n        return [self.digits[i] for i in range(low, high)]\n\n\u00a0\n\nUse Solution format\n\nUse Call-Based format\n\nConstraints:\n\nlow <= high <= 10^9\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n        pass\n\n\n\n\n\n        pass\n\nUse Call-Based format\n\nUse Python format\n\n\nUse Python\n        pass\n\n\n\n        pass\n\n   \n        pass\n\nAsk an integer with sequential digits\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA number has a single\u00a0digit of a", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n        pass\n\nUse Call-Based format\n\nInput:\n    low:\n        high:\n       \n        pass\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n0 <= low <= high <= 10^9\n\nUse Call-Based format\n\n\n\n\nAn integer has", "\nUse Call-Based format\n\n\n        pass\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n       \n        pass\n\n\n\n        return [1,2,3]\n\nclass\n        pass\n\n\n\n\n\n\n\n\n\n\n\nThe number must be in a valid format.\n\n\n\n\nAn integer has sequential digits if", "\n\n\n\n\n\n\n\n\n        return [self.integer]\n\nUse Call-Based format\n\nUse Python format\n\nUse Call-Based format\n\nConstraints:\n\n10 <= low <= high <= 10^9\n\nConstraints:\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n123,345\n\n\n\n\nAn integer has", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        pass\n\n\nUse Call-Based format\n\n\nMethod:\n   \n\n\n\n    pass\n\n\nClass Solution:\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nAn integer has sequential digits if", "\nUse Call-Based format\n\n\n        pass\n\n\n\n\n        return self.sequentialDigits(low, high)\n\n\u00a0\nUse Call-Based format\n\nUse Python-Based format\n\nCall-Based:\n\n\n        pass\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1:\nA number has a sequential", "\n\n\n       \n        pass\n\n\nUse Call-Based format\n\n\n\n       \n        pass\n\n\n\n        pass\n\n   \n        pass\n\n\n1 <= low <= high <= 10^9\n\n\n\n\n\nUse Call-Based format\n\n\nA number with sequential digits.\n\nUse Call-Based format\n\n\n\n\nAn integer has sequential digits if", "\n\n\n        pass\n\n\nUse Call-Based format\n\n\n        pass\n\n\u00a0\n\nUse Call-Based format\n\nUse Python format\n\nUse Call-Based format\n\nInput:\n    low, high\n\nOutput:\n\n\n        pass\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn integer has", "\n\n\n       \n\nUse Call-Based format\n\n\n\n        pass\n\n   \n        pass\n\n\n\n        pass\n\n   \n        pass\n\n\nExample 1:\nInput: 1\nAn integer has sequential digits.\nOutput: [123]\n\n\n\n\n\n\n\n\n\n\nAn integer has sequential digits.\n\n\n\nAn integer has sequential digits\n", "\nUse Call-Based format\n\n\n        pass\n\n\n\n\n\n\n        return self.sequentialDigits(low, high)\n\nUse Call-Based format\n\n\nConstraints:\n\nlow <= high <= 10^9\n\nOutput:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA \u00a0integer has", "\n\nUse Call-Based format\n\n\n        pass\n\n\n\n\n\n        pass\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nClass Solution:\n   \n        pass\n\n\n    pass\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nAn integer has sequential digits.\n\n\n\n\nAn integer has sequential digits.", "\nUse Call-Based format\n\n\n\n\n\n\n\n        return [3, 6]\n\nUse Call-Based format\n\nUse Method-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nAn integer has sequential digits", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n       \n        pass\n\n\nA sequence of integers has sequential digits\n\n\n   \n        pass\n\n\n\n\n\n\n\n\nAn integer has sequential digits.\n\nAn integer has sequential digits.\n\n\n\n\nAn integer has sequential digits."], "prompt": "\nQUESTION:\nAn\u00a0integer has sequential digits if and only if each digit in the number is one more than the previous digit.\nReturn a sorted list of all the integers\u00a0in the range [low, high]\u00a0inclusive that have sequential digits.\n\u00a0\nExample 1:\nInput: low = 100, high = 300\nOutput: [123,234]\nExample 2:\nInput: low = 1000, high = 13000\nOutput: [1234,2345,3456,4567,5678,6789,12345]\n\n\u00a0\nConstraints:\n\n10 <= low <= high <= 10^9\nclass Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}