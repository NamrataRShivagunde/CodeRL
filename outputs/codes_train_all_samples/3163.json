{"3163": {"code": ["\n\n\n\n\nUse Call-Based format\n\n\n# Task\n`Triangular numbers` are defined using a call-based format\n\n# Example\n\n[input] integer n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\t\n# Task\n\n\n\n\n\n\n!\n\n\n# Task\n\n\n# Task\n\n\n\n# Task\n`", "\n# Example\n\n\tUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n# Task\n`triangular_sum(n)`\n\n\n# Task\n\n# Task\n\n\n\n\t\n\n\t# Task\n\t\n\n\t\n\n\n\n\n.png\n\n\n\n\n\n\n# Task\n\n\n# Task\n`3", "\n# Call-Based format\n\n\n\n\n\n\n\n# Task\n\n`n` is a number\n\n1 \u2264 3 \u2264 45`\n\n\n# Task\n\n\n\n\n\n# Task\n\n\n\t\n\n\nTask\n\n\n\n\n\n\n.png\n`\n\n\n# Task\n\n\n# Task\n\n# Task\n", "\n\t\nUse Call-Based format\n\t\nUse Call-Based format\n\n\n\n\n\n\n# Task\n[task]\n\n\n# Task\n\n\n# Task\n# Task\n\n# Task\n\n\n\n\t\n\n# Task\n\n\n\t\n\n\n\n\n\n\n.png\n\n\n\n\n\n# Task\n\n\n\n# Task\n\n#", "\n# Example\n\n# Call-Based format\n\n\nUse Call-Based format\n\n\n# Task\n\nA single value or multiple\n\n`[input]` integer `n`\n\n\n\n\n# Task\n\n# Task\n\t\n\n\n\n\n\n\n\n\n\n![](https://i.gyazo.com/\n\n\n\n\n\n\n#", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n# Task\n`Triangular numbers` are defined in the following format:\n\n# Example\n\nn = 3\n\n\n\n# Task\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n![]\n\n\n# Task\n\n\n\n# Task\n\n# Task\n", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n# Task\n`n` is an integer\n\n\n# Task\n\n\n# Task\n\n\n# Task\n\n\n\n\t\n# Task\n\n\n\n\n\n\n.png\n![]\n\n\n\n\n\n\n\n# Task\n\n# Task", "\n\n\nUse Call-Based format\n\n# Example\n\nn = 3\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n# Task\n\n\n# Task\n\t\n\n\n\t\n# Task\n\n\n\n\n\n\n\n\n\n\n![]\n\n\n\n# Task\n\n\n\n# Task\n\n# Task", "\n# Use Call-Based format\n\n[output]\n\n\n\n\n\n\n\n\n# Task\n`Triangular numbers` are defined as:\n\n`[input]` integer `n`\n\n\n\n\n\n\n# Task\n\n\n\t\n\n\n\n\n\n\n![]\n!\n\n\n\n# Task\n\n\n\n\n\n# Task\n`3", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n# Task\n\n[task]\n\n\n# Example\n\n1 \u2264 1\n\n2 \u2264 3\n\n\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n![]()\n\n\n\n\n\n\n# Task\n\n\n# Task", "\n# Example\n\nn = 3\n\n\n\n\n\n\n\n# Task\n`n = 3`\n\nUse Call-Based format\n\n# Example\n\nn = 9\n\nUse Call-Based format\n\n# Example\n\nn = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n# Task\n", "\n# Example\n\n# Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n# Task\n`Triangular numbers` are a sequence of integer\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n![](https://i.gyazo.com/)\n\n\n\n\n\n\n\n", "\n# Use Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n# Task\n\n[input]\n# Task\n\n\n\n\t\t\n# Task\n\n# Task\n\n\n\n\n\t\n\n.png\n\n![]\n![]\n\n\n:\n\n\n# Task\n\n\n# Task", "\n# Example\n\n# Call-Based format\n\n\n\nUse Call-Based format\n\n\n# Task\n\n[task]\n\n\n# Task\n\n\n\n\n# Task\n\n# Task\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n![]\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n# Task", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n# Task\n`Triangular numbers` are in a sequence of two consecutive triangular numbers`\n\n`[input]` integer `n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![]\n\n\n\n\n\n\n# Task\n\n# Task\n`", "\n\n[task]`\n\nUse Call-Based format\n\n# Example\n\nn = 3\n\nUse Call-Based format\n\n# Example\n\nn = 6\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\t\n\n# Task\n\n\n\n\n\n!\n\n\n\n\n# Task\n\n\n\n# Task\n\n# Task", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n# Task\n`Triangular numbers` are defined in a call-based format\n\n[input] = 3\n\n\n\n\n# Task\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n.png\n\n\n\n\n\n# Task\n\n\n# Task\n`3 *", "\n# Example\n\nn = 3\n\n\n\n\nUse Call-Based format\n\n\n# Task\n`Triangular numbers` are a call-Based format\n\n\n# Task\n\n\n# Task\n# Task\n\n\n\t\n# Task\n\n# Task\n\n\n\n\n\n\n.\n\n\n\n# Task\n\n\n# Task\n\n# Task\n`6", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n# Task\n`n` can be an integer\n\n\n\n# Task\n\n\n\n# Task\n\n\n\n\t# Task\n:\n\n\n\n\n\n![](https://i.gyazo.com/)\n\n\n\n\n\n# Task", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n# Task\n`Triangular numbers` are defined in the following format:\n\n1 + 3 * 3\n\n1 +\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n# Task\n\n#"], "prompt": "\nQUESTION:\n# Task\n`Triangular numbers` are defined by the formula `n * (n + 1) / 2` with `n` starting from 1. They count the number of objects that can form an equilateral triangle as shown in the picture below:\n\n![](https://i.gyazo.com/eec11cc9e17a31324338edc4eb7bb746.png)\n\nSo the sequence of triangular numbers begins as follows:\n\n`1, 3, 6, 10, 15, 21, 28, ....`\n\nIt is proven that the sum of squares of any two consecutive triangular numbers is equal to another triangular number.\n\nYou're given a triangular number `n`. Return `true` if it can be represented as `a sum of squares of two consecutive triangular numbers`, or `false` otherwise.\n\n\n# Input/Output\n\n`[input]` integer `n`\n\nA positive triangular number\n\n`3 \u2264 n \u2264 10^9`\n\n`[output]` a boolean value\n\n`true` if it is possible to represent n as the sum of squares of two consecutive triangular numbers, and `false` otherwise.\n\n# Example\n\nFor `n = 6`, the output should be `false`.\n\nNo two squared consecutive triangular numbers add up to 6.\n\nFor `n = 45`, the output should be `true`.\n\n`3 * 3 + 6 * 6 = 9 + 36 = 45`\ndef triangular_sum(n):\n\t\nUse Call-Based format\nANSWER:\n"}}