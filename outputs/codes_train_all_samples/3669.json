{"3669": {"code": ["\n\n\n\n\nUse Call-Based format\n\n\n\nsc_perm_comb(num)\n\nThe function is called for each number of digits\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\npython\nsc_perm_comb(1)\nsc_perm_comb(2)\nsc_perm_comb(3)\n\n", "\n\n\n\n\n\n\nsc_perm_comb(num):\n\t\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\t\n\n\nThis function computes the score of permutations of combinations of numbers\n\n\n\n\n\n\n\n\n\n\n\n    ``sc_perm_comb(num)``\n\n\npython\n\n\n\n\n```python\nsc", "\n\n\n\n\n\n\nsc_perm_comb(1)\n\nThe function call-based format\n\nQUESTION:\n\nWe define the score of permutations of combinations of combinations of digits\n\n\n\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nThe function calls the function for the number ``num``\n\npython\n\n\n\n\n    The function", "\t\nUse Call-Based format\t\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python python\nsc_perm_comb(34)\n```\n\n\n\npython\n\n\n\n```python\nsc_perm_", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\nReturns:\n\t\nReturns a score of permutations of combinations of digits\n\nEXAMPLE:\n\n:\n\n\n\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\npython\nsc_perm_comb(1)\n\n\n\nThe function for retrieving the", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nsc_perm_comb(num):\n\t\nUse Call-Based format\n\n\n\n\t\n:\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nThe score of permutations of combinations, of an integer number is defined as the total sum of the numbers.\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\t\nThis function is called for a single digit of a number.\n:\n\n\n\n\n\t\nUse Call-Based format\n\nDOCS:\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\npython\nsc_perm_comb(6)\nsc_perm_comb(0)\n\n\n\n\n\n``", "\n\t\nUse Call-Based format\n```python\nsc_perm_comb(int)\n```\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nThe function will obtain the total sum of all the permutations of combinations of its digits.\nThe function will return the score.\n\npython\n\n\n\n\n```python", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nADDEN:\n\n\t\nAdden:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nsc_perm_comb(2)\n\n\n\n\n```python\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWe define the score of permutations of combinations of numbers (of an integer number):\n\n```python\nsc_perm_comb(num)```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nsc_perm_comb(0)```\n\n\n``", "\n\n```python\nsc_perm_comb(10)\n```\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\nNumber:\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\npython\nsc_perm_comb(6)\n\n\n\n\n\n\n```python", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nThe score of permutations of combinations of digits is defined as the sum of all the permutations of combinations of the numbers of its digits.\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n:\n\npython\nsc_perm_comb(123)\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\n\n\nsc_perm_comb(num):\t\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\nsc_perm_comb(8)\n\n\n\n\n\npython\nsc_perm_comb(1)\nsc_perm_comb(1)\n\n\n\n``", "\n\n\n\n\nUse Call-Based format\n\n\n\n```python python sc_perm_comb(num)```\n\nThis function is called by the function ``sc_perm_comb``\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nThe function function returns the score of permutations of combinations.\n\npython\ndef\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n.. code-block:: python\n\n\tdef sc_perm_comb(num):\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nsc_perm_comb(34", "\n\n\n\n\n\n\nsc_perm_comb(num)\n\nUse Call-Based format\nCONCEPT:\n\nUse Call-Based format\nANSWER:\n\n\n\n\n\n:\n\n\n\n\n\t\n\n\n:\n\n\n\n\n\n\n\n\nThe number 4348 is the smallest number of digits.\nThe number\n\n\n\n\nThe function", "\n\n\n\n\n\nUse Call-Based format\n\n\nsc_perm_comb(num):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nsc_perm_comb(3)\n```python\n\n\n\n\n\nsc_perm_comb(3)\n```python\n\n\n\n\n```", "\n\n\n\nUse Call-Based format\n\n\n\nsc_perm_comb(num):\n\t\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\nsc_perm_comb(348)\nsc_perm_comb(348)\n\n\n\n\n    1:\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n\nWITH:\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nsc_perm_comb(348)``", "\nUse Call-Based format\n\n\n\n\n\nsc_perm_comb(num)\n\nThe score is the total sum of all the permutations of combinations of the digits.\n\n\n\n:\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n:\n\n```python python\nsc_perm_comb(3)```\n\n\n\n\n```"], "prompt": "\nQUESTION:\nWe define the score of permutations of combinations, of an integer number (the function to obtain this value:```sc_perm_comb```) as the total sum of all the numbers obtained from the permutations of all the possible combinations of its digits.\nFor example we have the number 348.\n```python\nsc_perm_comb(348) = 3 + 4 + 8 + 34 + 38 + 48 + 43 + 83 + 84 + 348 + 384 + 834 + 843 + 438 + 483  = 3675\n```\nIf the number has a digit 0, the numbers formed by a leading 0 should be discarded:\n```python\nsc_perm_comb(340) = 3 + 4 + 34 + 30 + 40 + 43 + 340 + 304 + 430 + 403 = 1631\n```\nIf the number has digits that occur more than once, the score the adden will not be taken than twice or more:\n```python\nsc_perm_comb(333) = 3 + 33 + 333 = 369\n```\nIf the number has only one digit its score is the same number:\n```python\nsc_perm_comb(6) = 6\nsc_perm_comb(0) = 0\n```\n\nEnjoy it!!\ndef sc_perm_comb(num):\n\t\nUse Call-Based format\nANSWER:\n"}}