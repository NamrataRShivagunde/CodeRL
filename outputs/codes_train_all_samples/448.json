{"448": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size 2*k\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nGiven a list of non-negative numbers and a target integer\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers and a target\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n    def checkSubarraySum(self, nums: List[int], k: int):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative numbers,\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers and a target integer k, write a function to check if a list has a continuous subarray of size 2 and k.\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size 2 and size 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nInput:\n   \n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers and a target\nGiven", "\nUse Call-Based format\n\n\n    def checkSubarraySum(self, nums, k):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative", "\nUse Call-Based format\n\n\n    def checkSubarraySum(self, nums, k):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n\nGiven a list", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers and a target integer k\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    [n, k]\n\n\n\n\nGiven a list of non-negative numbers\n\n\n", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size 2 and k.\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers and a target integer k, write a function to check if a subarray sums up to the target integer k\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers", "\nUse Call-Based format\n\n\n    def checkSubarraySum(self, nums: List[int], k: int):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative numbers:\n\nGiven", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven a list of non-negative numbers and a target integer k, write a function to check\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a list of non-negative numbers andGiven", "\n\nUse Call-Based format\n\n    def checkSubarraySum(self, nums, k: int):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCall-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a list of non-negative", "\nUse Call-Based format\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\nCall-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a list of numbers and a target integer k\nGiven"], "prompt": "\nQUESTION:\nGiven a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.\n\n\n\nExample 1:\n\nInput: [23, 2, 4, 6, 7],  k=6\nOutput: True\nExplanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n\n\n\n\nExample 2:\n\nInput: [23, 2, 6, 4, 7],  k=6\nOutput: True\nExplanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n\n\n\nNote:\n\nThe length of the array won't exceed 10,000.\nYou may assume the sum of all the numbers is in the range of a signed 32-bit integer.\nclass Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}