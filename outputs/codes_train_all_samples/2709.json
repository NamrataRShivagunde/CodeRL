{"2709": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\nWrite a function `take_umbrella()` that takes two arguments\nUse Call-Based format\n\nQUESTION:\n\n\n\n\n\n:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nION:\nWrite a function `take_umb", "\nUse Call-Based format\n\n\nUse Call-Based formatUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\n\n\n\n:\n\n*\n\n\t\nUse Call-Based format\n\n\n*\n\n\n\n:\n\n\n:\n\n\n\nION:\n\n\nATTENTION:\n\n*\n\n:\n\n* A", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\n\nION:\nION:\n\n\n:\n\n\n\t\nUse Call-Based format\nION:\n\n*\n\n:\n\n:\n\nION:\n\nATTENTION:\n\n*\nION:\n\n* Write a", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\nANSWER:\n\n\n\n:\n\n\n\n\n:\n\n\n\n:\n\n\n\n:\n\n:\nUse Call-Based format\n\nION:\nWrite a function `take_umbrella()`\n\n\n:\nWrite", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based formatUse Call-Based format\nION:\nWrite a function `take_umbrella()`\nQUESTION:\n\n:\n\n\n\n\n:\n\n\n\nUse Call-Based format\n\n\n:\n\nION:\n\nQUESTION:\nWrite a function `take()`\n\n:\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nWrite a function `take_umbrella()` to call it\nION:\n\n\n\nUse Call-Based format\n\n\n\n:\n\n*\n\n\n\nUse Call-Based format\n\n\n\n\n:\n\nQUESTION:\nWrite a function `take_umbrella()`", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nRETURN-Based format\n\n\n\nUse Call-Based format\n\nSEND:\n\n\n\t\n\n\n\n\n\n\n\n\nTake an umbrella\n\n:\n\nION:\n\nTHIS IS THE SAME FORMAT\n\nNOTE:\n\n\n:\n\n", "\nUse Call-Based format\nUse Call-Based format\n\nATTENTION:\n\t\nUse Call-Based format\n\n\n\nION:\n\n\n\n\nUse Call-Based format:\n\n\n\n:\n\n\n\n:\n\n:\nWrite a function `take_umbrella()` that takes two arguments:\n\n:\n\nION:\nWrite a function `", "\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\nANSWER:\n\n\n:\n\nION:\n\n\n:\n\n\n\n\n\n:\n\n\n\nUse Call-Based format\n\n\n:\nION:\nWrite a function `take_umbrella()` that takes two arguments\n\nQUESTION:Write a", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nWrite a function `take_umbrella()` that takes two arguments:\n\n* You should take an umbrella\n\n* You should take an umbrella\n\n*\n\n\n\n\n\n\n\n:\n\n\n:\n\n\n\n:\n\n:end::", "\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\nANSWER:\n\n\nUse Call-Based format\n:\nION:\n\n\n:\n\n\n\t\nUse Call-Based format\n:\n\n\n\nUse Call-Based format\n\n\n\n\nION:\n\nION:\nWrite a function `take_umb", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nWrite a function `take_umbrella()` to use Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nQUESTION:\nWrite a function `take()`\n\n\nWrite a", "Use Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\nQUESTION:\n\t\n\n\nION:\n\n\n\n:\n\n\n\n:\n\n\n\nUse Call-Based format\nION:\n\n\n\n\nION:\n\nANSWER:\nANSION:\nION:\nWrite a", "\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\nANSWER:\n\n\n\n:\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n:\n\n\n\nION:\nWrite a function `take_umbrella()`\n\nION:\n", "\nUse Call-Based format\n\n\nUse Call-Based formatWrite a function `take_umbrella()` to get a function that returns a boolean.\n:\nION:\n\n\nUse Call-Based format:\n\n\n\t\nUse Call-Based format\n:\n\n\n:\n\n\n\n\n:\n\nNOTE:\n\n*\nION:\n\n* Write a function", "\nUse Call-Based format\nUse Call-Based format\nNOTE:\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\n\n:\n\n\n\nUse Call-Based format\n\n\n:\n\nION:\n\nCOMMANDS:\n\n*\n\nION:\n\n*", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\n\nUse Call-Based format\n:\nION:\n\n\n:\n\n\n\n:\n\n\n\n:\n\n:\nWrite a function `take_umbrella()` that returns a boolean\nION:\n\nION:\nWrite a function", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\nANSWER:\n\n\nION:\n\nION:\n\n\n:\n\n\n\nION:\n\n\n\nUse Call-Based format\n\n\n\n\nION:\n\nQUESTION:\nWrite a function `take_umbrella()`", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based formatWrite a function `take_umbrella()` that takes two arguments\nUse Call-Based format\nWrite a function `take_umbrella()`\n\n\n\n\n\n\n:\n\n\n:\n\n\n\nION:\n\nQUESTION:\nWrite a function `close()`\n\n:\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nQUESTION:\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\n:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nQUESTION:\nWrite a function `print()`\n\n\nWrite"], "prompt": "\nQUESTION:\nWrite a function `take_umbrella()` that takes two arguments: a string representing the current weather and a float representing the chance of rain today.\n\nYour function should return `True` or `False` based on the following criteria.\n\n* You should take an umbrella if it's currently raining or if it's cloudy and the chance of rain is over `0.20`.\n* You shouldn't take an umbrella if it's sunny unless it's more likely to rain than not.\n\nThe options for the current weather are `sunny`, `cloudy`, and `rainy`.\n\nFor example, `take_umbrella('sunny', 0.40)` should return `False`.\n\nAs an additional challenge, consider solving this kata using only logical operaters and not using any `if` statements.\ndef take_umbrella(weather, rain_chance):\n\t\nUse Call-Based format\nANSWER:\n"}}