{"404": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    def largestSumOfAverages(self, A: List[int], K: int):\n        return 0.0\n\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [9,1,2", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def largestSumOfAverages(self, A: List[int], K: int):\n        \nUse Call-Based format\n\n\u00a0\nOutput: 20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe partition the row of numbers A into", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\u00a0\n1 = 10\n\n\n\n\n\nWe partition a row", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    A = [0, 1, 2, 3, 9]\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n    A = [9]\n\n", "    def largestSumOfAverages(self, A, K: int):\n        return self.largestSumOfAverages(A, K)\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 < K < A.length\n\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    self.A = A\n        self.K = K\n        \n\n\n   \n    def largestSumOfAverages(self, A, K):\n        \n\n\n\n\n\n\n\n\n\n\nK = 3\n\n\n\n\nWe partition the row of numbers A into", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n        k = 3\n\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [1,2,3]\n\n\n\n\n\nWe partition a row of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\u00a0\nInput: \nInput: A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n    A", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nOutput: \n\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\n\nWe partition A into K adjacent groups", "\n\n\n\n    def largestSumOfAverages(self, A, K):\n        return self.largestSumOfAverages(A, K)\n\n\n\n\n\n   \n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    A = [9, 1, 2", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        A = [9, 1, 2, 3]\n        K = 3\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [9, 1, 2, 3]\n\n\n\n\nA =", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nA = [9,1,2,3,9]\nK = 3\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nWe partition A into K adjacent", "\n\n\n\nUse Call-Based format\n\n\n\n\n    def largestSumOfAverages(self, A: List[int], K: int):\n\n   \n    return 10\n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\nA = [1,2,3]\n\n\n\n\n\nWe partition a row of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    print self.largestSumOfAverages(A, K)\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nThe best choice is the average of the partitioned", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def largestSumOfAverages(self, A: List[int], K: int):\n\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe partition a row of numbers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def largestSumOfAverages(self, A, K):\n        return 9 + (1 + 2 + 3) / 3 + 9\n\n\n\n\n          \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nWe partition A into K adjacent numbers A", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def sumOfAverages(self, A, K: int) -> float:\n       \nUse Call-Based format\n\n\n\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    A = [9]\n\n\n\n\n\n    score = sumOfAver", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    def largestSumOfAverages(self, A, K: int):\n        return self.largestSumOfAverages(A, K)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    K = 3\nA =", "\nUse Call-Based format\n\n\n    def largestSumOfAverages(self, A, K: int):\n        return self.largestSumOfAverages(A, K)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK = 3\n\nWe partition a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\n   \n    def largestSumOfAverages(self, A, K: int):\n        return 10\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n  A = [9,"], "prompt": "\nQUESTION:\nWe partition a row of numbers A\u00a0into at most K adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?\nNote that our partition must use every number in A, and that scores are not necessarily integers.\nExample:\nInput: \nA = [9,1,2,3,9]\nK = 3\nOutput: 20\nExplanation: \nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n\n\u00a0\nNote: \n\n1 <= A.length <= 100.\n1 <= A[i] <= 10000.\n1 <= K <= A.length.\nAnswers within 10^-6 of the correct answer will be accepted as correct.\nclass Solution:\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n        \nUse Call-Based format\nANSWER:\n"}}