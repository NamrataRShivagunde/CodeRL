{"4860": {"code": ["\n\n\n\n\nCall-Based format\n\nUse Call-Based format\n\nExample:\n\nladder = [1, 2, 3, 4, 5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\npython\n\n\n\nA function visualizer is preloaded\nAmid", "\n\n\n\nExample:\n\nladder = [1, 2, 3, 4, 5, 6]\n\nTest Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji:\n\nA function visualizer:\n\n\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji is a function visualizer\n\n\n\n\n\n\n\n\n\n\nAmidakuji is a function visualizer with two rungs:\n\n\n\n\n\n\n\nAmidakuji is", "\nUse Call-Based format\n\n\n\n\n\nTest format:\n\namidakuji(ar)\n\nTest example\n\n\n\n\n\n\n\n\n\n\n\t\n\n\nAmidakuji is a function visualizer\n\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\n\t\n\n\n\t# A function visualizer is pre", "\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nmax width: 10\nmax height: 50\n\nMax width: 100\n\nMax height: 50\n\nMax width: 50\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\n\n\nAmidakuji\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nmax width: 50\nmax height: 50\n\nmax width: 50\n\nmax height: 50\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nladder = [1, 2, 3]\n\n\n\n\tam", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nOutput:\n\nladder = [\n    0, 1, 2, 3, 5, 6\n    0, 1\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\n\n\nThe function visualizer is preloaded\n", "\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample:\n\nladder = [1, 2, 3, 4]\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#if __name__", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\nUse Call-Based format\n\nInput:\n\t\nOutput:\n\t\n\n\n\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\namidakuji(ladder) # [0,1]\n\n\n\n\n\n\tAm", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji is a method visualizer\n\n\n\n\n\n\n\nAmidakuji is a method visualizer\n\n\n\n\n\n\n\n\n\n\nAmidakuji is a function visualizer\n\n\n\n\n\n\n\n```python\n\nlad", "\n\n\nTest-Based format\n\nInput:\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nAmidakuji is a function visualizer\n\namidakuji(ladder)\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nladder =", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\nAmidakuji is a function visualizer\n\n\n\n\n\n\n\n\nAmidakuji:\n\t\n\n\n\n\n\n\nAmidakuji:\n\t\n\n\n\n\t\nAmidak", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\nladder = [1, 2, 3]\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\n\t\t# a ladder\n\n\n\t\t# The", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nNo other tests will be made to be able to see a final position\n\nmax width: 20\nmax height: 50\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\n\n\t\nThe function visualizer takes three", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tladder = [\n\t\t100011\n\t\t101001\n\t\t100001\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\nThe function visualizer is created\n\n\n\n\n\n\nAmidakuji", "\n\n\n\n\n\nCall-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nA function visualizer is preloaded and illustrated with the function visualizer\n\nExample:\n\nladder = [2, 3]\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n", "\n\n\nExample:\n\nladder = [1, 2, 3]\n\nExample:\n\nladder = [1, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\npython\nladder = [2, 1]\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nThe function visualizer returns an array/list of integers\n\nmaximum width: 100\nmaximum height: 50\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\namidakuji()\n\n\n\n\nAmidakuji is", "\nThe function visualizer is used for visualizing the rungs of a specific direction\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\t\nOutput:\n\t\n\t\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nladder = [\n    0, 1, 0, 1, 1, 0, 1, 1\n]\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nAmidakuji\n\n\n\n\n\n\n\nAmidakuji\n\nAmidak"], "prompt": "\nQUESTION:\nAmidakuji is a method of lottery designed to create random pairings between two sets comprised of an equal number of elements.\nYour task is to write a function amidakuji that returns the final positions of each element. Note that the elements are an ascending sequence of consecutive integers starting with 0 (from left to right).\nInput\nYour function will receive an array/list of equal-length strings consisting of 0 and 1 characters; this represents the \"ladder\" structure. The 1s represent the rungs of the ladder and the 0s represent empty space.\nEach element begins at the top of its corresponding vertical rail, as illustrated in the diagram below.During the descent of the ladder, whenever a vertical rail intersects a horizontal rung, it swaps values with the adjacent connecting vertical rail.\nOutput\nYour function should return an array of integers, with each integer in its final position.\nTest Example\n\nThe diagram above is a visual representation of the test example below. The yellow highlighted path shows the path taken by the 2 value. Each time it encounters a crosspiece, it shifts position.\n\n```python\nladder = [\n        '001001',\n        '010000',\n        '100100',\n        '001000',\n        '100101',\n        '010010',\n        '101001',\n        '010100'\n]\n\namidakuji(ladder) # [4, 2, 0, 5, 3, 6, 1]\n```\n\nOther Technical Details\n\nA function visualizer is preloaded to help illustrate the structure of the ladder; you can call this function with test inputs\nNo two rungs will ever be adjacent (so there is no ambiguity about directional path)\nFull Test Suite: 10 fixed tests and 100 randomly-generated tests\nTest input dimension upper bounds:\n\nmaximum width: 20\nmaximum height: 50\n\n\nInputs will always be valid\n\nIf you enjoyed this kata, be sure to check out my other katas\ndef amidakuji(ar):\n\t\nUse Call-Based format\nANSWER:\n"}}