{"3257": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nslogan_maker(array)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n```python\n\n# The K", "\nUse Call-Based format\n\n\nuse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n**This Kata Challenge #18\n\n\n\nboss_maker(array)\n\n\n\n\n```python,", "\nUse Call-Based format\n\n\n\n\n\n\nThe function is called slogan_maker()\n\nUse Call-Based format\n\nNOTE:  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsloganMaker([\"super\", \"hot\", \"guacamole\"])\n\n\n\n\n\n\n```", "\n\n\nslogan_maker([])\n\nUse Call-Based format\n\n\n\n\n\n\n\n\npython\n\n\n\n**This Kata Challenge #18**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #19\n\nThe function generates an array of possible permutations\n\n\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nslogan_maker(array):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe function does something like:\n\nslogan_maker([])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nsloganMaker([\"super\", \"buzz\"])\n\nUse Call-Based format\n\nNote:  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #18**\n\n\n\n\n\n```if-", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #19**\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nsloganMaker(array)\n\n\n\n\n\n\n\n\n\n\n\n```python\nsloganMaker", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\npython,crystal\n\nUse Call-Based format\n\n```python\n\nGenerate all unique permutations of the input array\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n# 1.", "\nUse Call-Based format19\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nslogan_maker([\"super\", \"hot\", \"guacamole\"])\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKata:\n\n\n\n\n\n\n\n\n```python,crystal``", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbob\n```python\n$(crystal)\nsloganMaker(array)", "\nUse Call-Based format\n\n\n\n# Use Call-Based format\n\n\n\n\n\n\n# Use Call-Based format\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #19**\n\n\n\n\n**This Kata Challenge #18\n\nThe K", "\n\n\n\n\n\n\n\n\nThis function is called by the Kata Challenge #18\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#\n\n```python\n\nThe function will be called\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #19**\n\nThis Kata Kata Challenge #19\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#19\n\n\n\n\n\n\n#19\n\n\n**This Kata is", "\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\npython,crystal\n\nslogan_maker()\n\nUse Call-Based format\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python,crystal``\nThe function takes", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\n\nslogan_maker(array):\n\nUse Call-Based format\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nslogan_maker(array)\n\n\n\n\n**This K", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nKata:\n\nBill Challenge #19\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #19**\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The Kata Challenge #19**\n\n\n\n\n\n\n**This K", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nThe Kata Challenge #19\n\n**This Kata Challenge #19\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #19**\n\n\n\n\n**This Kata Challenge #", "\n\n\n\n\nslogan_maker(array):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #18**\n\n\n\n\n**This Kata Challenge #19**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsloganMaker(array)\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\n\n\n\nslogan_maker(array)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n**This Kata Challenge #17**\n\n\n\n\n\n\n\n\n\n\n\n\n\nbuzz\n\n```python\n\n\n\n\n\n\n\n\n```python\n\n#", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\npython,crystal\n\nUse Call-Based format\n\nNOTE:  \nThis Kata is intended for the testing.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nslogan_maker(array):\n\n\n```"], "prompt": "\nQUESTION:\n**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #19\n\nYou work for an ad agency and your boss, Bob, loves a catchy slogan. He's always jumbling together \"buzz\" words until he gets one he likes. You're looking to impress Boss Bob with a function that can do his job for him.\n\nCreate a function called sloganMaker() that accepts an array of string \"buzz\" words. The function returns an array of all possible UNIQUE string permutations of the buzz words (concatonated and separated by spaces).\n\nYour boss is not very bright, so anticipate him using the same \"buzz\" word more than once, by accident. The function should ignore these duplicate string inputs.\n\n```\nsloganMaker([\"super\", \"hot\", \"guacamole\"]);\n//[ 'super hot guacamole',\n//  'super guacamole hot',\n//  'hot super guacamole',\n//  'hot guacamole super',\n//  'guacamole super hot',\n//  'guacamole hot super' ]\n\nsloganMaker([\"cool\", \"pizza\", \"cool\"]); // => [ 'cool pizza', 'pizza cool' ]\n```\n\nNote:  \nThere should be NO duplicate strings in the output array\n\nThe input array MAY contain duplicate strings, which should STILL result in an output array with all unique strings\n\nAn empty string is valid input\n\n```if-not:python,crystal\nThe order of the permutations in the output array does not matter\n```\n```if:python,crystal\nThe order of the output array must match those rules:\n1. Generate the permutations in lexicographic order of the original array.\n2. keep only the first occurence of a permutation, when duplicates are found.\n```\ndef slogan_maker(array):\n\t\nUse Call-Based format\nANSWER:\n"}}