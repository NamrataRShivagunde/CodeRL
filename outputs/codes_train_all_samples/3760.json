{"3760": {"code": ["\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npython\n\nafter 10cc [5,15,1] jobs[0] yields, jobs[0] finishes\nafter 15cc [0] starts\n\n\n\n", "\n\n\nroundRobin\n\nThis implementation is used to build the round-robin format\n\nAccurate format:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n```python\n\nfor i in range(0, 10, 1):\n\tfor j in", "\n\n\n\n\n\n\n\n\n\n\n\n\n\nkata\n\n\n\n\npython\nroundRobin(jobs, slice, index)\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n```python\n\n#roundRobin(jobs, slice, index)\n```\n\n``", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nroundRobin(jobs, slice, index)\n```\n\n**Kata:\n\n \n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n**\n\n  jobs is a non-empty integer array. The amount of cc is given till the job is", "\n\nThe Kata format is used for kata.\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npython\n\n\n\n\n\n**Kata:\n\n\n\n```python\n\nfor i in range(0, 10, 1):\n", "\n\n\n\n\n\n\n\nroundRobin(jobs, slice, index)\n\n**Call-Based format**\n\nUse Call-Based format\n\n```python\n\n\n\n\n\n\n\n\n```python\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfor i in range(0", "\n\npython\nroundRobin(jobs, slice, index)\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe processor decides which jobs are in the queue.\n\n```python\nroundRobin(jobs, slice, index)\n\n\n\n\n\n```python", "\n\npython\nroundRobin([10,20,1], 0, 0)\nroundRobin([10,20,1], 0, 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nfor a kata in the processor\n\n\n\n\n```python\nfor a kata in the", "\n\npython\nroundRobin(1, 2, 3)\n\n```python\nroundRobin(1, 2, 3)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\nroundRobin(jobs, slice, index)\n```\n\n\n\n```python\n\nif", "\n\npython\nroundRobin([10,20,1], 5, 0)\n\nCONSUME:\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nroundRobin(jobs, slice, index)\n\n\n\n\npython\n\n\n\n```python\n#roundRobin([10,20,1", "\n\npython\nroundRobin([10,20,1], 5, 0)\n\nRound-Robin returns 0 or 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npython\n\n\n\n\n```python\nfor i in range(5,20,1):\n\n\n    1.", "\n\npython\nroundRobin([10,20,1], 0, 0)\n\nREQUESTION:\n\n\n**Calling-Based format**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**The following is a call-Based format**\n\n```python\n\n\n", "\n\n\nroundRobin()\n\nThis method is used to make it work with call-based format\n\nUSAGE:\n\n\nroundRobin()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npython\n\n\n\n0cc [0,15,1]\njobs[0] starts\n", "\n\npython\nroundRobin(jobs, slice, index)\n\nQUESTION:\n\nUse Call-Based format\n\nANSWER:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npython\nat 0cc [5,15,0] jobs[0] starts, jobs[1] starts\n\n\n```", "\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\npython\nroundRobin(jobs, slice, index)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nroundRobin(jobs, slice, index)\n\n```python\n\n\n\n\n```python\n\nif you want", "\n\n\npython\nroundRobin([10,20,1], 5, 0)\n\nRoundRobin returns\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n```\n\n\n\n```python\nfor i in range(1, 17, 1):\n\nif", "\n\n\n\n\n\n\n\n\n\npython\n\n\n\nRound-Robin:\n\nRound-Robin is how long the processor will use.\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n\n\n```python\nfor i in range(0, 16):\n\nif index is 1 and the", "\n\npython\nroundRobin(jobs, slice, index)\n\n**Call-Based format**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n \n\npython\n\n\n\n\n**\n  jobs is a non-empty array\njobs is a non-empty integer array\nslice is a short integer", "\n\n\nroundRobin()\n\nThe function calls it as a call-based format\nANSWER:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npython\n\n```python\n\n# Example of a call-based format\n\n# Time-based format\n\n# Time-based format\n\n", "\n\npython\n\nroundRobin(jobs, slice, index)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntime = 10\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n\n\"jobs\" an empty array. It represents the queue and clock-cycles remaining till the job is finished. This means the"], "prompt": "\nQUESTION:\nScheduling is how the processor decides which jobs (processes) get to use the processor and for how long. This can cause a lot of problems. Like a really long process taking the entire CPU and freezing all the other processes. One solution is Round-Robin, which today you will be implementing.\n\nRound-Robin works by queuing jobs in a First In First Out fashion, but the processes are only given a short slice of time. If a processes is not finished in that time slice, it yields the proccessor and goes to the back of the queue.\n\nFor this Kata you will be implementing the \n```python\n  def roundRobin(jobs, slice, index):\n```\n\nIt takes in:\n\n    1. \"jobs\" a non-empty positive integer array. It represents the queue and clock-cycles(cc) remaining till the job[i] is finished.\n\n    2. \"slice\" a positive integer. It is the amount of clock-cycles that each job is given till the job yields to the next job in the queue.\n\n    3. \"index\" a positive integer. Which is the index of the job we're interested in.\n\nroundRobin returns:\n\n    1. the number of cc till the job at index is finished.\n\nHere's an example:\n```\nroundRobin([10,20,1], 5, 0) \nat 0cc [10,20,1] jobs[0] starts\nafter 5cc [5,20,1] jobs[0] yields, jobs[1] starts\nafter 10cc [5,15,1] jobs[1] yields, jobs[2] starts\nafter 11cc [5,15,0] jobs[2] finishes, jobs[0] starts\nafter 16cc [0,15,0] jobs[0] finishes\n```\n\nso:\n```\nroundRobin([10,20,1], 5, 0) == 16\n```\n\n**You can assume that the processor can switch jobs between cc so it does not add to the total time.\ndef roundRobin(jobs, slice, index):\n\t\nUse Call-Based format\nANSWER:\n"}}