{"1612": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n, com)\n\n- the product partition\n\n\nfind_spec_prod_part(n, com)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\npython\n\nfind_spec", "\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n\nScore()\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```python\n\nfind_spec_prod_part()\n```\n\n\nfind_spec", "\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n\n```python\n\nfind_spec_prod_part(n, com)\n\n- product_partition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfind_spec_prod_part(", "\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n\nThe function should return two arguments:\n\n- the number of the product partition\n\n- the number of the product partition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#!/bin/", "\n\n\n\n\n\n\n\n\n\npython\n\nfind_spec_prod_part(n, com)\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfind_spec_prod_part(n, com)\n```\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n,", "\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n\nThe function should return a list with two elements:\n\n- a list of numbers ```n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfind_spec_prod_part()\n```\n\n``", "\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n, com)\n\n```python -m find_spec_prod_part(n, com)```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython -m find_spec_prod_part(com)\n -m find", "\n\n\n\n\n\n\n\n\n\n\nn\n\n1\n2\n3\n2\n2\n2\n3\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfind_spec_prod_part(n)\n```\n\n```python\n\nfind_spec_prod_", "\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n, com)\n\n```python\n\n\n\n\n\n\nsc\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n```python\n\nfind_spec_prod_part(n, com)\n\n```\n\n\n\nfind_spec", "\n\n\n\n\n\n\n\n\n\n\n\n\n\ncom ='max'\ncom ='min'\n\n\nWHERE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nfind_spec_prod_part(n, com)```\n\n\n\n\n\n\n\n\n\n\n\n```python\nfind_spec_prod_part", "\n\n\n\n\npython\n\n\nscore\n\n1\n\n\n\n\n\nfind_spec_prod_part(n, com)\n\n2\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n```python\n\nfind_spec_prod_part(n, com)\n\n\n\n\n\n\n\n\n\n```python", "\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n, com)\n---> [prod_partition, score]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncom ='max'\ncom ='min'\ncom ='min'\n\n\n\n\n\n```python\n\n", "\n\n\n\n\npython\n\nfind_spec_prod_part(n, com)\n\nWHERE:\n\n- n > 0\n- n > 0\n- n < 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(com)\n\n\n\n```python\n\nfind", "\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n\nThe function should return a list with 2 elements:\n\n- a list of two numbers:\n\n[59, 3, 2, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.2.1.3.", "\n\n\n\n\n\n\nfind_spec_prod_part()\n\nThe function should return a list of 2 elements:\n\n- 1\n- 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n```\n\nThe function should return", "\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part()\n\nExample:\n\n\n\n\nfind_spec_prod_part(n)\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfind_spec_prod_part()\n```\n\n\n\n", "\n\n\n\n\n\n\n\nfind_spec_prod_part()\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsc\n\nQUESTION:\n\nWe are given a number ```n``` where the product partition is found, and the score is given:\n\n\n\n\n\n\n\n\n\n\n\n# :- n =", "\n\n\n\n\n\n\n\n\n\n\n\npython\n\nfind_spec_prod_part(n)\n\nfind_spec_prod_part(com)\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n# Example:\n#\n#\n#     1.5\n#\n#     2", "\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n, com)\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n, com)\n\n```python\n\nfind_spec_prod_part()\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfind_spec_prod_part(n, com)\n\n\n\n\nfind_spec_prod_part(n, com)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfind_spec_prod_part(com)\n\n\n\n"], "prompt": "\nQUESTION:\nWe are given a certain number ```n``` and we do the product partitions of it.\n```[59, 3, 2, 2, 2]``` is a product partition of ```1416``` because:\n```\n59 * 3 * 2 * 2 * 2 = 1416\n```\nWe form a score, ```sc``` for each partition in the following way:\n- if ```d1, d2, ...., dk``` are the prime factors of ```n```, and ```f1, f2, ...., fk```, the corresponding frequencies for each factor, we calculate:\n\n\n\nSuposse that we have that ```n = 1416``` \nThe product partitions of this number with a corresponding special score are as follows:\n```\nProduct Partition           Score(sc)\n[59, 3, 2, 2, 2]             350    # equals to: (59^1 + 3^1 + 2^3) * 5\n[177, 2, 2, 2]               740    # equals to: (177^1 + 2^3) * 4\n[118, 3, 2, 2]               500\n[59, 6, 2, 2]                276\n[354, 2, 2]                 1074\n[59, 4, 3, 2]                272\n[236, 3, 2]                  723\n[177, 4, 2]                  549\n[118, 6, 2]                  378\n[59, 12, 2]                  219\n[708, 2]                    1420  <---- maximum value\n[118, 4, 3]                  375\n[59, 8, 3]                   210\n[472, 3]                     950\n[59, 6, 4]                   207\n[354, 4]                     716\n[236, 6]                     484\n[177, 8]                     370\n[118, 12]                    260\n[59, 24]                     166  <---- minimum value\n```\nSo we need a function that may give us the product partition with maximum or minimum score.\n\nThe function ```find_spec_prod_part()``` will receive two arguments:\n\n- an integer ```n, n > 0```\n- a command as a string, one of the following ones: ```'max' or 'min'```\n\nThe function should output a list with two elements: the found product partition (as a list sorted in descendin order) with its corresponding score.\n```\nfind_spec_prod_part(n, com) ---> [prod_partition, score]\n```\nLet'see some cases:\n```python\nfind_spec_prod_part(1416, 'max') == [[708, 2], 1420]\n\nfind_spec_prod_part(1416, 'min') == [[59, 24], 166]\n```\n\nThe function should reject prime numbers:\n```python\nfind_spec_prod_part(10007 , 'max') == \"It is a prime number\"\n```\nEnjoy it!\n\nHint: In this kata, optimization is one of the purposes or tags. The algorithm to produce the product partition is a key factor in terms of speed. Your code will be tested for an ```n``` value up to ```500000```.\ndef find_spec_prod_part(n, com):\n\t\nUse Call-Based format\nANSWER:\n"}}