{"269": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    return True\n\n\u00a0\n\nExample 5:\n\n   \n\nUse Method-Based format\n\nUse Python-based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nGiven an array nums of 0s and 1sGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nGiven an array nums of 0s and 1s and k, return true if all of them are at least k places away from each other.\n   \n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\nExample 1:\n\n\n\n\n\nGiven an array nums of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    return self.kLengthApart(nums, k)\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array nums and k,Given an array nums", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   \nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nExample 5:\n\nnums[i] = 0\n\nOutput: false\n\n\u00a0\n\n\n\n\nGiven an array nums of 0s and 1s", "\nUse Call-Based format\n\n\n\n\n\n\n\n    return self[i] <= k\n\n\u00a0\n\nUse Method-Based format\n\n\n\n\n    def kLength(self, nums, k):\n   \n\n\nUse Python-Based format\n\n\n\n\n\n\n\n\n\nGiven an array nums and k,\n\n\nGiven an array nums and k", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    nums[i] is 0\n    k[i] is 0\n\nReturns:\n    True\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\n\n\nGiven an array nums and k, return True.\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    kLengthApart(self, nums, k)\n\n\u00a0\nReturns:\n\nTrue\n\n\u00a0\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array nums and k, return True\n\n\u00a0\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nEvery number of nums is at least k places away from each other.\n\n\n   \n\nUse Python-based format\nUse Python-Call-Based format\n\n\nUse Python-Call-Based format\n\n\n\n\n\n\n\nGiven an array nums and k, return True\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\nReturns:\nTrue if all 1's are at least k places away from each other.\n\n\u00a0\n   \n\nUse Method-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven an array nums and k,\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    return kLengthApart(self, nums, k)\n\n\u00a0\n\nUse Method-Based format\n\n\n\n\n   \n\nUse Python-based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array nums of 0s and 1sGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    return kLengthApart(self, nums, k)\n\n\u00a0\n\nUse Call-Based format\n\u00a0\n\nConstraints:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums of 0s and 1s\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    return self.kLengthApart(nums, k)\n\nUse Call-Based format\n\u00a0\n\nConstraints:\n\n0 <= k <= 1\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and k,Given an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    return True\n\n\nUse Function-Based format\n\nUse Call-Based format\n\u00a0\nInputs:\n\n    nums:\n        k:\n        k:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and 1sGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    def kLengthApart(self, nums: List[int], k: int):\n\n   \n\nUse Python-based format\n\n\n\n\n\n\n\n\n\nUse Python-based format\n\nGiven an array nums and k, return True\n\n\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \nUse Call-Based format\n\n\n    return nums[i] <= nums[i]\n\nUse Call-Based format\n\u00a0\n\nConstraints:\n\n0 <= k <= 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums,Given an array nums", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n    return self.kLengthApart(nums, k)\n\n\u00a0\n\nUse Argument-Based format\n\n\nUse Python-based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums, return True\n\n\n\n\nGiven an array nums and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n    return nums[i] == 1\n\n\u00a0\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nGiven an array nums, and an integer k:\n\n\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n       \n\n\n\nGiven an array nums of 0s and 1s and k, return True if all 1's are at least k places away from each other.\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array nums of 0s and 1sGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nGiven an array nums, k must be a positive integer.\n\n    def kLengthApart(self, nums, k):\n        return true\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array nums and k,", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n\nUse Call-Based format\nGiven an array nums and a k, return True\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven an array nums and\n\nGiven an array nums and k, return"], "prompt": "\nQUESTION:\nGiven an array nums of 0s and 1s and an integer k, return True if all 1's are at least k places away from each other, otherwise return False.\n\u00a0\nExample 1:\n\nInput: nums = [1,0,0,0,1,0,0,1], k = 2\nOutput: true\nExplanation: Each of the 1s are at least 2 places away from each other.\n\nExample 2:\n\nInput: nums = [1,0,0,1,0,1], k = 2\nOutput: false\nExplanation: The second 1 and third 1 are only one apart from each other.\nExample 3:\nInput: nums = [1,1,1,1,1], k = 0\nOutput: true\n\nExample 4:\nInput: nums = [0,1,0,1], k = 1\nOutput: true\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n0 <= k <= nums.length\nnums[i]\u00a0is\u00a00\u00a0or\u00a01\nclass Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n\nUse Call-Based format\nANSWER:\n"}}