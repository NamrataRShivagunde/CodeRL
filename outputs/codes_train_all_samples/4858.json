{"4858": {"code": ["\n\nsumJohnAndAnn(6) -->  720\n\nsumAnn(6) -->  820\n\n\n\n\n\n\n\n\n\n\n\n\n- 1 for getting sum\n\n- 2 for getting sum\n\n\n\n\n\n\n\n\n\n\n\n\n\na(n)\n\n\n\nsumJohnAndAnn\n\n#\n\n\njohn", "\n# Example:\n#\n\n\n\n\n\na(n)\n\n# Example:\n# Example:\n# Example:\n# Examples:\n# Example:\n\njohn(2)\n# Example: \n\n#\n#\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na(0)\n\n\n\nsumJohnAndAnn", "\n\n\nsumJohnAndAnn(n) -->  1\nsumAnn(n) -->  1\n\n# Examples:\n\nsumJohnAndAnn(11) -->  4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\njohnAndAnn\n\n# Examples:\n\n\n\nsum_johnAndAnn", "\n# Example:\n#   sumJohnAndAnn(n)\n#\n\n\n\n\n\n\n\n\n\na(n)\n\n# Examples:\n\n# Examples:\n#  \n\n-\n\n\n\n\n\n\nsumJohnAndAnn(n)\n\n# Examples:\n\n\n\n\n\n\n\n\n# Example:\n#   sumJohn", "\t\n# Example:\n#   a(n)\n#   sum(n)\n#\n\n\n\n\n\n\n\n\n\n\n\n- 1) two functions `ann` and `sumJohnAndAnn` have two parameters.\n\n\n\n\n\n\n\n\n\n\n\n\na(n)\n\n\n\n\n\n\na(n)\n\n- 1", "\n# Examples:\n#\tjohn(7)\n#\tann(7)\n#\n\n\n\n\n\n\n\n\n\n\na(n):\n\t\n# Examples:\n\n- 1 for getting sum\n\n- 2 for getting sum\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Check for the first two\n#\n", "\ndef sumJohnAndAnn(n):\n\n# Examples:\n\n\n\n\n\n\n# Examples:\njohn(6): \n\nann(5) -->  1220\n\n# Examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na(n)\n\n# Examples:\na(3)\n\n\n\n#", "\n## Example:\n# Example:\n# Examples:\n# Examples:\n# Examples:\n# Examples:\n# Examples:\n# Examples:\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na(n)\n\n# Examples:\n# Examples:\n#\n\n\n\n# Examples:\n\n#", "\n# Examples:\n# \tjohn(11)\n# \tann(7)\n#\n\n\n\n\n\n\n\n\n\n# Examples:\n\n\n\n\n\n\na(n)\n\n\n \n \n\n\n\nsum_johnAndAnn(10) -->  1\n\n\n\n\n\n\n\n\nsumJohnAndAnn(n) -->", "\n\nsumJohnAndAnn(11, 6)\n\n# Examples:\n\nsum_ann(5)\n\n# Examples:\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\nsumJohnAndAnn(11) -->  700\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# The first parameter is the number of days.", "\n\n\nSumJohnAndAnn(n): \n\t\n# Examples:\n\nsumJohnAndAnn(n) -->  5\n\n# Examples:\n\nsum_ann(5) -->  7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ta(n)\n\t\n# Examples:", "\n\n\nsum_ann(0) -->  1\nsum_john(0) -->  2\n\n# Examples:\n\njohn(6) -->  7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsumJohnAndAnn(11)\n\n\n\n\n\n\n\n\n\n\n# Now we go through the first day `", "\n# Examples:\n#  a(n)\n#  j(n)\n#  ann(n)\n\n\n\n\n\n\n\n# Examples:\n#\n\n\n\n\n\n\n\n\n \n\n\nsumJohnAndAnn(3) -->  5\n\nsumAnn(3) -->  7\n\n\n\n\n\n\n\n\n\n\njohn(", "\nSumJohnAndAnn(3) -->  6\n\nSumAnn(3) -->  4\n\n\n\n\n\n\n\n\n\n\n\n\n- 1 for getting sum\n\n- 2 for getting sum\n\n- 1 for getting sum\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n# Examples:\n\t\njohn", "\n\n\na(n)\n\n# Examples:\n\njohn(11)\n\nsum_john(11)\n\n# Examples:\n\nann(20)\n\n# Examples:\n\nsum_ann(20)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n# 1", "\n\n\na(n):\n\t\n# Examples:\n\njohn(11)\n\nann(7)\n\njohn(7)\n\nsum_john(7)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples:\n\n\n\n\n\njohn(11) -->  [0", "\n  sumJohnAndAnn(1)\n\n  sumAnn(1)\n\n  sum_john(3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\nsumJohnAndAnn(1)\n\n\n\n\n\n\n\n\n\n\njohn(1)\n\nann(1)\n\n\n\n\n\n\njohn", "\n\n\n# Examples:\nann(5)\n\n# Examples:\nsum_ann(5)\n\n# Examples:\nsum_john(5)\n\n# Examples:\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na(n)\n\n\n\n\n\n\n# Examples:\n```\n\n", "\n\n# Examples:\n\njohn(11)\n\nsumJohn(20)\n\n\n\n\n# Examples:\n\nsumAnn(20)\n\n# Examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njohn(1)\n\njohn(2)\n\n\n\n\n\nsumJohn", "\n\n\n\n\nSumJohnAndAnn(n)\n\n# Examples:\n\nsumJohnAndAnn(n)\n\n# Examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Example:\nsumJohnAndAnn(20)\n\n\n\n\n\n\n \t# [1]\n"], "prompt": "\nQUESTION:\nJohn and his wife Ann have decided to go to Codewars. \n\nOn first day Ann will do one kata and John - he wants to know how it is working - 0 kata.\n\nLet us call `a(n)` - and `j(n)` - the number of katas done by Ann - and John - at day `n`. We have `a(0) = 1` and in the same manner `j(0) = 0`.\n\nThey have chosen the following rules:\n\n- On day `n` the number of katas done by Ann should be `n` minus the number of katas done by John at day `t`, `t` being equal to the number of katas done\nby Ann herself at day `n - 1`.\n\n- On day `n` the number of katas done by John should be `n` minus the number of katas done by Ann at day `t`, `t` being equal to the number of katas done\nby John himself at day `n - 1`.\n\nWhoops! I think they need to lay out a little clearer exactly what there're getting themselves into!\n\n# Could you write:\n- 1) two functions `ann` and `john (parameter n)` giving the list of the numbers of katas Ann and John should take on the first n days (see first examples below)? \n- 2) The total number of katas taken by ann `function sum_ann(n)` and john `function sum_john(n)` - on the first n days? \n \n\nThe functions in 1) are not tested in Fortran and not tested in Shell.\n\n# Examples:\n```\njohn(11) -->  [0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6]\nann(6) -->  [1, 1, 2, 2, 3, 3]\n\nsum_john(75) -->  1720\nsum_ann(150) -->  6930\n```\n\n# Shell Note:\nsumJohnAndAnn has two parameters:\n\nfirst one : n (number of days, $1)\n\nsecond one : which($2) ->\n\n- 1 for getting John's sum\n\n- 2 for getting Ann's sum.\n\nSee \"Sample Tests\".\n\n# Note: \n\nKeep an eye on performance.\ndef j(n):\n\t\nUse Call-Based format\nANSWER:\n"}}