{"4524": {"code": ["\n\n\n\n\n\n\n```python\n>>> permutation_average(2)\n>>> 2 / 2 = 3889\n>>> 2 / 2 = 3889\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\nreturn n\n\n```\n\n\n```python\n\\*", "```\n\nUse Call-Based format\n\n\n\n\n\n\n\n```\n\n\n\n```python\n\n```python\n\n\n\n\t\n\n\n\n\n>>> 1256 + 1562 + 1562 + 1562 = 4\n>>> 4 / 2 = 4\n\n\n\n\n\n\n\n\n\n\nreturn 1\n\n\n```python\n", "\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n```python\n\\* use Banker Rounding\n```\n\n\n\t\n\n\n```python\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\nreturn 4 *\n\n```\n\n\n```python\n#", "```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\n\nreturn 3888\n\n```\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```python\n```\n\n\n```python\n\n\nreturn n\n\n\n\n```python\n#", "\n```python\n\n\n\n\n\n\n\n```python\n\n\n\n\n\t\nUse Call-Based format\n```python\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n>>> 0.5 / 2 = 0.5\n>>> 0.5 / 2 = 0\n\n\n\n\n\n\n\n\n\n\nreturn n\n\n\n```", "\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n```python\n\nreturn 3888 *\n\n```\n\n\n\t\n\n\n\n\n>>> 1256 / 2 = 3889\n>>> 1256 / 2 = 3889 *\n>>>\n\n\n\n>>>\n\n\n\n\n\n\n\n```python\n\\* use Python version 3", "\n\n\n\n\n\n\n\n\n```python\n\nreturn 3889\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n>>> 1889 + 1265 = 525 / 2 = 525 * \n\n```\n\n\n\n>>>\n```\n\n\n\n\n\n\t\n\n```python\n\\* Python version", "\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n```python\n\n```python\n\n\n\n>>> n / 3 = 1\n>>> 1 / 3 = 1\nreturn 1\n\n```\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\nreturn 3889\n\n```\n\n\n", "```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\nreturn n\n\n```\n\n\n\n\n```python\n\n\n\t\nUse Call-Based format\n\n\n\n\n>>> 1256 / 2 = 3889 *\n>>> / 3 = 3889\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\\*", "```\n\n\n\n\n\n\n\n\nreturn 3889 *\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n>>> 6.5 / 2 = 6.5 / 2 = 6.5 / 2\n>>> 6.5 / 3 = 6\n\n\n\n\n\n\n\n\n\n\n\n```python\n\\* python", "\n\n\n\n\n\n\n\n\n```python\n\n\n\n```\n\n\n\n\n\n\n```python\n\n\n\n\n\t\n\n\n```python\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n```python\n\n```\n\n\n\n\n\n```python\n\n", "\n\n```python\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n```python\n\n\n\n\n\t\n\nA number is made up of digits.\n\n```python\n\n\n\n\n\n\n\n\n```python\n\n\n\n>>> 3889 + 42 = 3888\nreturn 3889\n\n\n\n\n\n``", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nreturn 3888 *\n```\n\n```python\n\n\n\t\nUse Call-Based format\n\n\n\n>>> 1 + 3561 + 673 = 629 * \n\n>>>\n\n```\n\n\n\n\n\n\n\n\n\n\t\n\n\n```python\n\n", "```\n\n\n\n\n\n\n\n\n```python\n\\* use Python version 3 or above\n```python\n>>> 3889 / 3 = 1889 *\n>>> 1889 / 3 = 1889 *\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn 3889\n\n\n```python", "\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n```python\n\nreturn 3889 *\n\n```\n\n\n\t\n\n\n```\n\n\n```\n\n\n\n\n\n\n>>> 6285 + 269 = 6285 / 3  \n\n\n\n\n\n\n\nA number is made up of digits", "\n```python\n\nUse Call-Based format\n\n\n\n\n\n\n\n```python\n\n\n```python\n\n\n\n\n\nreturn 3889 *\n\n```python\n\n\n\t\n\n\n\n>>> 1256 / 2 = 3889 *\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n# Do not modify the", "\n\n```python\n\n\n\n\n\n\n\n\nreturn 3889 *\n\n```python\n\n\n\n\n\n\n\treturn n\n\n```\n\n\n\n\n\n\n\n~~~if:python\n\\* python version 2 and above use Banker Rounding  \n\n\n```\n\n\n~~~else\n\n\n\n```python\n#", "\n```python\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n```python\n\n\n\nreturn 3889 * \n\n\n\t\nUse Call-Based format\n\n\n```python\n\n\n\n```python\n\n>>>\n\n\n\n\n\n\n\n\n\nreturn 1\n\n```python\n\nA number", "```\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```python\n\n```\n\n\n\t\n\n\n```\n\nA number is made up of digits.  \n\n\n\n\n\n\n```\n\n\n\n\n\n```python\n\nreturn 3889\n\n```\n\n\n\t\n\n```\n", "\n```python\n\n\n\n\n\n\n\n```python\n\nreturn 3889 *\n\n```python\n\n\n\n\n\n```python\n\n\n\n\t\n\n\n\n\n\n\n\n>>> 3887 + 274 = 773 / 2 = 773 * \n\n\n```\n\n\n\n\n\t\n\n```python\n\\* use"], "prompt": "\nQUESTION:\nA number is simply made up of digits.  \nThe number 1256 is made up of the digits 1, 2, 5, and 6.  \nFor 1256 there are 24 distinct permutations of the digits:  \n1256, 1265, 1625, 1652, 1562, 1526, 2156, 2165, 2615, 2651, 2561, 2516,   \n5126, 5162, 5216, 5261, 5621, 5612, 6125, 6152, 6251, 6215, 6521, 6512.\n  \nYour goal is to write a program that takes a number, n, and returns the average value of all distinct permutations of the digits in n.  Your answer should be rounded to the nearest integer. For the example above the return value would be 3889. * \n  \n  n will never be negative\n  \nA few examples:\n```python\npermutation_average(2)\nreturn 2\n\npermutation_average(25)\n>>> 25 + 52 = 77\n>>> 77 / 2 = 38.5\nreturn 39 *\n\npermutation_average(20)\n>>> 20 + 02 = 22\n>>> 22 / 2 = 11\nreturn 11\n\npermutation_average(737)\n>>> 737 + 377 + 773 = 1887\n>>> 1887 / 3 = 629\nreturn 629\n\n```\n\nNote: Your program should be able to handle numbers up to 6 digits long\n~~~if:python\n\\* Python version 3 and above uses Banker Rounding so the expected values for those tests would be 3888 and 38 respectively\n~~~\n~~~if-not:python\n\\* ignore these marks, they're for Python only\n~~~\ndef permutation_average(n):\n\t\nUse Call-Based format\nANSWER:\n"}}