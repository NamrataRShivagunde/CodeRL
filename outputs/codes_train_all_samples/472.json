{"472": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n    @canReach(self, arr, start):\n\n\n\n\n\n   \n\n\n\nGiven an array of non-negative integers arr, start is initially positioned at start\n\nConstraints:\n\n   :\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    self.canReach(arr, start):\n    -> bool:\n\nUse Call-Based format\n\n\n\n   \n    canReach(self, arr, start):\n        return True\n\n\n\n   :\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\nExample 4:\n   \nGiven an array", "\nUse Call-Based format\n\n\n    # TODO:\n    use Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n    canReach(self, arr, start: int):\n        \n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n 0 -> index 2\n\n\nGiven an array of", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n   \n        return self.canReach(arr[start], start)\n\n\n\n\n   :\n       ...\n\n\n -> -> index 6 -> index 4 -> index 1 -> index 3\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\nUse Call-Based format\n\n\n    self\n    \nUse Call-Based format\n\n\n\n\n\n   \n    pass\n\n\nGiven an array of non-negative integers arr, you are initially positioned at start\n\n   \n        pass\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\n   \n        return self.canReach(arr, start)\n\n\n -> index 6 -> index 4 -> index 1 -> index 3\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-", "\nUse Call-Based format\nUse Call-Based format\n\n    return self.canReach(arr, start)\n\nUse Call-Based format\n\n\n\n\n   \n\n\nGiven an array of non-negative integers arr, you are initially positioned at start\n\n   :\n    \n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n    pass\n\n\nGiven an array of non-negative integers arr, you are initially positioned at start\u00a0index of the array.\n\n   \n        \n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers arr,\n\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n    pass\n\n\nGiven an array of non-negative integers arr, you are initially positioned at start = 0\n\n   :\n        pass\n\n\u00a0\n\n\n\n\n\n\n\nGiven an array of non-negative integers arr,\n\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nstart = 0\n\u00a0\n\n\u00a0\n\n   \n    pass\n\n\u00a0\n\n\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n0 <= start < arr.length\n\n   :\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\nGiven an array of non", "\nUse Call-Based format\n\n\n    canReach(self, arr, start):\n    return self.canReach(arr, start)\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n   :\n\n\n -> index 5 -> index 6 -> index 1 -> index 3\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\n\n\n    self.canReach(arr, start)\n    -> bool:\n\nUse Call-Based format\n\n\n   \n\n\nGiven an array of non-negative integers arr, you are initially positioned at start\u00a0index of the array\n\n   :\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n    return self.canReach(arr, start)\n\nUse Call-Based format\n\n\n\n   \n        return self.canReach(arr, start)\n\n\n\n   :\n    pass\n\n -> index 3\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of non-negative integers arr,\n\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    return self.canReach(arr, start)\n\n\nGiven an array of non-negative integers arr, you are initially positioned at start\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n    canReach(self, arr, start) -> bool:\n\n\n\n\u00a0\nExplanation:\n\u00a0\n\n\n   \n\n\nGiven an array of non-negative integers arr, you are initially positioned at start\n\nConstraints:\n\n\n:                \u00a0\n\n\n\u00a0\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    def canReach(self, arr: List[int], start: int):\n        return False\n\n\n\n\n   \n        return False\n\n\nGiven an array of non-negative integers arr, you are initially positioned at start\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    return self.canReach(arr, start)\n\n\n\n   \n\nUse Call-Based format\n -> index 0 -> index 1 -> index 3\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\n\n\n    @canReach(arr, start) -> bool:\n\n\n\n\n   \n    return self.canReach(arr, start)\n\n\n\n\n   :\n        return True\n\n\n -> index 4 -> index 1 -> index 3\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def canReach(self, arr, start: int):\n        return self.canReach(arr, start)\n\n\n\n\n   \n\n\n ->\n\n\n\n\n\n\nGiven an array of non-negative integers arr,\n\n\n\n\nGiven an array", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    return self.canReach(arr, start)\n\n\n\n   \n    self.canReach(arr, start)\n\n\n -> index 1 -> index 3 \n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of non-negative integers"], "prompt": "\nQUESTION:\nGiven an array of non-negative integers arr, you are initially positioned at start\u00a0index of the array. When you are at index i, you can jump\u00a0to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.\nNotice that you can not jump outside of the array at any time.\n\u00a0\nExample 1:\nInput: arr = [4,2,3,0,3,1,2], start = 5\nOutput: true\nExplanation: \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -> index 4 -> index 1 -> index 3 \nindex 5 -> index 6 -> index 4 -> index 1 -> index 3 \n\nExample 2:\nInput: arr = [4,2,3,0,3,1,2], start = 0\nOutput: true \nExplanation: \nOne possible way to reach at index 3 with value 0 is: \nindex 0 -> index 4 -> index 1 -> index 3\n\nExample 3:\nInput: arr = [3,0,2,1,2], start = 2\nOutput: false\nExplanation: There is no way to reach at index 1 with value 0.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 5 * 10^4\n0 <= arr[i] <\u00a0arr.length\n0 <= start < arr.length\nclass Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}