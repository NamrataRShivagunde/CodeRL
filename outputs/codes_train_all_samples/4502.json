{"4502": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nWell met with Fibonacci\n\nWell met with C\n\n\n\n\n\n\n\n\n\n\n[0, 1, 1, 2, 2, 3]\n\n```\n\n\n\n\n\n\n\n\n```\n[0, 1, 1", "\n\n\n\n\nCall-Based format\n\n\n\n\n\n\n\nWell met with Fibonacci\n\nWell met with Fibonacci\n\nWell met with Fibonacci\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n[1", "\n\t\n\n\n\n\n\n\nWell met with Fibonacci\n\nWell met with Fibonacci\n\nWell met with Fibonacci\n\nWell met with Fibonacci\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1, 1, 1, 1", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n### tribonacci\n\nWell met with Fibonacci\n\nAKA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n[0, 0, 0, 0, 1]\n```\n\n\n\n\n\n\n\n\n\n\n\n[1,", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nFibonacci sequence\n\n```\n[1, 1, 1, 2, 1,...\n```\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = 3\n\n#\n\n\n[0, 1, 1", "\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nFibonacci:\n\nWell met with Fibonacci\n\n\n\n\n\n\n\n\n\n\n[1, 1, 1, 2, 3, 3,...]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n[", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[0, 0, 0, 0, 0, 0", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWell met with Fibonacci\n\nUse Call-Based format\n\nQUESTION:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n[1, 1, 1,\n\n[", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUsage:\n\n```\n[0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 2,...]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n##", "\n\n\n\n*The Fibonacci function is not using Call-Based format*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1, 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1, 1", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nWell met with Fibonacci\n\nWell met with C\n\nWell met with C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n[1, 1, 1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[0, 1, 1", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nWell met with Fibonacci\n\n\n\n```\n[1, 1, 2, 3, 4, 5, 6,...]```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n[1, 1", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWell met with Fibonacci\n\nWell met with Fibonacci\n\nWell met with Fibonacci\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWell met with C\n\n\n\n\n\n\n[0, 0,", "\n\n\n\n\nUse Call-Based format\n\n\n\nWell met with Fibonacci\nWell met with Tribonacci\n\nWell met with Fibonacci\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n[1, 1, 1, 1", "\n\n\n\n\n\n\n[1, 0, 1, 2, 3, 2, 2, 3, 3, 1, 2, 2, 3, 3, 3, 3, 3, 4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWell met with Fibonacci\n\n\n\n\n\n[1, 0, 1", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nn = 3\n\nUse Call-Based format\n\nWell met with Fibonacci\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1, 1, 1, 1,", "\n\n\n\n*Call-Based format*\n\nUse Call-Based format*\n\nUse Call-Based format\nANSWER:\n\nUse Call-Based format\n\nANSWER:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n[1, 1,", "\n\nUse Call-Based format\n\n\n\n\n\n\nWell met with Fibonacci\nWell met with Fibonacci\n\nWell met with Fibonacci\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1, 0, 0, 0,", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nThe Bauma Fibonacci function\n\n\n\n\n```\n[0, 1, 1, 1, 2, 3]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n[1, 1,", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n[0, 1, 2, 3,...]\n\n\n\n\n\n\n\n\n\n\nFibonacci\n\n\n\n\n\n\n```\n\n[0, 1,"], "prompt": "\nQUESTION:\nWell met with Fibonacci bigger brother, AKA Tribonacci.\n\nAs the name may already reveal, it works basically like a Fibonacci, but summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won't get to hear non-native Italian speakers trying to pronounce it :(\n\nSo, if we are to start our Tribonacci sequence with `[1, 1, 1]` as a starting input (AKA *signature*), we have this sequence:\n\n```\n[1, 1 ,1, 3, 5, 9, 17, 31, ...]\n```\n\nBut what if we started with `[0, 0, 1]` as a signature? As starting with `[0, 1]` instead of `[1, 1]` basically *shifts* the common Fibonacci sequence by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:\n\n```\n[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]\n```\n\nWell, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a **signature** array/list, returns **the first n elements - signature included** of the so seeded sequence.\n\nSignature will always contain 3 numbers; n will always be a non-negative number; if `n == 0`, then return an empty array (except in C return NULL) and be ready for anything else which is not clearly specified ;)\n\nIf you enjoyed this kata more advanced and generalized version of it can be found in the Xbonacci kata\n\n*[Personal thanks to Professor Jim Fowler on Coursera for his awesome classes that I really recommend to any math enthusiast and for showing me this mathematical curiosity too with his usual contagious passion :)]*\ndef tribonacci(signature,n):\n\t\nUse Call-Based format\nANSWER:\n"}}