{"478": {"code": ["\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n        return nums[0]\n\n\n\n\n\n\nThe array of integers appear only once.\n\n1\n\nThe algorithm is call-based.\n\nUse Call-Based format\n\n\n\n2\n\nExample 3:\n\n\nGiven a", "\nUse Call-Based format\n\n       \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n        pass\n\n\n\n\n    def multipleNumber(self, nums: List[int]) -> int:\n        return 1\n\n\nUse Call-Based format\n\n\n\n\n2\n\n\n\nGiven a non-", "\nUse Call-Based format\n\n\n\n    def singleNumber(self, nums: List[int]):\n\nUse Call-Based format\n\n\n\n   \n\n2:\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\nExample 3:\n\n\nUse Call-Based format\n\nGiven an array of integers,\n\nExample 2:\nGiven", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n        \n\n\n\n\n    def call(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n2\n\nExample 3:\n\nGiven", "\nUse Call-Based format\n\n    pass\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\nExample 3:\n\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\n1:\n\n1:\n2\n3:\n\n2\n2.\n\nNote:\n\n\n2.\n2\n\n\n\n1:\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\n    def singleNumber(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n2:\n\n\n   \n        \n\n\n\n\nUse Call-Based format\n\n\n\n\n\n2\nExample 3:\n\n\nGiven a", "\nUse Call-Based format\n\n    def call(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n:\n\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\nNote:\n\nUse Call-Based format\nUse Call-Based format\n\n2\n\nExample 3:\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n:\n\n\n   \n        return 1\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n2:\n\n\nGiven a non-empty\u00a0array", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n:\n\n\n   \n        return 1\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nGiven an empty\u00a0array of integers, all elements appear one.\n\n2\nGiven", "\nUse Call-Based format\n\n       \nUse Call-Based format\n\n\n\n\n\n   \n\n2:\n\n\n   \n       ...\n\n\n\n    def call(self, nums: List[int]):\n       \n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nGiven an array of integers,\n\nGiven an array of integers, every", "\nUse Call-Based format\n\n    def singleNumber(self, nums: List[int]) -> int:\n       \nUse Call-Based format\n\n\n\n\n   \n\n 2:\n\n\n\n\n        \nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n2:\n\n\n\nGiven a non-", "\nUse Call-Based format\n\n    \n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n        return 1\n\n\n\n\n    def oneNumber(self, nums: List[int]):\n        return nums[0]\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n2\n\nExample 3:\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n   \n        \"\"\"\n\n\n\n\n    def call(self, nums: List[int]):\n        return nums[0]\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n2\n\n\nGiven an empty\u00a0array", "\nUse Call-Based format\nUse Call-Based format\n\n    def singleNumber(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n   \n\n:\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n2\nExample 3:\n\n\nGiven a non-", "\nUse Call-Based format\n\n       \nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n2:\n\n\n   \n       \n\nGiven an array of integers, every element appears three times. Find that one.\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n2\nExample 3:\n\n\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n    \n\n\n\n\n   \n\n\n\n   \n        return nums[0]\n\n\n\nExample 3:\n\n\n\n    def doubleNumber(self, nums: List[int]):\n        return nums[0]\n\nUse Call-Based format\n\n\n\n\n\n2:\n\n\nGiven a non", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n    def doubleNumber(self, nums: List[int]) -> int:\n        return 0\n\nUse Call-Based format\n\n\n:\n\n\n   \n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n2\n\n\n\nGiven a non-empty", "\nUse Call-Based format\n\n    \nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def\n\n2:\n\n\n   \n        return 1\n\n\n\n\n    def multiNumber(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n2\n\nExample 3:\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   \n        return self.singleNumber(nums)\n\n\n\n\n\n\nThe algorithm should be used with a call-based format\n\n\n\n\nUse Call-Based format\n\n\n2\n\nExample 3:\n\n\n\nGiven a non-", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n2:\n\n\n\nExample 3:\n\n\n\nExample\n        return nums[0]\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven a non-empty\u00a0array of integers\n2:\n\nGiven"], "prompt": "\nQUESTION:\nGiven a non-empty\u00a0array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\n\nInput: [2,2,3,2]\nOutput: 3\n\n\nExample 2:\n\n\nInput: [0,1,0,1,0,1,99]\nOutput: 99\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}