{"2420": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nExample 3:\n\n    s = \"anagram\", t = \"a\"\n        \n\n\n\nUse Call-Based format\n\n\n   \n\n\n\nGiven two strings s and t\n   \nGiven two strings", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n    t = \"foobar\"\n\n\n\n\n   \nGiven two strings s and t:\n\n\n\n\n\nGiven two strings s and t", "\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nGiven two strings s and t, write a function to determine if t is an anagram of s.\n\n\n\n\n\n\n\nGiven two strings s and t", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n    s = \"anagram\", t = \"car\"\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n   \n\nGiven two strings s and t, write a function to determine\n\n\n\nGiven two strings", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nGiven two strings s and t, write a function to determine if t is an anagram of s.\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\nGiven two strings s and t:\n\n\nGiven two strings", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven two strings s and t, write a function to determine if t is an anagram of s.\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n   \n\n\nGiven two strings s and t, write a function\n   \nGiven two", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n    \nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n   \nGiven two strings s and t, write a function to determine if t is anagram\n\n\n   \nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\nGiven two strings s and t\u00a0:\n\n\n   \nGiven two strings", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven two strings s and t, write a function to determine if t is an anagram of s.\nUse Call-Based format\n   \n\n\nGiven two strings s and t\n\n\nGiven two strings", "Use Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n    isAnagram = Solution.isAnagram\n\nUse Function-Based format\n\n\n\n\nGiven two strings s and t", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven two strings s and t, write a function to determine if t is anagram of s.\n\n\n\n\n\n   \nGiven two strings s and t, write a function to determine if t is anagram\n\n\n\nGiven two", "Use Call-Based formatUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    isAnagram(self, s, t) -> bool:\n\n\n\n\n   \n\n\n\nGiven two strings s and t:\n\n\n\nGiven two strings", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nGiven two strings s and t, write a function to determine if t is an anagram of s.\n\n\n\n\n\n\n\n   \n\n\n\n\n   \nGiven two strings s and t, write", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nGiven two strings s and t, write a function to determine if t is an anagram of s.\n\n\n   \n\n\nGiven two strings s and t\n   \nGiven two", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\nGiven two strings s and t, write a function\n\n\n\nGiven two strings", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    \n\n\nUse Function-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def isAnagram(self, s, t):\n        return s == t\n\n\n\n   \n\n\n\nGiven two strings s and t:\n\n\nGiven two strings", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nGiven two strings s and t, write a function to determine if t is an anagram of s.\n   \n\n\n\n\nGiven two strings s and t", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n       \n\n\nGiven two strings s and t, write a function to determine if t is\n   \nGiven", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    isAnagram(self, s, t) -> bool:\n\nUse Call-Based format\n\n   \n\n\nGiven two strings s and t, write a function\n   \nGiven two", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n    isAnagram(self, s, t) -> bool:\n\n\n\n\n   \n\n\n\nGiven two strings s and t, write a function\n\n\nGiven two"], "prompt": "\nQUESTION:\nGiven two strings s and t\u00a0, write a function to determine if t is an anagram of s.\n\nExample 1:\n\n\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\n\n\nExample 2:\n\n\nInput: s = \"rat\", t = \"car\"\nOutput: false\n\n\nNote:\nYou may assume the string contains only lowercase alphabets.\n\nFollow up:\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\nclass Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}