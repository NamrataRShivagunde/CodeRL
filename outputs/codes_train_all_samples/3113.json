{"3113": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n [Integer]\n\n\n \n  0. [0]\n  1. [1]\n  2. [0]\n  3. [0]\n \n\n\n, 1, 2, 2, 2, 1, 1\n\n\n\n\n\n\n\n\tif m > 0 and n", "\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse List-Based format\n\n# Use Call-Based format\n\n[Integer]\n\n\n\n\n\n\n\n\n\n\n\n, 0, 0, 0, 0, 0, 0, 0\n\n\n\n# Example:\n\n\n\n\n\n\n\n# Example:\n\n\n# Examples\n", "\nuse Call-Based format\n\n\n\n# Example\n1. [Integer]\n\n\n\n\n\n\n\n\nif m > n:\n \n \n\n\n  # should be []\n \n  # n: Number of children\n\n\n, 0, 0, 0, 0, 0, 0\n\n\n\n\n\n\n\n\nm = 0\nn = 0", "\n# Example\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n \n  [Integer]\n\t\nUse Call-Based format\n\n\n\n\n\n  [Integer]\n\n\n, 1, 2, 2, 2, 1, 2, 2, 1, 1\n\n\n\n\n\n\n\n\n\t\tm = 10\n\t\t", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n# Use Call-Based format\n# [int]\ndistribute(m, n):\n\t\nUse Call-Based format\n\n# Note:\n\n\n\n\n\n\n\n # should be []\n\n,\n\n\n\n\n\n\tm = 10\n\tn = 10\n\t\n# Example\n\n\n", "\n\n# Example\n\n\n\n\n\n\n\n\n\nprint \"Distributions\n\n\n\n\n\n# Examples\n1. [Integer]\nprint \"distribute(m, n)\"\nprint \"distribute(m, n)\"\n\n\n\n\n\n\n,,\n\nThe number of children can be chosen.\n\n\n\n\n\n  m = m - 1\n ", "\n\n\n\n\n\n\n\n\nm\nn\n\n\n\n\n [Integer]\ndistribute(m, n)\n\n# Use Call-Based format\nif the number of children is less than m then n then the function returns a container.\n\n\n\n \n\n\n,\n\n\n\n\n\n\n# Examples\n1. [Integer]\n\n  1. [", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n2. [Integer]\ndistribute(m, n):\n\t\nUse Call-Based format\n3. [Integer]\n\n\n\n\n\n\n\n\n, 1, 1, 1, 1, 1, 1, 1\n\n\n\n\n\n\n\n\tfor m in [5, 10, 10", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n# Use Call-Based format\nm = 0\nn = 0\n\n# Examples\n1. [Integer]\n\n\n\n\n \n\n\n\n\n\n\n, 0, 0, 0, 0, 0, 0, 0, 0, 0\n\n\n\n\n\n\n\n\tif (n < 0):", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n# Example:\n\n\n\n2. [Integer]\n\n\n\t\n\n\n\n\n, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n\n# Example:\n\n\n\n\n\n\n\nm = 0 # The number of candies", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n  1. [Integer]\ndistribute(m, n) # should be [Integer]\n\n# Example\n2. [Integer]\n \n\n\n\n\n\n\n,\n\n\n\n\n\n\n  1. [Integer]\ndistribute(0, 0", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n, 1, 1, 1, 1, 1, 1, 1\n\n\n\n\n\n\n\t\n# Example\n\n\tI have a list", "\nuse Call-Based format\n\n\n\n\n\n\n\n\n\n\nm = m / (n + 1)\nn = n / (n + 1)\n\n# Example:\n\n#\n\n\n\t\n\n\n\n\n\n, 0, 0, 0, 0, 0, 0, 0, 0\n\n\n\n\n\n\n\n    m = m + 0\n", "\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n# Example:\n\n\n\ndis\n\n\t\n\n\n\n1. [Integer]\n\n# Examples\n1. [Integer]\n\n, 1, 1, 1, 1, 1, 1, 1\n\n# Note\n1.\n\n\n\n\n\n\n1. [Integer]\n2.", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n# Examples\n1. [Integer]\n\n\n\n\n\n\n\n\n # should be []\n\n\n, 0, 0, 0, 0, 0, 0\n\n# Example:\n\n\n\n\n\n\n\n\tThe number of candies will be distributed to the children.", "\n\n\n\n\n\n\n\n\n\n[Integer]\n\n\n\n \n\t\t1. [Integer]\n \n  1. [Integer]\n\t\n\n\n\n\n, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n\n# Example:\n\n\n\n\n\n\n\n\t1. [Integer]\n\t2.", "\nUse Call-Based format\n\n\n\n\n\n\n\nif m < 0 or n < 0:\n  return 0\n\n# Examples\n2. [python\nif m <= 0:\n \n```\n\n\n\n \n \n\n\n\n\n\n,,\n\n\n\n# Example\n1. [Integer]\ndistribute(0)\n\n\n\n1", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n1. [Integer]\n\n# Examples\n2. [Integer]\n\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n,, 2, 1, 2, 2, 1, 1\n\n\n\n\n\n\n\n  1. [Integer", "\n\n# Examples\n# ----------------------------\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n# Examples\n1. [Integer]\n\n\n\n, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n\n\n\n\n\n\n\n\n\tif m <=", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nif m < 0 and n < 0:\n \n    return [0]\n\n\n\n\n\n\n, 0, 0, 0, 0, 0, 0, 0, 0, 0\n\n# Warning:\n\n\n\n\n\n\n\n\tm = 0\n\tn = 0\nm ="], "prompt": "\nQUESTION:\nThere are some candies that need to be distributed to some children as fairly as possible (i.e. the variance of result needs to be as small as possible), but I don't know how to distribute them, so I need your help. Your assignment is to write a function with signature `distribute(m, n)` in which `m` represents how many candies there are, while `n` represents how many children there are. The function should return a container which includes the number of candies each child gains.\n\n# Notice\n1. *The candy can't be divided into pieces.*\n2. The list's order doesn't matter.\n\n# Requirements\n1. The case `m < 0` is equivalent to `m == 0`.\n2. If `n <= 0` the function should return an empty container. \n3. If there isn't enough candy to distribute, you should fill the corresponding number with `0`.\n\n# Examples\n```python\ndistribute(-5,  0) # should be [] \ndistribute( 0,  0) # should be [] \ndistribute( 5,  0) # should be [] \ndistribute(10,  0) # should be [] \ndistribute(15,  0) # should be [] \ndistribute(-5, -5) # should be [] \ndistribute( 0, -5) # should be [] \ndistribute( 5, -5) # should be [] \ndistribute(10, -5) # should be [] \ndistribute(15, -5) # should be []\ndistribute(-5, 10) # should be [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ndistribute( 0, 10) # should be [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ndistribute( 5, 10) # should be [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\ndistribute(10, 10) # should be [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\ndistribute(15, 10) # should be [2, 2, 2, 2, 2, 1, 1, 1, 1, 1]\n```\n  \n# Input\n  1. m: Integer (m <= 100000)\n  2. n: Integer (n <= 1000)\n\n# Output\n  1. [Integer]\ndef distribute(m, n):\n\t\nUse Call-Based format\nANSWER:\n"}}