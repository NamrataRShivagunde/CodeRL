{"2803": {"code": ["\n# Example\n# Task\n\n\n\n\n  return DPC_sequence(s)\n\n\nUse Call-Based format\n\n\n# Task\n\n\n\n\n\t# Task\n# Task\n\n\n\t\n\n# Task\n# Task\n\n\n\n\n# Task\n\n\n\n# Task\n\n# Task\n\n\n# Task\n\n\n# Task\n You are", "# Call\n\nUse Call-Based format\n\n# Example\n\n\n\n\n \n\n\n\n# Task\n\n\n\n\n\t\n\n\t\n\n# Task\n\n# Task\n\n\n\t\n# Task\n# Task\n\n\n\n\n# Task\n\n\n\n# Task\n\n# Task\n\n# Task\n\n\n# Task\n# Task\n You are given", "\n# Call-Based format\n\n\n\n# Task\n\n# Task\n\n\n\n\n  return DPC_sequence(s)\n\n# Input/Output\n\n\n\t\n\n# Task\n\n\n\t\n# Task\n# Task\n\n\n\n\n\n\n\n# Task\n# Task\n\n# Task\n\n# Task\n\n\n# Task\n\n    If you", "# Example\n# Example\n\n\n\n\n# Task\n\n# Task\n\nUse Call-Based format\n\n\n\n\t\n\n\t\n# Task\n\n# Task\n\n \n \n\t\n# Task\n# Task\n\n\n\n\n\n\n\n# Task\n# Task\n\n# Task\n\n# Task\n\n# Task\n# Task\n\n  If the D", "\n# Example\n\n  def DPC_sequence(s):\n\t\nUse Call-Based format\n\n\n\n\n# Task\n\n# Example\n\n\n\n\t\n# Task\n\n\n# Task\n# Example\n\n\n\t\n\n# Task\n# Task\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n# Task\n\n\n# Task\n You", "\n# Example\n\n# Use Call-Based format\n\n\n\n\n\n# Task\n\n# Task\n\n# Example\n\n\n\n\treturn DPC_sequence(s)\n\n# Example\n\n\n# Task\n\n\n\t\n# Task\n\n \n\n\n\n\n\n\n# Task\n# Task\n\n# Task\n\n\n\n\n\n\n# Task\n You", "\n# Example\n\n\n\n\t\nUse Call-Based format\n\n\n# Example\n\n# Task\n\n\n\n\n\n\n\n\t\n# Task\n\n# Task\n\n# Example\n\n\n\t\n# Task\n\n\n# Task\n\n\n\n\n\n# Task\n\n\n\n\n\n# Task\n\n\n# Task\n\n\n\n# Task\n You are", "\n# Example\n\n\n\n  return DPC_sequence(s)\n\nUse Call-Based format\n\n\n# Task\n\n\n\n \n  return DPC_sequence(s)\n\n# Example\n\n\n# Task\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n# Task\n\n\n\n# Task\n You are", "# Example\n# Input/Output\n\n\n - `[input]` string `s`\n\nUse Call-Based format\n\n\n# Task\n\n# Output\n\n\n\n\n\n\t\n# Task\n# Task\n\n\t\n# Task\n\n\n\n\n\n\n\n\n# Task\n# Task\n\n# Task\n\n\n# Task\n\n# Task\n You are", "# Example\n# Example\n\n    def DPC_sequence(s):\n\n\n\n\n\n# Task\n\n\n\n \n \n\n\t\n# Task\n\n# Example\n\n \n\n\t\n# Task\n\n# Example\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n# Task\n\n# Task\n\n\n# Task\n You are given", "\n# Call-Based format\n\n\n\n# Task\n\n# Task\n\n\n\n\n\t\n\n\t\n\n# Task\n\n# Task\n\n\n# Output\n\n  N, s,\n\t\n\n\n\t\n# Task\n# Task\n\n\n\n\n\n\n\n\n# Task\n\n# Task\n\n\n\n\n# Task\n\n  # Task\n", "# Example\n\n  def DPC_sequence(s):\n\t\nUse Call-Based format\n\n\n\n\n\n# Task\n\n \n \n\n\n\t\n\n\n# Task\n\n \n\n \n\n# Task\n\n\n\n\n\n\n\n\n# Task\n\n# Task\n\n# Task\n\n# Task\n\n# Task\n\n  1)", "\n# Example\n# Task\n\n  Use Call-Based format\n\n\n  return 1\n\n\n# Task\n# Task\n\n\n\n \n  return min(s)\n\n\n\t\n# Task\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n# Task\n\n# Task\n\n\n\n\n# Task\n You are", "# Example\n\n  def DPC_sequence(s):\n\t\t\nUse Call-Based format\n\n\n\n\n\n\n# Task\n\n\n\t\n\n\t\n# Example\n\n\n# Task\n# Example\n\n\n\t\n\n# Task\n\n\n\n\n\n\n\n# Task\n\n# Task\n# Task\n\n\n# Task\n\n# Task\n You are", "\n# Example\n\n  def DPC_sequence(s):\n\t\treturn s\n\n# Example\n\n\n\n\n\n# Task\n\n\n\n\n\n\t\treturn s\n\n\n# Task\n# Example\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\n# Task\n\n# Task\n\n# Task\n\n\n\n# Task\n You are given", "# Input/Output\n# Example\n\n\n  return DPC_sequence(s)\n\n# Task\n\n\n\n\n\n  return DPC_sequence(s)\n\n\n# Example\n\n# Task\n# Example\n\n\n\n# Task\n\n\n\n# Task\n\n\n\n# Task\n\n\n# Task\n\n\n# Task\n\n# Task\n You are", "\n# Example\n\n\n\n\n# Use Call-Based format\n\n# Task\n\n# Task\n\n\n\n  `s`\n\n  `s`\n\n  `output`\n\n  `output`\n\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n# Task\n\n\n\n\n# Task\n You are given an", "\n# Example\n\n#\n\n  return DPC_sequence(s)\n\nUse Call-Based format\n\n# Task\n\n# Task\n\n\n\n\t\n\t\n# Task\n# Task\n# Task\n\n\n\t\n# Task\n\n\n \n\n\n\n\n\n# Task\n\n# Task\n# Task\n\n# Task\n\n\n\n\n# Task\n", "\n# Example\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\t\n\n# Task\n\n# Task\n\n# Example\n\n\n\n\t\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n# Task\n\n# Task\n\nN = 20\n\n\n# Task\n", "\n\n\n\n\n# Task\n\n# Task\n\n[input]\n# Input/Output\n\n  s\n\t\n\n\n\n\t\n\n\t\n# Task\n\n# Task\n\n# Example\n\n\n\t\n# Task\n\n# Task\n\n\n\n\n\n\n\n\n\n\n# Task\n\n# Result\n\n# Task\n\nN = 23\n\n"], "prompt": "\nQUESTION:\n# Task\n You are given a string consisting of `\"D\", \"P\" and \"C\"`. A positive integer N is called DPC of this string if it satisfies the following properties: \n \n ```\n For each i = 1, 2, ... , size of the string:\n\n If i-th character is \"D\", then N can be divided by i\n If i-th character is \"P\", then N and i should be relatively prime\n If i-th character is \"C\", then N should neither be divided by i \n                           nor be relatively prime with i```\n\nYour task is to find the smallest DPC of a given string, or return `-1` if there is no such. The result is guaranteed to be `<= 10^9`.\n\n# Example\n For `s = \"DDPDD\"`, the result should be `20`.\n \n `\"DDPDD\"` means `N` should `divided by 1,2,4,5`, and `N,3` should be relatively prime. The smallest N should be `20`.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  The given string\n\n\n - `[output]` an integer\n\n  The smallest DPC of `s` or `-1` if it doesn't exist.\ndef DPC_sequence(s):\n\t\nUse Call-Based format\nANSWER:\n"}}