{"4894": {"code": ["::\n\n\n\nUse Call-Based format::\n\n\n\n\n\n:\n:\n\n\n\n\n:\n\n\n\n:\n\nUse Python format, etc.\n\nUse Javascript format\n\n\nUse Python Call-Based format\n:\n or make_parts.\n\n\n\n\n:\n\n\n\n\n\n\n## Examples:\n\n\n\n## Res", "::\n\nUse Call-Based format::\n\n\n\n\n:\n:\n\n\t\n\n:\n:\n or make_parts\n\nUse string format\n\n:\nUse Python format or make_parts.\n\nUse Python format\n\n12 of size 10 and 1 of size 3\n\n\nUse Python format\n:\n\n\n\n\nWrite function `make_parts`", "::\n\n\n:\n:\n\n\n\t\n\n\n:\n:\n\n\n\n:\n:\n\n\nIf you have a language you should use `make_parts` or `make_parts` you can use the\n\n:\n\nor `make_parts`\n\n,\n\n\n:\n\n\n\n\n\n* *\n\nA function that takes an array", "::\n\n\n\nUse Call-Based format::\n\n\n\n\t\n\t\n:\n\n:\n\n\n:\n\n\n\n:\n or make_parts\n\nUse Call-Based format.\n:\n,\n, 2 of size 2.\n\n\n\n:\n\n\n\nUse Function `make_parts`\nUse function `make_parts`.\n\n:", ":\n:\n\n\n::\n\n\n\n\n\n:\n:\n\n\n\n:\n:\n, make_parts, make_parts\n\nUse Call-Based format.\n\nUse Call-Based format\n\n\nUse function `make_parts` or `make_parts`.\n,\n\n:\n\n\n\n\n\nQUESTION:\n\nWrite function `make_", "::\n\n\n\nUse Call-Based format::\n\ndef make_parts(arr, chunkSize):\n\n\n\n\n\t:\n:\n\n\n\n:\n\n:\n\n or make_parts\n\nUse Call-Based format.:: or `make_parts`.\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\nWrite function `make", "::\n\n\n\nUse Call-Based format::\n\n\n\n:\n\n:\n\nUse Array-Based format\n\n\n:\n\n\n:\n or make_parts\n\n, 1 of size 10\n\nUse C-style format:\n or make_parts.\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\t\nCOMMON:\n\n", "::\n\n\n\nUse Call-Based format::\n\n\n\n\t\n\n:\n\n:\n\n\t\n:\n:\n,\nmake_parts, and make_parts\n\nUse File-Based format\n\nUse File-Based format\n\nUse File-Based format:\n\n\n\n\nUse File-Based format\n:\n\n\n\n\nUse function `make", ":\n:\n\n\n\nUse Call-Based format::\n\n\n\n\t\n:\n\n:\n\n\t\n:\n:\n or make_parts\n\nUse Python-based format, 10, 3, or any other language language\n\t\nUse Call-Based format:\n\n\n,\n\n:\n\n\n\n\n\n\nQUESTION:\nWrite function `make_", "::\n\n\n:\n:\n\nUse Call-Based format\n\n\n\t\n\n:\n:\n\n\n\n\t\n:\n:\n\n, make_parts, make_parts, and make_parts\n\nUse string format\n\n:\n\nUse String-based format\n\n\n\n\n\n\n\n\n\n\n\n    Use function `make_parts` or `", "::\n\n\n::\n\n\n\n\t\n\n:\n:\n\n\n\n:\n:\n or make_parts\n\nUse Call-Based format\n\n:\n\nUse Call-Based format, and then call `make_parts`.\n\nUse Python-Based format\n,\nUse Python-Based format\n:\n\n\n\n\n\n\nWould you like to use", "::\n\n\nUse Call-Based format:\n:\n\n\n\t\n\n:\n\n:\n\n\n:\n:\n\n\nExample:\n\ndef make_parts(arr, chunkSize):\n\t\nUse Call-Based format\n\nUse Python-Based format\n:\n and 1 of size 3.\n\n\n:\n\n\n\n\n    Use function `make_parts", "::\n\n\n\nUse Call-Based format::\n\n\n\t\n:\n:\n\n\n\n\t\n:\n:\n\nUse Call-Based format or make_parts.\n\nUse Python format\n\nUse Python format\n:\n\n or make_parts.\n\n, 1 of size 2, 1 of size 3\n\n\n:\n\n\n\n\n\n\t#", "::\n\n::\n\n\n\n\n\n\n:\n:\n\n\n\n\t\n:\n:\n\n\nReturns:\nArray of size chunkSize\n\n\nUse Call-Based format\n\nUse Python format\n,..., 4 of size 4.\n\nUse Python format\n,\n\n\n:\n\n\n\n\n\n\n\n    - `make_parts`:\n", "::\n\n\n:\n:\n\n\n,\n:\n\n:\n\n\n:\n\n:\n or make_parts\n\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format or make_parts.\n\nYou can also use the `make_parts` function.\n,\n\n\n\n\n\n\n\t\n\t#!/", "::\n\n\n\nUse Call-Based format::\n\n\n\n\n\n:\n:\n\n\n\t\nUse Python-Based format:\n:\n or make_parts\n\nUse C-style format, chunkSize, or a custom function `make_parts`::\n\n\n\n\n\n:\n\n\n\n\n\n\n\nWould you like to write a function `", "::\n\n\n::\n\n\n\n\n:\n:\n\n\n\n\n:\n:\n\nUse Call-Based format or make_parts\n\nUse Python-Based format, or make_parts\n:\n\nUse File format\n, 2 of size 2 and 1 of size 1\n\nUse File-Based format\n\n\n:\n\n\n\n\n\n\n    $ python", ":\n\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n:\n\n\n\n\t\n\n:\n:\n\n\n:\n:\n or make_parts\n\nUse Function-Based format\n\n:\nUse Call-Based format or make_parts.\n\n and 1 of size 3\n\n\n:\n\n\n\n\n\n\t\n\n\tif", ":\n\n:\n\n\n:\n:\n\n\n\n\n:\n\n:\n\n\n:\n:\n, make_parts, and make_parts.\n\nUse Call-Based format.\n\n\nUse Call-Based format:\n or make_parts.\n\nUse Python-Based format,\n\n\n\n\n\n\n\n\n\n  `make_parts`\n\n", "::\n\n\nUse Call-Based format::\n\n\n\n\n\n:\n:\n\n\n\n\t\nUse Call-As-Format:\n:\n\n, and make_parts\n\nUse Call-Based format\n\nUse Python-Based format\n\nUse File-Based format:\n\n\n\n\n:\n\n\n\nWrite function `make_parts` or `make"], "prompt": "\nQUESTION:\nWrite function `makeParts` or `make_parts` (depending on your language) that will take an array as argument and the size of the chunk.\n\nExample: if an array of size 123 is given and chunk size is 10 there will be 13 parts, 12 of size 10 and 1 of size 3.\ndef makeParts(arr, chunkSize):\n\t\nUse Call-Based format\nANSWER:\n"}}