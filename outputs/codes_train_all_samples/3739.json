{"3739": {"code": ["\n\t\t```\n\n\t\t[n]\n\t\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nbranch(1) == 0 #kind of special case\nbranch(2) == 1 #kind of special case\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nbranch(n)\n\nbranch(2) == 0 #kind of special case\nbranch(3) == 0 #kind of special case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbranch(1) == 0 #kind of special case\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n## Examples\n\n\nUse Call-Based format\n\n## Examples\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(5) == 2\nbranch(3) == 2\n", "\n\t\nUse Call-Based format\n\n\n\n\n\nbranch(n):\n\t\nUse Call-Based format\n\n\n\n\n\nbranch(1) == 1 #kind of special case\nbranch(2) == 2 #kind of special case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(3) == 1 #kind", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\n\n\n\n\n\n\n\nbranch(1) == 0 #kind of special case\n\n\n``", "\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(3) == 1 #kind of special case\nbranch(2) == 2 #kind of special case\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n2 1 2 1 2 1 1 1 2\n\n\n\n\n```python\n\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nbranch(n)\n\nUse Call-Based format\n```\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nbranch(1) == 1 #kind of special case\nbranch(1) == 2\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nbranch(0) == 0 #kind of special case\nbranch(1) == 0 #kind of special case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(0) == 0 #kind of special case\n\n``", "\nUse Call-Based format\n\n2\n3\n\n\n\n\n\n\nUse Call-Based format\n\n```python\n#branch(n)\n\n\n\n#branch(n)\n#branch(3)\n#branch(2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n##\n##\n## The `2`", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nFaster format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(3) == 1 #kind of special case\nbranch(2) == 1\n```\n\n\n\n```python", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nbranch(n) == n\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbranch(1) == 0 #kind of special case\nbranch(3) == 2\n\n\n``", "\n\n\n\n\n\nUse Call-Based format\n\n```python\nbranch(n) == 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(3) == 1 #kind of special case\nbranch(5) == 2\n```\n\n\n\n\n\n\n\n", "\n\t\nUse Call-Based format\n\n\n\nCall-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n```python\n\nbranch(n) == n #kind of special case\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbranch(1) == 1 #kind of special case\nbranch(2) == 0\n\n", "\nUse Call-Based format\n\n\n\n\n\nbranch(n)\n\nUse Call-Based format\n\nNOTE:\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(3) == 0 #kind of special case\nbranch(3) == 0 #kind of special case\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n1 #kind of special case\n2 #kind of special case\n3 #kind of special case\n\n```python\n2 2 2 2 3 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbranch(2) == 0 #kind of special case\n\n\n```python\nbranch", "\n\t\t```\n\t\treturn n\n\t\t```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n15\n\n\nbranch(1) == 1\nbranch(2) == 1\nbranch(3) == 1\n\n\n``", "\n\n\n\n\n\n\n\n# branch(n)\n\nUse Call-Based format\n\n```python\nbranch(n) == 2\nbranch(3) == 3\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(10) == 3 #kind of special case here\n\n```", "\n\n\n\n\nUse Call-Based format\n\n```python\nif (n > 30):\n\nUse Call-Based format\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 1 2 3 3\n2 1 2 3 3 3\n2 1 2 2 3 3 3\n\n\n\n\n\n\n\n\n\n```python\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nbranch(n) == n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nbranch(1) == 3 #kind of special case\nbranch(3) == 0\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nCall-Based format\n\n```python\n\n3 1 2 2 2 1 0 0 0 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbranch(1) == 1 #kind of special case\n\n\n```python"], "prompt": "\nQUESTION:\nSimilar setting of the [previous](https://www.codewars.com/kata/progressive-spiral-number-position/), this time you are called to identify in which \"branch\" of the spiral a given number will end up.\n\nConsidering a square of numbers disposed as the 25 items in [the previous kata](https://www.codewars.com/kata/progressive-spiral-number-position/), the branch are numbered as it follows:\n\n```\n17 16 15 14 13    1 1 1 1 0\n18 05 04 03 12    2 1 1 0 0\n19 06 01 02 11 => 2 2 0 0 0\n20 07 08 09 10    2 2 3 3 0\n21 22 23 24 25    2 3 3 3 3\n```\n\nMeaning that, for example, numbers in the `10-13` range will be in branch `0`, numbers in the range `14-17` are inside branch `1`, all those nice numbers in the `18-21` can call branch `2` their house and finally the `21-25` team all falls under the `3` branch.\n\nYour function must return the number of the index of each number [`1` being a special case you might consider equivalent to being in the first branch, `0`], as per examples:\n\n```python\nbranch(1) == 0 #kind of special case here\nbranch(5) == 1\nbranch(25) == 3\nbranch(30) == 0\nbranch(50) == 0\n```\n\nIt might help A LOT to both solve the [previous kata](https://www.codewars.com/kata/progressive-spiral-number-position/) and to visualize the diagonals of the square. Be ready for big numbers and, as usual, inspired by [AoC](http://adventofcode.com/2017/day/3). Finally, when ready, go to compute [the distance](https://www.codewars.com/kata/progressive-spiral-number-distance/) of the series.\ndef branch(n):\n\t\nUse Call-Based format\nANSWER:\n"}}