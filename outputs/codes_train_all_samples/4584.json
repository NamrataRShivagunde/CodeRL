{"4584": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\nGiven a set of numbers, return the additive inverse of each\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:c\n### Notes\n### Notes\n\n\n\n\n\n\n```if:javascript\n```c", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\nGiven a set of numbers, return the additive inverse of each of the numbers\n\n\n\t\n\n\n\n\n\n\n\n```\n\n\n\nUse String-Based format\n\n\n\n\n\n\n```if:c\n### Notes\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse String-Based format\n\n\ninvert(lst)\n\n\n\nGiven a set of numbers, return the additive inverse of each.\n\n\n\n\n\n\n\n\n\ninvert(lst)\n\t\n\n\n\n\nGiven a set of numbers, return the additive", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\nGiven a set of numbers, return the additive inverse of each number.\n\n\n\t\nUse Python-Based format\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n```else:c\n\n\n\n\n```if:javascript,ruby", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\nGiven a set of numbers, return the additive inverse of each\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:c\n### Notes\n\n\n\nGiven a set of numbers, return the add", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\nGiven a set of numbers, return the additive inverse of each number.\n\n\n\n\n\n\n\n\n\n\n\n\n\n```end```\n\nUse Call-Based format\n\n\n\n\n\n\n\n```end```\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Only format\n\n```if:c\n\n\ninvert([1 2 3 4 5])\n```\n\n\n\n\n\n\n\n\n\n```else:c\n\n\n\n\nGiven a set of numbers, return the", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse String-Based format\n\nGiven a set of numbers, return the additive inverse of each.\n\n\n\t\nUse String-Based format\n\n\n\n\n\n\n\n\n\n~~~if-not:c\n\n\n\n\n\n\nGiven a list of numbers, return the additive inverse of", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n```if:c\n# Use Call-Based format\n#\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:c\n### Notes\n### Notes\n\n\n\n\n\n```if:c\n\n\n\n```if:c\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n~~~if:c\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```if:c\n### Notes\n### Notes:\n### Notes\n\n\n\nGiven a set of numbers, return the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\ninvert([1,2,3,4,5])\n\n\n\n\n\n\n\n\n\n\n\n\n```if:c\n### Notes\n### Notes\n\n\n\n```if:c\n\n\n\n```if:", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Python-Based format\n### Notes\n\nGiven a set of numbers, return the additive inverse of each.\n\n\n\t\nUse Python-Based format\n\n\n\n\n\n\n\n\n\n\n```endif```\n\n\n\n\n\n```endif```\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```if:c\n\n\n```if:c\n# NOTE\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a set of numbers, return the additive inverse of each number.\n\n```if:c\n\n\n\n\nGiven a set of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n(invert '(1 2 3 4 5))   ; '(-1 2 3 4 5)'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#!python\n#c\n### Notes\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n\ninvert(lst)\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a set of numbers, return the additive inverse of each.\n\n```if:c\n\n\n\n\n\nGiven a set", "\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Python-Based format\n### Notes\n\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```endif```\n\n\n\n\n```endif``", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n```if:c\n\ninvert('(1 2 3 4 5))       ; '()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvert('')\n\n```else\n\n\n```if", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Function-Based format\n\nUse Call-Based format\n\n\ninvert(lst)\n\n\n\nUse Python-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ninvert(lst)\n\n\n\nGiven a set of numbers,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nGiven a set of numbers, return the additive inverse of each number in the list.\n\n\n\n\n\n\n\n\n\n\n\n```end```\n\n\n\t\n\n```end```\n```\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Python-Based format\n\n\n~~~if:c\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\ninvert(lst)\n\n\n\n\n\n\n\n\n~~~if-not:c\n### Notes\n\n\n\n\nGiven a set of numbers, return the additive"], "prompt": "\nQUESTION:\nGiven a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.\n\n~~~if-not:racket\n```\ninvert([1,2,3,4,5]) == [-1,-2,-3,-4,-5]\ninvert([1,-2,3,-4,5]) == [-1,2,-3,4,-5]\ninvert([]) == []\n```\n~~~\n\n```if:javascript,python,ruby,php,elixir,dart\nYou can assume that all values are integers. Do not mutate the input array/list.\n```\n\n```if:c\n### Notes:\n- All values are greater than `INT_MIN`\n- The input should be modified, not returned.\n```\n~~~if:racket\n```racket\n(invert '(1 2 3 4 5))   ; '(-1 -2 -3 -4 -5)\n(invert '(1 -2 3 -4 5)) ; '(-1 2 -3 4 -5)\n(invert '())            ; '()\n```\n~~~\ndef invert(lst):\n\t\nUse Call-Based format\nANSWER:\n"}}