{"2859": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\nlargestSum(arr)\n\n\nUse Call-Based format\n\n\n\n```\n```\n\n\n``", "\nUse Call-Based format\n\n\n\n\n\nlargestSum(arr)\n\nUse Call-Based format\nTEST-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nlargestSum([0,1,2,3,5]) == 187\n\n\n\n\n\n```\narr[0", "Use Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nlargestSum(arr)\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\nlargestSum(arr)\n\n\n\n\n\n```\nlargestSum(arr) == 187\n``", "\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\t\nUse Call-Based format\n\n```\nlargestSum(arr) == arr```\n\n:\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\nlargestSum([-1,-2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```\nlargestSum(-3) == 0\n```\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\narr[0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nExample:\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\narr[1] = -1\n", "\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\nlargestSum(arr)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\nlargestSum:\nGiven an array of numbers, calculate the largest sum of all possible blocks of consecutive numbers\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```\nlargestSum([1,2,3]) == 3```\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\nThe largest sum is calculated from the largest possible block of consecutive numbers in an array.\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\n\nif", "\nUse Call-Based format\n\n\n\n\n\nlargestSum(arr)\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n-1,-3,-41,-58,-93,-23,-93\n\n\n\n\n\n\n\n\n\n```\narr[1] - arr", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n```\nlargestSum([-1,-2,-1,-2,-3]) == 6\n```\n\n\n\n\n\n\n\n```\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nExample:\n\nlargestSum(arr)\n\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n```\nlargestSum(arr) == 1\n```\n\n\n\n```", "Use Call-Based format\n\n\n\nUse Call-Based format\n\n\nlargestSum(arr)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```\nlargestSum([]) == 0```\n\n\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n-1,-2,-3,-41,-59,-53,-93,-23,-93,\n\n\n\n\n\n\n\n\n\n\n\n\n```\narr[0", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nlargestSum(arr)\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```\narr[23] == -", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n```\narr.largestSum(arr) == 187```\n\n```\n\n```\n\n:\n\n\n```\n\n```\n\n\n\n\n\n\n\n```\narr[0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nlargestSum(arr)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n```\nlargestSum(arr) == 187```\n\n\n\n", "\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\n\n\n\n\t\nUse Call-Based format\n\nExample:\n\t\nlargestSum(arr)\n\n:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nlargestSum(arr)\n\n\n\n\n\n```\narr[", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n```\narr = [1,2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\nExample:\n\t\nlargestSum(arr)\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUsage:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```"], "prompt": "\nQUESTION:\nGiven an array of numbers, calculate the largest sum of all possible blocks of consecutive elements within the array. The numbers will be a mix of positive and negative values. If all numbers of the sequence are nonnegative, the answer will be the sum of the entire array. If all numbers in the array are negative, your algorithm should return zero. Similarly, an empty array should result in a zero return from your algorithm.\n\n```\nlargestSum([-1,-2,-3]) == 0\nlargestSum([]) == 0\nlargestSum([1,2,3]) == 6\n```\n\nEasy, right? This becomes a lot more interesting with a mix of positive and negative numbers:\n\n```\nlargestSum([31,-41,59,26,-53,58,97,-93,-23,84]) == 187\n```\n\nThe largest sum comes from elements in positions 3 through 7:\n```59+26+(-53)+58+97 == 187```\n\nOnce your algorithm works with these, the test-cases will try your submission with increasingly larger random problem sizes.\ndef largest_sum(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}