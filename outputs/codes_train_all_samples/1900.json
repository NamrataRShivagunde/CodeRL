{"1900": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n      5       3\n     \n      5       3\n\n\n\n\n\n,null,null,null,null,null,null,null,null,null)\n\n\n\n\n\n\n\n\n\n\n\n\n\n  1)\n\n", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    1      2\n    3       2\n    5       3\n    6       3\n      9\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    >>> tree.widthOfBinaryTree()\n\n\n\n   ", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n        1   2      3       2      3   2      3   2\n       /         2\n\n\n\n\n\n,3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      1   2     3     4\n     \n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n      5   3\n      9\n      7\n\n\nExample 5:\n\n      1\n      2\n      3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      1  3   2\n     \n\n\n\n  1  3", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    3       2     3     2\n      5       3\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1:\n      2\n      3\n      4\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n  1  2  3  4  5  6  7\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1    2     3   4     5      6    7\n\n\n\n \n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n        1   2   3   4   5   9\n       /         \\  \n      5   3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    >>> from __future__ import call", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n        1   2     3   4     5\n        \n        6   7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe maximum width of a tree is the maximum width of a given binary tree.\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n      5       3\n     \n\n\n\n\n\n\n\n\n    WidthOfBinaryTree(self, root)\n    \n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n    For a given binary tree,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n        The maximum width of a binary tree\n\nOutput: 2\n\n\nExample 5:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      4  7  8\n      9\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n    1    2     3\n    5      7\n    \n      9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n# Definition for a binary tree\nInput", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n# Definition for a binary tree\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      1\n      2\n      3\n      4\n     \n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    WidthOfBinaryTree()\n\n\n\nUse Call-Based format\n\n\n\n\n    widthOfBinaryTree\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUsage:\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1      2       3\n    2      3\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    3     2     3     2\n      5   3     3     9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    >>> tree = TreeNode()\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n \n      5       3\n      9       7\n\n\nExample 5:\n\n  1\n      2\n      3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Return 1:\n    0:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n      5   3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      1   2     3     2     3     3     \n      5   3    \n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n        5   3      3\n\nOutput: 4\n\n\n\nExample 5:\n\n    1    2      3\n\nExample 6:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  1:\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n# Definition for a binary tree:\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n      5   3     9 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n      5       3\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    _Tree = TreeNode()"], "prompt": "\nQUESTION:\nGiven a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null. \n\nThe width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.\n\nExample 1:\n\nInput: \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\nOutput: 4\nExplanation: The maximum width existing in the third level with the length 4 (5,3,null,9).\n\n\n\nExample 2:\n\nInput: \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\nOutput: 2\nExplanation: The maximum width existing in the third level with the length 2 (5,3).\n\n\n\nExample 3:\n\nInput: \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\nOutput: 2\nExplanation: The maximum width existing in the second level with the length 2 (3,2).\n\n\nExample 4:\n\nInput: \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\nOutput: 8\nExplanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).\n\n\n\n\nNote:\nAnswer will in the range of 32-bit signed integer.\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def widthOfBinaryTree(self, root: TreeNode) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}