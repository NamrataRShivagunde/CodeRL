{"4612": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\n\nMath has always been the best subject, and these symbols always trip you up!\n\nMath has always always been your best subject\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n```python\n{\n  'x':  'X',\n  '", "\nUse Call-Based format\n\n\n\nUse Python's default format\n\nUse Python's default format\n\n\n\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n1 * 2 ** 3\n\n2 * 3 ** 3\n\n3 * 3 ** 3\n3 = 3 ** 2\n\n\n\n\n\n\n\n```python\n{", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\"Has not been used!\"\n\n`OPERATORS`:\n\n```python\n{ '**': 'Equals ', }\n```\n\n\n\n\n\n\n**", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\t\n\n\n\nMath has never been the best subject\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\"\"\"\n\n```python\n{ '+': 'plus ',\n  '-': '", "\nUse Python syntax\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\texp\n\t\n\t\n\n\n\nMath has never been your best subject!\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nExpression out()\n\n\n\n\n\n\n**\n\n```python\n{ '+':   'Plus ',", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\nThis function is called from `Expression.from_code()`\n\n\n\n\n\n\nMath hasn't been your best subject\n\nexpression_out(\"2 ** 3\") == \"Three Subtract 3\"\n\n\n\n\n\n\n\n\n\n** 4 ** 5 =", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\treturn exp\n\n\"\"\"\n\n\n\n\n\nThis function returns a string that can be written out to the programmatic form\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>> expression_out(x)\n>>> \"That's not an expression!\"\n```", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\texp\t\n\n\n\n\n\n\n\n\n\nexpression_out(\"1 + 2\") == \"One Equals One\"\n\n```python\n\n\n\n\n\n\n\n```python\n\n\n\n```python\n{ '+'", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Function-Based format\n\n\n\t\n\n\nDo you want to write out expression?\n\nTo The Power Of This is not an operator!\n\n\n\n\n\n\n\n\n\"+\", \"-\", \"+\", \"0\", \"0\"\n\n\n\n\n\n\n\n* Times* =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\nThis function is called from the `expression_in()` function.\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**\n\n**\n```python\n{\n'**':  ", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\t\n\n\n\nEverything is invalid!\n\n`OPERATORS`:\n\n```python\n{ '**':  'Beta ',\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n```python\n{ '+", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\t\n\n\nMath has never been called your best subject, and this function does not always trip you up!\n\n\nUse Python format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**(4 * 5) == '4 ** 5'\n", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\t\n\t\n\n\n\t\n\t\n\n\n\nMath hasn't been your best subject, and you've already created an expression for you!\n\n\n\n\n\n\n\n\n\n\n\n''')\n''')\n\n\n```python\nif not expression_out(\"4 ** 9\"):", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\t\n\t\n\n\n\n\n\nMath hasn't been your best subject, and you'll have to give it your best subject!\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```python\nif exp % 1", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\t\n\t\n\n\nUse Python function `expression_out()`\n\nUse Python function `expression_out()`\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\noperator_out(\"a\", \"b\", \"c\")\n\n\n\n\n```python\n{ '+':  ", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\nEverything else?\n\nexpression_out(\"foo\")\n\nexpression_out(\"foo\")\n\n\n\n\n\n\n\n**2, **", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\t\n\n\n\nMath hasn't been the best subject!\n\n\n\n\n\n\n\n\n\n\n\n\npython\nfor i in range(1, 10):\nexpression_out(\"10 + 3\")\n```\n\n\n\n\n``", "\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\t\n\n\n\n\t\n\n\nUse Python syntax\n\nMath is just a function of the most used programming symbols, and you can use this function\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\"\"\"\n\n\n```python\n\nif exp % 2 == 0 or exp %", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\t\n\n\n\nMath hasn't been a best subject!\n\n```python\n\nexpression_out('x')\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nif exp % 2 == 0:\n", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\t\n\t\n\n\nUse Python math format\n\n\nUse Python's built-in format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nEverything else!\n\n```python\n\n\n\n\n\n\n\n```python\n\n"], "prompt": "\nQUESTION:\nMath hasn't always been your best subject, and these programming symbols always trip you up!\n\nI mean, does `**` mean *\"Times, Times\"* or *\"To the power of\"*?\n\nLuckily, you can create the function `expression_out()` to write out the expressions for you!\n\nThe operators you'll need to use are:\n\n```python\n{ '+':   'Plus ',\n  '-':   'Minus ',\n  '*':   'Times ',\n  '/':   'Divided By ',  \n  '**':  'To The Power Of ',\n  '=':   'Equals ',\n  '!=':  'Does Not Equal ' }\n```\n\nThese values will be stored in the preloaded dictionary `OPERATORS` just as shown above.\n\nBut keep in mind: INVALID operators will also be tested, to which you should return `\"That's not an operator!\"`\n\nAnd all of the numbers will be `1` to`10`!\nIsn't that nice!\n\nHere's a few examples to clarify:\n\n```python\nexpression_out(\"4 ** 9\") == \"Four To The Power Of Nine\"\nexpression_out(\"10 - 5\") == \"Ten Minus Five\"\nexpression_out(\"2 = 2\")  == \"Two Equals Two\"\n```\n\nGood luck!\ndef expression_out(exp):\n\t\nUse Call-Based format\nANSWER:\n"}}