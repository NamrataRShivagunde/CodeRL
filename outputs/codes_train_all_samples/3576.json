{"3576": {"code": [":\n\n\n\n\n\n\n\n\n\t\nUse Function-Based format\n\ndef\t\nUse Call-Based format:\n\n\nUse Call-Based format\n\n\t\n\t\nUse Python-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\n>3\n```\n\n\n\n\t\n\n\n\n```python\n", ":\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\ndef\t\n:\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n`````\n\n> 1\n```\n\n`\n\n\n3\n\n\t\n\n\n\n\n```python\n\nif'simple' in [\n", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\t\nUse Call-Based format\n\n\n\t\n\t\n\n\n\n\n\n\nLength of longest word in a list is the longest word in a list\n\n\n\n\n```python\n> 8\n```\n\n\n\n\n\n\n\n\n>>> longest(words)\n>>>\n\n#", "\n\nUse Call-Based format\n\n\n\t\n\nUse Call-Based format\n\n\n\n\n\t\n\t\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n`````python\n> 3\n```\n\n\n\n\t\nUse Call-Based format\n\n\t\n\t\n``", ":\n\n\n\n\n\n\n\n\n\t\t\nUse Call-Based format:\n\n\n\t\n\t\n:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```python\n['simple', 'is', 'better', 'than', 'complex'] ==> 2\n```\n\n\ndef\n\n\n\n\n\t\n\n\n``", "\n\n\n6\n\n\t\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\t\t\nUse Call-Based format\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n```python\n['simple', 'is'] ==> 3\n```\n\n\n\n\n\n```python\n\n\t\n\n\n    This function is a function that", "\n\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\t\n\n\t\n\n\n\n\n\t\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\n```python\n['simple', 'is', 'better', 'than', 'complex'] ==> 6\n```\n\n\n\n\n\t\n\n", ":\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n'simple' is> 3\n'complex' is> 3\n\n\ndef\n\t\n\n\n\n\t\n\n\n---\n\n# Examples:\n", "\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\t\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n```python\n['simple', 'is', 'better', 'than', 'complex'] ==> 2\n```\n\n```python\ndef\n\n\n```python\n`\n\n```python\n\n\n\n\n``", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n```python\n['simple', 'is', 'better', 'than'] ==> 4\n```\n\ndef\n\n\n\n\n\t\n\n\n```python\n", "\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\t\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n```python\n['complex', 'is'] ==> 2\n```\n\n\n\n\n\n\n\n\n\n\n```python", ":\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\t\nUse Function-Based format\ndef\t\n:\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n````python\n['simple', 'is', 'better', 'than', 'complex'] ==> 2\n`````\n\n\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\t\n\n\n\n\n\n\nUse Call-Based format\n\n\n```python\n['simple', 'is', 'better', 'than'] ==> 3\n```\n\ndef\t\n\n```python\n`\n\ndef\n\n\n   ", "\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\t\nUse Call-Based format\n\n\n\t\n\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```python\n['simple', 'is'] ==> 3\n```\n\n\n\n\n```python\n\n\n```python\n\t\n\n\n   ", "\n\n\n\n\t\n\n\n\n\n\n\t\n\t\n\n\n\n\t\nUse Python format\n\n```python\n\n\t\n\n\n\n\n\n\n\n\n7\n\n\n\n2\n4\n3\n\n```python\n['simple'] ==> 'is'\n```\n\n\n```python\n\n\t\n\n\n\n```python\n\n", "\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\ndef\t\nUse Call-Based format\n\n\n\t\t\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n['simple', 'is', 'better', 'than', 'complex']\n\ndef\t\n\n\n\n\t\n\n\n```python", ":\n\n7\n\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\t\t\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n> 4\n\n\n\n\n\n\n\n\n\n```python\n\nlist of words = ['simple', '", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n```python\n[simple, is, better than, complex, is, better than, complex, is, better than, complex, is] ==> 3\n```\n\n\ndef\n\n\n\n\n\n\n```", ":\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\nUse Function-Based format\n\t\n\n\n\t\n\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```python\nlist = [3, 4]\n```\n\n\n\n\n\n\n\t\n\n\n```python\n\n", ":\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Function-Based format\ndef\t\nUse Call-Based format:\n\n\n\t\nUse Python format\n\n\t:\n:\n\n\n\n\n\nUse Call-Based format\n\n```python\n['simple', 'is', 'better']\n```\n\n\n\n\n\n\t\n\n"], "prompt": "\nQUESTION:\nComplete the function that takes one argument, a list of words, and returns the length of the longest word in the list.\n\nFor example: \n\n```python\n['simple', 'is', 'better', 'than', 'complex'] ==> 7\n```\n\nDo not modify the input list.\ndef longest(words):\n\t\nUse Call-Based format\nANSWER:\n"}}