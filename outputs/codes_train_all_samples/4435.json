{"4435": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nExample:\nhas_subpattern(string)\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n```python\n\n\n\n\n```python\n\nThe following code was originally written:\n\n\n\n\n\n\n``", "\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\nno repeated shorter sub-pattern\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\nThe following is a simple example:\n\nhas_subpattern(\"abc\") == True #no repeated shorter subpattern\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n```python\n\n\n\n\n```python\n\n\n\n\n\n```python\nhas_subpattern(\"ab", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n```python\n\nUse Call-Based format\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n```python\nhas_subpattern(\"\") == False #\n\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nhas_subpattern(\"ab\") == True #no repeated shorter sub-pattern, just shuffled\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n```python\nhas_subpattern", "\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n```python\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n```python\nhas_subpattern(\"aaa\") == True #repeated \"aaa\"\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\t\thas_subpattern(string) == True #repeated shorter subpattern\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nif has_subpattern(\"", "\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```python\nhas_subpattern(\"abc\") == True #same as above\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\nhas_subpattern(\"abcd\")", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nif has_subpattern(string):\n\t\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nhas_subpattern(\"", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nno repeated shorter sub-pattern, just repeated \"a\" and \"aa\"\n\n\n\t\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\nhas_subpattern(\"ababababababab\") == True\n\n\n```", "\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```python\nhas_subpattern(\"abcde\") == False #no repeated shorter sub-pattern\n```\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n```python\n\nif has_subpattern(\"a\") == True:\n\nhas_sub", "\nUse Call-Based format\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\nhas_subpattern(\"a\") == True #same as above\n\n\n\n\n\n\n```python\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nhas_subpattern(\"abcd\") == True #same as above\nhas_subpattern(\"abcd\") == False #same as above\n\n\n\n\t\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n```python\nif any", "\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nhas_subpattern(string):\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\nhas_subpattern(\"abc\") == True #repeated \"abc\"\n\n\n\n``", "\n\n\n\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nrepeated shorter sub-pattern;\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nhas_subpattern(\"ab\") == False #repeated \"ab\"\n\n```", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrepetitions\n\n```python\nhas_subpattern(\"abc\") == False #repetitions\n```\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n```python\nhas_subpattern(\"", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUSAGE:\n\n```python\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\nhas_subpattern(\"ab\") == True #repeated\n\n", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\treturn True\n\n\n\n\n\t\treturn False\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nhas_subpattern(\"abcdabababababab\") == True #repeated\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n```python\nhas_subpattern(string) == True\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n\n\n```python\nhas_subpattern(\"ab\") == False #\nhas", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nrepeated \"b\"\n\n\n\t\nUse Call-Based format\n\n```python\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nhas_subpattern(\"abcd\") == False #no repeated shorter subpattern\n"], "prompt": "\nQUESTION:\nSimilarly to the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-i/), you will need to return a boolean value if the base string can be expressed as the repetition of one subpattern.\n\nThis time there are two small changes:\n\n* if a subpattern has been used, it will be repeated at least twice, meaning the subpattern has to be shorter than the original string;\n* the strings you will be given might or might not be created repeating a given subpattern, then shuffling the result.\n\nFor example:\n\n```python\nhas_subpattern(\"a\") == False #no repeated shorter sub-pattern, just one character\nhas_subpattern(\"aaaa\") == True #just one character repeated\nhas_subpattern(\"abcd\") == False #no repetitions\nhas_subpattern(\"babababababababa\") == True #repeated \"ba\"\nhas_subpattern(\"bbabbaaabbaaaabb\") == True #same as above, just shuffled\n```\nStrings will never be empty and can be composed of any character (just consider upper- and lowercase letters as different entities) and can be pretty long (keep an eye on performances!).\n\nIf you liked it, go for either the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-i/) or the [next kata](https://www.codewars.com/kata/string-subpattern-recognition-iii/) of the series!\ndef has_subpattern(string):\n\t\nUse Call-Based format\nANSWER:\n"}}