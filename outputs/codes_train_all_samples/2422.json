{"2422": {"code": ["\nUse Call-Based format\n\n\n    maxProduct(self, nums: List[int]) -> int:\n\n\n\n\n\n\n        return self.maxProduct(nums)\n\n\nUse Call-Based format\n\nUse Call-Based format\n:\n\n\n    :\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums, you will", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n        return self.maxProduct(self, nums)\n\n\n\nUse Call-Based format\n\nUse Python-Based format\n\nClass:\n   :\n\n\n    maxProduct(self, nums):\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array", "\nUse Call-Based format\n\n    pass\n\n\nUse Call-Based format\n\n\n\n        return maxProduct(self, nums)\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nReturns:\n\n:\n\n\n   \n        pass                \n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums, you will choose", "\nUse Call-Based format\n\n\n    def maxProduct(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n   \n       \n\n\n    maxProduct(self, nums) -> int:\n        \n\nUse Python Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums,", "\nUse Call-Based format\nUse Call-Based format\n\n    def maxProduct(self, nums: List[int]) -> int:\n\nUse Call-Based format\n\n\n   \n        pass\n\n\n\n    maxProduct(self, nums):\n       \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\nGiven the array of", "\nUse Call-Based format\n\n\n    def maxProduct(self, nums: List[int]) -> int:\n\n\n\n\n\n    def\n        return max(self, nums)\n\n\n\n    maxProduct(self, nums)\n\nUse List-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven the array of integers nums", "\nUse Call-Based format\n\n\n    def maxProduct(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n       \n\n\n   \n        pass\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\n\n\nGiven the array of integers nums, you will choose", "\nUse Call-Based format\n\n    pass\n\n\n3 <= nums.length <= 4\n\n\n\n        return maxProduct(self, nums)\n\n\n# Use Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n        pass                \n\n                \n\n\n\n\n\n\nGiven the array of integers nums,", "\nUse Call-Based format\n\n\n    maxProduct(self, nums: List[int]) -> int\n\n\n\n\n        return self.maxProduct(nums)\n        \nUse Call-Based format\n\nUse Method-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nReturns the maximum value of the array of integers nums\n\n\n\nGiven the array", "\nUse Call-Based format\n\n\n    def maxProduct(self, nums: List[int]) -> int:\n    \nUse Call-Based format\n\n\n\n\n   \n       \n\n\n    maxProduct(self, nums):\n        return 1\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums,", "\nUse Call-Based format\n\n\n    def maxProduct(self, nums: List[int]) -> int:\n\n\n\n\n   \n        pass\n\n\u00a0\n\n\nUsage:\n\n\n    __call__(self, nums)\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums, you will", "\nUse Call-Based format\n\n\n    maxProduct(self, nums: List[int]) -> int:\n\n\n\n\n\n        return 1\n\n   \n       \n    pass\n\n\n\n    maxProduct(self, nums)\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\nGiven the array of integers nums, you will choose", "\nUse Call-Based format\n\n\n    maxProduct(self, nums: List[int]) -> int\n\n\n\n\n\n        return 10**3\n\n   \n\n\n\n    def minProduct(self, nums: List[int]) -> int:\n        return 10\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums,", "\nUse Call-Based format\n\n    maxProduct(self, nums) -> int:\n\nUse Call-Based format\n\n\n\n\n   \n        return self.maxProduct(nums)\n\n\n\n    maxProduct(self, nums):\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\nReturns the maximum value of the array\n\n\n\nGiven the array", "\nUse Call-Based format\n\n    def maxProduct(self, nums: List[int]) -> int:\n\n\n\n\n          \n       \n\n\n\n\n    maxProduct(self, nums) -> int:\n\n   \n        pass\nUse Python format\nUse Python format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums", "\nUse Call-Based format\nUse Call-Based format\n\n    maxProduct(self, nums) -> int:\n\n\n\n\n\n        return self.maxProduct(nums)\n\nuse Call-Based format\n\nUse Callable format\n\n\n\n\n\n    maxProduct(self, nums):\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n1 <= nums.length <= 5\n1 <= nums[i] <= 7\n1 <= nums[j] <= 3\n\n\n       \n        pass\n\n\n\n    __call__(self):\n\n\n\n\n\n\n\n\n\n\n\nmaxProduct(nums)\n\n\u00a0\n\nGiven the", "\n\nUse Call-Based format\n    maxProduct(self, nums):\n        return self.maxProduct(nums)\n\n\n\n\n        return self.maxProduct(nums)\n\n   \n        pass\n\n\n    maxProduct(self, nums):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6 <= nums.length <= 7\n\nGiven the array", "\nUse Call-Based format\n\n\n    maxProduct(self, nums: List[int]) -> int:\n\n\n\n\n\n       \n       \n\n\n    maxProduct(self, nums) -> int:\n\n    maxProduct(nums: List[int]) -> int:\n                \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven the array of integers", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n        return self.maxProduct(nums)\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nReturns:\n\n:\n\n\n    maxProduct(nums):                \n\n\n\n\n\n\n\n\n\n\nGiven the array of integers nums, you will choose"], "prompt": "\nQUESTION:\nGiven the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).\n\u00a0\nExample 1:\nInput: nums = [3,4,5,2]\nOutput: 12 \nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n\nExample 2:\nInput: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n\nExample 3:\nInput: nums = [3,7]\nOutput: 12\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 500\n1 <= nums[i] <= 10^3\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}