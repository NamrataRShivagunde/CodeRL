{"4467": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string and returns an array of the repeated characters\n\n\n\n\n\nUse Call-Based format\nremember('apPle') => returns []\nremember('Apple') => returns []\n\n\n:\n\n\n\n\n\n\n\n\n\nThe following strings are written to a function:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n# Example:\n\n# Example:\n# Use Call-Based format\n\n\n\n\n\n\nWrite a function that takes a string to be printed\n\n\n\nUse Function-Based format\n\n\n\n\n\n\n## Examples:\n\n## Examples:\n# Use Call-Based format", "\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\nUse Call-Based format\n\nUse Call-Based format\nremember(\"apple\") => returns [\"p\"]\nremember(\"apPle\") => returns []\n\n\n\n\n and \"i\"\n\n\n\n\n\n\n\n\n\n\n* Write a function that takes a string", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nremember('apple') => returns []\nremember('apPle') => returns []\nremember('Pippi') => returns []\n\n\n\n\n\n\n\nUse Call-Based format\n, and space.\n\n\n\n\n\n\n\n\nWrite a function that takes a string and returns an array of", "\nUse Call-Based format\n\n\n\n\n\nremember(\"apPle\") => returns [\"p\",\"i\"]\nremember(\"apPle\") => returns []\nremember(\"Pippi\") => returns []\n\n\n\n\n## Examples:\n\n\n\n\n\n\n\n\n:\n.\n\n\n\n\n\n\n\n\n\nNOTE:\n\nThe function returned by the remember function", "\nUse Call-Based format\n\n\n\n\n\nremember(\"apP\") => returns [\"p\"]\nremember('Pippi') => returns [\"i\"]\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string and returns an array of repeated characters\n\n\n\n:\n, and whitespace.\n\n\n\n\n\n\n\n\n\nNOTE:\n\n* The first example", "\n\n\n\n\n\nUse Call-Based format\nremember(\"Apple\") => returns [\"p\"]\nremember('Apple') => returns [\"p\"]\nremember('Apple') => returns [\"p\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format:\n\n\n\n\n\n\n\n\n# Examples:\n\n## Examples:\n\n\n##", "\n\n\n\n\n\n\n\n\n\n\n\n\n returns [\"p\",\"i\"]\nremember(\"Apple\") => returns [\"p\"]\nremember(\"ApPle\") => returns [\"p\",\"i\"]\n\n\n\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n## Example:\n\n\n## Example:\n\n\n## Example:\n\n\n\n## Examples", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n returns []\nremember(\"apPle\") => returns []\nremember(\"Pippi\") => returns []\n\n\n\n# For F# return a \"char list\"\n\n\n\n\n:\n and numbers.\n\n\n\n\nUse Function-Based format\n\n\n\n\n\n\t\t# Example 1:", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nreturns []\nremember('a') => returns []\nremember('B') => returns []\n\n#\n\n\n\nremember(\"apPle\") => returns []\nremember('ApPle') => returns []\n\n\n:\n\n\n\n\n\n\n\n\n\nThe function will be written to a function that takes", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nreturn [str_]\n\n### Examples:\n#\n# Use Call-Based format\n\n\nUse Call-Based format\nremember(\"P\",\"I\") => returns []\n\n\n:\nUse Function-Based format\n\n\n\n\n\n\n\nWrite a function that takes a string that takes a string and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nOutput the function that takes a string and returns an array of the repeated characters.\nremember(\"P\",\"I\") => returns [\"P\",\"I\"]\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    If you have a function that", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nremember('apple') => returns []       # no repeats\nremember('apPle') => returns []\n\n\n:\n\n\n\n\n\n\n# Example:\n\n## Examples:\n\n\tif", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string and returns an array of the repeated characters.\n\n\nremember('apPle') => returns [\"P\"]\nremember('Pippi') => returns []\n\n\n:\n\n\n\n\n\n\n\nWrite a function that takes a string and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nWrite a function that takes a string and returns an array of repeated characters.\n\nremember(\"apPle\") => returns []\nremember('apPle') => returns []\n\n\n\n\n\n\n\n\n\n\n\n\n\n    - Example:\n\n    $ echo", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nreturns []\nremember(\"a\") => returns []\nremember('a') => returns []\nremember('a') => returns []\n\n#\n\n\nWrite a function that takes a string and returns an array of repeated characters\n\n\n:\n\n\n\n## Example:\n\n\n\n\n\n\n## Examples:\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nremember(\"apP\") => returns [\"p\"]\nremember('apPle') => returns [\"i\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string\n:, etc.\n\n\n\n\n\n\n\n\n## Examples:\n\n## Example:\n#", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nremember(\"Apple\") => returns [\"p\"]\nremember(\"Pippi\") => returns [\"p\"]\nremember(\"Pippi\") => returns [\"i\"]\n\n\n\n\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\nWrite a function that takes a string and returns an array", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nWrite a function that takes a string and returns an array of repeated characters\n\n\n\n\nUse Call-Based format\n\n, and \"P\"\n\n\n\n\nWrite a function that takes a string\n\n\n\n\n\n\nWrite a function that takes", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nWrite a function that takes a string and returns an array of the repeated characters.\n\nUse Call-Based format\n\n\n\n\n or \"i\".\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    This function is called by ``"], "prompt": "\nQUESTION:\nWrite a function that takes a string and returns an array of the repeated characters (letters, numbers, whitespace) in the string.\n\nIf a charater is repeated more than once, only show it once in the result array.\n\nCharacters should be shown **by the order of their first repetition**. Note that this may be different from the order of first appearance of the character.\n\nCharacters are case sensitive.\n\nFor F# return a \"char list\"\n\n## Examples:\n\n```python\nremember(\"apple\") => returns [\"p\"]\nremember(\"apPle\") => returns []          # no repeats, \"p\" != \"P\"\nremember(\"pippi\") => returns [\"p\",\"i\"]   # show \"p\" only once\nremember('Pippi') => returns [\"p\",\"i\"]   # \"p\" is repeated first\n```\ndef remember(str_):\n\t\nUse Call-Based format\nANSWER:\n"}}