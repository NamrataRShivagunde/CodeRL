{"1887": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\n    def findCircleNum(self, M: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\nThere are N students in", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N", "\nUse Call-Based format\nA class with n students is not called.\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA class with n students is called with a class with n students\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a", "\nUse Call-Based format\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\n    def findCircle(self, M: List[int]):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are", "\nUse Call-Based format\n\n\n\n    def findCircleNum(self, M: List[int]) -> int:\n\n\n\nThere are N students in a class.\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nThe number of students in a class is in range [0,200]\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class", "\nUse Call-Based format\n\n\n\nNo call-based format\nThere are N students in a class. The number of students is the number of students in a class.\n\n\n\n\n   \n\n\n\n   \n\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nThere are N students in a class.\nThere are N students in a class.\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\n\nThere are N", "\nUse Call-Based format\nThe number of students is in range [1,200].\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\nThere are N students", "\nUse Call-Based format\n\n\n\n    def findCircleNum(self, M: List[int]) -> int:\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\nThere are N students in a class.\n\n\n\n\n\nThere are N", "\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def findCircleNum(self, M: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\n\nThere are", "\nUse Call-Based format\n\n\n    def findCircleNum(self, M: List[List[int]]) -> int:\n\n\n\n\n   \n\n\nThe number of students in a class is in the total number of friend circles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe number of cir", "\n\n\n\nUse Call-Based format\nThere are N students in a class\nThere are N students in a class\n\n\n    def findCircle(self, M: List[int]) -> int:\n\n\n\n\n\n       \n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\nThere are", "\n\nUse Call-Based format\n\n\n    def findCircleNum(self, M):\n        \"\"\"\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nThe 1st and 1st students are direct friends.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\nThere are N", "\n\n\n\nUse Call-Based format\nThere are N students in a class.\nThere are N students in a class.\nUse Call-Based format\n\n\n    \n\n\nThere are N students in a class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class.\n\n\n\n\nThere are", "\nUse Call-Based format\nThis function is called by the class's implementation\nUse Call-Based format\n\n\nUse Call-Based format\n\nThere are N students in a class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\nThere are", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\nThere are", "\nUse Call-Based format\nUse Call-Based format\n\n    def findCircleNum(self, M: List[List[int]]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are N students in a class", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nThere are N students in a class\nThere are N students in a class\n\n\n\n\n\n\nThere are N students in a class.\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\nThere are N students in a class\n\n\n\n\nThere are N students in", "\nUse Call-Based format\n\n\n    def findCircleNum(self, M: List[List[int]]) -> int:\n\n\n\n\n\n   \n    #!python\n\n\nThere are N students in a class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nThere are N"], "prompt": "\nQUESTION:\nThere are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.\n\n\n\nGiven a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.\n\n\nExample 1:\n\nInput: \n[[1,1,0],\n [1,1,0],\n [0,0,1]]\nOutput: 2\nExplanation:The 0th and 1st students are direct friends, so they are in a friend circle. The 2nd student himself is in a friend circle. So return 2.\n\n\n\nExample 2:\n\nInput: \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\nOutput: 1\nExplanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.\n\n\n\n\nNote:\n\nN is in range [1,200].\nM[i][i] = 1 for all students.\nIf M[i][j] = 1, then M[j][i] = 1.\nclass Solution:\n    def findCircleNum(self, M: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}