{"3438": {"code": ["```\n\n## Property of the random tests\n\n\n\n\n### Properties of the random tests\n\n### Properties of the total tests\n\n### Features of the total tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n`, a random `start value` in the range", "```\n\n\n\n\n\n\n    \n         \n                            ____________________\n                            Big Total:    717\n                            ____________________\n\n\n\n### Properties of the random tests\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n### Features of the random tests\n\n### Features of the random tests\n`,", "```\n\n\n    In fact:\n     \n\n\n\n### Property of the random tests\n\n### Properties of the random tests\n\n### Property of the random tests\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n### The above examples\n###\n\nOutput:\n717\n\n###\n\n`, a random", "```\n\n\n   \n\n\n\n### Properties of the random tests\n###\nTotal Sums\n###\nTotal Sums\n###\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Properties of the random tests\n###\n\nExamples:\n\n-\n\n`, a random `", "```\n\n\n\n\n\n\n\n\n\n\n### Property:\n\n        Primes:\n            Primes:\n            Primes:\n            Primes:\n            Primes:\n            Primes:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Statistics of the random tests\n\n### Statistics:\n\n\n`,", "```\n\n\n\n\n\n\n### Properties of the random tests\n\n### Methods of the random tests\n\n### Features of the properties of the random tests\n\n### Results\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Properties of the random tests\n\n```\n\n\n\n`, a random `start value", "```\n\n\n\n\n\n\n\n\n\n\n\n\n\nSum:\n    717\n\n  `start_value`\n\n \n \n \n\n```\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nThe above features of the random tests are classified as the following:\n\n```\n\n`, a random", "```\n\n\n\n\n\n\n\n### Properties of the random tests\n###\nProperty is a property\n\n### Property Description\n\nProperty Description\n\nExample:\n\n### Property Description\n\n         \n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`, a random `start value` in the", "```\n\n\n\n\n\n\n\n\n\n\n\n\n            Total:     717\n            Big Total:    717\n\n### Methods\n\n### Methods\n\n### Methods\n\n### Methods\n\n### Methods\n\n### Methods\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n`, a random `start", "```\n\n### Properties of the random tests\n\n### Property of the random tests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Total Sums\n\n### Property of the random tests\n\n### Property of the random tests\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n`, a random `start value` in the range", "```\n\n\n\n\n\n\nRandom tests\n['5', '0', '1', '9']                           ____________________\n                            Big Total:    717\n\n### Property:\n\n \n\n\n \n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n`, a random `start", "```\n\n\n   \n\n\n\n         \n\n        See:\n\n    :class:`RandomTest`\n\n### Properties of the random tests\n\n### Properties of the random tests\n\n### Property\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n`, a random `start value` in the range `", "```\n### Property of the random tests\n### Property of the random tests\n### Property of the random tests\n\n\n\n\n\n\n\n\n\n\n\n\n                              Big Total:     717\n                            ____________________\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### The following features of the random tests\n\n###`, a", "```\n\n\n\n\n\n\n   \n   \n   \n   \n\n       \n   \n      717\n        1\n\n    2\n    4\n    3\n    5\n   \n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Properties of the random tests\n###\n\nExamples:\n\n\n\n`, a random `start value`", "```\n\n\n\n\n\n\n\n\n\n\n \n\n    Example:\n\n```\n\n        Todo:\n\n\n                            ____________________\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n    The following examples are explained:\n\n```\n\n\n\n\n\n`, a random `start value` in the range `", "```\n\n\n\n\n\n\n\n\n\n\n\n  The following are examples:\n\n```\n\n\n                              Big Total:    717\n                            ____________________\n                              Big Total:    717\n\n```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Random tests:\n\n\n\n`, a random `start value` in", "```\n\n\n\n\n\n\n \n\n       \n   \n    ____________________\n      ____________________\n          Big Total\n      ____________________\n\n\n\n       \n\n\n\n    The above lines are:\n\n```\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Properties of the random tests\n\n`, a", "```\n\n\n\n\n\n\n \n \n \n\n\n\n\n      \n          k = 717\n          start_value = 717\n          k = 717\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example\n\n### Hard Example\n\n\n\n\n`, a random `start value` in the range `", "```\n\n\n\n\n\n\n\n\n\nThe following examples are used:\n\n```\n\nBig Total:    717\n\n\t\tBig Total:    717\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n    \"\"\"\n\n    I've been able to explain the following examples:\n\n`, a", "```\n\n\n\n\n\n\n\n\n\n\n\n### Property of the random tests\n\n### Statistics of the random tests\n\n### Property of the random tests\n\n### Sums\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### End of the example:\n\n### Methods of the random tests\n\n\n\n\n### Methods of the`,"], "prompt": "\nQUESTION:\nIf we multiply the integer      `717 (n)` by `7 (k)`, the result will be equal to `5019`.\n\nConsider all the possible ways that this last number may be split as a string and calculate their corresponding sum obtained by adding the substrings as integers. When we add all of them up,... surprise, we got the original number `717`:\n\n```\nPartitions as string                Total Sums\n['5', '019']                        5 + 19 = 24\n['50', '19']                       50 + 19 = 69\n['501', '9']                      501 + 9 = 510\n['5', '0', '19']                5 + 0 + 19 = 24\n['5', '01', '9']                 5 + 1 + 9 = 15\n['50', '1', '9']                50 + 1 + 9 = 60\n['5', '0', '1', '9']         5 + 0 + 1 + 9 = 15\n                            ____________________\n                              Big Total:    717\n                            ____________________\n```\nIn fact, `717` is one of the few integers that has such property with a factor `k = 7`.\n\nChanging the factor `k`, for example to `k = 3`, we may see that the integer `40104` fulfills this property.\n\nGiven an integer `start_value` and an integer `k`, output the smallest integer `n`, but higher than `start_value`, that fulfills the above explained properties.\n\nIf by chance, `start_value`, fulfills the property, do not return `start_value` as a result, only the next integer. Perhaps you may find this assertion redundant if you understood well the requirement of the kata: \"output the smallest integer `n`, but higher than `start_value`\"\n\nThe values for `k` in the input may be one of these: `3, 4, 5, 7`\n\n### Features of the random tests\n\nIf you want to understand the style and features of the random tests, see the *Notes* at the end of these instructions.\n\nThe random tests are classified in three parts.\n\n- Random tests each with one of the possible values of `k` and a random `start_value` in the interval `[100, 1300]`\n- Random tests each with a `start_value` in a larger interval for each value of `k`, as follows:\n - for `k = 3`, a random `start value` in the range `[30000, 40000]`\n - for `k = 4`, a random `start value` in the range `[2000, 10000]`\n - for `k = 5`, a random `start value` in the range `[10000, 20000]`\n - for `k = 7`, a random `start value` in the range `[100000, 130000]`\n- More challenging tests, each with a random `start_value` in the interval `[100000, 110000]`.\n\n\n\nSee the examples tests.\n\nEnjoy it.\n\n# Notes:\n\n- As these sequences are finite, in other words, they have a maximum term for each value of k, the tests are prepared in such way that the `start_value`  will always be less than this maximum term. So you may be confident that your code will always find an integer.\n\n- The values of `k` that generate sequences of integers, for the constrains of this kata are: 2, 3, 4, 5, and 7. The case `k = 2` was not included because it generates only two integers.\n\n- The sequences have like \"mountains\" of abundance of integers but also have very wide ranges like \"valleys\" of scarceness. Potential solutions, even the fastest ones, may time out searching the next integer due to an input in one of these valleys. So it was intended to avoid these ranges.\n\nJavascript and Ruby versions will be released soon.\ndef next_higher(start,k):\n\t\nUse Call-Based format\nANSWER:\n"}}