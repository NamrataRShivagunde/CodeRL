{"4879": {"code": ["\n\ncount_perms(matrix)\n\n\n\n\n\n\nA = 2x2\nA = 3x3\nA = 3x3\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,2,3]]\nA = [[2,3,3]]\n\n\n\n\n\nA = [[1", "\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\ncount_perms(matrix)\n\nANNOUNCEMENT:\n\ncount_perms(matrix)\n\nANNOUNCE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,2,3],\n     [3,3]]\n\n\nA", "count_perms(matrix):\n\t\"\"\"\nCount the number of matrices that may be generated\n\n\n\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,2,2]]\nA = [[1,2]]\n\n\n\nA", "\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\nA = [[1,1,1,1]]\n```\nA = [[1,1,1]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na  b  c  d    c ", "\n\n\n\n\ncount_perms(matrix):\n\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\nA = [1,1,1]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,2,2]]   #a 2x2 square matrix\n\n\n\n\nA = [[1", "\ncount_perms(matrix)\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\nA = [[1,1,1],\n     [1,1,1]]\n```\n\n\n\n\n\n\n\n\n\n\nb  c  d    c  d\n\n\nA", "\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\nA = [[1,2,3],\n     [2,2,3]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,1,1], [2,2,2]]\n\n\n\n\nA = [[1,", "count_perms(matrix):\n\n\n\n\n\n\n\n\n1 \u2264 1 \u2264 1 \u2264 1\n2 \u2264 2 \u2264 2\n2 \u2264 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,1,1]]\n\n\n\nA =", "count_perms(matrix):\n\t\"\"\"Count the number of perms.\n\n\n\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\ncount_perms(matrix)\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,2,3]]\n\n\n\nA = [[", "\ncount_perms(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\nA   = [1,2,3,4,5]\nA   = [2,3,3,3]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [1,2,3]\n\n\nA", "\n\n\n\ncount_perms(matrix)\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nA = [1,2,3,3]\n\n\n\n\n```\n", "\n\n\n\ncount_perms(matrix)\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,2,3]]\n```\ncount_perms(matrix)\n\n\n\n\n\n\n\n\nA = [[1,2,3]]", "\n\t\n\ncount_perms(matrix):\n\t\n\n\n\n\n\n\n\ncount_perms(matrix):\n\t\n\n\ncount_perms(matrix, count_perms)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2x2 square matrix with number 3 twice\n2x2 rectangle matrix with number 3 twice\n\n\n\nA = [[[1", "\ncount_perms(matrix)\n\n\n\n\n\n\ncount_perms(matrix)\n\nThis function calculates the total number of possible permutations of a matrix\n\nNOTE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,2,2],\n     [2,2,2]]\n\n\n\nA = [[", "\n\tcount_perms(matrix)\n\t\n\n\n\n\n\n\n\n\ncount_perms(matrix)\n\nExample:\n\ncase one\n```\nA = [[1,1,1]]\n```\nA = [[2,2,3]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[[1,", "count_perms(matrix)\n\n\n\n\n\n\n\n1 \u2264 1\n2 \u2264 2\n3 \u2264 2\n2 \u2264 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [1,1,1]\nA = [1,1]\n\n\nA", "\n\n\n\n\n\n\n\n2 \u2264 n \u2264 m\n2 \u2264 n \u2264 9\n\n\n\n\n\n\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\nA = [1,2,3,3]\nA = [1]\n\n\n\n\n", "\n\n\n\ncount_perms(matrix):\n\t\nUse Call-Based format\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\ncount_perms(matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = 2x2 square matrix\nA = [2,2,2]\n\n\n\n\n\n\nA = [", "\ncount_perms(matrix)\n\n\n\n\n\n\ncount_perms(matrix)\n\nA = [3,2,3,3,3]\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [[1,1,1],\n     [2,2,2]]\n\n\n\n\n\n\nA =", "count_perms(matrix):\n\t\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\nA = [1,2,3,4,5,6,3,3,4,5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 \u2264 m \u2264 n\n\n\n\nA = ["], "prompt": "\nQUESTION:\nWhen we have a 2x2 square matrix we may have up to 24 different ones changing the positions of the elements.\n\nWe show some of them\n```\na  b   a  b    a  c    a  c   a  d    a  d    b  a    b  a\nc  d   d  c    d  b    b  d   b  c    c  b    c  d    d  c\n```\nYou may think to generate the remaining ones until completing the set of 24 matrices.\n\nGiven a certain matrix of numbers, that may be repeated or not, calculate the total number of possible matrices that may be generated, changing the position of the elements.\n\nE.g:\nCase one\n```\nA = [[1,2,3],\n     [3,4,5]]   #a 2x3 rectangle matrix with number 3 twice\n```     \ngenerates a set of ```360``` different matrices\n\nCase two\n```\nA = [[1,1,1], \n     [2,2,3], \n     [3,3,3]]\n```\ngenerates a set of ```1260``` different matrices.\n\nCase three\n```\nA = [[1,2,3],\n     [4,5,6],\n     [7,8,9]]\n```     \ngenerates a set of ```362880``` different matrices\n\nThis kata is not meant to apply a brute force algorithm to try to count the total amount of marices.\n\nFeatures of The Random Tests\n``` \nnumber of tests = 100\n2 \u2264 m \u2264 9\n2 \u2264 n \u2264 9\n``` \nEnjoy it!\n\nAvailable only in Python 2, Javascript and Ruby by the moment.\ndef count_perms(matrix):\n\t\nUse Call-Based format\nANSWER:\n"}}