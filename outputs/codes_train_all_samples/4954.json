{"4954": {"code": ["\n\n\n\n\n\n\nadd_word(\"b\") == False\nadd_word(\".\") == True\nadd_word(\".\") == True\n\n\n\ndef __init__(self):\n\n:\n\n\n\n:\n:\n*\n\n:\n* `add_word`\n\n\n\n\n\n:\n\n\n:\n\n## Examples\n```python", "\n\n\n\n\nUse Call-Based format\n\n\nadd_word(\"bad\")\nadd_word(\"dad\")\nadd_word(\"mad\")\nadd_word(\".\")\n\n\n\n\n:\n\n\n\n\t\n:\n\n\n:\n* `import_word`\n\n\n\n\n\naddWord:\nadd a word,\n*\n:\n", "\n\n\n\n\n\n\nadd_word(\"b\") == False\nadd_word(\"b\") == True\n\n\ndef __init__(self):\n\t\nUse Call-Based format\n\n:\n\n\n\n\n:\n* `__init__` which is called automatically\n\n\n:\n\n\n\n\naddWord(\"a\") == True\naddWord(\".\"\n\n", "\n\n\n\n\n\n\n\n\n## Examples\n```python\n\nuse Call-Based format\n\n\t\n\n\n\ndef __init__(self):\n\t\n\n\t\n\n:\n\n* `getWord` which returns a word\n* `get_word` which returns a word\n\n\n:\n\n\n\n\n\n\n\n\naddWord:\nAdd a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nadd_word(\"bad\")\nadd_word(\"mad\")\nadd_word(\".\")\n\n\ndef __init__(self):\n\n:\n\n\n\t\n:\n\t\n:\n\n\n\n:\n\naddWord:\n\nadd_word:\n\n:\n\naddWord", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Python format\n\n\n\ndef __init__(self):\n\t\n\t\n:\n\nUse Python format\n* `getWord` which returns a word\n* `get_word` which returns a word\n\n\n:\n\n\n\n\n\n\n\n\n### Examples\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\t\nUse Python format:\n\n\n\n\t\n:\n\nUse Python-Based format\n* `getWord` which returns a string containing a word\n* `get_word` which returns a string\n\n\n:\n\n\n\n\n\n\n\n\n## Examples\n```python", "\nUse Call-Based format\n\n\n\n\n\n\n\n## Examples\n\n\n\n:\n\n\n\n\ndef __init__(self):\n\t\n\t\nuse Call-Based format\n:\n\nUse Python 2 format\n* `search_word` which searches a word\n\t\n:\n\n\n\n\n\nadd_word\nadd_word\n\n:\n\n*", "\n\n\n\n\n\n\n\n\n\n\t\nUse Python format\n\n\ndef __init__(self):\n\t\n\t\nUse Python format\n:\n\n* `getWord` which returns a word,\n* `get_word` which returns a word\n\n\n:\n\n\n\nUse Call-Based format\n\n\naddWord:\n\nsearch:\n\n\n##", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n:\n\n\ndef __init__(self):\n\t\n\t\n:\n\nUse Python-Based format\n* `getWord` which returns a string containing the word.\n* `search` which searches a regular expression string.\n\n\n:\n\n\n\n\n\naddWord:\n\n\n\n    _", "\n\n\n\n\n\n\nadd_word(\"b\") == True\nadd_word(\"b\") == False\nadd_word(\"m\") == True\n\n\n\n\t:\n\n\ndef __init__(self):\n\t\n\n\t\n:\n\n\n:\n* `list` which returns a list of items\n\n\n\n:\n\n:\n\n* `addWord", "\n\nUse Call-Based format\n\n\n\n\n\nadd_word(\"bad\") == False\nadd_word(\"b\") == True\n\n\ndef __init__(self):\n\t\n:\n\n\n\n\t\n:\n\n\n:\n\n*\n* `add_word` which adds a word\n* `search`\n\n:\n\n\n## Examples\n\n*", "\n\n\n\n\nUse Call-Based format\n\n\nadd_word(\"a\") == \"a\"\nadd_word(\"b\") == \"b\"\n\n\ndef __init__(self):\n\t\t:\n\n\n\n\n:\n\n\nUse Python format\n\n:\n\n*\n\n\n:\naddWord(\"a\")\n*\n:\n\n* `add", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nadd_word(\"bad\") == False\nadd_word(\"mad\") == False\n\n\ndef __init__(self):\n\t\n\n:\n\n\n\n\n:\n\n\n:\n\n* `setWord` which sets a word\n\n\n\n\n\n\n\n\n\n    ## Examples\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n## Examples\n\n\n\nUse Python3 format\n:\n\nUse Python2 format\n\ndef __init__(self):\n\t\n\n\n:\n\n*\n\nUse Python3 format\n:\n\n* `getWord`\n\n\n\n\n\n\n\n\n# Examples\n```python\n\n* `", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Python 3.2 format:\n\nUse Python 3.5 format\n\ndef __init__(self):\n\t\n\n\t\nUse Python 2.3 format\n:\n\n\n:\n* `load` which loads a data structure\n\n## Examples\n\n\n\n\n\n\n\n\naddWord:", "\n\n\n\nUse Call-Based format\n\n\nadd_word(\"b\")\nadd_word(\"a\")\nadd_word(\".\")\n\n\ndef __init__(self):\n\t\n:\n\n\n\n\n:\n* `getWord` which returns a word\n\n:\n\n\n\n:\n\naddWord:\naddWord\naddWord:\n:\n", "\n\n\n\n\n\n\nadd_word(\"b\") == True\nadd_word(\".ad\") == True\nadd_word(\".ad\") == True\n\n\ndef __init__(self):\n\t\n\n:\n\n\n\n\t\n:\n\n\n:\n\n* `load` which loads a data structure\n\n\n\n\n\n\n\n\n\naddWord:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n* Example\n*\n\n## Examples\n```python\n\n\n\n:\n\n\n\n\n\n:\n\n*\n\nUse Python-based format\n:\n* `getWords` which returns a list of all words\n\n\n\n\n\n\n\n\t\tDesign a data structure that supports only", "\n\n\n\n\n\n\nadd_word(\"bad\") == False\nadd_word(\".ad\") == False\nadd_word(\".\") == True\n\nsearch(\".\") == False\n\n\n\n\n:\n\n\ndef __init__(self):\n\t\t:\n:\n\n\n:\n\n\n\n\n\n\n\n\n## Examples:\n\n\n## Examples"], "prompt": "\nQUESTION:\nDesign a data structure that supports the following two operations:\n\n* `addWord` (or `add_word`) which adds a word,\n* `search` which searches a literal word or a regular expression string containing lowercase letters `\"a-z\"` or `\".\"` where `\".\"` can represent any letter\n\nYou may assume that all given words contain only lowercase letters.\n\n## Examples\n```python\nadd_word(\"bad\")\nadd_word(\"dad\")\nadd_word(\"mad\")\n\nsearch(\"pad\") == False\nsearch(\"bad\") == True\nsearch(\".ad\") == True\nsearch(\"b..\") == True\n```\n\n**Note:** the data structure will be initialized multiple times during the tests!\ndef __init__(self):\n\t\nUse Call-Based format\nANSWER:\n"}}