{"2469": {"code": ["\nUse Call-Based format\n\n\n    def checkIfExist(self, arr: List[int]):\n        return self.checkIfExist(arr)\n\n\n\n\n   \n              \n        \n\n\n\n\nUse Variable-Based format\nUse Python Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array arr of integers, check if", "\n\n\n\n        return self.checkIfExist(arr)\n\nUse Call-Based format\nUse Call-Based format\n\n   \n        return self.checkIfExist(arr)\n\n\u00a0\n\nUse Instance-Based format\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array arr of integers :\n\n\n\nGiven an array arr", "\n\n\n\n        return self.checkIfExist(arr)\n\n\n\n\n   \n        return self.isExist(arr)\n\n          \n    return self.checkIfExist(arr)\n\n\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nN = 2 * arr[i]\n\n\n\nN =", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n   \n        return self.arr.index(arr) >= arr.index(arr[0])\n\n\u00a0\n\nReturns:\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN = 2 * arr[i]\n\n\nGiven an", "\nUse Call-Based format\n\n\n    self.checkIfExist(arr)\n\n\n\n\n   \n        return self.checkIfExist(arr)\n\n\n#\n        \n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nN = 2 * M\n\n\n\nGiven an array arr of integers", "\nUse Call-Based format\n\n\n    def checkIfExist(self, arr: List[int]) -> bool:\n\n\n\n\n\n\n        return True\n\n   \n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n2 * M == 10\n\n\nGiven an", "\nUse Call-Based format\n\n\n        return self.checkIfExist(arr)\n\n\n\n\n           return self.checkIfExist(arr)\n\n\n   \n        return False\n\n\n\n\n\nUse Method-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven an array arr of integers,\n\n\n\nGiven an array arr", "\nUse Call-Based format\nUse Call-Based format\n\n\n        pass\n\n\n\n\n   \n        return self.checkIfExist(arr)\n\n\n   \n        pass\n\n\nGiven an array arr of integers, check if there exists two integers N and M\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array arr of integers", "\nUse Call-Based format\n\n\n    def checkIfExist(self, arr: List[int]) -> bool:\n        return True\n\n\n\n\n   \n        return True\n        \n\n\n\n          \n        return True\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nN = 2 * M\n\n\nGiven an array", "\nUse Call-Based format\n\n\n        pass\n\n\n\n1 <= arr[i] <= 10^3\n-10^3 <= arr[j] <= 10^3\n\n  ,        return False\n\n\n\n\n\nUse List-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array arr of integers, check if it exists\n\n\nGiven an", "\nUse Call-Based format\n\n\n    return self.checkIfExist(arr)\n\n\n\n1 <= arr.length <= 5\n1 <= arr[i] <= 10\n\n\u00a0\n\n   :\n       \n        return True\n\n\n   \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nGiven an array arr of integers, check", "\nUse Call-Based format\n\n\n        self.checkIfExist(arr)\n        \nUse Call-Based format\n\n\n\n   \n        return True\n\n   \n\n\nGiven an array arr of integers, check if there exists two integers N and M.\n\n    \n\n\n\n\n\n\n\n\n\n\n\nN = 2 * M\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    return self.checkIfExist(arr)\n\n\n\n\n\n        return self.checkIfExist(arr)\n        \n\nUse Python-Based format\n\n        return True\n\n\n\n   \n\nUse Python format\n\n\n\n\n\n\n\n\n\nGiven an array arr of integers,\n\n\nGiven an array arr of integers", "\nUse Call-Based format\n\n\n    def checkIfExist(self, arr: List[int]) -> bool:\n        return self.checkIfExist(arr)\n\n\n\n\n   \n        return True\n        \n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nN = 2 * arr[i]\n\n\n\nGiven an array arr", "\nUse Call-Based format\n\n\n        self.checkIfExist(arr)\n\n\n\nInput: arr is an array of integers\nOutput: true\n\n\u00a0\n\n  ,\n        return True\n\n\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nN = 2 * arr[i]\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    def checkIfExist(self, arr: List[int]) -> bool:\n        \nUse Call-Based format\n\n\n\n   \n       \n\n\nGiven an array arr of integers:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n2 * N\n\n\n\nGiven an array arr", "\nUse Call-Based format\n\n\n        arr = [3,2,5,7]\n        \nUse Call-Based format\n\n\n\n   \n       \n        return True\n        \n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nGiven an array arr of integers, check if there exists two integers N and M\n\n\nGiven", "\nUse Call-Based format\n\n\n    def checkIfExist(self, arr: List[int]) -> bool:\n        return self[arr[i]]\n\n\n\n\n   \n              \n\nGiven an array arr of integers:\n\n           \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven an array arr of integers N and", "\nUse Call-Based format\nUse Call-Based format\n\n    def checkIfExist(self, arr: List[int]) -> bool:\n        return self[arr[i]]\n\n\n\n\n\n\n              \n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nN = 2 * M\n\n\nGiven an array arr of", "\nUse Call-Based format\n\n\n        arr = [1,2,3]\n        \nUse Call-Based format\n\n\n\n   ) -> bool:\n        return True\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven an array arr of integers,"], "prompt": "\nQUESTION:\nGiven an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).\nMore formally check if there exists\u00a0two indices i and j such that :\n\ni != j\n0 <= i, j < arr.length\narr[i] == 2 * arr[j]\n\n\u00a0\nExample 1:\nInput: arr = [10,2,5,3]\nOutput: true\nExplanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.\n\nExample 2:\nInput: arr = [7,1,14,11]\nOutput: true\nExplanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.\n\nExample 3:\nInput: arr = [3,1,7,11]\nOutput: false\nExplanation: In this case does not exist N and M, such that N = 2 * M.\n\n\u00a0\nConstraints:\n\n2 <= arr.length <= 500\n-10^3 <= arr[i] <= 10^3\nclass Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}