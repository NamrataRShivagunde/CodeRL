{"3706": {"code": ["\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(2) == 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n# All numbers in the `03-09` range\n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(n) == n\n```\n\nThe number of layers required to store up to `n`\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(2) == 2\n```\n\n\n\n\n\n```python", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlayers(1) == 2\nlayers(2) == 3\nlayers(3) == 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nn = 3\n```\n\n\n\n```", "\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nlayers(1) == 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(1) == 2\n```\n\n\n\n\n\n\n\n\n\n```python\nlayers(1) == 2\n```\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n```python\nlayers(n) == n\n```\n\n\n\n\n\n\n\n\\n\\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(2) == 2\n```\n\n\n\n\n\n\n```python\n# L9\n\n\n\n```", "\n\n\n\n\n\n\n\n\n\n1 - 2\n2 - 3\n4 - 5\n5\n6 7 8\n7\n\n\n\n\n```python\nlayers(10) == 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(1) == 2\n```\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n**Number-Based format**\n\nn = 9\n\nUse Call-Based format\n\n```python\nn == 9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#!/bin", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n**Base idea:**\nUse Call-Based format\n\n\n\n```python\n# -\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n```python\n# -\n# -", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```python\nlayers(1) == 1\nlayers(2) == 2\n```\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n2\n\n\n```python\n\nn = 5\n\n```\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n```python\nlayers(n) == 10\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Fair warning:**\n\n\n\n\n\n```python\nlayers(1) == 1\n```\n\n\n\n\n```python\n#``", "\n\n\n\n```python\nlayers(10) == 10\n```\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n# n = 10\n\n#\n\n#\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n```python\nlayers(1) == 1\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```python\nlayers(1) == 1\n```\n\n\n\n\n```python", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n```python\nlayers(10) == 1\n```\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#if n % 10 ==", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\nlayers(n) == n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(4) == 5\n```\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n1 1 2 3 4 5 6 7 8 8 9\n\n2 1 2 3 3 4 4 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(2) == 3\n```\n\n\n\n\n```", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n == 1\n\n```python\nlayers(2) == 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(2) == 1\n```\n\n\n\n\n\n```python\nlayers(1) == 2\n```\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n`python\n#\n\n\n```python\n\n0\n\n\n\n\n\n```python\nlayers(2) == 2\n```\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(10) == 2\n```\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(3) == 3\n```\n\n\n\n\n\n\n\n\n\n```python\nlayers(2) == 2\n```\n\n\n\n\n\n\n```python\n\n\n\n\n\n```python\n# The", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```python\nlayers(1) == 1\nlayers(5) == 2\nlayers(5) == 3\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#\n\n```python\n#\n#", "\nUse Call-Based format\n\n\n\n\n\n\n\n```python\nlayers(9) == 6\n```\n\n\n\n\n\n\n\n```python\nlayers(10) == 5\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nlayers(5) == 5\n```\n\n```"], "prompt": "\nQUESTION:\nAssume that you started to store items in progressively expanding square location, like this for the first 9 numbers:\n\n```\n05 04 03\n06 01 02\n07 08 09\n```\n\nAnd like this for the expanding to include up to the first 25 numbers:\n\n```\n17 16 15 14 13\n18 05 04 03 12\n19 06 01 02 11\n20 07 08 09 10\n21 22 23 24 25\n```\n\nYou might easily notice that the first - and innermost - layer containes only one number (`01`), the second one  - immediately around it - contains 8 numbers (number in the `02-09` range) and so on.\n\nYour task is to create a function that given a number `n` simply returns the number of layers required to store up to `n` (included).\n\n```python\nlayers(1) == 1\nlayers(5) == 2\nlayers(25) == 3\nlayers(30) == 4\nlayers(50) == 5\n```\n\n**Fair warning:** you will always and only get positive integers, but be ready for bigger numbers in the tests!\n\nIf you had fun with this, also try some follow up kata: [progressive spiral number branch](https://www.codewars.com/kata/progressive-spiral-number-branch/) and [progressive spiral number distance](https://www.codewars.com/kata/progressive-spiral-number-distance/).\n\n*[Base idea taken from [here](http://adventofcode.com/2017/day/3)]*\ndef layers(n):\n\t\nUse Call-Based format\nANSWER:\n"}}