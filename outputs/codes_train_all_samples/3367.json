{"3367": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n    -> 3\n     \n    1 -> 1\n     \n    2 -> 3\n\n\t\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a side length `n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n     \n    1 -> 6\n     \n    2 -> 6\n    \n    3 -> 4\n    \n    4 -> 0\n    \n\n\t\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    0 -> 0\n\n\n\nGiven a side length `", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n    0 -> 2\n     \n    6 -> 6\n    \n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    -100 -> 0\n    \n   \n\nGiven a", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n    10 -> 20\n     \n    20 -> 2\n     \n    1 -> 6\n     \n   \n\t\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n0 -> 0\n\n\n\nGiven a side length `n`, travel", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n    0 -> -100\n\n\n\t\nUse Call-Based format\n\n    -> 0\n\n\n\n\n\n\n    2 -> 8\n     \n    3 -> 6\n\n\n\n\n\n   \n\nGiven a side length `n`,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    5 -> 5\n     \n    4 -> 3\n     \n    5 -> 6\n     \n    6 -> 7\n     \n    6 -> 7\n    \n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n    Given a side length `n`,", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n    1 -> 6\n     \n    2 -> 6\n     \n    5 -> 6\n    \n\n\t\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    0     \n     \n   \n\nGiven a side length `n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n    -> 1\n    \n    -2 -> 2\n     \n    2 -> 2\n     \n    3 -> 6\n     \n    1 -> 6\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    0 -> 0\n\n   \n\nGiven a side length", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n    1 -> 1\n     \n    2 -> 1\n     \n    3 -> 2\n    \n    4 -> 5\n     \n   \n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n\n\n    Given a side length `n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n    -10 -> 6\n     \n    5 -> 6\n     \n    6 -> 2\n     \n    5 -> 6\n    \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a side length `n`\n\n\n\n\n\nGiven a side length", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n    \n    0 -> 0\n    \n    1 -> 0\n     \n    2 -> 0\n    \n   \n\t\n\n\n\n\n\n\n\n\n\n\n\n\n    1 -> 1\n\n   \n\n\n    Given a", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n    10 -> 5\n    \n    0 -> 3\n    \n\n\t\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    1 -> 0\n     \n    2 -> 0\n\n\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n    \n    0 -> 0\n\n\n\t\n\n    routes(n)\n\t\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n    -1 -> 3\n     \n   \n\n\n    Given", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n    0 -> 6\n\n    1 -> 6\n     \n    2 -> 6\n     \n    6 -> 6\n    \n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n    0 -> 0\n     \n   \n\t\n\n    Given", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n    1 -> 3\n    \n    2 -> 5\n     \n    3 -> 6\n     \n    6 -> 6\n\n\t\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n    0 -> 0\n\nGiven a side", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    10 -> -10\n    \n    10 -> 4\n    \n    4 -> -2 -> -2\n    \n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n    Given a side length `n`,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    1 -> 5\n    \n    2 -> 5\n    \n    6 -> 6\n     \n    5 -> 6\n\n\n\t\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n    1 -> 0\n    \n   \n\nGiven a side length `", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n    4 -> 2\n    \n    5 -> 5\n    \n    5 -> 0\n    \n    0 -> 3\n\n\n\n\n\n\n\n\n\n\n\nThe number of routes is\n\n    0 -> 0\n\n\n\n\n\n    Given", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    6 -> 8\n    \n    4 -> 6\n     \n    5 -> 4\n     \n    4 -> 4\n     \n    5 -> 4\n\n\n\n\n\n\n\n\n\n\n\n\nhow many ways are there?\n\n\n   \n\n\n\n    Given a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n    def route(n):\n\t\n\n\n   \n\t\n\n    routes(n)\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    Given a side length `n`,"], "prompt": "\nQUESTION:\nGiven a side length `n`, traveling only right and down how many ways are there to get from the top left corner to the bottom right corner of an `n by n` grid?\n\nYour mission is to write a program to do just that!\n\nAdd code to `route(n)` that returns the number of routes for a grid `n by n` (if n is less than 1 return 0).\n\nExamples:\n    \n    -100 -> 0\n    \n    1 -> 2\n     \n    2 -> 6\n     \n    20 -> 137846528820\n    \nNote: \nyou're traveling on the edges of the squares in the grid not the squares themselves.\n\nPS.If anyone has any suggestions of how to improve this kata please let me know.\ndef routes(n):\n\t\nUse Call-Based format\nANSWER:\n"}}