{"2587": {"code": ["\nUse Standard Output format\n\n\n\nUse Standard Input format\n\n\nUse Standard Output format\n\nUse Standard Input format\n\nUse Standard Input format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    handle_data(self, data)\n\n  \n  \n  \n  \n  \n  \n\n", "\nUse Standard Output format\n\n\n>>> Data\n>>> \n\n>>> \n\n>>> \n\n\n\n\n\n\n\n\nUse Standard Output format\n\n\n\n    handle_data(self, data)\n\n>>>\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>>\n\n>>> Data\n>>>\n>>>\n", "\nUse Standard Input format\n\n\n>>> Data\n>>>\n\n>>>\n\n>>>\n\n>>>\n\n\n\n\n\n\nUse Standard Output format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n==", "\nUse Standard Input format\n\n\n\n\n\n\n\n\n>>>\nData                 \nMy Data\n>>>\n\n>>>\nData\n\n\n\n\n\n.handle_data(data)\n\n.handle_data(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>>\nData                 \n\n>>>\nComment    \n\n\n\n===", "\nUse Standard Input format\n\n\n\n\n\n\n\n\n>>> (1, 1)\n>>> [1, 1]\n>>> [1, 1]\n>>> [1, 1]\n>>>...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n\n\n\n        print \"Please use the function description above", "\nUse Standard Input format\n\n\n\n\n\n\n\n\nUse Standard Output format\n\n=====Problem Statement=====\n*This section assumes you are using standard input format\n\n>>> Data\nMy Data\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n==> Function Descriptions ==\n\n", "\n\n\n>>> data\n>>>\n>>>\n>>>\n>>>\n>>> Data\n>>>\n>>>\n\n\n\n\n\n\n\n\nUse Standard Output format:\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====", "\nUse Standard Input format\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n*The function description is explained in HTML Parser - Part 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>>\n\n\n\n\n\n\n\n\n\n    handle_data(self, data)\n\n\n\n>>>\n\n    {", "\nUse Standard Input format\n\n\n\n\n\n\n\n\n\nUse Standard Output format\n\n\n\n\n>>> Data\n>>>\n>>>\n\n>>>\n\n>>>\n\n>>>\n\n>>>\n\n>>>\n>>>\n\n\n\n\n\n\n\n>>>\n\n\n\n\n\n\n>>>\n\n\n\n\n\n\n\n\n\n\n\n=====Output Format=====\n*This", "\nUse Standard Output format\n\n\n>>> Data\n>>>\n\n\n\n\nUse Standard Output format\n\nUse Standard Input format\n\nUse Standard Input format\n\nUse Standard Input format\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n", "\nUse Standard Input format\n\n\n>>> Data\n>>> Data\n\n\n\nUse Standard Input format\n\n\n\n\n\nUse Standard Input format\n\n\n\n\n\n\n    handle_data(data)\n    \n\n\n\n\n>>> Data\n  \n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n\n", "\nUse Standard Output format\n\n\n\n\n\n\n\n\nUse Standard Output format\n\n>>> Data\n>>> Data\n>>> Data\n>>>\n\n\n\n\n\n\n    handle_data(self, data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>> Data\n>>> Data\n\n\n>>> data\n>>> [Comment_mult", "\nUse Standard Input format\n\n\n>>> Data\nMy Data\n>>>\n\n\n\n\n\n\nUse Standard Input format\n\n\n\n>>> Data\n>>> \n\n\n>>> \n  \n\n>>> \n\n\n\n>>>\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n>>>\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n", "\nUse Standard Input format\n\n\n>>> Data\n>>> Data\n>>> Data\n\n\n\n\n\n\n\nUse Standard Output format\n\n=====Function Descriptions=====\n*Use Standard Input format\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>> Comment\n>>> Data\n>>> Comment", "\nUse Standard Input format\n\n\n>>> Data\n>>>\n\n>>>\n\n\nUse Standard Output format\n\n\n\n\n\nUse Standard Output format\n\n\n\n\n>>>\nData\n>>>\n\n>>>\n\n\n\n>>>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>>>\n\n\n\n>>>\n\n    [\n    {", "\nUse Standard Input format\n\n\n\n\nUse Standard Output format\n\n\nUse Standard Output format\n\n=====Function Descriptions=====\n*This section assumes you understand the basics discussed in HTML Parser - Part 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n", "\nUse Standard Input format\n\n\n\n\n\nUse Standard Output format\n\n\n\n\n\n\n\nUse Standard Input format\n\n\n\n\n>>> Comment    \n>>> Data    \n>>> Data\n\n\n>>>\n\n\n\n\n\n\n\n\n>>>\nData\n\n>>>\nComment\n>>>\nData\n\n>>>\n\n\n\n\n\n\n\n\n\n-----\n\n\n   ", "\nUse Standard Input format\n\n\n>>> Data\nMy Data\n\n\n\n\n\n\n\nUse Standard Output format\n\n\n\n>>>\n    Comment    \n    Data\n   \n\n\n>>>\n    Data\n    \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n*This section", "\nUse Standard Input format\n\n\n\n\n\n\n\n\n\nUse Standard Output format\n\n=====Function Descriptions=====\n*This section assumes you use standard input format\n\n\n\n\n>>> Data\n>>> Data\n\n>>>\n\n>>>\n\n\n\n\n\n\n\n\n\n\n\n\n>>>\n\n  \n  \n  \n  \n\n\n\n\n\n  \n  \n  \n  \n  \n\n", "\nUse Standard Input format\n\n\n\n\nUse Standard Input format\n\n\n\n\n\n\n\n\n\n>>>\n>>> data\n>>>\n\n>>> \n\n>>>\n\n\n\n>>> Data\n>>>\n\n>>>\n>>>\n\n>>>\n    \n\n\n\n\n>>>\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n  \n  \n  \n\n"], "prompt": "\nQUESTION:\n=====Function Descriptions=====\n*This section assumes that you understand the basics discussed in HTML Parser - Part 1\n\n.handle_comment(data)\nThis method is called when a comment is encountered (e.g. <!--comment-->).\nThe data argument is the content inside the comment tag:\n\nfrom HTMLParser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_comment(self, data):\n          print \"Comment  :\", data\n\n\n.handle_data(data)\nThis method is called to process arbitrary data (e.g. text nodes and the content of <script>...</script> and <style>...</style>).\nThe data argument is the text content of HTML.\n\nfrom HTMLParser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_data(self, data):\n        print \"Data     :\", data\n\n=====Problem Statement=====\nYou are given an HTML code snippet of N lines.\nYour task is to print the single-line comments, multi-line comments and the data.\n\nPrint the result in the following format:\n\n>>> Single-line Comment  \nComment\n>>> Data                 \nMy Data\n>>> Multi-line Comment  \nComment_multiline[0]\nComment_multiline[1]\n>>> Data\nMy Data\n>>> Single-line Comment:  \n\nNote: Do not print data if data == '\\n'. \n\n=====Input Format=====\nThe first line contains integer N, the number of lines in the HTML code snippet.\nThe next N lines contains HTML code.\n\n=====Constraints=====\n0<N<100\n\n=====Output Format=====\nPrint the single-line comments, multi-line comments and the data in order of their occurrence from top to bottom in the snippet.\n\nFormat the answers as explained in the problem statement.\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \nhtml = \"\"       \nfor i in range(int(input())):\n    html += input().rstrip()\n    html += '\\n'\n    \nparser = MyHTMLParser()\nparser.feed(html)\nparser.close()\nUse Standard Input format\nANSWER:\n"}}