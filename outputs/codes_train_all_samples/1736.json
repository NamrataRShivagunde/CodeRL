{"1736": {"code": ["```\n\n## \"Interesting Numbers\"\n\n\n\n\n\n\n\n\n\n\n90000\n* The digits are sequential: `100` or `90000`\n* The digits are sequential: `110000`.\n\n90000`.\n\n\n\n\n\n\n\n\n\n\n\n\n# \"Interesting numbers\"\n\n###\ninteresting_numbers\n\n7", "\n\n\n\n\n## \"Interesting Numbers\"\n\nruby,python\n\n\n\n\n\n\n1`\n`1`\n\n\n\n7890`.\n\n\n\n\n\n\n\n\n\n\n\n\n7890`.\n\n```if:ruby,python\n* Every digit followed by all zeros: `100`, `90000`, `4321`,", "\n```if:ruby,python\n\n\n\n\n\n\n\n\n> \u2020 For incrementing sequences, `0` should come after `9`, as in `7890`.\n> \u2021 For decrementing sequences,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n\n7890`.\n```if", "\n\n\n\n\n\n\n\n\n\n\n\n> `\u2020` If the above is not used, `7890`.\n> `\u2021` If the above is used, `\u2020`\n\n\n7890`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7890`.\n\n```if:ruby,python\n", "```\n\n\n\n\n\n\n\n\n\n\n7890`\n\n```if:ruby,python\n> Any digit followed by all zeros: `100`, `90000`.\n>7890`\n\n7890`.\n\n\n\n\n\n\n\n\n\n\n\n7890\n\n\n\n7890`.\n\n### \"Interesting Numbers", "\n```if:ruby,python\n\n\n\n\n\n\n### \"Interesting Numbers\"\n\nInteresting numbers are 3-or-more digit numbers:\n\n```if:ruby,python\n>\n\n```\n\n\n```\n\n\n\n\n\n\n\n\n\n\n7890\n\n\n\n7890`.\n\n### \"Interesting Num", "```\n\n\n\n\n\n\n\n\n\n\n> \u2020 For incrementing sequences, `0`, and not before  `9`.\n> \u2021 For decrementing sequences, `0`.\n\n\n\n\n7890`.\n\n\n\n\n\n\n\n\n\n\n\n>\n\n\n7890`.\n\n```if:ruby,python", "```\n\n\n\n\n\n\n\n\n> 1, 2, 3, 4, 3, 5, 6, 7, 7, 7\n> 2, 3, 3, 6, 7, 7\n\n\n\n\n90000`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7890`.\n\n```if:ruby,python\n* Any digit", "\n\n\n\n\n\n\n\n\n> 0011\n> 0012\n> 0012\n> 0011\n```\n\n### \"Interesting Number Definitions\"\n\n### \"Interesting Number Definitions\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7890\n\nruby,python\n*\n7890`.\n\n## \"", "\n\n\n\n\n\n\n\n\n\n\n\n\n* Any digit followed by all zeros: `100`, `90000`.\n* Every digit is sequential: `100`\n* 7890.\n\n\n7890`.\n\n\n\n\n\n\n\n\n\n\n\n7890\n\n\n\n7890`.\n\n```if:ruby,python\n*", "\n\n\n\n\n\n\n\n\n> `\u2020 For incrementing sequences, `1`, and `9`\n> `\u2021 For decrementing sequences, `2`.\n> `\u2020 For\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n7890\n\n```if:ruby,python\n*\n7890`.", "\n\n\n\n\n\n\n\n\n\n\n\u2026\n\n\n\n> `1`\n> `2`\n> `3`\n7890`.\n\n\n\n\n\n\n# \"Interesting\" Numbers\n#\nINTEREST:\n#\n\n90000\n7890\n90000\n\n## \"Interesting\" Numbers\n\n\n7890", "\n```if:ruby,python\n\n\n\n\n\n\n\n\n\n\n\n90000\n* The digits are sequential, incrementing\u2021: `1`, decrementing\u2021: `2`.\n\n```if:ruby,python\n*`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7890`.\n\n## \"Interesting Num", "```\n\n\n\n\n\n\n\n\n\n\n7890`\n\n```if:ruby,python\n> Any digit followed by all zeros: `1111`, `90000`.\n>\n\n\n7890`.\n\n\n\n\n\n\n\n\n\n> \"1\"\n*\n*\n*\n7890`.\n\n```if:ruby,python", "\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7890`.\n\n\n\n\n1, 3, 2, 3, 3, 2, 3, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7\n\n## \"Interesting Numbers\"\n\n\n\n7890`.\n\n7890`.7", "```\n\n## \"Interesting Numbers\"\n\n\n\n\n\n\n\n### \"Interesting Numbers\"\n\n### \"Interesting Numbers\"\n\n\n\n```\n\n9010`.\n> `7890`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7890\n\n## \"Interesting Numbers\"\n\n7", "```\n\n\n\n\n\n\n\n\n\n```if:ruby,python\n>\u2020\n> `\u2021 For incrementing sequences, `0` should come after `9` as in `7890`.\n>\n\n\n\n\n\n\n\n\n\n\n> `if`\n3890\n\n>\n\n7890`.\n```if", "```\n\n?\n\n\n\n\n\n\n\n\n\n> `\u2020`\n* `7890`\n* `1100`\n\n```else`\n\n\n7890`.\n\n```else\n\n\n\n\n\n\n\n\n\n\n\n\n7890\n\n```else`\n\n\n7890`.\n\n```", "\n\n\n\n\n\n\n\n\n\n\n\n1`\n* Every time we have a `2` or `3` sequence: `2`.\n* Every time we have a `3` sequence: `3`\n*\n\n\n`\n\n\n\n\n\n\n\n\n\n7890\n\n## \"Interesting\" Numbers:\n\n\n\n7890`.", "\n\n\n\n\n\n\n\n## \"Interesting\" Numbers\n\nInteresting numbers:\n\n> 1001234\n> 1\n* 1\n* 1\n* 1\n* 1\n*\n\n\n\n\n\n\n7890`.\n\n\n\n\n\n\n\n\n\n\n\n\n7890\n\n\n\n\n7890`.\n\n```if-"], "prompt": "\nQUESTION:\n> \"7777...*8?!??!*\", exclaimed Bob, \"I missed it again!  Argh!\"  Every time there's an interesting number coming up, he notices and then promptly forgets.  Who *doesn't* like catching those one-off interesting mileage numbers?\n\nLet's make it so Bob **never** misses another interesting number.  We've hacked into his car's computer, and we have a box hooked up that reads mileage numbers.  We've got a box glued to his dash that lights up yellow or green depending on whether it receives a `1` or a `2` (respectively).\n\nIt's up to you, intrepid warrior, to glue the parts together.  Write the function that parses the mileage number input, and returns a `2` if the number is \"interesting\" (see below), a `1` if an interesting number occurs within the next two miles, or a `0` if the number is not interesting.\n\n**Note:** In Haskell, we use `No`, `Almost` and `Yes` instead of `0`, `1` and `2`.\n\n## \"Interesting\" Numbers\n\nInteresting numbers are 3-or-more digit numbers that meet one or more of the following criteria:\n\n```if-not:ruby,python\n* Any digit followed by all zeros: `100`, `90000`\n* Every digit is the same number: `1111`\n* The digits are sequential, incementing\u2020: `1234`\n* The digits are sequential, decrementing\u2021: `4321`\n* The digits are a palindrome: `1221` or `73837`\n* The digits match one of the values in the `awesomePhrases` array\n```\n```if:ruby,python\n* Any digit followed by all zeros: `100`, `90000`\n* Every digit is the same number: `1111`\n* The digits are sequential, incementing\u2020: `1234`\n* The digits are sequential, decrementing\u2021: `4321`\n* The digits are a palindrome: `1221` or `73837`\n* The digits match one of the values in the `awesome_phrases` array\n```\n\n> \u2020 For incrementing sequences, `0` should come after `9`, and not before  `1`, as in `7890`.\n> \u2021 For decrementing sequences, `0` should come after `1`, and not before  `9`, as in `3210`.\n\nSo, you should expect these inputs and outputs:\n\n```python\n# \"boring\" numbers\nis_interesting(3, [1337, 256])    # 0\nis_interesting(3236, [1337, 256]) # 0\n\n# progress as we near an \"interesting\" number\nis_interesting(11207, []) # 0\nis_interesting(11208, []) # 0\nis_interesting(11209, []) # 1\nis_interesting(11210, []) # 1\nis_interesting(11211, []) # 2\n\n# nearing a provided \"awesome phrase\"\nis_interesting(1335, [1337, 256]) # 1\nis_interesting(1336, [1337, 256]) # 1\nis_interesting(1337, [1337, 256]) # 2\n```\n\n## Error Checking\n\n* A number is only interesting if it is greater than `99`!\n* Input will *always* be an integer greater than `0`, and less than `1,000,000,000`. \n* The `awesomePhrases` array will always be provided, and will always be an array, but may be empty.  (Not *everyone* thinks numbers spell funny words...)\n* You should only ever output `0`, `1`, or `2`.\ndef is_interesting(number, awesome_phrases):\n\t\nUse Call-Based format\nANSWER:\n"}}