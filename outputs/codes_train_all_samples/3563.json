{"3563": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n 2 2 3 4\n    3 2 2 3 4\n    4 3 2 2 3 4\n    3 2 2 3 2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n17 16 15 15 12 => 2 1 0 1 2", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n0 1 1 1 1 1\n\n\n\t\n\n\n 2 3 2 3 4\n\n\n\n\n1 2 2 3 4\n2 3 3 3 4\n1 2 2 2 3\n2 2 3 3 4\n\n\n\n\n\n\npython\n\n\n17 16 15 15 21 21 24 25   ", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n1 0 1 0 1 1 0 0 1 1 1 1 1 1\n\n\n\n\n\t\n\n\n 2 3 2 3 4\n\n\n\n\n\n\n\n\n132\n\n2\n2 3 2 3 4\n\n3\n\n\n3.4.1.3.4.", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\ndistance(n)\n\n\n\t\nUse Call-Based format\n\n\n 2 3 2 3 4\n\n\n\n\n\n\n```\n\n\n\n\n\n\npython\ndistance(2) == 0\ndistance(3) == 2\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n 2 3 2 3 4\n\n\n\n\n\n\n\n\n\n\n\npython\ndistance(n) == 0\ndistance(n) == 2\ndistance(n) == 3\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n 2 2 3 4\n\n\n\n2 5 4 5 3 4\n\n\nNOTE:\n\nThe following example is used in a call-based format\n\n```python\n\n\n\n\n\n\n\n17 17 17 15 14 13   ", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n15 17 16 15 15\n18 18 17 17 17\n22 22 22 25\n\n\n\t\n\n 2 2 3 4\n\n\n\n\n\n\n\n\n15 17 16 15 15\n21 17 17 23 23\n\n\n\n\n\n\n```python\n#add py", "\n\n\n\n```python\nkata = kata(n)\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 2 3 2 3\n\n\n\n\n\n\n\n\n3.4.2.3.3\n\n\n\n\n\n\n```python\n\n17 16 15 15 3 4\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\ndistance(n) == 0\ndistance(n) == 5\ndistance(n) == 6\ndistance(n) == 7\n\n\n\n\n    3 2 3 4\n\n\n\n\n\n\n2x5\n\n\npython\n\n\n17 16 15 15 18 18\n20 21 23 23 25", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nThe `n` is a number, usually an integer, or a string, it's a number in the form `1x3`.\n\n\n\n\n\t\n\n 2 3 2 3 4\n\n\n\n\n\n\n\n\n\n\n```python\ndistance(1) == 4\n```\n\n\n17", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1 to 5\n2 3 2 4 5\n\n\n\n\n\t\n\n\n 2 2 3 4\n    2 3 2 3 4\n    3 2 2 3 4\n   \n\n\n\n\n\n\n\n\n\n```python\ndistance(n)\n```\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\ndistance(n)\n\n```python\ndistance(n)\n```\n\n\n\n\n 2 3 2 3 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n15 3 1 2 3 4\n\n\n\n\n```python\n\n15 16 16", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n6.7.7.7.7.6.7\n\n\n\n\t\n\n 2 2 2 3 4\n\n\n\n\n\n3 4 2 3 4\n6\n\n\n\n\n\n1 - 5\n2 - 5\n3\n\n\n\n## Examples:\n\n\n# Part 1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n 2 3 2 3 4\n\n\n\n\n\n\n\n20 5 6 6 7\n\n4\n\n\n\n```python\n3 0 0 1 2\n3 0 2 0 4\n3 0 1 2\n3\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 2 3 2 3 4\n\n\n\n3 2 3 4\n\n```python\ndistance(1) == 3\ndistance(2) == 3\n```\n\n\n\n\n\n\n\n\n\n## Examples\n\n* C", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n 2 2 3 4\n\n\n\n\n\n```python\ndistance(1) == 1\ndistance(2) == 1\n```\n\n\n\n\n\n\n\n\n\n```python\n   ", "\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\ndistance(n) == 0\ndistance(1) == 0\ndistance(2) == 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\ndistance(n) == 2\ndistance(3) == 5\n\n\n\n17 16", "\nUse Call-Based format\n\n\n\n\n\nkata(n)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n 2 3 3 4\n\n\n\n\n\n\n\n\n\n\npython\ndistance(1) == 0\ndistance(5) == 0\ndistance(30) == 5\n\n\n\n17 16 15 14", "\n\t\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n 2 3 2 3 4\n20 3 3 2 2 3\n21 3 2 3 4\n22 3 2 3 4\n\n\n\n\n\n\n\n\n3x3\n\n\n\n2x2\n\n\n```python\nif len(n) < 5:", "\n\n\n\n\n\n\nKata of the series\n\nKata of the series\n\nKata of the series\n\nKata of the series\n\nKata of the series\n\nKata of the series\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6,2,3,4,5,5"], "prompt": "\nQUESTION:\nFinal kata of the series (highly recommended to compute [layers](https://www.codewars.com/kata/progressive-spiral-number-position/) and [branch](https://www.codewars.com/kata/progressive-spiral-number-branch/) first to get a good idea), this is a blatant ripoff of [the one offered on AoC](http://adventofcode.com/2017/day/3).\n\nGiven a number, return the Manhattan distance considering the core of the spiral (the `1` cell) as 0 and counting each step up, right, down or left to reach a given cell.\n\nFor example, using our beloved 5x5 square:\n\n```\n17 16 15 14 13    4 3 2 3 4\n18 05 04 03 12    3 2 1 2 3\n19 06 01 02 11 => 2 1 0 1 2\n20 07 08 09 10    3 2 1 2 3\n21 22 23 24 25    4 3 2 3 4\n```\n\nAnd thus your code should behave like this:\n\n```python\ndistance(1) == 0\ndistance(5) == 2\ndistance(25) == 4\ndistance(30) == 5\ndistance(50) == 7\n```\n\nJust be ready for larger numbers, as usual always positive.\n\n*[Dedicated to [swiftest learner I met in a long while](https://www.codewars.com/users/irbekrm/)]*\ndef distance(n):\n\t\nUse Call-Based format\nANSWER:\n"}}