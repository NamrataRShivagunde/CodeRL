{"298": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nExample 1:\n\n\n   \n\n\n\n\nExample 3:\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nGiven two non-negative integers\n\n\n\nGiven two non-negative", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2 represented as a string.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\nGiven two non-", "\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nExample 3:\n\n\n   \n\n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two strings\n\nGiven two non-negative integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nExample 3:\n\n\n   \n\n\n\nGiven two non-negative integers num1 and num2 represented as strings\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\nGiven two non-", "\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nExample 3:\n\n   \n\n\n\n\n\nExample 3:\n\n\n   \n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven two non-negative integers:\n\n\n\nGiven two non-", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n \n\n\n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2 represented as a string.\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\n\nGiven two non", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Python format\n\nUse Python-based format\n\nUse Python-based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\n\n\n\nGiven two non", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integersGiven two", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nExample 3:\n\n   \n\nUse Call-Based format\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\n\n\nGiven two non-negative", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nExample 3:\n\n   \n\n\n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\n\nGiven two non", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2 represented as a string.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\n\n\nGiven two non", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nExample 3:\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two non-negative integers num1 and num2 represented as strings\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nExample 3:\n   \n\n\n\n\n\nExample 3:\n\n   \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nExample:\n\n   \n\n\n\n\nExample 3:\n\n   \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two non", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nExample 3:\n\n   \n\nUse Call-Based format\nGiven two non-negative integers num1 and num2 represented as strings:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers\n\nGiven two non-", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nExample:\n\n   \n\n\n\n\n\nExample 3:\n\n\n   \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven two non-negative integers num", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\nExample 3:\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two non-negative integers num1 and num2 represented as strings\n\nGiven\nGiven two", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Python-Based format\nUse Call-Based format\n\nUse Python-Based format\nClass Solution:\n    class multiply:\n    def multiply(self, num1, num2: str):    \n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two non-negative integers num1 and num2 represented as strings\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nExample 3:\n\n   \n\n\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two non-negative integers num"], "prompt": "\nQUESTION:\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nExample 1:\n\n\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\n\nExample 2:\n\n\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n\n\nNote:\n\n\n       The length of both num1 and num2 is < 110.\n       Both num1 and num2 contain\u00a0only digits 0-9.\n       Both num1 and num2\u00a0do not contain any leading zero, except the number 0 itself.\n       You must not use any built-in BigInteger library or convert the inputs to integer directly.\nclass Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}