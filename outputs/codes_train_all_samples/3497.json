{"3497": {"code": ["\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n**Example:**\nisPP(n) => [3,4]\nisPP(10) => [3,4]\n\n\n\n\t\nUse Python format\n\n\n\n\n\t\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```python\nisPP(3", "\n\n\nisPP(n) => [1,2]\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```python\nisPP(n) => [1,2]\n\n\n\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based proofs\n:\n\n\n\n\n\n\n\n\nisPP(5) => [3,4]\nisPP(9) => [3,5]\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\"\"\"\n\n\n### Examples\n```python\nisPP", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n### Examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\nisPP(n)\n\t\nUse Call-Based format\n\n\nisPP(n)\n\nisPP(n) => None\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\nisPP(1) => [1,2]\nisPP(2) => [1,2]\n\n\n\t\n\n\n\n\n:\n\n\n\n\n\n```python\n\n\n\n\n\n```python\nisPP(4", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nn^2 = 3^2\n\n```python\nisPP(3) => None\n```\n\n\n\n\n\t# Example", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\nn is a positive integer\n\t\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n### Examples\n\nisPP(n)\n\nUse Call-Based format\n\n\n\n\n\n\n\nn^1 = 2^2\n\n\n\n\n\n\nisPP(3) => [", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n# Use Call-Based format\ndef isPP(n):\n\n# Use Call-Based format\n##\n\n\n\n\n# Use Python-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nisPP(4) => [3,2]\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nisPP(2) => [2,2]\n\n\n\n\n\n\nisPP(3", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based proof\n\n# Examples:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nisPP(2) => [3,2]\n\n\n\n# Examples:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based proofs\n\n:\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n# Example:\n# IsPP(n)\nisPP(n)\n# Example:\n# Example:\n# Example:\n#\n\n\n\n\n\n# Example:\n#", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nisPP(n)\n\nUse Call-Based format\nQUESTION:\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n### Example:\nisPP(n)\n\n\n``", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n# Examples:\n\n# Use Call-Based format\n\n:\n\n\n\n# Examples:\n#\n\n# Examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples:\n\n# Examples:\n# Examples:\n# Examples:\n\n\n\n\n\n\n#", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n### Examples:\n\n\n\n\t\nUse Call-Based format\n\n### Examples:\n\n\n\n\n\n\n\n\n\nisPP(n) => [3,4]\nisPP(9) => None\n\n\n\n\n\n\n\n\n\nisPP(", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n```\n\n\n\n\nUse Call-Based format\n\n## Examples:\n\n\n\n\n\n\n```python\n\n\n\n\t\n\n\n\n\n\nisPP(n)\n\nReturns:\n\n* [m,k]\n```\n\n\n\n\n\nisPP(n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n### Examples\n```python\nisPP(3) => [3,1]\n\n\n\n\n\n\n\nisPP(3) => []\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\nisPP(4):\n\nUse Call-Based format\n\n\n\n\n\n\nisPP(3) =>", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n```python\nisPP(n)\n```\n\n\n\nisPP(n) => [0,1]\n\n\n\n\n\n\n\nis\n\n\n```python\nif not isPP", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nisPP(n) => [1,2]\nisPP(2) => [3,1]\nisPP(3) => None\n\n\n\n\n\n\n\n\n\n\n\n\n1^2 = 6^4 = 10^2\n\n:\n\n\n\n# Printer:", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n```python\n\n\n\n\n```python\nisPP(2)"], "prompt": "\nQUESTION:\nA [perfect power](https://en.wikipedia.org/wiki/Perfect_power) is a classification of positive integers:\n\n> In mathematics, a **perfect power** is a positive integer that can be expressed as an integer power of another positive integer. More formally, n is a perfect power if there exist natural numbers m > 1, and k > 1 such that m^(k) = n.\n\nYour task is to check wheter a given integer is a perfect power. If it is a perfect power, return a pair `m` and `k` with m^(k) = n as a proof. Otherwise return `Nothing`, `Nil`, `null`, `NULL`, `None` or your language's equivalent.\n\n**Note:** For a perfect power, there might be several pairs. For example `81 = 3^4 = 9^2`, so `(3,4)` and `(9,2)` are valid solutions. However, the tests take care of this, so if a number is a perfect power, return any pair that proves it.\n\n### Examples\n```python\nisPP(4) => [2,2]\nisPP(9) => [3,2]\nisPP(5) => None\n```\ndef isPP(n):\n\t\nUse Call-Based format\nANSWER:\n"}}