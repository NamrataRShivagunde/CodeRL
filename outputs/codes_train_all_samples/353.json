{"353": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    numSubseq(self, nums: List[int], target: int):\n    return numSubseq(self, nums, target)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n[3] ->\n    numSubseq(self, [3], target = 10) -> int:\n\n\nGiven an array of integers nums and an integer target\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\nReturns the number of non-empty subsequences of the given array.\n\nUse Call-Based format\n\n\nGiven an array of integers nums and an integer target:\n\n   \n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nOutput: 63\n\nExplanation:\nNumber of valid subsequences of the input array.\n\nConstraints:\n\n0 <= numSubseq <= 63\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nnumSubseq(self, nums, target):\n\nUse Call-Based format\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n   \n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nNumber of subsequences that satisfy the condition (including empty subsequences).\n\nUse Call-Based format\n\nExplanation:\n\n0 <= numSubseq <= 6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nreturn numSubseq(self, nums, target)\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\nOutput:\n0\nExplanation:\n0 <= target <= 10^7\n\nConstraints:\n\n0 <= target <= 10^6\n\n\n\n   \n   ...\n\n\n\n   \n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nExplanation:\nGiven an array of integers nums and an integer target, return the number of subsequences of the array.\n\nConstraints:\n\n1 <= numSubseq <= target\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n[3]\nInput: nums, target = 10\n\nOutput: 7\nExplanation: The number of valid subsequences is between 0 and 7.\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\nGiven an array of integers nums and an integer target:\n\n\n   \n    def numSubseq(self, nums, target):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        [nums, target]\n\nUse Call-Based format\n\nConstraints:\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\n\nGiven an array of integers nums and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nInput:\n    nums, target\n\nOutput:\n\nExplanation:\nNumber of valid subsequences\n\nConstraints:\n\n1 <= target <= 6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nInput: nums, target\nOutput: 63\nExplanation: The number of subsequences of nums is greater than target.\n\nConstraints:\n\n1 <= target <= 10^6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n       \n        self.numSubseq(nums, target)\n        self.numSubseq(nums, target)\n\n\nGiven an array of integers nums and an integer target:\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= target <= 10^6\n\n1\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n        Return numSubseq(self, nums, target)\n\nExample 2:\n   \n\n\nGiven an array of integers nums and an integer target:\n\n   \n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nInput:\n    nums = [1,2,3,4,1,2,3,3]\n\nOutput:\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n\n\n\n\n\n[1,2,3,4,5,6,7,9]\n\n\n   \n    def numSubseq(self, nums: List[int], target: int):\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target", "\nUse Call-Based format\n\n\n\n\n\nNumSubseq:\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    numSubseq(self, nums: List[int], target: int):\n   ...\n\n\nGiven an array of integers nums and an integer target\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer target:\n\n\n\n"], "prompt": "\nQUESTION:\nGiven an array of integers nums and an integer target.\nReturn the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal than target.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: nums = [3,5,6,7], target = 9\nOutput: 4\nExplanation: There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)\n\nExample 2:\nInput: nums = [3,3,6,8], target = 10\nOutput: 6\nExplanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]\nExample 3:\nInput: nums = [2,3,3,4,6,7], target = 12\nOutput: 61\nExplanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61).\n\nExample 4:\nInput: nums = [5,2,4,1,7,6,8], target = 16\nOutput: 127\nExplanation: All non-empty subset satisfy the condition (2^7 - 1) = 127\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^6\n1 <= target <= 10^6\nclass Solution:\n    def numSubseq(self, nums: List[int], target: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}