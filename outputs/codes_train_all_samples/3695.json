{"3695": {"code": ["\nUse Call-Based format\n\n\n\n\n\n# Example\n\n\n\n\n\n\n# Task\n\n\t\n\n\t\n# Task\n\n# Input\n\n\n - `[input]` string `s`\n\n\n\n\t\n\n\n\n\n\n\", \n\"xx\"\n```\n\n\n\n\n\n\n\n# Task\n\n\n# Task\n", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n# Task\n\n\n\n# Task\n\n\n\n# Task\n\n# Example\n\n# Input/Output\n\n\n\n\n\n\t\n\n\", \n\"\", \n```\n\n\n\", \n\"\"\n\n\n# Task\n\ngg\n\n# Task\n\n\n#", "\nUse Call-Based format\n\n\n\n\n\n\n# Task\n\n\n\n# Task\n\n\n# Task\n\n\n# Example\n\n\n\n\t\n:\n\n\", \n```\n\n# Task\n\n\n\", \n2, \n3, \n2, \n3,\n3\n\n\n\n\n\n# Task\n# Task\n\n#", "\n\n\n\nUse Call-Based format\n\n\n\n# Task\n\n \n\n# Input/Output\n\n  string = \"abc\"\n\n\t\n\t\n\n# Task\n\n\n\n\n\t# Example\n:\n\", \"\", \"2\", \"3\"\n\n\nmmmmmmmmmmmmmm\n\n\n\n# Task\n\n\n# Task\n\n#", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n# Example\n\n\n\n\n# Task\n\n\n\n# Task\n\n# Task\n\n\n\n\n\t\n\n\n# Example\n\", \"hh\", \"hh\", \"hh\", \"hh\", \"hh\", \"\n\n\n\", \"\n\n\n\n\n\n\n# Task\n You are given", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n# Task\n\n# Task\n\n\n# Example\n\n\n\n\t\n# Task\n\n:\n\n\", \n\"\"\n\n\nlllllllll\"\n```\n\ntttttttttt\n\n\n\n\n\n# Task\n\n# Task\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n# Task\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n\n# Task\n# Task\n\noutput\n\n\n\n\t\n\n\n\n\n\n\n\", \n```\n\nhmmmmmmmmmmmml\"\n\n\n\n\n\n# Task\n\n# Task\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n# Task\n\n\n\n\n\t\nUse Call-Based format\n\n Input/Output\n\n\n\t\n\n# Task\n\n# Example\n\n\", \"\"\n\n\n\n\", \"h\"\n\n for `s = \"\"`\n\n\n\n\n\n# Task\n\n#", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n# Task\n\n\n\n\n# Task\n\n# Task\n\n\n\n\n\t\n# Task\n\n# Example\n\n\n\n\n\n\n\"\n\n\n# Task\n\n\n# Task\n\n\n# Example\n\n# Task\n\n\n\n\n\n\n# Task\n\n#", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n# Task\n\n\n\n\n\n\n# Task\n\n# Task\n\n Input/Output\n\n\n\n\t\n\n\n\n\n\n# Task\n\n\n\",\n```\n\n\"\n\n\n\n# Task\n\n\n\n\n# Task\n\n\n\n# Task\n\n# Example", "\nUse Call-Based format\n\n\n\n# Example\n\n\n\n\n# Task\n\n\n\n\n# Task\n# Task\n\n input\n\t\n\n\n\t\n# Task\n\n\n# Task\n\n:\n# Task\n\n\n\n\n# Task\n\n\n\", \n\"kpp\"\n\n\n\n# Task\n\n\n\n# Example\n\n#", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n# Task\n\n\n\n# Task\n\n\n\n# Task\n# Task\n\n# Example\n\n\n\n\t# Task\n\n\n\n\n\n\n\n\n\", \n1 substrings altogether.```\n\n\n\n\n\n\n\n\n\n# Task\n\n# Task\n You", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n# Task\n\n\n\n\n\n# Task\n\n# Task\n\n# Example\n\n\n\n\t\n\n# Task\n\n\n\n\n\n\", \n3 substrings altogether.\n```\n\n for `s = \"cccc\"\n\n\n\n\n\n\n\n\n# Task\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n# Task\n\n\n\n\n# Input/Output\n\n\ndef repeat(string):\n\t\nUse Call-Based format\n\n# Example\n\n\n\n\n\n\n\t\n\n\n\n\n\nmmmmmmmmmm\".\n\n\n\n\n\n\n\n# Task\n\n# Task\n\n#", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n# Task\n\n\n\n# Task\n\n\n\n\n# Task\n\n\n# Task\n\n\n\n\t\n# Task\n# Example\n\n\", \n\n\n\n\", \n```\n\n\",\n\n\n\n\n\n\n\n# Task\n\n# Task\n\n\n# Example", "\nUse Call-Based format\n\n\n\n\n\n\n\n \n\n# Task\n\n \n\n\n# Task\n\n\n# Task\n\n \n\n\t\n# Task\n\n\n# Task\n\n:\n\", \n\"\", \n```\n\n\n\n\nmmmmmmmmmmmm\"\n\n\n\n\n\n\n\n# Task\n\n\n#", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n# Task\n\n\n\n\n# Task\n\n\n\n# Task\n\n# Example\n\n# Input/Output\n\n\n\t\n\n# Task\n\n:\n\n\n\n\n\",\n```\n\n\", \n\n\n\n\n\n# Task\n\n\n\n\n# Task\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n# Task\n\n\n\n\n# Task\n\n# Task\n\n\n\n\t\n# Task\n\n\n# Task\n\", \n```\n\n\n\n\n\n\n\n\", \n```\n\ntttttttt\"\n\n\n\n\n\n\n# Task\n\n# Task", "\nUse Call-Based format\n\n\n\n\n\n# Task\n\n\n\n# Example\n\n\n\n\n\t\nUse Call-Based format\n\n# Task\n\n\n\n\n\t\n# Task\n\n\n\n\n# Task\n\n\n\n\n\", \n```\n\n\", \n\n\n\n# Task\n\n\n# Output\n\n# Task\n\n# Task", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n# Task\n\n\n\n\n# Task\n\n\n\n\t\nUse Call-Based format\n# Task\n # Output\n\n\n\n\n\n\n# Task\n\n\n\n\n\n\", \n```\n\n\"\n\n\n\n\n\n\n\n# Task\n# Task\n\n# Example\n"], "prompt": "\nQUESTION:\n# Task\n You are given a string `s`. Let's call its substring a group, if all letters in it are adjacent and the same(such as `\"aa\",\"bbb\",\"cccc\"`..). Let's call the substiring with 2 or more adjacent group a big group(such as `\"aabb\",\"bbccc\"`...).\n \n Your task is to count the number of `big groups` in the given string.\n\n# Example\n\n For `s = \"ccccoodeffffiiighhhhhhhhhhttttttts\"`, the result should be `3`.\n ```\nThe groups are \"cccc\", \"oo\", \"ffff\", \"iii\", \"hhhhhhhhhh\", \"ttttttt\"\nThe big groups are \"ccccoo\", \"ffffiii\", \"hhhhhhhhhhttttttt\", \n3 substrings altogether.```\n\n For `s = \"gztxxxxxggggggggggggsssssssbbbbbeeeeeeehhhmmmmmmmitttttttlllllhkppppp\"`, the result should be `2`.\n ```\nThe big groups are :\n\"xxxxxggggggggggggsssssssbbbbbeeeeeeehhhmmmmmmm\"\nand \n\"tttttttlllll\" ```\n\n For `s = \"soooooldieeeeeer\"`, the result should be `0`.\n \n There is no `big group` exist.\n \n# Input/Output\n\n\n - `[input]` string `s`\n\n  A string of lowercase Latin letters.\n\n\n - `[output]` an integer\n\n  The number of big groups.\ndef repeat_adjacent(string):\n\t\nUse Call-Based format\nANSWER:\n"}}