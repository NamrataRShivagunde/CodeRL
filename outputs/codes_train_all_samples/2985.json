{"2985": {"code": ["## **Task**\n\nUse Call-Based format\n## **Task**\n\n## **Task**\n\n\n\n\n## **Task**\n\n## **Task**\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n", "\n## **Example**\n\nUse Call-Based format\n\n\n\n\n## **Task**\n\n##\n\n## **Task**\n\nUse Call-Based format\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n## **Task", "\n\n## **Description**\n\nThis function is called for each light.\n\n## **Examples**\n\n# [d]\n\n\n\n\n\n\n\n\n\n\n\n:\n\n# **Task**\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n## **Task**\n\n\n", "# **Task**\n\n# **Task**\n\n## **Task**\n\n\n\n\n\n## **Task**\n\n\n# **Task**\n\n## **Task**\n\n\n# **Task**\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n##\n\n##", "\n## **Example**\n\n\n## **Task**\n\nThis function works in a call-based format\n\n\n:\n## **Task**\n\n## **Task**\n\n\n\n:\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n## **", "\n## **Example**\n\nUse Call-Based format\n\n\n\n\n\n## **Task**\n\n\n## **Example**\n\n## **Task**\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n\n## **Task**\n\n", "## **Command**\n\nUse Call-Based format\n## **Task**\n\n\n## **Task**\n\n## **Task**\n\n\n\n\n\n\n\n:\n## **Task**\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n## **Task**\n\n\n##", "\n## **Task**\n## **Task**\n\n#\n\n\n\n\n\n\n## **Task**\n\n[d](https://en.wikipedia.org/wiki/Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n#\n\n#\n\n\n## **Task**\n\n", "## **Test**\n\nUse Call-Based format\n## **Task**\n\n\n\n\n:\n\n## **Task**\n\n## **Task**\n\n\n\n:\n\n## **Task**\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n# **Task**\n\n", "## **Task**\n\nUse Call-Based format\n## **Task**\n\n## **Task**\n\n\n\n\n\n## **Task**\n\n## **Task**\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n# **Task**", "## **Info**\n\nUse Call-Based format\n## **Task**\n\n\n\n## **Task**\n\n\n## **Task**\n\n## **Task**\n\n\n\n:\n\n\n\n\n## **Task**\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n## **Task**\n\n\n", "## **Task**\n\nUse Call-Based format\n## **Task**\n\n\n\n\n## **Task**\n\n\n# **Task**\n\n## **Task**\n\n\n## **Task**\n\n\n:\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n\n\n# **Task**\n\n\n", "## **Description**\n\nUse Call-Based format\n## **Example**\n\n\n\n\n\n\n\n\n## **Example**\n\nThe ray is reflected\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n##\n\n", "# [d]\n## **Task**\n\n\n## **Task**\n\n\n\n\n:\n\n## **Task**\n\n\n## **Task**\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n", "\n# **Example**\n\n# [d]\n# **Task**\n\n\n\n\n:\n\n## **Task**\n\n## **Task**\n\n\n\n## **Task**\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n## **Task", "\n## **Task**\n\nUse Call-Based format\n\n\n\n\n## **Task**\n\n\n## **Task**\n\n\n## **Task**\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n## **Task**\n", "\n## **Example**\n\nUse Call-Based format\n\n\n\n\n:\n\n## **Task**\n\n## **Task**\n\n## **Task**\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n## **Task**\n\n", "## **Example**\n\nUse Call-Based format\n## **Task**\n\n\n## **Task**\n\n\n\n\n## **Example**\n\n\n# **Task**\n\n\n## **Task**\n\n\n#\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n## **", "## **Task**\n\nUse Call-Based format\n\n# **Task**\n\n\n\n:\n\n## **Task**\n\n## **Task**\n\n## **Task**\n\n\n\n:\n\n\n\n\n\n\n## **Task**\n\nThe\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n## **Task**", "##\n\nUse Call-Based format\n\n\n## **Task**\n\n\nUse Call-Based format\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## **Task**\n\n\n\n\n\n## **Task**\n\n"], "prompt": "\nQUESTION:\n## **Task**\n\nFour mirrors are placed in a way that they form a rectangle with corners at coordinates `(0, 0)`, `(max_x, 0)`, `(0, max_y)`, and `(max_x, max_y)`. A light ray enters this rectangle through a hole at the position `(0, 0)` and moves at an angle of 45 degrees relative to the axes. Each time it hits one of the mirrors, it gets reflected. In the end, the light ray hits one of the rectangle's corners, and flies out. Your function must determine whether the exit point is either `(0, 0)` or `(max_x, max_y)`. If it is either `(0, 0)` or `(max_x, max_y)`, return `True` and `False` otherwise.\n\n**Example**\n\nFor `max_x = 10` and `max_y = 20`, the ray goes through the following lattice points: `(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (9, 11), (8, 12), (7, 13), (6, 14), (5, 15), (4, 16), (3, 17), (2, 18), (1, 19), (0, 20)`.\n\nThe ray left the rectangle at position `(0, 20)`, so the result is `False`.\n\nHere is an image of the light being reflected.\n![d](https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Arithmetic-billiard-40-10.jpg/450px-Arithmetic-billiard-40-10.jpg)\n\n\nAlso, once completing this kata, please do not rate it based off of the difficulty level(kyu) and instead on whether you think it is a good kata.\ndef reflections(max_x, max_y):\n\t\nUse Call-Based format\nANSWER:\n"}}