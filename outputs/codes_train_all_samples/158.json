{"158": {"code": ["\nUse Call-Based format\n\n\n    def kSimilarity(self, A, B):\n        \n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nStrings are K-similar\n\n\n\n\n\n\n\n\nK\u00a0times are swapped.\n\n\nK\u00a0times are swapped.\n\n\n\n\n\n    A and B", "\nUse Call-Based format\n\n\n    kSimilarity(self, A, B)\n\nUse Call-Based format\n\n\n\n\n       \n\n\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\nK:\nK-similarity for which A and B are K-similar\n\n\nK-similarity:\n\n\n\n\nStrings A and B", "\nUse Call-Based format\n\n\n        pass\n\n\n\n\n\n\n    def KSimilarity(self, A: str, B: str):\n        return 1\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nA and B are K-similar\n\n\n\n\n\nA and B contain anagram", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n    def kSimilarity(self, A, B):\n        return self.kSimilarity(A, B)\n\n\n\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nA and B are K-similar\n\n\n1 <=", "\n\n\n\n    kSimilarity = 1\n\nUse Call-Based format\n\n\n\n\n\n    def k(self, A, B):\n        return 1\n\n\n\n\n\n\n:\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nA and B must be of the same length\n\n\n\n\n\nA and B are K-", "\n\n\n\n    def kSimilarity(self, A, B) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\nK\u00a0integer\n\n\n\n\nA and B are K-similar\nK\u00a0integer\n\n\n\nA and B are strings\n\n\n\nA and B are", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\nA and B are both anagrams of the same length\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nA and B are the same string\n\n\nNOTE:\n\nUse Call-Based format\n\n\n\n\n\nStrings A and B", "\nUse Call-Based format\nUse Call-Based format\n\n    kSimilarity(self, A, B) -> int:\n\n\n\n\n\n\n   \n\n\nA and B contain only lowercase letters\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\nA and B are strings\n\nA and B are strings\n\n\n\nA and B are strings", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n\n    K = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA and B are K-similar\nA and B are K-similar\n\n\n\n\n\n\nA and B are K-similar\n\nWith an", "\nUse Call-Based format\n\n\n\n    def kSimilarity(self, A, B: str) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n:\n   \n\n\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nStrings A and B are K", "\nUse Call-Based format\n\n\n\n    def kSimilarity(self, A, B):\n        return self.kSimilarity(A, B)\n\n\n\n\n\n\n   \n\n\n\n   \n        \n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nA and B are K-similar\n\n\n\n    A", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\n\n\n\n\n\n   \n\n\n\n\n\n\n    k = self.kSimilarity(A, B)\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nA and B are K-similar\n\n\n\n\n\n    :param", "\nUse Call-Based format\n\n\n        pass\n\n\n\n\n\n   \n\n\n\nA and B are K-similar\n\n\n   \n    \"\"\"\n\n\n\n\nA and B contain only letters from A and B.\nA and B contain only letters from A and B.\n\n\n\nUse Call-Based format\n\n\n\n\nA and B contain only letters from", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\nReturns:\n\n1\n\n2\n\n\n\n\n\n\n\n    \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA and B contain both anagrams A and B\n\n\n\n\n\n    A and B contain only an", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n   \n\n   \n\n\n\nA and B are not K-similar\n\n\n\n       \n    K = 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStrings\u00a0A and B are K-similar (for some nonnegative integer K)\n\n\n\n\nStrings\u00a0A and", "\nUse Call-Based format\n\n\n    kSimilarity(self, A, B):\n\nUse Call-Based format\n\n\n\n\n       \n\n\n:\n   \n        A, B = self.input, self.output\n        \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    A:\n    B:\n", "\nUse Call-Based format\nUse Call-Based format\n\n    print A, B\n\n\n\n\n\n   \n\n\n\n\n -> int\n\n\n\n    self.kSimilarity(A, B)\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nK\n\nA and B are K-similar\n\nA and B are", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n\n\nA and B are K-similar\nOutput: 2\n\n\n:\n   \n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA and B are K-similar\n\n\n\nA and B", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n   \n\n\n\n\n\n\nExample 4:\n    def k(self, A, B):\n        return 1\n\n\n\n\n\n\n\n\nNote:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nA and B contain only the letters A and B", "\nUse Call-Based format\n\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\nA and B are K-similar\n:\n   \n    K = 1\n\n\n\n\n\n\n\n\n\nA and B are K-similar\n\n\n\n\nA and B are K-similar\n\n\n\n\n\n\n    A, B ="], "prompt": "\nQUESTION:\nStrings\u00a0A and B are K-similar (for some non-negative integer K) if we can swap the positions of two letters in A exactly K\u00a0times so that the resulting string equals B.\nGiven two anagrams A and B, return the smallest K\u00a0for which A and B are K-similar.\nExample 1:\nInput: A = \"ab\", B = \"ba\"\nOutput: 1\n\n\nExample 2:\nInput: A = \"abc\", B = \"bca\"\nOutput: 2\n\n\nExample 3:\nInput: A = \"abac\", B = \"baca\"\nOutput: 2\n\n\nExample 4:\nInput: A = \"aabc\", B = \"abca\"\nOutput: 2\n\n\n\nNote:\n\n1 <= A.length == B.length <= 20\nA and B contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}\nclass Solution:\n    def kSimilarity(self, A: str, B: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}