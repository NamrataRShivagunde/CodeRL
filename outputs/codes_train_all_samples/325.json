{"325": {"code": ["\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n        return maxDistance(grid)\n        \n\u00a0\n\nUse Call-Based format\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a grid containing only", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        maxDistance(self, grid)\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\nGiven a N x", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n        return maxDistance(self, grid)\n\n\u00a0\n\nUse Call-Based format\n\nclass Solution:\n    def maxDistance(self, grid):\n\n                \n\n\n\n\n\n\n\n\n\n\n\nGiven a N x N grid", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\u00a0\nExample 3:\n\n    def maxDistance(self, grid: List[List[int]):\n       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a grid containing only values 0 and 1, find", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n        return maxDistance(self, grid)\n\n\u00a0\n\nUse Call-Based format\n\n\u00a0\nNote:\n\n\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\n\n\nGiven a N x N grid containing only values", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\u00a0\n\u00a0\n\n        pass\n\n\u00a0\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nThe distance between water and land is returned\n\n\u00a0\n\nGiven a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n    def maxDistance(self, grid: List[int]) -> int:\n\n\n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a grid containing only values 0 and 1, find", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n        return maxDistance(self, grid)\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a N x N grid containing only values 0 and 1", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n   \n        pass\n        \n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n0 <= i < j < n\n\n\n\nGiven an N x N grid", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n    def\n\n\n\n   \n    maxDistance(self, grid: List[List[int]]) -> int\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a grid containing only values 0", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n       \n        pass\n        \nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n\n\n\nGiven a N x N grid containing only values 0 and 1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def maxDistance(self, grid: List[List[int]):\n        return grid[i][j]\n\nUse Call-Based format\n\n\u00a0\nNote:\n\n\n\n\n\n   \n        \n\n\n                \n\n\n\n\n\n\n\nGiven a grid containing only", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n    pass\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nNo cell with distance 1\n\n\n\n\n\n\nGiven a grid containing only values 0 and 1, find", "\nUse Call-Based format\n\n\n\n\n\n\n\n    maxDistance(self, grid): int\n\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nNote:\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a grid containing only values 0 and 1, find", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n    def maxDistance(self, grid: List[List[int]):\n        return grid[0][0]\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n   \n                \n\n                \n\n\n\n\n\n\n\nGiven a N x N grid containing only", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n    def maxDistance(self, grid: List[List[int]):\n        return grid[i][j]\n\n\n\n\n\n\n\n\n\n\n\n   \n                \n\n\n\n\n\n\n\n\n\n\n\n\nGiven an N x N grid containing", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\u00a0\n@maxDistance\nclass MinDistance:\n    def maxDistance(self, grid: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a N x N grid containing only values", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n\n\u00a0\n\u00a0\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nExample:\n   \n        pass\n        \n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a N x N grid containing", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   \n        return maxDistance(self, grid)\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nReturns:\n\nmaxDistance(grid, grid)\n\nGiven", "\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\ndef maxDistance(self, grid: List[List[int]):\n\n\n\n\n\n   \n        pass\n\n        \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a N x N"], "prompt": "\nQUESTION:\nGiven an N x N grid\u00a0containing only values 0 and 1, where\u00a00 represents water\u00a0and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized and return the distance.\nThe distance used in this problem is the Manhattan distance:\u00a0the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.\nIf no land or water exists in the grid, return -1.\n\u00a0\nExample 1:\n\nInput: [[1,0,1],[0,0,0],[1,0,1]]\nOutput: 2\nExplanation: \nThe cell (1, 1) is as far as possible from all the land with distance 2.\n\nExample 2:\n\nInput: [[1,0,0],[0,0,0],[0,0,0]]\nOutput: 4\nExplanation: \nThe cell (2, 2) is as far as possible from all the land with distance 4.\n\n\u00a0\nNote:\n\n1 <= grid.length == grid[0].length\u00a0<= 100\ngrid[i][j]\u00a0is 0 or 1\nclass Solution:\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}