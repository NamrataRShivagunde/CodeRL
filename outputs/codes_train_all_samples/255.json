{"255": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n    def jump(self, nums: List[int]):\n        return 2\n    \nUse Call-Based format\n\nUse Python-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n    def jump(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of non-negative", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        \n\n\n\n   \n    def jump(self, nums: List[int]) -> int:\n        \n\n    jump(self, nums)\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of non-negative integers\n\n\nGiven an array", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    pass\n    \n\n\n   \n       \nGiven an array of non-negative integers, you are initially positioned at the first index of the array\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array of non-negative integers, you are positioned at\n\n\nGiven", "\n\n\n\n\n\n\n\n\n\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\nUse Call-Based format\n\n\n\n\n    def\n       \nUse Call-Based format\nGiven an array of non-negative integers, you are initially positioned at the first index\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        return jumps.jump(self, nums)\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven an array of non-negative integers,\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n        pass\n        \n\n\n\n   \n    pass\n\nGiven an array of non-negative integers, you are initially positioned at the first index of the array\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers, you", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    def jump(self, nums: List[int]) -> int:\n\n   \n       \n\n\n\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers, you are initially", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n        pass\n\n\n\n   :\nGiven an array of non-negative integers, you are initially positioned at the first index of the array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n        \nUse Call-Based format\n\n\n   \n        pass\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n2\n\nGiven an array of non-negative integers, you are initially", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def jump(self, nums: List[int]) -> int:\n       \n\n\n\n\n   \n    pass\n\nGiven an array of non-negative integers, you are initially positioned at the first index of the array\n\n\n\n\n\n\n\n\n\n\n\n\n    Given an array of non-negative", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n    def jump(self, nums: List[int]) -> int:\n        \nUse Call-Based format\n   \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n\n    def\n    pass\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nThe minimum number of jumps to reach the last index is 2\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\nUse Call-Based format\nGiven an array of non-negative integers, you are initially positioned at the first index of the array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n          \n\nUse Call-Like format\n\n\n\n\n   \n       \nGiven an array of non-negative integers, you are initially positioned at the first index of the array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n          \n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n       \n\n\n\n\n   \n    pass\n\n\nGiven an array of non-negative integers, you are initially positioned at the first index of the array\n\n\n\n\n\n3 steps\n\nNote:\n\n\n\n\n\n\n\n\n\n\nGiven an array of non", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    pass\n\n\n\n\n   \n       \nUse Call-Based format\nGiven a list of non-negative integers, you are initially positioned at the first index of the array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based formatGiven an array", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n        \nUse Call-Based format\n\n\n\n    def\n        \n    To be called in call-based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array of non-negative integers,", "\nUse Call-Based format\n\n\n\n    def jump(self, nums: List[int]) -> int:\n\n\n\n\n\n\n\n   \n       \n\n\n\n   \n       \n    jumps = jumps + jump(self, nums)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of non-negative integers,"], "prompt": "\nQUESTION:\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nYour goal is to reach the last index in the minimum number of jumps.\n\nExample:\n\n\nInput: [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nNote:\n\nYou can assume that you can always reach the last index.\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}