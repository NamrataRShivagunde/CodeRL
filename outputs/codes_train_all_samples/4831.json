{"4831": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\nTired of those repetitive javascript challenges?\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour code:\n\n---\n\nUse Call-Based format\n---\n\n---\n\n\n\n\n\n\n---\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n---\n\n\n\n\n\nTired of those repetitive", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n---\n\nTired of repetitive javascript challenges?\nTired of repetitive javascript challenges?\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n---\n\nTired of those", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n---\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n---\n\n\n\n\nTired of those repetitive javascript", "\nUse Call-Based format\n---\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n---\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\nTired of those repet", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\nTired of those repetitive javascript challenges?\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n---\n\n\n\n\n\n\n\nTired of those repetitive javascript challen", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\n---", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nTired of those repetitive javascript challenges?\n\n---\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n---\n\n\n\n\n\n\n---\n\n", "\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n---\n\nUse Call-Based format\n\nSAMPLES:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\nTired of those repetitive javascript", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nTired of those repetitive javascript challenges?\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\nTired of those", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n---\n\nTired of repetitive javascript challenges?\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\n---", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n---\n\n\n\n\n\n---\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n---\n\n\n\n\n\nTired of those", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\nUse Call-Based format\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n---\n\n\n---\n\n", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nTired of those repetitive javascript challenges?\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\nThe function solved with a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\nThe mystery function is called with the same input strings.\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\nTired of those repet", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTired of the kata test cases?\n\n\n\n\n\nTired of those repetitive javascript challenges", "\nUse Call-Based format\n---\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\nTired of those repetitive javascript challenges?\n\n\n\n\t\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n---\n\n---\n\n\n\n\n\n\n\nTired of those repetitive javascript challenges?\n\n\n\n\n\n\n\n\nTired of repetitive javascript challenges?\n\n\n\n\n\n"], "prompt": "\nQUESTION:\nTired of those repetitive javascript challenges? Here's a unique hackish one that should keep you busy for a while ;)\n\nThere's a mystery function which is already available for you to use. It's a simple function called `mystery`. It accepts a string as a parameter and outputs a string. The exercise depends on guessing what this function actually does.\n\nYou can call the mystery function like this:\n\n```python\nmy_output = mystery(\"my_input\")\n```\n\nUsing your own test cases, try to call the mystery function with different input strings and try to analyze its output in order to guess what is does. You are free to call the mystery function in your own test cases however you want.\n\nWhen you think you've understood how my mystery function works, prove it by reimplementing its logic in a function that you should call 'solved(x)'. To validate your code, your function 'solved' should return the same output as my function 'mystery' given the same inputs.\n\nBeware! Passing your own test cases doesn't imply you'll pass mine.\n\nCheaters are welcome :)\n\nHave fun!\n\n---\n\nToo easy? Then this kata will totally blow your mind:\n\nhttp://www.codewars.com/kata/mystery-function-number-2\ndef solved(string):\n\t\nUse Call-Based format\nANSWER:\n"}}