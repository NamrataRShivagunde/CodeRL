{"2682": {"code": ["\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset letters = {1, 2, 3}\nset numbers = {1, 2, 3}\n```\n\n\n\n\n\n\nset numbers = {1, 2", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nset numbers = {1, 2, 3, 4}\nset letters = {2, 3, 4}\nset numbers = {3, 4}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#  set numbers = {1", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet numbers = {1, 2, 3, 4}\nset letters = {2, 3, 4}\n\n\n\n\n\n\n\n\n\n\n\n\nset numbers = {1, 2, 3, 4}\nset letters = {1, 2}\n\n\n\ndef\n```", "\n\n\nset letters= {a, b, c, d, d}\nset numbers = {a, b, c, d}\nset letters = {a, b, d}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset letters = {a, b, c, d}\n\n\n\n\ndef\n```", "\t\nUse Call-Based format\n\n\n\n\n\n\nset letters = {a,b,c,d}\nset numbers = {a,b,c,d}\n```\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset numbers= {1,2,3,4}\n\n\nGiven an array of elements (", "\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\nSet numbers = {1, 2, 3, 4}\nset letters = {1, 2, 3, 4}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset numbers = {1, 2, 3, 4}\n\n\n\n```python\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\nset letters = {a, b, c, d}\nset numbers = {b, c, d}\nset numbers = {d, b, c}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nset numbers = {1, 2", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset letters= {a, b, c, d}\nset numbers= {b, c, d}\n```\n\n\n```", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nset letters = {a, b, c, d}\nset numbers = {a, b, c, d}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset letters = {a, b, c}\nset numbers = {a}\n\n``", "\n\t\nUse Call-Based format\n\n\n\n\n\n\nset letters = {1, 2, 3}\nset numbers = {2, 3}\nset letters = {2, 3}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset letters = {a, b, c, d}\n\n\n\n```python\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nset numbers = {1, 2, 3, 4}\nset letters = {1, 2, 3}\nset numbers = {2, 3}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset numbers = {1, 2, 3}\n\n\n``", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset letters = {1, 2, 3}\nset numbers = {2, 3, 4}\n```\n\n\n\ndef\n\n```python\n", "\n\n\n\n\n\n\n\nset numbers = {1, 2, 3}\nset letters = {2, 3}\nset numbers = {2, 3}\nset letters = {3, 4}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nest_subsets()```\n\n\n\n```python", "\t\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nset letters = {a, b, c, d}\nset numbers = {a, b, c, d}\nset letters = {a, b, d}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe function ``est_", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nSet numbers and letters = {1, 2, 3}\nset numbers = {2, 3, 4}\nset letters = {2, 3, 4}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nset numbers = {1", "\n\t\nUse Call-Based format\n\n\n\n\n\n\nSet numbers = {1, 2, 3}\nset letters = {1, 2, 3}\nset numbers = {2, 3}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset numbers = {1, 2, 3}\n\n\n\n\n\n\n\n```python", "\n\nUse Call-Based format\n\n\nset letters = {1, 2, 3, 4}\nset numbers = {2, 3, 4}\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nset numbers = {1, 2, 3, 4}\n```\n\n\n\ndef\n``", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset numbers = {1, 2, 3}\nset letters = {2, 3}\n\n\n\n\n\n\n```python\nest_", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\nSet numbers = {1,2,3,4}\nset letters = {1,2,3,4}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset numbers = {1,2,3,4}\n\n\n\n```", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nset numbers= [1,2,3,4]\nset letters= {1,2,3}\n\n\n\n\n\n\n\n\n\n\n\nset numbers = {1,2,3}\nset letters = {2}\n\n\n\n\n\n\n```"], "prompt": "\nQUESTION:\nGiven a set of elements (integers or string characters) that may occur more than once, we need to know the amount of subsets that none of their values have repetitions.\nLet's see with an example:\n``` \nset numbers = {1, 2, 3, 4}\n``` \nThe subsets are:\n``` \n{{1}, {2}, {3}, {4}, {1,2}, {1,3}, {1,4}, {2,3}, {2,4},{3,4}, {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4}, {1,2,3,4}} (15 subsets, as you can see the empty set, {}, is not counted)\n``` \nLet's see an example with repetitions of an element:\n```\nset letters= {a, b, c, d, d}\n```\nThe subsets for this case will be:\n```\n{{a}, {b}, {c}, {d}, {a,b}, {a,c}, {a,d}, {b,c}, {b,d},{c,d}, {a,b,c}, {a,b,d}, {a,c,d}, {b,c,d}, {a,b,c,d}} (15 subsets, only the ones that have no repeated elements inside)\n```\n\nThe function ```est_subsets()``` (javascript: ``estSubsets()```) will calculate the number of these subsets.\nIt will receive the array as an argument and according to its features will output the amount of different subsets without repetitions of its elements.\n```python\nest_subsets([1, 2, 3, 4]) == 15\nest_subsets(['a', 'b', 'c', 'd', 'd']) == 15\n```\nFeatures of the random tests:\n```\nLow Performance Tests: 40\nLength of the arrays between 6 and 15\n\nHigh Performance Tests: 80\nLength of the arrays between 15 and 100 (Python an Ruby) and between 15 and 50 javascript)\n```\nJust do it!\ndef est_subsets(arr):\n\t\nUse Call-Based format\nANSWER:\n"}}