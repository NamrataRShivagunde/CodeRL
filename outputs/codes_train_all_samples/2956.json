{"2956": {"code": ["\n*Translations appreciated*\n\n*Translations appreciated*\n\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` with \"000\"\n\n` with \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\" with \"111", "\n\n*Translations appreciated*\n\n*Translations appreciated*\n\n*Translations appreciated*\n\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` -> \"000\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\" with \"111\"", "\n\n\n*Translation appreciated*\n\nQUESTION:\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\" with \"111", "\n\n\n\n\n*Translation appreciated*\n\n\n\n## Task 0: Encode function:\n\n*Translations appreciated*\n\n*Translations appreciated*\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"0", "\n\n\n*Translation appreciated*\n\nQUESTION:\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n` with \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with", "\n\n\n\n\n*Translations appreciated*\n\nQUESTION:\n*Translations appreciated*\n\nQUESTION:\n\n\n\n## Task 3: Background information:\n\n\n\n\n\n\n\n\n\n\n\n` with`` with \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"0\"", "\n\n\n\n\n*Data transmissions*\n\nQUESTION:\n\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n1\" with \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task 1: Decode function:\n\n- \"000\" --> \"111\"\n\n-0\" with", "\n*Translations appreciated*\n\n*Translations appreciated*\n\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\" with \"000\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"000\", then replace \"1\" with \"111\"", "*Translation appreciated*\n\n\n\n\n\n\n## Task 3: Background function:\n\n*Translations appreciated*\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` -> ```101``` -> ```111```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"000\"\n", "\n\n\n\n\n*Functions*\n\n*Translations appreciated*\n\n*Functions*\n\n*Functions*\n\n*Functions*\n\n\n\n\n\n\n\n\n\n\n\n\n\" with \"000\"\n` with \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"1\"\n1.", "\n\n\n\n## Examples:\n\n## Task 1: Encode function:\n\n*Translations appreciated*\n\n### Task 2: Decode function:\n\n*Translations appreciated*\n\n###\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"0", "*Translations appreciated*\n\nNOTE:\n*Translations appreciated*\n\nNOTE:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` -> ``000``` -> ``111``` -> ``111```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\" with \"111\", then replace", "\n\n\n\n## General:\n\n*Translations appreciated*\n\n*Translations appreciated*\n\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\" with \"1\"", "*Translations appreciated*\n\nQUESTION:\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` with \"000\" and replace \"111``` with \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"111\", and then replace \"1", "\n\n\n\n\n\n\n\n\n## Task 3: Data transmissions:\n\n*Translations appreciated*\n\n\n\n\n\n\n\n``` -> \"000\"\n` -> \"111\"`\n\n` -> \"1001\"``\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"000\"\n\n- 111 --> 11``", "\n\n\n\n\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n``` with \"000\" and \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n000\" with \"111\", then replace \"011", "\n\n\n*Translations appreciated*\n\nQUESTION:\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` ->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"0", "\n\n\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`` with\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"0", "\n\n\n\n\n*Translations appreciated*\n\nQUESTION:\n*Translations appreciated*\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` with \"000\" and replace \"111``` with \"111\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\" with \"000", "\n\n## Task 1: Generalization:\n*Translations appreciated*\n\nQUESTION:\n\n*Translations appreciated*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n``` -> ```01101000``` -> ```01111001```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\""], "prompt": "\nQUESTION:\n*Translations appreciated*\n\n## Background information\n\nThe Hamming Code is used to correct errors, so-called bit flips, in data transmissions. Later in the description follows a detailed explanation of how it works.\nIn this Kata we will implement the Hamming Code with bit length 3, this has some advantages and disadvantages:\n- \u2713 Compared to other versions of hamming code, we can correct more mistakes\n- \u2713 It's simple to implement\n- x  The size of the input triples\n\n\n\n## Task 1: Encode function:\n\nFirst of all we have to implement the encode function, which is pretty easy, just follow the steps below.\n\nSteps:\n1. convert every letter of our text to ASCII value\n2. convert ASCII value to 8-bit binary string\n3. replace every \"0\" with \"000\" and every \"1\" with \"111\"\n\nLet's do an example:\n\nWe have to convert the string ```hey``` to hamming code sequence.\n\n1. First convert it to ASCII values:\n\n```104``` for ```h```, ```101``` for ```e``` and ```121``` for ```y```.\n\n\n2. Now we convert the ASCII values to a 8-bit binary string:\n\n```104``` -> ```01101000```, ```101``` -> ```01100101``` and ```121``` -> ```01111001```\n\nif we concat the binarys we get ```011010000110010101111001```\n\n\n3. Now we replace every \"0\" with \"000\" and every \"1\" with \"111\":\n\n```011010000110010101111001``` -> ```000111111000111000000000000111111000000111000111000111111111111000000111```\n\nThat's it good job!\n\n\n## Task 2: Decode function:\n\nNow we have to check if there happened any mistakes and correct them.\nErrors will only be a bit flip and not a loose of bits, so the length of the input string is always divisible by 3.\n\nexample: \n- 111 --> 101  this can and will happen\n- 111 --> 11   this won't happen\n\nThe length of the input string is also always divsible by 24 so that you can convert it to an ASCII value.\n\nSteps:\n1. Split the string of 0 and 1 in groups of three characters example: \"000\", \"111\"\n2. Check if an error occured:\n If no error occured the group is \"000\" or \"111\", then replace \"000\" with \"0\" and \"111\" with 1\n If an error occured the group is for example \"001\" or \"100\" or \"101\" and so on...\n Replace this group with the character that occurs most often. example: \"010\" -> \"0\" , \"110\" -> \"1\" \n\n3. Now take a group of 8 characters and convert that binary number to decimal ASCII value\n4. Convert the ASCII value to a char and well done you made it :)\n\n\n\nLook at this example carefully to understand it better:\n\nWe got a bit sequence:\n\n```100111111000111001000010000111111000000111001111000111110110111000010111``` \n\nFirst we split the bit sequence into groups of three:\n\n```100```, ```111```, ```111```, ```000```, ```111```, ```001``` ....\n\nEvery group with the most \"0\" becomes \"0\" and every group with the most \"1\" becomes \"1\":\n\n```100``` -> ```0``` Because there are two ```0``` and only one ```1```\n\n```111``` -> ```1``` Because there are zero ```0``` and three ```1```\n\n```111``` -> ```1``` Because there are zero ```0``` and three ```1```\n\n```000``` -> ```0``` Because there are three ```0``` and zero ```1```\n\n```111``` -> ```1``` Because there are zero ```0``` and three ```1```\n\n```001``` -> ```0``` Because there are two ```0``` and one ```1```\n\nNow concat all 0 and 1 to get ```011010000110010101111001```\n\nWe split this string into groups of eight:\n```01101000```, ```01100101``` and ```01111001```.\n\nAnd now convert it back to letters:\n\n```01101000``` is binary representation of 104, which is ASCII value of ```h```\n\n```01100101``` is binary representation of 101, which is ASCII value of ```e```\n\n```01111001``` is binary representation of 121, which is ASCII value of ```y```\n\nNow we got our word ```hey``` !\ndef encode(string):\n\t\nUse Call-Based format\nANSWER:\n"}}