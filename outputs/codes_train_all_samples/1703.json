{"1703": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---+---+---+---+---+---", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"<<<<<<\" -> \"\\*p += 4;\\n\"\n\n\n\n\n\n\n\n\n\"p += 5;\\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[+++] -> \\*p += 2;\\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n++++++\n  p += 2;\n  p -= 2;\n\n\n\n\n\n\n\n -> \"\"\n\n\n\n\n\n\n\n\n -> \"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+++\np += 2;\n\n\n+++\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\\*p = getchar();\\n\" -> \"\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"+\\*p = \\*p + \\*p +\\*p +\\*p +\\*p +\\*p + \\*p +\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np += 2;\np -= 2;\n\n\n\n\n\n\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**\n**\n*\n* +\n*+\n*+\n*+", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"++\" -> \"++\" -> \"++\" -> \"++\" -> \"++\" -> \"++\"\n\n\n\n\n\n\n\n\n -> \"++\" -> \"++\" -> \"++\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n+++++\n+++\n+++\n+++\n+++\n\n+++\n+++\n\n\n\n\n\n\n\n\n\n\"\\*p += 2;\\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"++++\" -> \"+++\";\n\n\n\n\n\n\\n\\n\\n\\n\\n\\n\\n\\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+++++++++++++", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\\n\"\n\n\n\n\n\n\n -> \"\\*p = getchar();\\n\"\n\n\n\n\n\n\n\n\n\n -> \"\\*p = getchar();\\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np += 2;\n\n\n\n\n\n\\*p = getchar();\n\n -> p += 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+++++++++\n+++", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"++++\" -> \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+ \"+\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[+++] -> \"\"\n+++\n+++\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+++++\n+++\n+++\n+++\n+++\n++\n++\n++\n\n\n\n\n\n\n\n+\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+\\*p = getchar();\n\\*p = getchar();\n\n\n\n\n\n\n\\*p = p += 2;\n\\*p = p -= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   ..\n\n\n\n**", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+++|--+|--+|--+|--+|--+|--+|--+|--+|--+|--+|--+|--+|\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+-+", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"--\" -> \"--\"\n\n\n\n\"++\" -> \"+++\" -> \"+++\" -> \"+++\" -> \"+++\" -> \"+++\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    p += 2;\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n\n+++\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"<<<<<<<<\" -> \"\"\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"+\\*p = \\*p;\\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"++\" -> \"++\" -> \"++\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+++++++++++++++++++++++++++++++++++++++++\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+"], "prompt": "\nQUESTION:\nIntroduction\nBrainfuck is one of the most well-known esoteric programming languages. But it can be hard to understand any code longer that 5 characters. In this kata you have to solve that problem.\n\nDescription\n\nIn this kata you have to write a function which will do 3 tasks:\n\nOptimize the given Brainfuck code.\nCheck it for mistakes.\nTranslate the given Brainfuck programming code into C programming code.\n\n\nMore formally about each of the tasks:\n\n\n\nYour function has to remove from the source code all useless command sequences such as: '+-', '<>', '[]'. Also it must erase all characters except +-<>,.[].\nExample:\n\"++--+.\" -> \"+.\"\n\"[][+++]\" -> \"[+++]\"\n\"<>><\" -> \"\"\n\n\nIf the source code contains unpaired braces, your function should return \"Error!\" string.\n\n\nYour function must generate a string of the C programming code as follows:\n\n\n\n\nSequences of the X commands + or - must be replaced by \\*p += X;\\n or \\*p -= X;\\n.\nExample:\n\"++++++++++\" -> \"\\*p += 10;\\n\"\n\"------\" -> \"\\*p -= 6;\\n\"\n\n\n\nSequences of the Y commands > or < must be replaced by p += Y;\\n or p -= Y;\\n.\nExample:\n\">>>>>>>>>>\" -> \"p += 10;\\n\"\n\"<<<<<<\" -> \"p -= 6;\\n\"\n\n\n\n. command must be replaced by putchar(\\*p);\\n.\nExample:\n\"..\" -> \"putchar(\\*p);\\nputchar(\\*p);\\n\"\n\n\n\n, command must be replaced by \\*p = getchar();\\n.\nExample:\n\",\" -> \"\\*p = getchar();\\n\"\n\n\n\n[ command must be replaced by if (\\*p) do {\\n. ] command must be replaced by } while (\\*p);\\n.\nExample:\n\"[>>]\" ->\nif (\\*p) do {\\n\n  p += 2;\\n\n} while (\\*p);\\n\n\n\n\nEach command in the code block must be shifted 2 spaces to the right accordingly to the previous code block.\nExample:\n\"[>>[<<]]\" ->\nif (\\*p) do {\\n\n  p += 2;\\n\n  if (\\*p) do {\\n\n    p -= 2;\\n\n  } while (\\*p);\\n\n} while (\\*p);\\n\n\n\n\n\n\nExamples\n\nInput:\n+++++[>++++.<-]\nOutput:\n*p += 5;\nif (*p) do {\n  p += 1;\n  *p += 4;\n  putchar(*p);\n  p -= 1;\n  *p -= 1;\n} while (*p);\ndef brainfuck_to_c(source_code):\n\t\nUse Call-Based format\nANSWER:\n"}}