{"1717": {"code": ["\nif:java\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```if:java\n\ntop_3_words(\"  //gatsd\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop_3_words(\"e", "\n```if:java\n\n\n\n\n\ntop_3_words(text):\n\t\n\n\n\n\n\n\n\n```if:java\n\n\n\n\n\n```if:java\n\n\n\n\n\n```endif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop_3_words(\"\")\n\n\n\n", "\n```\n\n\n\nTop 3 words:\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n```if:java\n\n\n\n\n```\n\n```\n\n\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop_3_words(\"In a", "\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop_3_words(\"\"\"\n\nTop 3 words\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# => [\n# \"e\",", "\n```\n\n\n\n\n\n\ntop_3_words(\"asdf\")\n\n```\n\n\n\n\n```\n\n\n\n```\n\n\n```\n\n\n\n\n```if:java\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# => [\n# ", "\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```if:java\n\n\n```\n\n\n\n```\n\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# => [", "\n```\n\nUse Call-Based format\n\n\n\n\n\n\nif:java\n\n\n\n```\n\n\n\n\n```if:java\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# => [\n# \"a", "\n\n```if:java\n\n\n\n\n```endif\n\n\n\n\n\n\n\n\n\n\n\nuse Call-Based format\n```\n\n\n\n\n\n\n\n\n```endif\n\n\n\n```endif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# => [w", "\n```if:java\n\n\n\n\n\ntop_3_words(\"\")\n\n```if:java\n\n\n\n\n```\n\n\n\n```if:java\n\n\n\n\n\n\n\n\n\n\n```if:java\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop_3_words(\"e ddd", "\n''''''')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif:java\n\n\n\n\n\n\n\n\ntop3_words(\"  //\n\n\n\n\n\n\n\n```if:java\n\n\n\n```if:java\n\nUse Call-Based format\n```\n\n\n\n\n\n\n\n\n```if:java", "\n\nTop3_words:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```if:java\n\n\n\n\ntop_3_words(String s)\n```\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\nFor", "\n\n\n\n\n\nTop3_words:\n\n \n\nTop3_words(text):\n\t\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop3_words(\"A\", \"B\")\n\ntop3_words(\"e\")\n\n```\n\n\n\n\n\n\n\n\n\n# 1", "\n\ntop3_words(\"The most commonly used word\")\n\n\n\n\n\n\n\n\nTop3_words:\n\n```java\n\n\n\n\n```if:java\n\n\n\n\n```if:java\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n# => [e", "\n'''''''.format(\n''''''\n\n\n\n\n\n\nTop 3 words:\n\n```java\n\n\n\n\n```\n\n\n\n\n\n\n```if:java\n\n\n\n\n```else:java\n\n\n\n```else:java\n\n\n\n\n\n\n\n\n\n\n```if:java\n\n# Use", "\n\n\ntop_3_words(\"abc\")\n\ntop_3_words(\"abcd\")\n\ntop_3_words(\"bcd\")\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n\ntop_3_", "\n```if:java\n```\n\n\n\n\n\n\n\n\n\n\n```if:java\n\nuse Call-Based format\n```\n\n-\n\n\n\n```if:java\n\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The above", "\n\n\n\n\n\nTop3_words:\n\nUse Call-Based format\n\n\n\n\n```java\n\n\n\n```\n\n\n\n\n\n\n```if:java\n\n\n```if:java\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:java\n\nFor", "\n'''''''''''.format(\ntop3_words):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```if:java\nFor a Java user:\njava\nfor a Java user:\njava\n```\n\n\n\n\n\n\n\n\n\n``", "\n```\n\n\n\n\n\n\n\n\nTop3:\n\n\t\tTop 3 words in a string\n\t\tTop 3 words in a String\n\t\tTop 3 words in a String\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# - If no text:\n", "\n```\n\n\n\n\n```\n\nIf:java\n\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n```if:java\n\n\n\n\n```if:java\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n# The"], "prompt": "\nQUESTION:\nWrite a function that, given a string of text (possibly with punctuation and line-breaks),\nreturns an array of the top-3 most occurring words, in descending order of the number of occurrences.\n\nAssumptions:\n------------\n\n- A word is a string of letters (A to Z) optionally containing one or more apostrophes (') in ASCII. (No need to handle fancy punctuation.)\n- Matches should be case-insensitive, and the words in the result should be lowercased.\n- Ties may be broken arbitrarily.\n- If a text contains fewer than three unique words, then either the top-2 or top-1 words should be returned, or an empty array if a text contains no words.\n\nExamples:\n------------\n\n```\ntop_3_words(\"In a village of La Mancha, the name of which I have no desire to call to\nmind, there lived not long since one of those gentlemen that keep a lance\nin the lance-rack, an old buckler, a lean hack, and a greyhound for\ncoursing. An olla of rather more beef than mutton, a salad on most\nnights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra\non Sundays, made away with three-quarters of his income.\")\n# => [\"a\", \"of\", \"on\"]\n\ntop_3_words(\"e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e\")\n# => [\"e\", \"ddd\", \"aa\"]\n\ntop_3_words(\"  //wont won't won't\")\n# => [\"won't\", \"wont\"]\n```\n\n```if:java\nFor java users, the calls will actually be in the form: `TopWords.top3(String s)`, expecting you to return a `List`.\n```\n\nBonus points (not really, but just for fun):\n------------\n\n1. Avoid creating an array whose memory footprint is roughly as big as the input text.\n2. Avoid sorting the entire array of unique words.\ndef top_3_words(text):\n\t\nUse Call-Based format\nANSWER:\n"}}