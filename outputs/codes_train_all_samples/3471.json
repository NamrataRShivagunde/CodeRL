{"3471": {"code": ["\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n# MOD 256 without the MOD operator\n# MOD 256 without the %-operator\n# MOD 256 without the %-operator\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n# MOD 256 with the %-", "\n\n\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n# MOD256_without_mod\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n#\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n#\n\n\n\n# MOD-256", "\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n# MOD 256 without the MOD operator\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n#\n\n# MOD 256 without the MOD operator\n#\n\n# MOD", "\n\t\nUse Call-Based format\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the % operator\n\nResult\n\n\n\n\n# MOD 256 without the", "\n\n\n# MOD 256 without the MOD operator\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nThe %-operator % (aka mod/modulus/remainder):\n```\n\n\n\n\n#\n\n\n\n# MOD-256 with", "\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n# MOD 256\n\n\n\n# MOD", "\n# MOD 256 without the MOD operator\n\n\n\n\nUse Call-Based format\n\n\n\n\n%-operator\n\nThe %-operator\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n# MOD 256 with the %", "\n\n\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n# MOD 256 without the MOD operator\n# MOD 256\n#\n\n# MOD", "\nUse Call-Based format\n\n\n\n\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n\n\n\n\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n# MOD 256 with the % operator\n#\n\n\n\n#", "\n\n\n# MOD 256 without the MOD operator\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\nReturns the remainder\n\n\n\n\n\n# MOD", "\n\n\n\nMOD256_without_mod(number):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n# MOD 256 without the MOD operator\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the % operator\n\n\n\n\n\n# MOD 256 without the % operator\n", "\n\n\n# MOD 256 without the MOD operator\n\nMOD256_without_mod(number):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n#\n\n#\n\n# MOD 256", "\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n# MOD 256 without the MOD operator\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\nReturns:\n\n\n\n\n\n\n\n# MOD", "\n\n\n# MOD 256 without the %-operator\n# MOD 256 without the %-operator\n\n\n\n\n\n\n\n# MOD 256 without the %-operator\n\n\n\n\n\n\n\t\n# MOD 256 without the %-operator\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n# MOD 256 without the MOD operator\n\n", "\nUse Call-Based format\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\t\n# MOD 256\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\nReturns\nResult\n\n\n\n\n\n\n# MOD 256", "\n\n\n# MOD 256 without the %-operator\n# MOD 256 without the %-operator\n\n\n\n\n\n\n\n\n\n# MOD 256 without the %-operator\n\n\n\n\n\n# MOD 256 without the %-operator\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n# MOD-256 with", "\n\n\n\n%\n%\n%\n\n%\n\n\n\n\n\n\n\n\n%\n\n# MOD 256 without the % operator\n\n\n\n\n# MOD 256 without the %-operator\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n#\n\n# MOD", "\n\n\n# MOD 256 without the % operator\n# MOD 256 without the % operator\n# MOD 256 without the % operator\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n#\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n# MOD-operator", "\nUse Call-Based format\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n# MOD 256 without the MOD operator\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n# MOD 256 without the", "\n\nUse Call-Based format\n\n\n\n\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n# MOD 256 without the MOD operator\n\n# MOD 256 without the MOD operator\n# MOD 256 without the MOD operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# MOD 256 with the % operator\n\n\n\n\n\n# MOD 256 without the %"], "prompt": "\nQUESTION:\n# MOD 256 without the MOD operator\n\nThe MOD-operator % (aka mod/modulus/remainder):\n```\nReturns the remainder of a division operation.\nThe sign of the result is the same as the sign of the first operand.\n(Different behavior in Python!)\n```\n\nThe short unbelievable mad story for this kata:\nI wrote a program and needed the remainder of the division by 256. And then it happened: The \"5\"/\"%\"-Key did not react. It must be broken! So I needed a way to:\n```\nCalculate the remainder of the division by 256 without the %-operator.\n```\n\nAlso here some examples:\n```\nInput 254  -> Result 254\nInput 256  -> Result 0\nInput 258  -> Result 2 \nInput -258 -> Result -2 (in Python: Result: 254!)\n```\nIt is always expected the behavior of the MOD-Operator of the language!\n\nThe input number will always between -10000 and 10000.\n\nFor some languages the %-operator will be blocked. If it is not blocked and you know how to block it, tell me and I will include it.\n\nFor all, who say, this would be a duplicate: No, this is no duplicate! There are two katas, in that you have to write a general method for MOD without %. But this kata is only for MOD 256. And so you can create also other specialized solutions. ;-)\n\nOf course you can use the digit \"5\" in your solution. :-)\n\nI'm very curious for your solutions and the way you solve it. I found several interesting \"funny\" ways.\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have also created other katas. Take a look if you enjoyed this kata!\ndef mod256_without_mod(number):\n\t\nUse Call-Based format\nANSWER:\n"}}