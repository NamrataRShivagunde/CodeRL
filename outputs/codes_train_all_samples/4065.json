{"4065": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n  1234567890\n  123456789\n  123456789\n  123456789\n\n\n\n:\n\n\n\n\n\n\n\n\n\n \n  [1234567890, 1023456879", "\nUse Call-Based format\n\nGet a sequence of pandigital numbers in base 10\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n  [102345678, 1023456878, 1023456978]\n\n\n\nUse Java format\n\n\n\n\n-\n\n\n\n\n\n\n```python\n ", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Java call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n  [1023456789, 1023456879, 1023456878, 1023456978]\n\n\n:\n\n\n\n\n   \n\n\n\n\n  # get_sequence(offset, size)\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Java call-based format\n\n\n\n\n  1234567890\n  1234567890\n  1234567890\n  1234567890\n\n\n\n\n \n\n\n \n \n  1234567890\n", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n    1234567890\n    123456898\n    123456897\n    123456978\n\n\n\n\n\n\n\n\n\n \n\n\n \n \n  [1234567890, 1023456", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n  1234567890\n  1234567890\n  1234567890\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n \n\n\n\n\n\n  [\n    1023456", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Java call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsage:\n```python\n\nUse Java call-based format\n\n\n\n\n\n\n\n\n\n\nUse Java:\n\n- Return the number in a given base\n\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n  1234567890\n  123456879\n  123456878\n  123456978\n  123456978\n\n\n\n:\n\n\n\n\n-\n\n\n\n\n\t\n\n\n```python", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\nUse Java format\n```python\n\nUse Java call\n```\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\nUse Java:\n\n-\n\n\n\n\n\n\n```python\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python:\n```python\nget_sequence(0, 5)\n```\n\n\n\n:\n\n\n\n\n\n    1023456789\n\n   \n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Java-based format\n:\nUse Java-Based format\n\n\n\n\n\n\n\n\n\n\n\n  1.\n  2.\n  3.\n  4.\n  5.\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n```python\n  > get_sequence", "\nUse Call-Based format\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Java format\n\nUse Java:\n```python\n\n\n\n\n\n\n\n\n\n\n\n# Rule:\n#\n\n# Rule 1:\n#  This", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nUse Java:\n```python\n\nUse Java:\n```\n\n\n\n:\n\n\n\n\n\n   \n\n\n\n\n\t\n\n\n```python\n\n  >", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n  # [1, 3, 4, 5, 5, 2, 3, 4, 5]\n  # [3, 4, 6]\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n```python", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n  *  - pandigital number in base 10\n  *  - pandigital number in base 10\n\n\n:\n\n\n\n\n  *\n\n\n\n\t\n  *  - pandigital numbers", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Java-Based format\nUse Java-based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Java-based format\n\nUse Java-Based format\n\n\n\n\n\n\n\n\n```python\n\n\n\n  # Do something with this challenge\n\n\n\n``", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Java:\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n    1234567890\n    1234567891\n    1234567890\n\nRules:\n```python\n\n\n:\n\n\n\n-\n\n\n\n\n\n```python\n  >", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Java call-based format\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n    10234567890\n    1023456879\n    1023456878\n\n\n\n\n\n\n\n\n\n  # pylint: disable=W0212\n\n    1)", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Java format\n\nUse Java:\n\nUse Java-based format:\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n```python\n  > get", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Java format\n```python\n\n\n\n\n\nUse Java format\n\n\n\n\n\n\n  1234567890\n\n \n\n\n\n\n \n  1234567890\n\n"], "prompt": "\nQUESTION:\nIn mathematics, a **pandigital number** is a number that in a given base has among its significant digits each digit used in the base at least once. For example, 1234567890 is a pandigital number in base 10.\n\nFor simplification, in this kata, we will consider pandigital numbers in *base 10* and with all digits used *exactly once*. The challenge is to calculate a sorted sequence of pandigital numbers, starting at a certain `offset` and with a specified `size`.\n\nExample:\n```python\n  > get_sequence(0, 5)\n  [1023456789, 1023456798, 1023456879, 1023456897, 1023456978]\n```\n\nRules:\n- We are looking for positive pandigital numbers in base 10.\n- Each digit should occur `exactly once`.\n- A pandigital number can't start with digit zero.\n- The offset is an integer (negative, zero or positive number) (long in Java)\n- The size is a positive integer number (int in Java)\n- Return the `size` pandigital numbers which are not smaller than the `offset`. If there is not enough `size` pandigital numbers, just return all of them.\n- Return an empty array if nothing is found.\ndef get_sequence(offset, size):\n\t\nUse Call-Based format\nANSWER:\n"}}