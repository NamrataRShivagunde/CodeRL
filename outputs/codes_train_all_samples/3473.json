{"3473": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n:\n\n\n:\n\n\n\n\n\nKata:\n\n\n`\n\n\n\n```python -m", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\ndef\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\nUse Call-Based format\n:\n\n\n\t\n:\n\n\n\n\n\n:\n\n\n\n\n\t\n\n\n\n```\nHaskell\n", "\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nb) The 1 b's disap", "\t\nUse Call-Based format\t\n\n\t\nUse Call-Based format\n\n:\n\n\n\n\t\nUse Call-Based format\n\t\n\n:\n\nHaskell\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n```python -m", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\ndef\n\t\nUse Call-Based format\n\n```\n\nUse Call-Based format\n```\n\n\n\n\n\n\n\n\n:\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```\n\nHaskell\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\ndef\n\t\nUse Call-Based format\n\nREQUIRE:\n\t\nUse Call-Based format\n\nREQUIRE:\n\n\n\n\n\n\n:\n\n\n:\n\n\n\n:\n\n\n\n\n\t\n\n\t\n\n\n```", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\ndef\n\t\nUse Call-Based format\n\nANSWER:\n\nUse Call-Based format\n\nWITH:\n\t\nUse Call-Based format\n\n\n\n\n\n\n:\n\n\n:\n\n\n\n\n:\n\n\n\t\n\ts = 'abcde'\n", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\ndef\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\t\n\nHaskell\n\n\n\n\n\t\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\ndef\n\n\n\n\n\n\nUse Call-Based format\n\n```\n\nUse Call-Based format\n```\n\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n## Example:\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\ndef\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\t\n:\n\n\n\t\n\t\n:\n\n\n\n\n\n:\n\n\n\n\n\n```Kata`\nIn this", "\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n:\n\nUse Call-Based format\n\n\n\ndef\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n:\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n```\n\nIf you", "\n\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\n\n\ndef\n\t\nUse Call-Based format\n\t\nUse Call-Based format\n\t\nExample:\n\n\t\nUse Call-Based format\n\n\n\n\n\n:\n\n\n\n\n\n\n\nHaskell\n\n\n\n\n\treturn s\n\n\n\t#!", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\ndef\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\t\n:\n\n\t\n\n\t\n\n\n\n\n\n\n\n\nHaskell\n\n\n\n\n\n\n\n    # s = 'abc", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\ndef\n\t\nUse Call-Based format\n\nfunction doubles(s)\n\nUse Call-Based format\nfunction doubles(s)\n\n:\n\n\n\n\n:\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n```\nHaskell", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\nNOTE:\n\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n\n\t\nUse String-Based format\n\n\n\n\t\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\t\n\n```\nHaskell\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\ndef\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\t\n\n:\n\n\t\nUse Call-Based format\n:\n\n\n\n\n:\n\n\n\n\n\n\n\ns = [\n\t'", "\t\nUse Call-Based format\t\n\n\n\t\nUse Call-Based format\n\n:\n\n\n\n\n\n\t\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\n\n\nKata:\n\nKata:\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\nHaskell\n\n\n\n\n\n```\n\nUse Kata:\n\n\n```", "\t\nUse Call-Based format\t\n\n\n\t\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\t\n\n\t\nUse Call-Based format\t\n\n\n\n\t\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\t\n\nHaskell\n\n\n\n\t\n\n```\n\n\n```\n\n", "\t\nUse Call-Based format\t\nUse Call-Based format\n\t\nUse Call-Based format\n\n\t\n:\n\n\ndef\n\t\nUse Call-Based format\n\nQUESTION:\n\t\n\n:\n\n\n\n\t\n\n:\n\n\n:\n\n`\n\n\n\n\n:\n\n\n\n\n\t\nA string is used to determine the length"], "prompt": "\nQUESTION:\nIn this Kata, you will write a function `doubles` that will remove double string characters that are adjacent to each other.\n\nFor example:\n\n`doubles('abbcccdddda') = 'aca'`, because, from left to right:\n```Haskell\na) There is only one 'a' on the left hand side, so it stays.\nb) The 2 b's disappear because we are removing double characters that are adjacent. \nc) Of the 3 c's, we remove two. We are only removing doubles. \nd) The 4 d's all disappear, because we first remove the first double, and again we remove the second double.\ne) There is only one 'a' at the end, so it stays.\n```\n\nTwo more examples: `doubles('abbbzz') = 'ab'` and `doubles('abba') = \"\"`. In the second example, when we remove the b's in `'abba'`, the double `a` that results is then removed.\n\nThe strings will contain lowercase letters only. More examples in the test cases. \n\nGood luck!\ndef doubles(s):\n\t\nUse Call-Based format\nANSWER:\n"}}