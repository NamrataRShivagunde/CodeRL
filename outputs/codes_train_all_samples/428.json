{"428": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\n\n\n\n   \n    return shortestPathAllKeys(self, grid)\n\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n1 <= K <= 6\nInput: [", "\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\u00a0\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nWe cannot walk outside of the grid\n\n\u00a0\n\n\n\n\n\nWe are given a 2-", "\nUse Call-Based format\n\n\n\nWe are given a 2-dimensional\u00a0grid.\u00a0\".\" is a wall, \"#\" is a key, \"@\" is a lock.\n\n\n\n   \n   \n\n\n\n   \n    pass\n\n\n\n\n\n\n\n\n\n\n\nWe have two 2-dimensional grids\n\n\n\n\n\n\n# 1 <= K", "\nUse Call-Based format\n\n\n    return shortestPathAllKeys(self, grid)\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n   \n    return shortestPathAllKeys(self, grid)\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid\n\n\n\n\n\n1 <= K <= 6", "\n\n\n\n\u00a0\n\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n\n    return -1\n\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid\n\u00a0\n\n\n\n\n\n# The grid is 2-dimensional.", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nWe are given a 2-dimensional grid.\u00a0\".\" is an empty cell\n\n\n\n\n\n\n   \n        pass\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nWe start at a starting point\n\nOutput: 8\n\n\n\n\n\nWe are given a 2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample 3:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n\n\n\n\n\n\n   \n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 4\n\n# K = 1", "\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\n\u00a0\n\n\n\n   \n    self = self\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid.\n\n\n\n\n\nWe are given a 2-dimensional", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    return shortestPathAllKeys(self, grid)\n\n\n\n\n\n\n\n\n\n    def shortestPathAllLocks(self, grid: List[str]) -> int:\n        \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n    grid = [\n        \"", "\n    # Call-Based format\n\n\n\n\n\n\n\n\n   \n    # K = 6\n    # K = 3\n\n        # K = 6\n        \n\n\n\n   \n    print(\"\")\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid.\n\u00a0\n\u00a0\n\n\n\n\n\n\u00a0\n# The", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nWe are given a 2-dimensional grid.\n\n\n\n\n\n   \n        #\n    >>>\n\n    >>>\n\n       ...\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid.\n\n\n\n\nWe are given a 2", "\nUse Call-Based format\n\n\n\n\nWe are given a 2-dimensional\u00a0grid.\u00a0\".\" is a wall.\n\n\n\n\n\n   \n    def shortestPath(self, grid: List[str]) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional\u00a0grid", "\n\nUse Call-Based format:\n\n\n\n\n\n\n    # Use Call-Based format\n    # Use Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid.\n\n\n\n\n\"A\" is a wall", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n    def shortestPath(self, grid: List[str]) -> int:\n\n   \n\n\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\nWe are given a 2-dimensional grid.", "\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\"A.#.B.\"\n\n    def shortestPathAllLocks(self, grid: List[str]) -> int:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        K = 2\n\n", "\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n        \n\n\n\n\n\n\n\n\n   \n\n    # TODO:\n    # TODO:\n\n    # TODO:\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid.\n\n\n\n\n\nWe are given a 2", "\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\n\u00a0\n\n   \n    return shortestPathAllKeys(self, grid)\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n1 <= K <= 6\n\n2 <=", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n    def shortestPathAllLocks(self, grid: List[str]):\n        return -1\n\n\u00a0\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid\n\n\n\n\n#", "\nUse Call-Based format\n\n\n\n\nWe are given a 2-dimensional grid.\n\u00a0\nUse Call-Based format\n\n\n\n\n   \n        return self.shortestPathAllKeys(grid)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nWe are given a 2-dimensional grid\n\n\n\n\n\n\n\n1 <= K <=", "\n    @shortestPathAllKeys(grid: List[str]) -> int:\n\n\n\n\n\n\n\n       \n\n   \n    #self.shortestPathAllKeys(grid: List[str]) -> int\n\n\n\n   \n        \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\nThe algorithm used to find a grid"], "prompt": "\nQUESTION:\nWe are given a 2-dimensional\u00a0grid.\u00a0\".\" is an empty cell, \"#\" is\u00a0a wall, \"@\" is the starting point, (\"a\", \"b\", ...) are keys, and (\"A\",\u00a0\"B\", ...) are locks.\nWe start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.\u00a0 We cannot walk outside the grid, or walk into a wall.\u00a0 If we walk over a key, we pick it up.\u00a0 We can't walk over a lock unless we have the corresponding key.\nFor some 1 <= K <= 6, there is exactly one lowercase and one uppercase letter of the first K letters of the English alphabet in the grid.\u00a0 This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were\u00a0chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys.\u00a0 If\u00a0it's impossible, return -1.\n\u00a0\n\nExample 1:\nInput: [\"@.a.#\",\"###.#\",\"b.A.B\"]\nOutput: 8\n\n\nExample 2:\nInput: [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6\n\n\n\u00a0\nNote:\n\n1 <= grid.length\u00a0<= 30\n1 <= grid[0].length\u00a0<= 30\ngrid[i][j] contains only '.', '#', '@',\u00a0'a'-'f' and 'A'-'F'\nThe number of keys is in [1, 6].\u00a0 Each key has a different letter and opens exactly one lock.\nclass Solution:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}