{"346": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n\n    def numberOfSubarrays(self, nums, k: int):\n\n\n\n\n\n   \n\n\n\n1 <= k <= nums.length\n\nReturns:\n\nk <= nums.length\n\n:\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and k\n\n\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums, k: int):\n       \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers nums and k\n\n1\n\nExample 4:\nGiven", "\nUse Call-Based format\n\n\n    def numberOfSubarrays(self, nums: List[int], k: int):\n       \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\nReturns:\n\n1 <= k <= nums.length\n\n\n:\n        \n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and k:Given", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n   \n        return self.numberOfSubarrays(nums, k)\n\n\n\n\nReturns:\n\n0 <= k <= nums.length\n\n\u00a0\n\n:\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer k:\n\n1\n\nExample 1:\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums: List[int], k: int):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n1\n\n\u00a0\n\nGiven an array", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums: List[int], k: int):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n   :\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of integers nums and k:\n\n\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums, k: int):\n\n\n\n\n\n\n   \n\n\n\n1 <= k <= nums.length\n\nReturns:\n\n1 <= k <= nums.length\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and", "\nUse Call-Based format\n\n\n    def numberOfSubarrays(self, nums, k: int) -> int:\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\nUse Solution-Based format\n\nUse Call-Based format\n\nUse Call-Based format:                \n\n\n\n\n\n\n\nGiven an array of integers nums and k:\n\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums, k: int) -> int:\n\n\n\n\n   \n\n\n\n\n   :\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array of integers nums and an integer k:\n\n1\n\nExample\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums, k):\n\n\n\n\n\n   \n\n\n\n1 <= k <= nums.length\nOutput: 1\n\n\u00a0\n\n\nReturns:\n\n:\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and k:\n\n\nGiven", "\nUse Call-Based format\n\n\n    def numberOfSubarrays(self, nums: List[int], k: int):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n       :\n\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\nUse Call-Based format\n\n\n2\n\n\u00a0\n\nGiven an array of", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\n\n\n\n1 <= k <= nums.length\n\nUse Call-Based format\n          \n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nReturns:\n:\n\n\n\n\n\n\n\n\u00a0\n\n\n\n1\n\u00a0\n\nExample 4:\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums: List[int], k: int):\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   :\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers nums and k\n\nGiven an", "\nUse Call-Based format\n\n\n    def numberOfSubarrays(self, nums, k: int) -> int:\n\n\n\n\n\n\n   \n\n\n\n\nOutput: 3\n\n\u00a0\n\n\u00a0\n\nUse Function-Based format\n:\n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and an integer k:\n\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums, k: int):\n        \nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n1 <= k <= nums.length\n\nReturns:\n\n1\n\n:                \n\n\n\n\n\n\n\n\n\n\nGiven an array of integers nums and", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums: List[int], k: int):\n        return k\n\n\n\n\n\n\n   \n       \n\n\n\nReturns:\n\n   :\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n1 <= k <= 4\n\nGiven an array", "\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n\n\n\n\n\n   \n\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n1\n\n\n\nGiven an array of", "\nUse Call-Based format\n\n\n    def numberOfSubarrays(self, nums, k: int):\n       \nUse Call-Based format\n\n\n\n\n          \n\n\n\n\nReturns:\n\n1 <= k <= nums.length\n:\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\nGiven an array of integers nums", "\nUse Call-Based format\n\n\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n\n\n\n\n\n\n   \n\n\n\n   :\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of integers nums and an integer k\n\n\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n    def numberOfSubarrays(self, nums, k: int):\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Method-Based format\n:        \n\n\n\n\n\n\n\n\n\n\n1\n\n\u00a0\n\nGiven an array"], "prompt": "\nQUESTION:\nGiven an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.\nReturn the number of nice sub-arrays.\n\u00a0\nExample 1:\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n\nExample 2:\nInput: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There is no odd numbers in the array.\n\nExample 3:\nInput: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\nOutput: 16\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 50000\n1 <= nums[i] <= 10^5\n1 <= k <= nums.length\nclass Solution:\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}