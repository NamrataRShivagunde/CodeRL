{"4690": {"code": ["```\n\n\n#Results in:\n\n\n\n\n\n\n\n\n\n\n\n\n\nA   b c h i g k v w f x y\nG   u v w f y\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\"== \"f\"\n\"s\" == \"e\"\n\n\"", "```\n```\n\n```\n\n```\n\n```\n\npython\nadfgx_encrypt(\"kata\", \"kata\")\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\"D\" == \"f\"\n\n\n\n\"T", "```\n\n```\n\n```\n\n```\n\n```\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n    D   G   X \n\n\n\n\n```\n```\n\n\n```\n\n\n\n```\n\n\n\n\n```\n\n\n\"D\" == \"f\"\n\n\n\"T", "\n```\n\n\n\n```\n\n\n\n\n\n\n\n\n  \n   ```\n\n\n\"\n\n\"FG\" == \"s\"\n\n\"XG\" == \"e\"\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\"D\" == \"f\"\n\n\n\n\n\"D\"", "\n```\n\n\n    A  b c c d e f \n    G   k h i i f d e \n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\"\n\"\"D\"\n\"G\" == \"f\"", "\n```\n\n```\n\n```\n\n\n\n\n    A   D   F   G   X\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n```\n\n```\n\n\n\n\n```\n\n\n\n```\n\n\n\"\n\"\"D\"\n\"G\" == \"f\"", "```\n\n\n```\n\n```\n\n\npython\nadfgx_square()\n\n```\n\n\n\n```\n\n\n\n\n\" == \"f\"\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n```\n\n\n\"\n\"D\" == \"g\"\n\"G\" == \"s\"", "```\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n\"F\" == \"s\"\n\"X\" == \"e\"\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```\n\n#Results in:\n\n\n```\n\n\n\"\n\"D\" == \"f\"\n\n\n\"D\"", "```\n```\n\n```\n\n```\n\n```\n\npython\nadfgx_square()\n\n\n\n\n```\n\n\n```\n\n\n\n```\n\n```\n\n\n\n\n\n\n\n\n```\n\n```\n\n\"\n\"X\" == \"f\"\n\n\"\"G\" == \"z\"", "```\n```\n\n```\n\n\n\n\n```\n\n#Encrypt:\n\nadfgx_encrypt(\"helloworld\")\n\n```python\nadfgx_decrypt(\"helloworld\")\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"D\" == \"f\"\n\n\"", "\n\n```python\nadfgx_encrypt()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\nD   f f d h\nG   k k n g \n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\"\"F\" == \"g\"\n\"", "```\n```\n\n```\n\n```\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\n\n```\n\n\"FG\" == \"s\"\n\"X\" == \"e\"\n\n\n```\n\n\n```\n\n\n\n\n\n\n\n\n\n\"AF\" == \"h\"\n\n\n\"", "```\n```\n\n```\n\n```\n\n\npython\nadfgx_encrypt(\"adfgx_encrypt\", \"adfgx_decrypt\")\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n\n\"\n\"D\" == \"s\"\n\"G\" == \"f\"\n\n\"", "```\n\npython\n\n```\n\n\n\n\n```\n\n#Results in:\n\n    A   b c g f d h\n    G   i z x y\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\"\n\"D\" == \"e\"\n\n\"\"H\" == \"k", "```\n\n\n```\n\n\n\n```\n\n\n\n\n\n\"== \"f\"\n\"XG\" == \"g\"\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n#Examples:\n\n#\n\n```\n\n\n\"\n\"D\" == \"f\"\n\"\"A\" == \"h", "\n```\n\n\n```\n\n\n\n```\n\npython\nadfgx_kata()\n```\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\n\n```\n\nD\n\"H\" == \"e\"\n\"G\" == \"s\"\n\n\n\"", "```\n\n```\n\n#Results in:\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n   -> ciphertext\n\n\"FG\" == \"s\"\n\"XG\" == \"e\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"G\" == \"f\"\"", "```\n```\n\n```\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\"ADFGX\" == \"s\"\n\n\n\n\n```\n\n```\n\n\n\n\n\n```\n\n```\n\n\n\n```\n\n\n\n\"AF\" == \"h\"\n\n\"G", "\"\n\n```\n\n\n\n\n\n\n\n```python\nadfgx_square()\n\n```\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\"\n\n\"D\" == \"f\"\n\n\"``", "```\n```\n\n```\n\n```\n\n```\n\n\n\n\n\n\n\"A\" == \"f\"\n\"G\" == \"s\"\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```\n\n\n\n\n\"\n\"D\" == \"f\"\n\"G\" == \"s\"\n\""], "prompt": "\nQUESTION:\n`This kata is the first of the ADFGX Ciphers, the harder version can be found `here.\n\nThe ADFGX Cipher is a pretty well-known Cryptographic tool, and is essentially a modified Polybius Square.\n\nRather than having numbers as coordinates on the table, it has the letters:\n\n `A, D, F, G, X`\n\nAlso, because this is the first step, and to help simplify things, you won't have to worry about a key, or the corresponding columnar transposition. In this kata ;)\n\nAll you have to do is encrypt and decrypt a string into `ADFGX` format.\n\n`adfgx_encrypt() and adfgx_decrypt()` will be passed a string, `plaintext` and `ciphertext` respectively, and an adfgx`square`, for which will guide the operations. \n\nNow for some examples to clear confusion:\n\n```python\nadfgx_encrypt(\"helloworld\", \"bchigklnmoqprstuvwxyzadef\")\n\n    A D F G X\n   \nA   b c h i g\nD   k l n m o     \nF   q p r s t  -> square (PLEASE NOTE, j SHOULD BE TREATED AS i)  \nG   u v w x y  \nX   z a d e f\n\n\"helloworld\"   -> plaintext\n\nEVALUATES TO:\n\n      F  \n          -> \"AF\"\nA     h\n--------------\n          G \n               -> \"XG\"  \nX         e \n\nAND SO FORTH...\n\n#Results in:\n\nadfgx_encrypt(\"helloworld\", \"bchigklnmoqprstuvwxyzadef\") \n==\n\"AFXGDDDDDXGFDXFFDDXF\"\n```\nNow decryption:\n```python\nadfgx_decrypt(\"FGXGADGDXGFXAXXGFGFGAADGXG\", \"aczlmuqngoipvstkrwfxhdbey) \n\n    A D F G X\n\nA   a c z l m\nD   u q n g o     \nF   i p v s t  -> square (PLEASE NOTE, j SHOULD BE TREATED AS i)  \nG   k r w f x  \nX   h d b e y\n\n\"FGXGADGDXGFXAXXGFGFGAADGXG\"   -> ciphertext\n\n\"FG\" == \"s\"\n\"XG\" == \"e\"\n\nAND SO ON:\n\nadfgx_decrypt(\"FGXGADGDXGFXAXXGFGFGAADGXG\", \"aczlmuqngoipvstkrwfxhdbey) \n==\n\"secretmessage\"\n```\nPLEASE NOTE: ALL INPUT WILL BE VALID, NO NEED TO ERROR CHECK :D\n\nWhat are you waiting for?!\nGo create `adfgx_encrypt() and adfgx_decrypt()`!\n\nGood Luck!\ndef adfgx_encrypt(plaintext, square):\n\t\nUse Call-Based format\nANSWER:\n"}}