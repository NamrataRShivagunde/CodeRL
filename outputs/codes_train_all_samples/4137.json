{"4137": {"code": ["\nUse Call-Based format\n A square\n\n## A square of squares\n\n\n:\n A square of squares\n\n\n## Example\n\n\n\t\n\n\n\n\t\n## A square of squares\n\n## A square\n\n\n\n:\n\n\n\n\n## A perfect square\nA square of a square\n\n\n\n\n\n## A square\n## A square\n##", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n:\n A square\n\n\n## A square\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n## A square\n## A square of square\n\n## A perfect square\n## A square of square\n## A square of square\n\n\n\n\n\n\n\n\n## A square\n## A square", "\nUse Call-Based format\n A square of square building blocks\n\nUse Call-Based format\n\n\n\n\n\n# A square of square\n\n\n## A square of square\n\n\n\n\t\n\n\n## A square\n\n\n\n:\n\n\n\n## A square\n\n## A square of square\n\n\n## Example\n## A number\n\n\n## A [square", "\n\n A square\n\nUse Call-Based format\n\n:\n## A square\n\nUse Call-Based format\n\n\n## Example\n\n\n\n\n\n\n\n\n## A square\n\n## A square of squares\n\n\n\t\n:\n\n\n\n# A square\n\n## A square of squares\n\n\n## A square of squares\n\n\n## A square\n##", "\nUse Call-Based format\n A square\n\n\nUse Call-Based format\n\n:\n\n\n\n## A square\n\nis_square(n)\n\n\n\n\n\n\n\n## A square\n\n## A perfect square\n\n\n\n:\n\n\n\n## The functional format\n\n## A square\n## A square of square\n\n\n\n## A square\nThe", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n:\n A square\n\n## A square of square\n\n\n\n\n:\n## A square\n\n\n\n\n\n## A square\n\n\n\n:\n A square of squares\n\n\n\n## A perfect square\n\n\n## A square\n\n\n## A perfect square\n## A", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n## A square\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n## A square\n\n\n\n\n\n\n## A square\n## A perfect square\n## A square of the number\n## A square of the number\n\n\n\n\n## A square of the number\n##", "\nUse Call-Based format\n A square\n\nUse Call-Based format\n\n## A square\n\nUse Call-Based format\n\n\n## A square\n\n## A square\n\n\n\n\n\n\n\n\n\n\n:\n A square\n\n## A square\n\n## A square of square\n## A perfect square\n\n\n\n\n## A square\n## A square\nCheck", "\nUse Call-Based format\n A square\n\n\n## A square\n\nUse Call-Based format\n\n\n\n\n## A square\n\nUse Call-Based format\n\n\n\n\n\t\n## A square\n\n\n false\n\n\n## A square\n:\n\n\n\n\n## A perfect square\n\n\n## A perfect square\n\n\n## A square\n## A square", "\nUse Call-Based format\n\n A square\n\nUse Call-Based format\n\n## A square\n\nUse Call-Based format\n\n\n## A square of square\n\n\n\n\n\n\t\n\n## A square\n\n\n\n\n:\n A square of squares\n\n\n## A square\n\n# A perfect square\n\n\n\n\n\n## A square\n\n## A", "\nUse Call-Based format\n A square\n\nUse Call-Based format\n\n## A square\n\n\n\n## The call-Based format\n\n\n\n\n\n\n\n\n## A square\n\n## A square of squares\n\n\n\n:\n A square of squares\n\n\n\n## A square\n## A perfect square\n\n\n\n## A square of squares\n## A square", "\nUse Call-Based format\n A square\n\n\n\n\n## A square of squares\n\n\n## A call\n\nuse Call-Based format\n\n\n\n\n\n\n## A square\n\n## A square\n false\n\n\n:\n## A square\n\n\n\n\n## A square\n\n## A square of a square\n\n\n\n\n## A square of a square\n", "\nUse Call-Based format\n A square\n\n## A square of squares\n\nUse Call-Based format\n\n:\n\n A square of square\n\n\n\n:\n## A square\n\n\n\n\n\n## A square\n false\n\n\n:\n\n\n\n## A square of squares\n## A square\n\n\n\n\n\n## A square of squares\n## A square of", "\nUse Call-Based format\n\n A square\n\n\n\n## A square\n\nThe test is_square(n)\n\nUse Call-Based format\n\n\n\n\n## A square\n\n\n\n\t\n\n\n## A square\n\n## A square of squares\n\n\n\n:\n\n\n\n\n\n\n## A function\n## A function\n\n## A function\n", "\nUse Call-Based format\n A square\n\nUse Call-Based format\nUse Call-Based format\n\n\n## A square\n\n\n## A square\n\n## A square of squares\n\n\n\n\n\n## A square of squares\n\n\n\t\n:\n\n\n\n## A square of square\n## A square of non-square\n\n\n\n\n\n## A square\n", "\nUse Call-Based format\n\n A square\n\n\n\nUse Call-Based format\n\n## A square\n\nAre you building a square of square?\n\n\n\n\n\n\n\n\t\n\n## A square of squares\n\n\n\n:\n A square of square\n\n\n\n## A perfect square\n\n\n## A square of squares\n\n\n## A square\n## Defin", "\n\t\nUse Call-Based format\n\n A square\n\n\n\n\n\n\n\n## A square\n\n## A perfect square\n\n\n\n\t\n\n## A square\n\n## A square\n\n\n\n\n\n\n## A square\n\n## A square of a square\n## A square of a square\n## A perfect square\n\n\n\n\n\n\n## A _square", "\nUse Call-Based format\n A square\n\nUse Call-Based format\n:\n## A square\n\nUse Call-Based format\n\n\n## A square\n## A square\n\n:\n## A perfect square\n\n\n\n\n:\n## A square\n\n\n:\n\n\n\n## Performance\n\nUse Call-Based format\n\n\n\n\n## A custom is_", "\nUse Call-Based format\n A square\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n## A square\n\n\n## A square\n\n\n\n\n## A square\n\n\n## A square of squares\n\n\n\n:\n\n\n\n## A square of squares\n\n\n## A square\n\n\n## A square of squares\nThe really big", "\nUse Call-Based format\n A square of squares\n\n\n:\n A square of square\n\n\n## A call-based format\n\nis_square(n)\n\n\n\n\n\n\n## A square\n\n\n\n\n\n\n\n\n## A square\n\nA square of squares\n\n## A square\n\n\n\n\n## A square\n## A square\n## An"], "prompt": "\nQUESTION:\n## A square of squares\nYou like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!\n\nHowever, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain\u2026 Wait! That's it! You just have to check if your number of building blocks is a _perfect square_.\n\n## Task\n\nGiven an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number):\n\n> In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n\nThe tests will _always_ use some integral number, so don't worry about that in dynamic typed languages.\n\n### Examples\n\n```\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n```\ndef is_square(n):\n\t\nUse Call-Based format\nANSWER:\n"}}