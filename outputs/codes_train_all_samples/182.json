{"182": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n    def trap(self, height: List[int]):\n       \n       ...\n\n\n\nA bar with n non-negative integers representing an elevation map\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing an", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n    def\n        \nUse Call-Based format\n\n\n   :\n        \n\nUse Call-Based format\n\nGiven n non-negative integers representing an elevation map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing an", "\nUse Call-Based format\n\n    trap(self, height: List[int])\n\n\n\n\n   \n\n\n\n   \n   ...\n\n\n\n\n\n\nGiven n non-negative integers representing an elevation map where width is 1, compute how much water it can be trapped\n\n\n\n\n\n\n\n\n\n\n\n2\n\nGiven n non-negative integers", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n        \nUse Call-Based format\n\n\nGiven n non-negative integers representing an elevation map where width is 1, compute how much water it can trap after raining\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n    trap(self, height: List[int]):\n\n   :\n\n\n\nGiven n non-negative integers representing an elevation map, compute how much water it is able to trap\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def trap(self, height: List[int]) -> int:\n\n\n\n\n\n\n   :\n\n\n\n\n\nUse Call-Based format\nArained water is being trapped,\n\n\n\nUse Call-Based format\n\n\n\nGiven n non-negative integers representing an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\nGiven n non-negative integers representing an elevation map where width is 1, compute how much water it can be trapped after raining\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nThe\n\nGiven n non-negative", "\n\n\n\n\nUse Call-Based format\n\n\n\n    def trap(self, height: List[int]):\n        return self.trap(height[0])\n\nUse Call-Based format\n\n\n\n   :\n\n\n\n\n\n\nUse Call-Based format,\n\n\n\n\nGiven n non-negative integers representing an elevation map\n\n\nGiven n non", "\n\n\n\nUse Call-Based format\n\n\n\n\n    trap(self, height: List[int]):\n        \nUse Call-Based format\n\nUse Call-Based format\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers representing an elevation map:\n\n\n\n\nGiven n", "\n\nUse Call-Based format\n\n\n\n\n\n   \n   ...\n\n\n\n    trap(self, height: List[int]) -> int:\n\n\nUse Call-Based format\n\nclass\n        pass\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format,\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven n non-negative integers representing an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    trap(self, height: List[int]):\n        \nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   :\n\n\n\nGiven n non-negative integers:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-negative integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n   \n\n\n    def\n        return self.height\n\n\n\n\nGiven n non-negative integers representing an elevation map where bar width is 1, compute how much water it can be trapped\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n   \n    return self.trap(height)\n\n\n\n    def\n       ...\n\n\n\n\n\nGiven n non-negative integers representing an elevation map\nArained water is able to trap after raining\n\n\n\nArained water is trapped\n\n\n\nGiven n non-", "\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n    trap(self, height: List[int]):\n   \n    # noinspection PyProtectedMember\n\n\n\n\n\n\n\nUse Call-Based format\nAn elevation map with n non-negative bars is required to be rained\n\n\n\n\n\n\nGiven n non-negative integers representing an elevation", "\n\n\n    trap(self, height: List[int])\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n    def\n\n\n\n\n\n\n\nUse Call-Based format\n\nRun with an array of n non-negative integers representing an elevation map\n\n\n\n\n\n\n\n\n6\n\nGiven n non-negative integers representing an elevation", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n   \n\n\n\n   :\n       \nUse Call-Based format\n\n\nGiven n non-negative integers representing an elevation map where width is 1, compute how much water it can be trapped.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non-", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n    -> int:\n        \nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n,\n\n\nRaining water trapping\n\n\n\n\n\n\nGiven n non-negative integers representing", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n    def trap(self, height: List[int]) -> int:\n\n\n\n\n\n    -> int\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n,\n\n\n\n\n\n\nGiven n non-negative integers representing an elevation map:\n\n\n\n\nGiven n non", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n1\n\n\n\n   \n\n\n\n\n\n    def\n        \n\nUse Call-Based format\n\n\n\nGiven n non-negative integers representing an elevation map with width 1, compute how much water is able to be trapped\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven n non"], "prompt": "\nQUESTION:\nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\n\n\nThe above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!\n\nExample:\n\n\nInput: [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}