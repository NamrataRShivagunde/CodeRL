{"358": {"code": ["\n\n\n\n\nExample:\n    findReplaceString(self, S, indexes, sources, targets)\n\n\n\n\n\n   \n        pass\n\n:\n    pass\n:\n   \n   \n        pass\n:\n:\n    pass\n\n\n\n\n\n\n\n\n\n\n\n:\n    def replaceString(self, S, indexes: List[int], sources", "\n\n\n\n\n\n\n\n\n\n\n   \n        findReplaceString = findReplaceString\n        \n:\n        self.findReplaceString = findReplaceString\n\n:\n   \n    findReplaceString(self, S, indexes: List[int])\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n:\n    S = \"abcd\"\n   ", "\n    @classmethod\n    @staticmethod\n\n\n\n\n\n\n\n\n\n   \n        def findReplaceString(self, S, indexes: List[int], sources: List[str], targets: List[str]) -> str\n:\n:\n   :\n   :\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n:\n    S = \"ab", "\n\n\nExample:\n\n    FindReplaceString(self, S, indexes, sources, targets) -> str\n\n\n\n\n\n\n\n\n\n\n   \n:\n    pass\n:\n    pass\n\n\n   \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n    S = \"abcd\"\n\n    indexes", "\n\n\n\n\n\n\n0 <=\u00a0indexes <=\u00a0targets.length <= 100\n\nExample:\n\nS = \"abccd\"\n\n\n\n\n   \n        pass\n        \n:\n:\n   \n   \n        pass\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n:\n    self.findReplaceString = findReplaceString\n   ", "\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n        \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findReplace(self, S, indexes):\n:\n", "\n\n\n\n\n\n\n\n\n\n0 <\u00a0indexes <\u00a0sources.length <\u00a0targets.length\n\n\n\n   \n:\n    @classmethod\n    def findReplaceStrings(self, S: str):\n:\n   :\n   \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n:\n    S = \"abcd\"", "\n    def findReplaceString(self, S, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\nexplanation:\nS = \"abcd\"\n\nExamples:\n\n:\n", "\n    def replaceString(self, S, indexes: List[int], sources: List[str], targets: List[str]) -> str\n\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n        pass\n:\n    pass\n:\n\n\n\n\n\n\n\n\n\n\n\"\"\")\n\n\n\n:\n    S = \"abcd\"\n", "\n    def findReplaceString(self, S, indexes: List[int], sources: List[str], targets: List[str]) -> str\n\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\"\"\")\n\n\n    def findReplaceWord(self, S, indexes):\n:\n", "\n\n\n\n\nS = \"abc\"\nx = \"cd\"\ny = \"ffff\"\n\n\n\n\n\n\n   \n       :\n        from re import findReplaceString\n:\n       \n       \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findReplace(self, S, indexes: List[int]) -> str:", "\n\n\n\n\n\n\n\n\n\n\n\n\n    def replaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]):\n        return S\n\n\nExample 3:\n\n:\n:\n:\n   :\n   :::\n\n\n\n\n\n\n\n\n\n\n\n:\n    S =", "\n    @classmethod\n    @findReplaceString\n\n\n\n\n\n\n\n\n   \n        def findReplaceString(self, S, indexes, sources, targets) -> str:\n        :\n        \n:\n\n   :\n\n   :\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n:\n    S = \"abcd\"\n\nUse", "\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str\n\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \"abcd\"\n:\n    \"abcd", "\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str\n\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n        pass\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n    S = \"abcd\"\n    indexes =", "\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str\n\n\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n:\n    S = \"abcd\"\n   ", "\n\n\n\n\n\n\n\n1 <=\u00a0indexes <=\u00a0targets.length <=\n2\n\n\n   \n       :\n       :\n        def replaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str])\n        \n:::\n:\n\n\n\n\n\n\n\n\n\n\n:\n    S", "\n    def findReplaceString(self, S, indexes, sources, targets):\n        return \"\"\n\n\n\n\n\n\n\n\n   \n        pass\n:\n:\n    def findReplaceString(self, S, indexes: List[int], sources: List[str]) -> str\n\n\n:\n::\n\n\n\n\n\n\n\n\n\n\n:\n    S", "\n    def findReplaceString(self, S, indexes: List[int], sources: List[str], targets: List[str]) -> str\n\n\n\n\n\n\n\n\n   \n:\n:\n   \n   \n        pass\n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findReplace(self, S, indexes):\n:\n", "\n\n\n\n\n\n\n\n\n    def findReplaceArray(self, S, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        \n\n:\n:\n   :\n   \n:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n    def replaceString(self, S: str, indexes"], "prompt": "\nQUESTION:\nTo some string S, we will perform some\u00a0replacement\u00a0operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word\u00a0x\u00a0and a target word\u00a0y.\u00a0 The rule is that if x\u00a0starts at position i\u00a0in the original string S, then we will replace that occurrence of\u00a0x\u00a0with\u00a0y.\u00a0 If not, we do nothing.\nFor example, if we have\u00a0S = \"abcd\"\u00a0and we have some replacement operation\u00a0i = 2, x = \"cd\", y = \"ffff\", then because\u00a0\"cd\"\u00a0starts at position 2\u00a0in the original string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation\u00a0i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string\u00a0S[2] = 'c', which doesn't match\u00a0x[0] = 'e'.\nAll these operations occur simultaneously.\u00a0 It's guaranteed that there won't be any overlap in replacement: for example,\u00a0S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\nNotes:\n\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}