{"1945": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\u00a0\n\n\n\n          \n        \n\n\n\n\n\n\nUse Method-Based format\nUse Call-Based format\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n0s and 1s\n\n\u00a0\n\n\n\n\nGiven a matrix consisting of 0s and", "\n\n\n\n\n\n1 <= matrix[0].length <= 300\n1 <= matrix[j].length <= 300\n1 <= matrix[i].length <= 300\n1 <= matrix[i][j].length <= 300\n\n\n\n          \n\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= matrix[0].", "\nUse Call-Based format\n\n\n\n\n1 <= matrix[i].length <= 300\n1 <= matrix[j].length <= 300\n1 <= matrix[i].length <= 300\n\u00a0\n\n\n          \n\n\n          \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA matrix consisting of 0s and 1s and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.maxEqualRowsAfterFlips(matrix)\n        \n\n\n\n   \n\nUse Python Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n1 <= matrix.length <= 300\n\n\n\n\nFor a", "\nUse Call-Based format\n\n\n\n\n\u00a0\nUse Call-Based format\n1 <= matrix[0].length <= 300\n1 <= matrix[1].length <= 300\n1 <= matrix[0].length <= 300\n\n\u00a0\n\n\n   :\n\n\n   \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\nTrue:\n\n    >", "\nUse Call-Based format\n\n\n\n\n\n\n\n    maxEqualRowsAfterFlips(self, matrix) -> int:\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Python-based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0s and 1s are mut", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\u00a0\n\n\n    \"\"\"\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\u00a0\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n# Example 1:\n# 1:\n#", "\nUse Call-Based format\n\n\n\n\n\n\n\n    maxEqualRowsAfterFlips(self, matrix)\n        \nUse Call-Based format\n\n\nExample 4:\n    def maxEqualRowsAfterFlips(self, matrix):\n\n\n\n\n   \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a matrix consisting of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n1 <= matrix[i].length <= 300\n1 <= matrix[j].length <= 300\n\n\n\n          \n\n\n\n   \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= maxEqualRowsAfterFlips <= 3\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:\n\n\u00a0\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= maxEqualRowsAfterFlips <= maxRows\n\n1 <=\n\nFor example", "\nUse Call-Based format\n\n\n\n\n1 <= matrix[i][j] <= matrix[j][i]\n\n\n   \n\n\n\n       \n\nUse Call-Based format\nUse Python-Based format\n\n\n\nThe following question would be taken as follows:\n\n\n\nThe following answer is used for the following questions:\n\n\n\n\n[1] Output:", "\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n   \n        return self.maxEqualRowsAfterFlips(matrix)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe above answers are used to calculate the maximum number of rows equal\n\n\n\n\n\nFor example, you", "\nUse Call-Based format\n\n\n\n\n\n\n0 <= maxEqualRowsAfterFlips <= 300\n\nUse Call-Based format\n\n\n        return 2\n\n\n\n\n   \n        \n\n\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\ni = 0\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n       \n        return maxEqualRowsAfterFlips(self, matrix)\n        \n\n\n   \n       \n\n\n\nUse Call-Based format\n\u00a0\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\n\nOutput: 2\n\n\u00a0\n\n\n\n\nIf you'd like to", "\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\n   \n        pass\n\n\n\nUse Method-Based format\n\n\n   \n        pass\n\n\n\nUse Method-Based format\n\n\n\n\n\u00a0Use Call-Based format\n\u00a0\n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\u00a0\n0 <= i <= j", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        return self.maxEqualRowsAfterFlips(matrix)\n        \n\n\n\n\n\n    pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= matrix[i].length <= 300\n1 <= matrix[j].length\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n1 <= matrix[i].length <= 300\n1 <= matrix[i][j].length <= 300\n\n\n   \n\n\n\n\n\n\n\n\n    \"\"\"\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\nIf you are using a call", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n1 <= matrix[i][j] <= matrix[j].length\n\u00a0\n\n\n\n           \n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= matrix.length <= 300\n2", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n    return maxEqualRowsAfterFlips(self, matrix)\n        \n\n\n\n\n\n   \n        pass\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nAnother example:\n\n\n\n\n\n0s, 0s, 0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n1 <= matrix[i].length <= 300\n1 <= matrix[i][j].length <= 300\n\n\n\n\n           \n\n\n\n   \n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nOutput: 1\n\n\n\n\n\nGiven a matrix"], "prompt": "\nQUESTION:\nGiven a matrix consisting of 0s and 1s, we may choose any number of columns in the matrix and flip every\u00a0cell in that column.\u00a0 Flipping a cell changes the value of that cell from 0 to 1 or from 1 to 0.\nReturn the maximum number of rows that have all values equal after some number of flips.\n\u00a0\n\n\n\nExample 1:\nInput: [[0,1],[1,1]]\nOutput: 1\nExplanation: After flipping no values, 1 row has all values equal.\n\n\nExample 2:\nInput: [[0,1],[1,0]]\nOutput: 2\nExplanation: After flipping values in the first column, both rows have equal values.\n\n\nExample 3:\nInput: [[0,0,0],[0,0,1],[1,1,0]]\nOutput: 2\nExplanation: After flipping values in the first two columns, the last two rows have equal values.\n\n\u00a0\nNote:\n\n1 <= matrix.length <= 300\n1 <= matrix[i].length <= 300\nAll matrix[i].length's are equal\nmatrix[i][j] is\u00a00 or 1\nclass Solution:\n    def maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}