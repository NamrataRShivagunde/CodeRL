{"2518": {"code": ["\nUse Call-Based format\n\n    def checkPossibility(self, nums: List[int]):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers, you task", "\nUse Call-Based format\n\n\n    def checkPossibility(self, nums: List[int]):\n       \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given an array with", "\nUse Call-Based format\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\nGiven an array with n integers:\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven an array with n integers, you task is to check if\n\n\n\n\nGiven", "\nUse Call-Based format\n\n    def checkPossibility(self, nums: List[int]):\n        \nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array with n integers, your task is to check if it is non-decreasing\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n", "\nUse Call-Based format\n\n    def checkPossibility(self, nums: List[int]):\n\n\n\n\n\n   \n    \n\n\nUse Call-Based format\n\n\n\n\n\n    pass\n\n\nGiven an array with n integers, your task is to check if it becomes nondecreasing\n\n\n\n\n\n\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray is nondecreasing\n\n\n\nGiven an array with", "\nUse Call-Based format\n\n\n    checkPossibility(self, nums: List[int]) -> bool\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers", "\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        pass\n\n\n\n\n\n\n    checkPossibility(self, nums):\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n", "\nUse Call-Based format\n\n    checkPossibility(self, nums: List[int]) -> bool\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers, your task is to check if it is non-decreasing.\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers,", "\nUse Call-Based format\nUse Call-Based format\n    def checkPossibility(self, nums: List[int]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n    n = 5\n\n\n\n\n\nGiven an array with n integers\n\n\n\n\nGiven an array with n", "\nUse Call-Based format\n\n    pass\n\n\n\nUse Call-Based format\n\n\n\n   \n        return self.checkPossibility(nums)\n\n\n\n\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers,", "\nUse Call-Based format\n\n\n    def checkPossibility(self, nums: List[int]):\n       \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n        return True\n\n\n\n\n    CheckPossibility:\n        CheckPossibility\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Check if an array is", "\nUse Call-Based format\n\n\n    checkPossibility(self, nums: List[int]) -> bool:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n:\n       \n\nGiven an array with n integers, you task is to check if it becomes nondecreasing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given an", "\n\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    checkPossibility(self, nums: List[int]) -> bool\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven an array with n integers\n\n\nGiven an array", "\nUse Call-Based format\nUse Call-Based format\n    def checkPossibility(self, nums: List[int]) -> bool:\n\n\n\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n    CheckPossibility(self, nums: List[int])\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers,", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n        pass\n\n\n    array[i] >= array[i+1]\n\n\n\n\n\nGiven an array with n integers, you task is to check if it becomes nondecreasing\n\n\n\n\n\n\nGiven an array", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n\n\n   \n        return self.checkPossibility(nums)\n        \n\n\n\n\n\n    return self.checkPossibility(nums)\n\n\n\n\n\n\nGiven an array with n integers, your task is to check if it holds\n\n\n\n\n\n\n\nGiven an array with n", "\nUse Call-Based format\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n\n\n\n\n\n\n\n\n\n\n    return self.checkPossibility(nums)\n\n\n\n\n\n:\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nArray is non-decreasing\n\n\nGiven", "\nUse Call-Based format\n\n\n    def checkPossibility(self, nums: List[int]) -> bool:\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array with n integers\n\n\n\n\n\nGiven an"], "prompt": "\nQUESTION:\nGiven an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.\n\n\n\nWe define an array is non-decreasing if array[i]  holds for every i (1 \n\nExample 1:\n\nInput: [4,2,3]\nOutput: True\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\n\n\n\nExample 2:\n\nInput: [4,2,1]\nOutput: False\nExplanation: You can't get a non-decreasing array by modify at most one element.\n\n\n\nNote:\nThe n belongs to [1, 10,000].\nclass Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}