{"132": {"code": ["\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n\n\n\n\n\n\n\n   \n Solution:\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n", "\n\n\n\n\n\n\n\n\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        return 0\n\n\n   \n Solution\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n    def addcost(self, days, costs):\n       ", "\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n   \n    mincostTickets(self, days, costs) -> int:\n\n   \n\n Solution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\nExplanation:\n\n10 or 11\n\n1 <= days <= 365\n\n\n Solution:", "\n\n\n   \n    [3]\n\n\n\n\n\n\n   \n    mincostTickets = 11\n\n\nExample 3:\n\n   \n    mincostTickets(self, days, costs) -> int\n\n:\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\nInput: days", "\n\u00a0\n\n\n\n\n\n\n    mincostTickets(self, days, costs)\n\n\n   \n    def mincostTickets(self, days, costs):\n       ...\n Solution\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\nInput: days = [1, 2]\n\n\n\n Solution:", "\n\n\n\n\n\u00a0\nUse Call-Based Solution\n\u00a0\n\n\n\n\n    def maxcostTickets(self, days, costs):\n        return len(days)\n\n\nExample 3:\n\n   \n Solution\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Solution\n\n%_\n\n\nExample 3:\n", "\n\n\n\u00a0\nIn a country popular for train travel, you can get it at the end.\n\u00a0\n\n\n\n\n\n\n\n\n   \n    def mincostTickets(self):\n        return 1\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n Solution:\n    pass1 =", "\n\n\n\n\n\n\n\nExplanation:\n\n    1 <= days.length <= 365\n    2 <= costs.length <= 3\n\nExplanation:\n\n\n\n\n\n   :\n\n\n   \n   \n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n\u00a0", "\n\n\n\n\nNote:\n\n\n\n\n\n\n    Example 1:\n   \n\nExplanation:\n\n    0 <= self.mincostTickets(days, costs) <= 11\n\nExample 2:\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n Solution:\n\n    Input:", "\n\n\n\n\n\n\n\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n       \n\nExample 1:\n\nInput: days\nOutput: 15\n\nExplanation:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Solution:\n\n    def buyPass(", "\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n\n\n\n\n\n\n\n   \n    def mincost(self, days, costs: List[int]):\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    if days.length!= 1:", "\n\n\n\n\n\n\n\n    def mincostTickets(self, days: List[int], costs: List[int]):\n        return self.mincostTickets(days, costs)\n\n\n\n Solution\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nInput: days = [1],\n", "\n\n\n\n\n\n\n\nOutput: 11\n\nExplanation:\n\n\u00a0\n\n0 <= days.length <= 365\n\u00a0\n0 <= costs.length <= 365\n\n\n\n\n   :\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n1 <= days.length <= 365\n\n Solution:", "\n\n\u00a0\n\u00a0\nThe country is popular for train travel, the country is popular for train travel, the country is popular.\n\n\n\n\n\n\n\n   :\n       Solution\n\n\n   \n   \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\nSolution to determine the minimum number of passes we can", "\n\n\n\n    Travel\n    Travel\n    Travel\n\n\n\n\n\n\n    mincostTickets(days, costs)\n\n\nExplanation:\n\n\n\n\n\n\n   \n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n$3\n\n\n\n\n    def mincostTickets(self, days: List[int],", "\n\nExample:\n\n\n\n\nExplanation:\n\n\u00a0\nThe number of passes is always 1.\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\n   :\n        pass\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n\u00a0\nIn a country pop", "\n\n\n\n\nUse Call-Based Solution:\n\n\n\n\n\n\n    def mincostTickets(self, days, costs):\n        return self.mincostTickets(days, costs)\n\n\nExample 3:\n\n Solution:\n Solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Solution:\n\n    def", "\n\n\n\n\n\n\n\n\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\u00a0\n\u00a0\n\n\n\n\u00a0\n Solution\n\n\u00a0\n", "\n\n\n\n\n\n\n\n\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        return 0\n\n\n\n\n\n   \n   \n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n\nExplanation: \n\n**Example", "\n\n\n\n\nUse Call-Based Solution:\n\n\n\n\n\n\n    def mincostTickets(self, days, costs: List[int]) -> int:\n        return 0\n\nExample 3:\n Solution:\n Solution:\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Solution:\n\n    mincostTickets("], "prompt": "\nQUESTION:\nIn a country popular for train travel, you\u00a0have planned some train travelling one year in advance.\u00a0 The days of the year that you will travel is given as an array days.\u00a0 Each day is an integer from 1 to 365.\nTrain tickets are sold in 3 different ways:\n\na 1-day pass is sold for costs[0] dollars;\na 7-day pass is sold for costs[1] dollars;\na 30-day pass is sold for costs[2] dollars.\n\nThe passes allow that many days of consecutive travel.\u00a0 For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.\nReturn the minimum number of dollars you need to travel every day in the given list of days.\n\u00a0\nExample 1:\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total you spent $11 and covered all the days of your travel.\n\n\nExample 2:\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total you spent $17 and covered all the days of your travel.\n\n\u00a0\n\nNote:\n\n1 <= days.length <= 365\n1 <= days[i] <= 365\ndays is in strictly increasing order.\ncosts.length == 3\n1 <= costs[i] <= 1000\nclass Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}