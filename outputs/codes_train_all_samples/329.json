{"329": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n    maxProductPath(self, grid): int\n\n\n\n\n   \n    maxProductPath(self, grid)\n\n\n\n\n   \n    maxProductPath(self, grid)\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\nrows = rows or cols\nrows", "\n\nUse Call-Based format\n\n    maxProductPath(self, grid): int\n    \nUse Call-Based format\n\n\n\n\n\n   \n    maxProductPath(self, grid)\n        \n\n\n\n   \n        pass\n        \n\n\ufffd\n\n\n\n\n\n\nYou are given a rows x cols x matrix\n\n\n\n\n    If you are given", "\n    @maxProductPath\n    def maxProductPath(self, grid: List[int]) -> int:\n\n\n\n\n\n\n\n\n\n   \n    maxProductPath(self, grid)\n\n\n\n   \n        pass\n\n\ufffd\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\nrows = 4", "\n\nUse Call-Based format\n\n    maxProductPath(self, grid: List[List[int]]) -> int:\n\n\n\n\n\n\n   \n\n\n\n\n   \n        maxProductPath(self, grid)\n\n\n\ufffd\n\n\n1\n\n\n\n\nYou are given a rows x cols x matrix.\n\n\n   \n\nRows = 4\n", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n   \n    maxProductPath(self, grid) -> int\n\n\n\n   \n        pass\n\n1\n\n\n\n\n\n\n\nUse Call-Based format\n\nYou are given a matrix\n\n\n\n\nIf you are given a", "\n    maxProductPath(self, grid: List[int]) -> int\n\n\n\n\n\n\n\n   \n    maxProductPath(self, grid) -> int:\n        return self.maxProductPath(grid)\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\u00a0\n    :rows", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n    maxProductPath(self, grid: List[int]) -> int:\n\n\n\n\n\n\n   \n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nYou are given a matrix and grid.\n\n\n\n\n\nYou are given a\u00a0", "\nUse Call-Based format\n\n    maxProductPath(self, grid: List[List[int]]) -> int:\n\n\n\n\n\n\n   \n    maxProductPath(self, grid):\n        return 0\n\n\n\n   :\n        pass\n\n\n\n\n\n\ufffd\n\n\n\nYou are given a matrix\n\n\n\n\nIf you are given a\ufffd", "\nUse Call-Based format\n\n\n    maxProductPath(self, grid: List[List[int]]) -> int\n\n\n\n\n\n   \n    maxProductPath(self, grid) -> int\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\nrows x cols x grid:\n\n\n\n\nrows x cols:\nInput", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n    maxProductPath(self, grid)\n\n\n\n   \n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        If you are given a row x cols x matrix,", "\n    maxProductPath(self, grid: List[List[int]]) -> int\n\n\n\n\n\n\n\n   \n    maxProductPath(self, grid) -> int\n        \n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n", "\n    #...\n    maxProductPath(self, grid) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nYou are given a matrix of rows x cols matrix.\n\n\n\n\n\nYou are given a rows x cols matrix", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n    maxProductPath(self, grid: List[List[int]]) -> int\n\n\n\n\n\n   \n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nYou are given a matrix in rows x cols\u00a0grid.\n\n\n\n\nRows =", "\n    # TODO:\n        return 0\n\n\n   \n\n\nUse Call-Based format\n\n\n   \n\n# TODO:\n    maxProductPath(self, grid) -> int\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\nYou are given a rows x cols x matrix grid.\n\n\n\n\n\nThe rows x cols grid cells", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n    maxProductPath(self, grid): int\n\n\n\n\n\n\n\n\n\n\n   \n       ...\n\n\n\ufffd\n\n\n\n\n\n\n\nYou are given a rows x cols matrix.\n\n\n\n\n1 <= rows x cols\n\nyou are given a\u00a0", "\n\n\n\n\nUse Call-Based format\n\n\n\nrows, cols\n\n\n\n    def maxProductPath(self, grid: List[List[int]):\n   \n    maxProductPath(self, grid)\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nrows = 3\ncols = 1\n", "\n    maxProductPath(self, grid: List[int]) -> int:\n\n\n\n\n\n\n\n   \n    maxProductPath(self, grid) -> int\n    \n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given a matrix with rows x cols x grid.\n\n\n\n   \n\nIf you are given", "\n    def maxProductPath(self, grid: List[int]) -> int:\n        \"\"\"\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n   \n    maxProductPath(self, grid)\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\nYou are given a matrix\n\n\n\n\n\nIf the maximum path is -", "\nUse Call-Based format\n\n\n    maxProductPath(self, grid) -> int:\n\n\n\n\n\n\n   \n    maxProductPath(self, grid) -> int:\n\n\n\n\n       \n        pass\n\n\n\n\n\n\n\n\n\nThe matrix is given, you are given a matrix of rows x cols grid.\n\n\n\n\nIf the maximum", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    maxProductPath(self, grid):\n        return -1\n\n\n\n   \n        maxProductPath(self, grid)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrows = 3\ncols = 3\n\nExamples 1:\n"], "prompt": "\nQUESTION:\nYou are given a\u00a0rows x cols\u00a0matrix\u00a0grid.\u00a0Initially, you\u00a0are located at the top-left\u00a0corner (0, 0),\u00a0and in each step, you can only move right\u00a0or\u00a0down in the matrix.\nAmong all possible paths starting from the top-left corner\u00a0(0, 0)\u00a0and ending in the bottom-right corner\u00a0(rows - 1, cols - 1), find the path with the\u00a0maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.\nReturn the\u00a0maximum non-negative product\u00a0modulo\u00a0109\u00a0+ 7.\u00a0If the maximum product is negative return\u00a0-1.\nNotice that the modulo is performed after getting the maximum product.\n\u00a0\nExample 1:\nInput: grid = [[-1,-2,-3],\n\u00a0              [-2,-3,-3],\n\u00a0              [-3,-3,-2]]\nOutput: -1\nExplanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n\nExample 2:\nInput: grid = [[1,-2,1],\n\u00a0              [1,-2,1],\n\u00a0              [3,-4,1]]\nOutput: 8\nExplanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).\n\nExample 3:\nInput: grid = [[1, 3],\n\u00a0              [0,-4]]\nOutput: 0\nExplanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).\n\nExample 4:\nInput: grid = [[ 1, 4,4,0],\n\u00a0              [-2, 0,0,1],\n\u00a0              [ 1,-1,1,1]]\nOutput: 2\nExplanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).\n\n\u00a0\nConstraints:\n\n1 <= rows, cols <= 15\n-4 <= grid[i][j] <= 4\nclass Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}