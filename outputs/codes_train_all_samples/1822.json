{"1822": {"code": ["\nUse Call-Based format\n\n\n    use Call-Based format\n\n\n\n\n   \n\n\n\nExample 3:\n\n   \n    use Call-Based format\n\n\n\n\nExample 4:\n\n\n\n   \n        pass\n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nGiven a list of words\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\nExample:\n\n   \n\n\n\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    k:\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n    topKFrequent(self, words: List[str], k: int):\n        return [words[0]]\n\n\n\n\n\n\n\n   \n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a non-empty", "\nUse Call-Based format\n\n\n    use Call-Based format\n\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n        return []\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\nExamples:\n\n\n\n   \n\n\n\n\n\n\n\n\n   \n\n\n\n\", \"is\", \"sunny\", \"day\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n    For each element in the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n    def topKFrequent(self, words, k: int):\n       \n\n\n\n\n   \n\n\n\n\", \"is\", \"is\", \"is\", \"is\", \"is\", \"is\", \"is\", \"is\"]\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n   \n    topKFrequent(self, words, k):\n\n\n\n\n\n   \n        \n\n\", \"is\", \"sunny\", \"is\", \"is\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n    def topKFrequent(self, words, k: int):\n        return []\n\n\n\n\n\n\n\n\n   \n        \n\n\n\n\", \"is\", \"is\", \"is\", \"is\", \"is\", \"is\", \"\n\n\n\n\n\n\n\n\n\n\n\nGiven a non-", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def topK(self, words: List[str], k: int):\n        return topK(self, words, k)\n\n\n\n\n\n\n\n\n   \n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Words with the most", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1) The first element is", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n       \n\n\n\n\n\n\nExample 3:\n\n   \n\n\n\nExample 4:\n\n   \n\n\n\", \"is\", \"is\", \"is\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    topKFrequent(self, words, k: int)\n\n\n\n\n\n\nExample:\n\n\n\n   \n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a non-", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    k =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n        return []\n\n\n\n\n\n\n\n\n\n   \n        \n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n   \n\n\n\n   \n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a non-empty list of words,", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n        return topKFrequent(words, k)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   ", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def topKFrequent(self, words, k: int) -> List[str]:\n           \n\n\n\n   \n       ...\n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a non-empty list of", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def topKFrequent(self, words: List[str], k: int):\n\n       \n\n\n\n   \n       ...\n\n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a non-empty list", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nExample 3:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\n\n\n\n   \n\n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nExamples:\n\n\n\n\n\n\nExample 1:\n\n   \n\n\n\n   \n        \n\n\", \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Words with the same frequency"], "prompt": "\nQUESTION:\nGiven a non-empty list of words, return the k most frequent elements.\nYour answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.\n\nExample 1:\n\nInput: [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\nOutput: [\"i\", \"love\"]\nExplanation: \"i\" and \"love\" are the two most frequent words.\n    Note that \"i\" comes before \"love\" due to a lower alphabetical order.\n\n\n\nExample 2:\n\nInput: [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\nOutput: [\"the\", \"is\", \"sunny\", \"day\"]\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words,\n    with the number of occurrence being 4, 3, 2 and 1 respectively.\n\n\n\nNote:\n\nYou may assume k is always valid, 1 \u2264 k \u2264 number of unique elements.\nInput words contain only lowercase letters.\n\n\n\nFollow up:\n\nTry to solve it in O(n log k) time and O(n) extra space.\nclass Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        \nUse Call-Based format\nANSWER:\n"}}