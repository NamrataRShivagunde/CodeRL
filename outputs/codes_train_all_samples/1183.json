{"1183": {"code": ["\nProblem description.\n\n-----Problem: -----\n\n\n\n\n-----Problem: -----\n\nProblem description.\n\n-----Problem: -----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Problem: -----\n\nProblem description.\n\n\n\n\n\n\n\n 2.\n\n-----DP: -----\n\nif", "\nProblem name.\n\n\n\n\n\n\n\n\n\n\n\n-----Pseudo Code: -----\n\nProblem description.\n\n\n\n\n\n\n\n\n\n\n\n1 1\n2 3 1 2 2 3 1 1 1 1 2 2 1 1 1\n\n\n\n\n\n\n\n\n\n\n1 2 1 1 1 2\n1 2 2 1\n1\n\n\n\n for", "\nProblem description.\n\n\n\n\n-----Problem: -----\nProblem description.\n\n-----Problem description: -----\n\nProblem description.\n\n\n\n\n\n\n\n\n\n\n\n1 1 1 2 1 1 1 1 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n not checked.\n\n-----Explanation: -----", "\n\n\n\n\n\n\n\n1\n\n2\n3 3 3\n5\n6\n6\n7\n8\n9\n\n\n\n-----Problem: -----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n2\n1\n\n1\n1\n1\n1\n1\n\n-----DP: -----\n\n\n\n\n\n 1 2 3", "\n\n\n\n\n\n\n\n\n\nA = 1\n\nA = 2\n\nA = 1\n\nA = 3\n\n-----Pseudo Code: -----\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n-----Problem Description: -----\n\n\n\n-----Example:-----\n\n\n\n\n 1\n\t\n-----Example:-----\n", "\n\n\n\n\n\n\n\n\n1 2 3 3 4 3 3 2 3 3 1\n1 2 3 1 3 3 2 1 1\n\n-----Explanation: -----\n\n\n\n\n\n\n\n\n\n\n-----Problem:-----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----DP: -----\n\n 0, 1 1 2 1 2 3", "\nProblem description.\n\n-----Explanation: -----\n\n\n\n-----Explanation: -----\n\n\n\n\n\n\n\n\n-----Example: -----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----DP: -----\n\n\nThe first line of input is space separated integers\n1 2 2 3 1\n\n\n\n now 1 to", "\nProblem description.\n\n-----Example:\n\n\n\n\n-----Example description:\n\nProblem description.\n\n-----Example description:\n\nProblem description.\n\n-----Example description:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n 1\n\n-----DP: -----\n", "\n\n\n\n\n-----Problem: -----\n\nProblem description.\n\n-----Problem: -----\n\n\n\n-----Problem description: -----\n\n\n\n\n\n\n-----Explanation: -----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----DP: -----\n\nA = array[from]\n\n\n\n\n 1 2 3 1 1", "\nProblem description.\n\n-----Problem description:\n\n\n\n\n-----Problem description:\n\nProblem description.\n\n-----Problem description:\n\nProblem description.\n\n-----Problem description:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1\n\t\n-----Sample function calls:", "\nProblem description.\n\n-----Problem description:\n\n\n\n\n-----Problem description:\n\nProblem description.\n\n-----Problem description:\n\nProblem description.\n\n-----Problem description:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Problem Description: -----\n\n\n\n\n\n\n 1 2 3 4 4", "\n\n\n\n\n\n\n\n\n\n\n-----P: -----\n\nProblem description.\n\n\n\n\n1 2 3 3 3 3 2 2 3 3 3 3 3\n1 2 3 3 3 3 3 3\n\n\n\n\n\n\n\n\n\n\n\n-----Problem:-----\n\n\n\n\n\n\n\n\n-----DP:-----\n\n\n\n 1 3 4 5 7", "\nProblem name.\n\n\n\n-----Problem description:\nProblem description.\n\n-----Problem description:\n\n\n\n\n\n\n\n\n\n\n\n1\n2 3 2 3 3 4 1 2 1\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n-----Problem description:\n\n\n\n-----Pseudo Code for DP: -----\n\n\n\n 1 3 2", "\n\n\n\n\n\n\n\n\n1\n1\n2 1\n\n\n\n1\n1 1 1 2 1\n1 1 1\n1 1\n1 1 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 1 1\n1 1 1\n\n-----Explanation:-----\n\n\n\n\n\n\n\n\n 1\n\n-----Function", "\nProblem name.\n\n\n\n\nProblem description.\n\n\n\n\n\n1\n2 3\n1 2 2 3\n1 2 2 1\n1 2 1 1 1\n1 1 2\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----DP:-----\n\n 1\n\n-----DP:", "\n\n\n\n\n\n\n\n\n\n\t\tA=2\n\t\tk=2\n\t\tto=2\n\t\tn = 2\n\t\tk = 1\n\t\tq = 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Problem Description: -----\n\n\n\n\n 1\n\n-----Sample Function:", "\n\n\n\n-----Problem: -----\n\nProblem description.\n\n-----Explanation: -----\n\nProblem description.\n\n-----Explanation: -----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1\n\n-----Return:-----\n\n1 3", "\n\n\n\n\n\n-----Problem: -----\n\n\n\n\n1\n\n2\n\n3\n\n1\n\n2\n\n\n\n\n\n\n\n\n1\n\n\n-----Problem Description: -----\n\n\n\n\n\n\n\n\n\n\n-----Problem: -----\n\n\n\n\n-----Problem: -----\n\nProblem description.\n\n\n\n\n now 1 to 3 from", "\n\n\n\n\n\n\n\n\n-----P2: -----\n\n\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n-----P3: -----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1.\n\t# 1.1\n\n# 1.2\n", "\n\n\n\n-----Problem: -----\n\nProblem description.\n\n-----Problem description.\n\n-----Problem description.\n\n-----Problem description.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Problem: -----\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1\n\t\n# A = array"], "prompt": "\nQUESTION:\nProblem description.\n\nThis problem is simple and will introduce you to the Dynamic Programming.\n\nYou will be given an array and a key value.\n\nYou will have to find out the occurrences of the key value depending upon the query using Brute Force and Top Down Dynamic Programming.\n\n-----Brute-Force: -----\nYou will check the query, and calculate the occurrences.\n\n\n-----DP: -----\n\nYou will check the query; check whether the memoized solution is already available.\n\nIf the memoized solution is available, no need to calculate the number of occurrences again.\n\nIf the memoized solution is not available, then calculate the number of  occurrences and memoize it for future use.\n\n-----Pseudo Code for DP:-----\ncountOccurences(key,from):\n\nif (from = size of array) then \n\treturn 0\nendif\nif dp[from] is availabe then \n\treturn dp[from]\nendif\nif( array[from] == key) then\n\tdp[from] = 1+countOccurences(key,from+1)\nelse\n\tdp[from] = countOccurences(key,from+1)\nendif\t\nreturn dp[from]\n\n\n-----Input:-----\n\nThe first line of input is the number of test cases (t).\n\nThe first line of each test case is the number of array elements (n).\n\nThe next will contain n space separated integers.\n\nThe next line will have the key element (k).\n\nThe next will have number of queries (q).\n\nThe next q lines will contain an integer A such that 0<=A < n. \n\nYou have to find out the number of occurrences from a to end of the array using both brute force and DP. \n\nEverything will fit into the range of int.\n\n-----Output:-----\n\nFor each test case, the output will have q lines with 3 space separated integers.\nThe first will be the number of occurrences, other will be the loop count/function calls,\nusing brute force and the last will be the number of loop count/function calls using DP.\n\n-----Sample Input:-----\n1\n10\n1 2 3 1 2 3 1 2 3 1\n3\n5\n2\n4\n6\n8\n2\n\n-----Sample output:-----\n3 8 9\n2 6 1\n1 4 1\n1 2 1\n3 8 1\n\n-----Explanation:-----\n\nFor the first query, we have to find the number of occurrences of 3 from index 2.\n\nUsing the brute force, the loop will check each element from index 2 to 9. Thus the loop count is 8.\n\nUsing DP, the method countOccurences(key,from) will be called like this : \n\ncountOccurences(3,2)->countOccurences(3,3)->countOccurences(3,4)->countOccurences(3,5)\n->countOccurences(3,6)->countOccurences(3,7)->countOccurences(3,8)\n->countOccurences(3,9)->countOccurences(3,10).\n\n\nWhen the countOccurences(3,10) is called, it will return 0. Total 9 function calls.\n\nFor the second query, the brute force will do the same as above.\n\nBut the DP will check whether solution for countOccurences(3,4) is available or not.\n\nAs it was calculated while solving the first query, it won\u2019t solve it again and will directly give the answer. \n\nTotal 1 function calls.\nUse Standard Input format\nANSWER:\n"}}