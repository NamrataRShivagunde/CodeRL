{"3690": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n~else:go\n*NOTE: In Go, you will assume that your task will return an error. \n~else\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n~endif\n\n```python\n\n\n\n\n```python\n\n# Kata's K", "\nUse Call-Based format\n~~~else\n~else\n\n\n\n\n\n~else\n\n\n\n\n\n#if:go\n\n\t\n\t#\n\n#\n\n#\n\n\n\n\n\n\n\n~endif\n\n## Example\n\nKata:\n\n# Kata:\n# Kata.\n# Kata:\n#\n\n\n``", "\n\n\n\n\nUse Call-Based format\n\n~~if:haskell\n~~~else\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\t\n\t\n# Example\n\n# Example\n\n**\n# Example:\n\n#\n# S", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n```python\n\n# Kata\n\n\n\n\n\t\n\n\n\n```python\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n# Fortran\n# if:go\n# endif\n\n\n\n#\n\n    If", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n# Function solving\n#\n\n\n\n\t\n\t#\n\t\n\t\n\t\n## Example\n\n>>> if:goto\n>>> return\n>>> else:\n>>> if:goto\n\n\n\n\n\n\n\n\n\n### Example\n\n~endif\n~endif\n\n\n\t\n\t", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n~else:go\n\n\n\n\n\n\n~endif\n\n\n\n\n\n### Examples\n\n```python\n\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n~endif\n\n### Example\n\n\n\n\n```python\nIn this K", "\n\nUse Call-Based format\n\n\n\n\n~else\n~elif:go\n\n# Do some work\n#endif\n#endif\n\n\n\n\n\n\t\n\t\n\n\n\n~~~endif\n\n\n\n\n\n\n\n~~~endif\n\n\n\n~~~endif\n\n\n\n#\n\t\tst[idx] = [", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n~else:\n\n\n\n\n\n\n# Use Call-Based format\ndef solve(st, idx):\n\t\t\n\n\n\n\n### Example\n\n\n\n\n\n\n~endif\n\n#endif\n\ndef\n\n\t\tIn this K", "\nUse Call-Based format\n\n\n\n\n~else:go\n*NOTE: In Go\n*NOTE: In Haskell\n*NOTE: In Haskell\n*NOTE: In Go\n~else\n\n\n\n\n~else\n\n\n\n\n\n\n\n\n\n\n\n\n~endif\n\n#endif\n\n\n\n### Example\n\n\n\t#", "\nUse Call-Based format\n\n\n\n\n~else:go\n*NOTE: In Go\n*NOTE: In Haskell\n*NOTE: In Haskell\n*NOTE: In Go\n~~else:go\n,\n\n~\n\n\n\n\n\n\n\t\n\n\n\n\n~endif\n\n~endif\n\n\n# Example\n\n\n\n\t", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n~\n\n\n\n~~~else\n\ndef solve(st, idx):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n~endif\n\n\n### Example:\n\n~~~if:go\n*\n\n\n\t\tIn this", "\nUse Call-Based format\n~\n\nUse Call-Based format\n\n\n~else\n\n\n\t\n# Example\n\ndef solve(st, idx):\n\t\nUse Call-Based format\n\t\n\n~\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\t\t# The original Kata solve", "\n\nUse Call-Based format\n\n\n\n\n\n~\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n~~~endif\n\n### Example\n\n# Kata\n\n\n\n\n\n\n\n\n### Example\n\n~~~else\n\n#\n\n\n# Kata\n\n\n\n\t", "\n\nUse Call-Based format\n~else:go\n\n\n\n\n\n\n\n\n>>>\n\n\n\n\n\t\n\n\n\n\nin this Kata, you will be given an index of an opening bracket, and a closing bracket, and an index of an closing bracket.\n\n\n\n\n\n\n\n\n~endif\n\n\n\n\n# Examples\n\n###\n", "\n\nUse Call-Based format\n\n~~~if:Kata\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n~~~endif\n\n### Example\n\n### Example\n\nNOTE:\n\n>>>\n\n\n\n\n\n\n\t\n\n```python\n\n# K", "\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n### Examples\n\n```python\n\n\nUse Call-Based format\n\n### Examples\n\nUse Python format\n\n### Examples\n\n~\n\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\n\t\t# a.b.c.e", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n```python\n\n\n\n\n\n\n~~~endif\n\n\nReturns:\n\n\tint\n\n\n\n\n\n\n### Example\n\n```python\n\nHaskell:\n\n\n\n\n\n```python\nIn", "\nUse Call-Based format\n\t\n\n\n\n\n\n\n# Use Call-Based format\n#\n\n\t\n\n\n\t\n\n\t\tSt is the string to be solved \n\t\tidx is the index of the input.\n\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\t\n\n```python\nIn this Kata, you", "\nUse Call-Based format\n~endif\n\n\n\n\n\n\n\n\n\n\n#endif\n\n#\n\n\t# Call-Based format\n\t\n\t# Call-Based format\n\n#\n\n#\n\n\n~~~endif\n\n\n\n\n\n\n\n~~~endif\n\n~endif\n\n\n\t\n\n\t\n### Example 2", "\n\n\n\n\n\n\n~endif\n\n\n\n\ndef solve(st, idx):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n~~~endif\n\n\n\n\n~~~endif\n\n\n### Example\n\n### Example 2\n\n# Examples\n\n### Example 3\n\n\n\n"], "prompt": "\nQUESTION:\nIn this Kata, you will be given a string with brackets and an index of an opening bracket and your task will be to return the index of the matching closing bracket.  Both the input and returned index are 0-based **except in Fortran where it is 1-based**. An opening brace will always have a closing brace. Return `-1` if there is no answer (in Haskell, return `Nothing`; in Fortran, return `0`; in Go, return an error)\n\n### Examples\n\n```python\nsolve(\"((1)23(45))(aB)\", 0) = 10 -- the opening brace at index 0 matches the closing brace at index 10\nsolve(\"((1)23(45))(aB)\", 1) = 3 \nsolve(\"((1)23(45))(aB)\", 2) = -1 -- there is no opening bracket at index 2, so return -1\nsolve(\"((1)23(45))(aB)\", 6) = 9\nsolve(\"((1)23(45))(aB)\", 11) = 14\nsolve(\"((>)|?(*'))(yZ)\", 11) = 14\n```\n\nInput will consist of letters, numbers and special characters, but no spaces. The only brackets will be `(` and `)`. \n\nMore examples in the test cases. \n\nGood luck!\n\n~~~if:fortran\n*NOTE: In Fortran, you may assume that the input string will not contain any leading/trailing whitespace.*\n~~~\ndef solve(st, idx):\n\t\nUse Call-Based format\nANSWER:\n"}}