{"4656": {"code": ["\n\n The \"n\" parameter is the height of the tree to use for the repeat substring.\n\n Task\n\n Task\n\n Task\n\n Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n `chars = \"ab\"`,the output should", "\n\n\n\nchristmas:\n\n- `chars`: the character to be split into n and n\n\n- `n`: the number of leaves\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n `chars = \"abcde\"`,the output should", "\n\n\n\n\n- `chars`: the characters to find the repeat substring.\n\n- `n`: the height of the tree\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          b\n         \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n `chars = \"ababa\"`,the output", "\n\n\n\n\n\n# Example:\n\n- `chars = \"abcde\"`\n\n- `chars = \"abcde\"`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n\n\n\n\n `chars = \"abcde\"`,the output", "\n\n Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          b\n          c\n          c\n          c\n          c\n          c\n          c\n          c\n         \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    NOTE:\n\n    `chars`\n      `chars = \"abc", "\n\n\n\n\n\n\n\n\n\n- n = Infinity,the output should be the specified height.\n\n- chars = \"abcde\"\n\n# Inputs:\n\n- chars = \"abcde\"\n\n# Output:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `chars = \"abab\"`,the output should", "\n\n\n\n- `chars`: the character to be used\n- `n`: the number of leaves\n\n- `chars`: the character to be used\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n\n `chars = \"abcde\"`,the", "\n\n\n\n- `chars`: the characters to consider\n\n- `n`: the height of the tree\n\n- `chars`: the character sequence\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `chars = \"abcde\"`,the output should be `\"aba\"`", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\nThis task will be built by running `kata`\n\n```\n\nIf we keep only the center part of leaves, we will get:\n\n\n\n\n\n\n\n\n `chars = \"ae", "\n\n\n\n\n\n\n Task\n\n\n\n\n\n\n\n\n\n\n\n          a\n          b\n          c\n          b\n          c\n          d\n\n         \n          b\n          c\n          d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n\n\n `chars = \"abc", "\n\n\n\nchristmas(chars, n):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n```\n\n\n\n```\n\n```\n\n `chars = \"abcde\"`,", "\n\n\n\n- `chars`: the characters to be used to find the repeat substring.\n- `n`: the height of the repeat substring.\n\n\n\n\n\n\n\n\n\n\n\n\n          b        \n         \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n `chars = \"abcde\"`,", "\n\n\n\n- The number of leaves in the tree is defined by the number of characters to keep\n```\n\n# Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n  a b c a b c a b c a\n\n\n\n\n\n\n\n\n\n `chars = \"abcde\"`,the", "\n\n\n- The center part of the leaves\n\n- The height\n\n- The height of the leaves\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n```\n\n `chars = \"abcde\"`,the output should", "\n\n\n\n    n = 3\n\n\n\n# Example:\n\n    chars = \"abcde\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          b\n          c\n\n         \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n `chars = \"abcde\"`,the", "\n\n\n\n- `chars`: the character of the tree\n\n- `n`: the number of leaves\n\n- `chars`: the character of the tree\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n `chars = \"abab\"`,the output should be `\"aba", "\n\n\n- `chars`: the characters to split\n- `n`: the height of the leaves\n- `chars`: the height of the leaves\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchars = \"abcde\"\nchars = \"abc\"\nchars = \"abc\"\n\n `", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n```\n\n\n- `chars = \"abcde\"`,the output should be `aaaaaaaaaaaa`\n\n```\n\n\n\n\n `", "\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          b      \n          c\n          d\n         \n          b        \n          c\n          d\n         \n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n    NOTE:\n\n    The following is the best we can do:\n\n   \n\n\n `chars = \"a", "\n\n\n\n \n\n\n\n\n\n\n \n\n\n\n \n\n    n = 1\n\n \n\n\n        b\n        c\n        |\n        |\n        |\n        |\n        |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- `chars = \"ab\"`\nthe output should be `ab`\n\n\n\n `"], "prompt": "\nQUESTION:\n# Task\n\nChristmas is coming. In the [previous kata](https://www.codewars.com/kata/5a405ba4e1ce0e1d7800012e), we build a custom Christmas tree with the specified characters and the specified height.\n\nNow, we are interested in the center of the Christmas tree. \n\nPlease imagine that we build a Christmas tree with `chars = \"abc\" and n = Infinity`, we got:\n```\n          a\n         b c\n        a b c\n       a b c a\n      b c a b c\n     a b c a b c\n    a b c a b c a\n   b c a b c a b c\n  a b c a b c a b a\n b c a b c a b a b c\na b c a b a b c a b c\n. . . . . . . . . . .\n. . . . . . . . . . .\n. . . . . . . . . . .\n. . . . . . . . . . .\n          |\n          |\n          .\n          .\n```\nIf we keep only the center part of leaves, we will got:\n```\n          a\n            \n          b  \n              \n          a    \n                \n          a        \n                    \n          b        \n                    \n          a          \n          .\n          \n          .\n          \n          .\n```\nAs you can see, it's a infinite string, but it has a repeat substring \"aba\"(spaces will be removed). If we join them together, it looks like:`\"abaabaabaabaaba......\"`.\n\nSo, your task is to find the repeat substring of the center part of leaves.\n\n# Inputs:\n\n- `chars`: the specified characters. In this kata, they always be lowercase letters.\n\n# Output:\n\n- The repeat substring that satisfy the above conditions.\n\nStill not understand the task? Look at the following example ;-)\n\n# Examples\n\n\nFor `chars = \"abc\"`,the output should be `\"aba\"`\n```\ncenter leaves sequence: \"abaabaabaabaabaaba.....\"\n```\nFor `chars = \"abab\"`,the output should be `a`\n```\ncenter leaves sequence: \"aaaaaaaaaa.....\"\n```\nFor `chars = \"abcde\"`,the output should be `aecea`\n```\ncenter leaves sequence: \"aeceaaeceaaecea.....\"\n```\nFor `chars = \"aaaaaaaaaaaaaa\"`,the output should be `a`\n```\ncenter leaves sequence: \"aaaaaaaaaaaaaa.....\"\n```\nFor `chars = \"abaabaaab\"`,the output should be `aba`\n```\ncenter leaves sequence: \"abaabaabaaba.....\"\n```\ndef center_of(chars):\n\t\nUse Call-Based format\nANSWER:\n"}}