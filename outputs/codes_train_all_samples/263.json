{"263": {"code": ["\nUse Call-Based format:\n\n\nUse Call-Based format:\n\n\n\n\n\n\nOutput:\n\nn\n\nExplanation:\n\nUse Call-Based format\n\nExplanation:\n\n\n\n\n   \n\n\n\n\n\n\n\n\nExample 6:\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\nThe chess knight has a", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def knightDialer(self, n: int) -> int:\n\n    return 1\n\n\n\n\nExample 1:\n\n   \nOutput: 5\n\n\n\n\n\n\n\n\n\n\nThe chess knight has a unique movement\n\n\n\n\nThe chess knight has", "\nUse Call-Based format\nUse Call-Based format\nExplanation:\n\nUse Call-Based format\n\n\n\n\n\nExplanation:\n\n\n\n\nExplanation:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nThe chess knight is not unique,\u00a0it can't be a number\n\n\n\n\nThe knight is", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n1 <= n <= 10\nOutput: 98\n\n\u00a0\n\nExplanation:\n\n\nExample 1:\n\n1 <= n <= 10\n\nExample 2:\n\n1 <= n <= 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe kn", "\nUse Call-Based format\n\n\n    def knightDialer(self, n: int) -> int:\n\n\n\n\n\n\nExplanation:\n\nn > 5\n\nExplanation:\n\n\n\n\n   \n\nExplanation:\n\n\n\n\n\n\n\n\n\n\nThe chess knight is not dialable.\n\n\n\n\n\nThe chess", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nThe chess knight is a phone pad.\n\n\n\n\n\n\n\n\n\n\n\n   \n    knightDialer(self, n) -> int:\n\n\n\n\n\n\n\n\n\nThe chess knight is not valid\n\n\n\n\n\n\nThe knight is valid.\n\n", "\nUse Call-Based format:\n\n\n\n\nUse Call-Based format:\n\n\n\n\nExplanation:\n\n1 <= n <= 6\n\nReturns:\n\n0 <= n <= 6\n\nExplanation:\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 5\n\nOutput: 100\n\n", "\nUse Call-Based format\n\nExample 1:\n    def knightDialer(self, n: int) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\nChess knight is not dialable.\n\n\n\n\n\n\n10 <= n <= 5\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nExample 2:\n\nUse Call-Based format\n\nExample 1:\n\n    n = 1\n\nOutput:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 10\n1 <= n", "\nUse Call-Based format\n\n\n\nExplanation:\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nExplanation:\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe chess knight is not valid\n\nExplanation:\n\n\n\n\nThe chess knight is valid\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nExplanation:\n\n\n\nExample 0:\n\n    1 <= n <= 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe chess knight is not dialable.\n\n\n\n\n\n\nThe chess knight is", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n1 <= n <= 5\nOutput: 0\n\n\u00a0\n\n\nExplanation:\n\n\n\nReturns:\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChess knight\n\n\nThe chess knight has a", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    knightDialer(self, n):\n        return n\n\n\n\n\n\n\n\n\n\nThe chess knight can move two square vertically and two square horizontally.\n\n\n\n\n\nThe kn", "\nUse Call-Based format:\n\n\n\n\nUse Call-Based format:\n\n\nUse Call-Based format:\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\nn = 2\n\nOutput:", "\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n\n\nn = 4\n\nExplanation:\n\nn >= 2\n\n\n\nExplanation:\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 5\nOutput: 4\n\n\u00a0\n\n\n\n\nThe chess knight", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nn = 1\n\n\u00a0\nExplanation:\n\nUse Call-Based format\n\nExample 5:\n\nExample 2:\n\nn = 2\nOutput: 2\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe chess", "\nUse Call-Based format:\n\n\n\n\nThe chess knight is a phone number.\n\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n\nUse Call-Based format:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThe chess knight is not dialed\n\n\n\n\n\nThe chess knight", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nExplanation:\n\nUse Call-Based format\n\nExample 1:\n\n    n = 3\n\nExample 2:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= n <= 5\n\n\n\nThe chess kn", "\nUse Call-Based format\n\n\n\n\nThe chess knight is not called yet\n\n\n\n\n\n\n\n\n\u00a0\nExplanation:\n\nUse Call-Based format\n\nExample 1:\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n\n\n\n\n\nThe chess knight is not called\n\n", "\nUse Call-Based format:\n\n\nUse Call-Based format:\n\n\n\n\n\n\nThe chess knight is a number of a phone number of length n\n\n\n\n   \n        self, n: int\n\n\n\n\n\n\n\n\n\n\n\nThe chess knight is not valid.\n\n\n\n\n\nThe chess knight is valid\n"], "prompt": "\nQUESTION:\nThe chess knight has a unique movement,\u00a0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\nA chess knight can move as indicated in the chess diagram below:\n\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell\u00a0(i.e. blue cell).\n\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\nAs the answer may be very large, return the answer modulo 109 + 7.\n\u00a0\nExample 1:\nInput: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n\nExample 2:\nInput: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n\nExample 3:\nInput: n = 3\nOutput: 46\n\nExample 4:\nInput: n = 4\nOutput: 104\n\nExample 5:\nInput: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod.\n\n\u00a0\nConstraints:\n\n1 <= n <= 5000\nclass Solution:\n    def knightDialer(self, n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}