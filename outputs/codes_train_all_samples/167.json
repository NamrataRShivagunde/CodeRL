{"167": {"code": ["\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nYou are given K eggs, and N floors.\n\n\n\n\n\n    def superEggDrop(self, K, N):\n        return 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nK < N\n\nK = K -", "\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n    def superEggDrop(self, K, N):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= K <= 2\n1 <=", "\nUse Call-Based format\n\n\n    def superEggDrop(self, K, N):\n        pass\n\n\n\n\n\n\n\nDrop the egg with K, N, and F from floor 1 to floor 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe number of eggs you have to drop.\n\n\n\n\n\nK = K + 1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    pass\n\n\n\nUse Call-Based format\n\n\n\n\nDrop the egg from k to N\n\n\n\n\nDrop the egg from k to N\n\n\n\n\n\nK > N:\nK =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nYou are given K eggs, K >= 3, N >= 4, K <= 3\nOutput: 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK = 0\nN = 0\n\n\n\n\nK = 2", "\nUse Call-Based format\nUse Call-Based format\n\n\nDrop a building with K eggs from 1 to 1\n\n\n\n\nDrop an egg from K to N.\n\nDrop an egg from K to N.\n\n\n\n\nDrop an egg from K eggs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK <= N <= 100\nK <=", "\nUse Call-Based format\nUse Call-Based format\n\n\n    def superEggDrop(self, K, N):\n        return self.superEggDrop(K, N)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrop the egg from any floor K\n\n\u00a0\n\n\n\n\n\nK = K - 1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nDrop the egg from K to N\n\nDrop the egg from K to N\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nK >= N\nN >= K\n\n\n\n\n\n\nK > N\nK >=", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nYou are given K eggs, and K floors, and N floors.\n\n\n\n\n\n\n\n\n\n    pass\n\nDrop an egg from K to N\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK = 1\nN =", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nDrop the egg from K to N\n\nDrop the egg from K to N\n\n\n\n\n\n\n\n\n\nThis is a call-based format\n\n\n\n\nK < N < K\n\n\n\n\n\nK >= 2\nK", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n    def superEggDrop(self, K, N):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK = K - 1\nN", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nDrop the eggs from K to N\n\n\nK <= N <= 10000\nK <= N <= 10000\n\n\n\nDrop the eggs from K to N\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given K eggs\n\n\n\n\n\n\nK <= K <= N\nK", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nDrop an egg from K to N\nUse Call-Based format\n\n\n\nDrop an egg from K to N\n\nDrop an egg from K to N\n\n\n\n\nDrop an egg from K to N\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK <= 1\nK <= N\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n    def superEggDrop(self, K: int, N: int) -> int:\n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK = K - 1\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nDrop the egg from K to N\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nDrop the egg from K to N\n\n\n\n\n\nK = K + 1\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nDrop the egg from K to N\n\n\n\n\n\nDrop the egg from K to N\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK == 0\nK == 1\nK == 1\nK == 1\n\n\n\n\n\n\nK >= 3\nK", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nDrop the egg with K floors from 1 to N\n\n\n\n\nDrop the egg from K to N\n\nDrop the egg from K to N\n\n\n\n\n\n\n\n\nDrop the egg from K to N\n\n\n\n\n\n\n\nDrop the egg\n\n\n\n\nK = K + 1", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n1 <= K <= 100\n1 <= N <= 10000\n1 <= K <= 100\n\u00a0\n\n\n\n\nUse Call-Based format\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\nK <= N <= 10000\n\n\n\n\n\n\nK = 1\nN = 2\n", "\n\nUse Call-Based format\n\n\nUse Call-Based format\nDrop an egg with K floors from 1 to N\n\n\n\n\n\n\nDrop an egg using Call-Based format\nDrop an egg with K floors from 1 to N\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nK eggs dropped from F\n\n\n\n\n\nK eggs drop", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nDrop an egg from K to N\n\n\nK <= K <= N <= 100\nK <= N <= 10000\n\n\n\nDrop an egg from K to N\n\n\n\n\n\n\n\n\n\n\n\n\nDrop an egg from K to N\n\n\nK > N\n\n\n\nK > N\nK"], "prompt": "\nQUESTION:\nYou are given K eggs, and you have access to a building with N floors from 1 to N.\u00a0\nEach egg is identical in function, and if an egg breaks, you cannot drop it\u00a0again.\nYou know that there exists a floor F with 0 <= F <= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break.\nEach move, you may take an egg (if you have an unbroken one) and drop it from any floor X (with\u00a01 <= X <= N).\u00a0\nYour goal is to know\u00a0with certainty\u00a0what the value of F is.\nWhat is the minimum number of moves that you need to know with certainty\u00a0what F is, regardless of the initial value of F?\n\u00a0\n\n\n\nExample 1:\nInput: K = 1, N = 2\nOutput: 2\nExplanation: \nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\nOtherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.\nIf it didn't break, then we know with certainty F = 2.\nHence, we needed 2 moves in the worst case to know what F is with certainty.\n\n\nExample 2:\nInput: K = 2, N = 6\nOutput: 3\n\n\nExample 3:\nInput: K = 3, N = 14\nOutput: 4\n\n\u00a0\nNote:\n\n1 <= K <= 100\n1 <= N <= 10000\nclass Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}