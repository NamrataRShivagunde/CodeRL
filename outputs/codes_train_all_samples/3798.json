{"3798": {"code": ["\n\t\n\n\n\n# Example\n\n# Example\n\n# Example\n\n# Example\n\n# Example\n\n# Example\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Example:\n# Task\n\n\n\n\n# Example:\n\n#", "\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n# Task\n\n \u2264 s\n\n \u2264 |S| \u2264 1000\n\n \u2264 s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n# Task\n\n\n\n# Task\n\n  # Pero\u2019s", "\n\n\n\n\n\n\n\n# Example\n\n\n \n\n \n \n \n  [1]\n  [2]\n  [3]\n  [4]\n  [5]\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n# Example:\n# Task\n Pero finish\n\n\n# Example\n# Task", "\n\t\n\t\n\t\n\n\n\n# Example:\n\n# Task\n\n  Pero finishing\n\n \n\n\n\n\n\n \n \n\t\n\n\t\n# Example\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n# Example:\n\n# Task\n\n\n\n\n# Example\n\ns = \"P01", "\n\n\n\n\n\t\n\t\n# Example:\n\n# Task\n poker cards\n\n \n\n\n\n\n\n s = \"P01K02H01H02T11H01\"\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n#\n\n# Task\n\n  # Task #\n\n  # Task", "\n\n\n\n\n# Example:\n\n# Task\n\n\n \n\n  # Example:\n\n  # Task\n\n  # Task\n\n  # Task\n\n \n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\t\n# Example\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Task\n\n\n# Example:\n", "\n\t\n\n\n# Example\n\n# Task\n\n# Task\n\n# Task\n\n\n\n\n\n\n\n\n\n# Example\n\n# Task\n\n\n\n\n \n\t\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Input/Output\n\n# Example:\n\n\n# Example\n\n#", "\n\t\n\t# Example:\n\t#\n\n\n\n\n\n# Example:\n# Task\n\n# Check\n\n\n\n\n\n\n\n \n\n  # Example\n\t\n# Task\n\n\n\t\n# Example\n\t\n# Task\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n\n# Example\n\n# Task\n\n", "\n # Example\n\n\n\n\n\n\n  # Notes\n\n  # Example:\n\n  # Example\n\n  # H02\n\n  #\n\n\n \n\n\n\n \n\n  #\n\n\n\n\n\n\t\n# Example\n\n\n\t\n\n\n\n\n\n# Example\n\n# Task\n\n\n\n\n# Example\n# Task\n\n", "\n\n\n\n# Example\n\n# Task\n\nPero is created into a robotics recently\n\nPero is created into a robotics recently\n\nPero is created into a robotics recently\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n# Example:\n\n\n\n\n\n# Example\n\n# Task\n\n", "\n\n\n\n\n# Description\n\n# Description\n\n#\n\n\n\n\n\n\n  0 \u2264 1 \u2264 0\n  1 \u2264 1 \u2264 1\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n# Example:\n# Task\n\n\t\n\n\n\n\n# Example:\n\n\n# Example:", "\n\n Example:\n\n# Task\n\n\n\n# Example:\n\n# Task\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n\t\n# Example\n\n# Example\n\n# Task\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\ts = \"P01K01H", "\n\n\n\n\n\n\n# Description\n\n\n\n\n# Example:\n\n# Task\n\n\n\n  \"P01K01H02T02K01H02T09\"\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n1\n-\n\n# Example:\n\n# Task\n# Task\n\n#", "\n\n\n\n\n\n\n\n# Example\n\n# Task\n\n#\n\n \n\t\n\n\n \n  |S| \u2264 0 \u2264 0\n  |T| \u2264 0\n\n \n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n\n\n# Example\n\n# Task", "\n\t\n\n\n\n\t\"\"\"\n\n\n\n\n \n\n\n\n\t# Example\n\n `s = \"P01K02H01K01H03H02T01T0101010101010101010102\"`\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n# Task\n\n\n\n# Example\n\n\n# Example", "\n\n\t\n\t\n\t\n# Example\n\n\t\n# Task\n\tPero finish\n\n\t\n# Task\n\t\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n \n\n\t\n# Example\n\t\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Input\n\n  \"", "\n\t\n\n# Example:\n\n\t# Welcome to the programme\n\n\t#\n\n\t# Example:\n\n\t# Example\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n# Task\n\n\n# Example\n# Task\n", "\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n  # All cards in the string `s`\n  #\n  # \u2264 1 \u2264 2 \u2264 3\n\n \n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n# Example\n\n# Task\n\n\n\n# Input\n# Example\n# Input\n#", "\n\n\n\n\n\t\n\t\n\t\n\n# Example:\n\n [input]\n\n  array_cards_and_pero(s)\n\n# Example:\n\n\n # Task\n\n\n\n\n\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n# Example:\n\n# Task\n\n# Task\n", "\n\n\n\n\n# Example:\n\n# Task\n\n\n\n\n\n\n\n\n\t\n# Example:\n\n# Task\n\n\n \n \n  0 \u2264 0\n\n \n\n\n\n\n\n\n\n\n\n\n# Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n# Input\n# String `s`"], "prompt": "\nQUESTION:\n# Task\n Pero has been into robotics recently, so he decided to make a robot that checks whether a deck of poker cards is complete.\n\n He\u2019s already done a fair share of work - he wrote a programme that recognizes the suits of the cards. For simplicity\u2019s sake, we can assume that all cards have a suit and a number.\n\n The suit of the card is one of the characters `\"P\", \"K\", \"H\", \"T\"`, and the number of the card is an integer between `1` and `13`. The robot labels each card in the format `TXY` where `T` is the suit and `XY` is the number. If the card\u2019s number consists of one digit, then X = 0. For example, the card of suit `\"P\"` and number `9` is labelled `\"P09\"`.\n\n A complete deck has `52` cards in total. For each of the four suits there is exactly one card with a number between `1` and `13`.\n\n The robot has read the labels of all the cards in the deck and combined them into the string `s`.\n \n Your task is to help Pero finish the robot by writing a program that reads the string made out of card labels and returns the number of cards that are missing for each suit.\n\n If there are two same cards in the deck, return array with `[-1, -1, -1, -1]` instead.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  A correct string of card labels. 0 \u2264 |S| \u2264 1000\n\n\n - `[output]` an integer array\n\n  Array of four elements, representing the number of missing card of suits `\"P\", \"K\", \"H\", and \"T\"` respectively. If there are two same cards in the deck, return `[-1, -1, -1, -1]` instead.\n\n\n# Example\n\n For `s = \"P01K02H03H04\"`, the output should be `[12, 12, 11, 13]`.\n \n `1` card from `\"P\"` suit, `1` card from `\"K\"` suit, `2` cards from `\"H\"` suit, no card from `\"T\"` suit.\n \n For `s = \"H02H10P11H02\"`, the output should be `[-1, -1, -1, -1]`.\n \n There are two same cards `\"H02\"` in the string `s`.\ndef cards_and_pero(s):\n\t\nUse Call-Based format\nANSWER:\n"}}