{"4078": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n == []\n\n\n\n\n\n\n == []\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n```python\nfirst_n_smallest([], 2)\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nfirst_n_smallest(arr, n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest(arr, 2)\n\n\n\n\n```python\nif first_", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n* the number of elements to return can be higher than the number of elements to return;\n* elements cannot be duplicated;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n == []\n\n```\n\n\n\n```python\n", "\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n == []\nfirst_n_smallest(arr, 3) == []\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest(arr, -1) == []\n\n\n\n```python\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nfirst_n_smallest(arr, 3) == [1,2,3,4,5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nfirst_n_smallest([arr, n], 3)\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n == [1,2,3,4,5];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest(arr, 2)\n\n\n\n\n```python\n\nif", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n* == [1,2,3,4,5,-4,0];\n* elements cannot be duplicated;\n* elements cannot be longer than 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n == [0,1,2,3,4,2,3]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nfirst_n_smallest([1,2,3,4,5])\n\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThis function is not called by any of the functions you are calling.\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest(arr, 0)\n\n\n\n```python\n#if", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n == []\nfirst_n_smallest([], 0) == []\nfirst_n_smallest([], 1) == []\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nfirst_n_smallest([", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\n\nprint first_n_smallest(arr, n)\n```\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n```python\n\nif first_n", "\n\n\n\n\nUse Call-Based format\n\n\nfirst_n_smallest(arr, 2)\nfirst_n_smallest(arr, 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest(arr, 3)\n\n\n\n```python\n\nif first_", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n == []\nfirst_n_smallest(arr, 0) == []\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nfirst_n_smallest(arr, 1)\n\n\n\n``", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nuse Call-Based format\n\n```python\n# first_n_smallest(arr, n)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest(arr, 3) == []\n\n\n\n\n```python\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n```python\n\n# Example:\n\n# Example 1\n\n# Example 2\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest(arr, 3)\n\n\n\n```python\n\nif", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n == []\nfirst_n_smallest(arr, 0) == []\nfirst_n_smallest(arr, 0) == []\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\ndef first_n_smallest(arr):\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n == []\nfirst_n_smallest(arr, n) == []\nfirst_n_smallest(arr, -1) == []\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n```python\nif first_", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nuse Call-Based format\n\n* the function returns a list of first n elements to return\n* the function returns a list of arrays\n* the function returns a list of integers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest:\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n**NOTE**\n\n\n\n\n == []\n\n\n\n == []\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n```python\n\nfirst_n_", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n == [1,2,3,3,2,1]\n\n\n\nThis function does the right thing you want to do\n\n\n\n\n\n\n\n\n\n\n\n\n\nfirst_n_smallest\n\n\n\n\n```python\n\n#"], "prompt": "\nQUESTION:\nYour task is to write a function that does just what the title suggests (so, fair warning, be aware that you are not getting out of it just throwing a lame bas sorting method there) with an array/list/vector of integers and the expected number `n` of smallest elements to return.\n\nAlso:\n\n* the number of elements to be returned cannot be higher than the array/list/vector length;\n* elements can be duplicated;\n* in case of duplicates, just return them according to the original order (see third example for more clarity).\n\nSame examples and more in the test cases:\n\n```python\nfirst_n_smallest([1,2,3,4,5],3) == [1,2,3]\nfirst_n_smallest([5,4,3,2,1],3) == [3,2,1]\nfirst_n_smallest([1,2,3,4,1],3) == [1,2,1]\nfirst_n_smallest([1,2,3,-4,0],3) == [1,-4,0]\nfirst_n_smallest([1,2,3,4,5],0) == []\n```\n\n[Performance version by FArekkusu](https://www.codewars.com/kata/5aeed69804a92621a7000077) also available.\ndef first_n_smallest(arr, n):\n\t\nUse Call-Based format\nANSWER:\n"}}