{"464": {"code": ["\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nInput: n = 2\nOutput: 3\n\n\u00a0\nConstraints:\n\n\u00a0\nExplanation: arr = [1, 2, 3]\n\nConstraints:\n\n\u00a0\n\n\n\n\n\n\n\n   :                \n\n\n\n\n\n\n\n\n\n\n\n\nIf the", "\nUse Call-Based format\n\n\n    minOperations(self, n: int) -> int:\n    \nUse Call-Based format\n\n\n\n\n   \n\n\nYou have an array arr of length n.\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nExplanation: arr = [3, 5]\n\n\nIf", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nConstraints:\n\n\n\n\n\n\n   \n\n\n\n\u00a0\n\n   \n        return self.minOperations(n)\n\n\n\n\n\nYou have an array arr of length n.\n\n\n\n\n\nyou have an array arr of length n.\n\n\n\nIf n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n    def maxOperations(self, n: int) -> int:\n\n\u00a0\nConstraints:\n\n\u00a0\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyou have an array arr of length", "\nUse Call-Based format\n\n\n    minOperations(self, n: int):\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\nYou have an array arr of length n.\n\n\n\n\n        return 2\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nQUESTION:\n\n", "\nUse Call-Based format\n\n\n    minOperations(self, n: int) -> int:\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n   \n        return 1\n\nYou have an array arr of length n\n\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\n\n\n\nYou have an array arr of length n where", "\nUse Call-Based format\n\n\n    minOperations(self, n: int):\n    minOperations(self, n: int)\n\n\n\n\n\n   \n\n\n\n   \n        return 1\n\n\u00a0\nExplanation: arr = [0, 1, 2]                \n\n\n\n\n\n\n\n\n\n\n\nYou have an array arr of length n", "\nUse Call-Based format\n\n\n    def minOperations(self, n: int):\n        return 1\n\n\n\n\n\n\n   \n\n\n\n\u00a0\n\n   \n        return self.minOperations(n)\n\n\n\n\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nn = 10**4\n\n", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nExplanation: arr = [1, 2, 3]\n\n\n\n\n\n\n   \n\n\n\n   \n        return self.minOperations(n)\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\nIf you have an array arr", "\nUse Call-Based format\n\n\n    minOperations(self, n: int):\n    return self.minOperations(n)\n\n\nUse Call-Based format\n\n\n   \n\n\n\n   \n\n\nYou have an array arr of length n.\n\n\n\n\n\n\n\nYou have an array arr of length n.\n\n\n\n\nYou have an array arr", "\nUse Call-Based format\n\n\n    minOperations(self, n: int):\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\nYou have an array arr of length n.\n\n\n   \n        arr: [int]\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\n\nYou have an array arr of", "\nUse Call-Based format\n\n\n    minOperations(self, n: int):\n    \n\n\n\n\n   \n\n\narr = [1, 2, 3, 4]\n\u00a0\n\n   \n        return self.minOperations(n)\n\n\n\n\n\n\n\n\n\n\nYou have an array arr of length n.\n\n\n\n\n\nIf you", "\n\nUse Call-Based format\nUse Call-Based format\nExplanation: arr = [1, 2, 3]\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n\n   \n        return self.minOperations(n)\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\nYou have an array arr of", "\n\nUse Call-Based format\n\n\n    minOperations(self, n) -> int:\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n    def minElements(self, n: int):\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n    arr = [2, 3]", "\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\n\n\n\u00a0\n\n    minOperations(self, n: int):\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\nYou have an array arr of length n\n\n\n\nYou have", "\nUse Call-Based format\n\n\n    def minOperations(self, n: int) -> int:\n\n\n\n\n\n    def maxOperations(self, n: int):\n        return 1\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nThe array arr is of", "\nUse Call-Based format\n\n\n    minOperations(self, n: int) -> int:\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n   \n        return self.minOperations()\n\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\nQUESTION", "\n\n\nUse Call-Based format\n    def minOperations(self, n: int) -> int:\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n   \n        return self.minOperations(n)\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\n\nyou have an array arr of length", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def maxOperations(self, n: int):\n        return n\n\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nYou have an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nInput: n = 2\nOutput: 3\n\n\u00a0\nConstraints:\n\n\n\n   \n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\nYou have an array arr of length n\n\n\n\nYou have an array arr"], "prompt": "\nQUESTION:\nYou have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e. 0 <= i < n).\nIn one operation, you can select two indices x\u00a0and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y]\u00a0(i.e. perform arr[x] -=1\u00a0and arr[y] += 1).\u00a0The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array. Return the minimum number of operations needed to make\u00a0all the elements of arr equal.\n\u00a0\nExample 1:\nInput: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n\nExample 2:\nInput: n = 6\nOutput: 9\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^4\nclass Solution:\n    def minOperations(self, n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}