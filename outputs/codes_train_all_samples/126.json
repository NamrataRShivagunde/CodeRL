{"126": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\nExplanation:\ns is a string\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns\n\n\n\n\n\n\n\n\n1 <= s.length <= maxLet", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n    maxFreq(self, s, maxLetters, minSize, maxSize):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, return the maximum", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nMaxFreq:\n\nmaxFreq(self, s, maxLetters, minSize, maxSize) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a string s, return the", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nOutput: 2\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a string s, return the maximum number of occurrences\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nOutput: 2\n\n\u00a0\n\n    def maxFreq(self, s) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"abc\"\n\n\u00a0\n\n\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\nOutput: 2\n\n\u00a0\n\n    maxFreq(self, s) -> int\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a string s, return the", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s, return the", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nMax\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n    maxFreq(self, s) -> int:\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ns = \"abc\"\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven a string s, return the maximum frequency of any substring in the original string\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n''''''''''\n\n\ns = \"a", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n    maxFreq(self, s, maxLetters, minSize, maxSize):\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, return the maximum", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n    maxFreq(self, s, maxLetters, minSize, maxSize):\n\n\n\n\n\n\nMax\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, return the maximum number of occurrences\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nOutput: 0\n\n\u00a0\n\n\n    maxFreq(self, s) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, return the maximum number", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 2\n\n\u00a0\n\nExplanation:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a string s, return the maximum number of o", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nMaxFreq:\n\nUse Call-Based format\n\n\n\n\n\nOutput: 1\n\n\u00a0\n\n\n    def maxFreq(self, s):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, return the maximum", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nOutput: 2\n\n\u00a0\nExplanation:\n\nUse Call-Based format\n\nConstraints:\n\n1 <= s.length <= 3\n\n\n\n\n   \n       ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s, return the", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\u00a0\nExplanation:\n\nMaxFreq:\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThe maximum number of ocurrences of any", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n    def maxFreq(self, s):\n        \n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string s, return the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nOutput: 2\n\n\u00a0\n\nConstraints:\n\n1 <= s.length <= 10^5\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Given a string s, return the", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nOutput: 0\n\n\u00a0\n\n\n    pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a string s, return the maximum", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\n\n\nOutput: 0\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nOutput: 1\n\n\u00a0\n\n\nGiven a string s,"], "prompt": "\nQUESTION:\nGiven a string s, return the maximum number of ocurrences of any substring\u00a0under the following rules:\n\nThe number of unique characters in the substring must be less than or equal to maxLetters.\nThe substring size must be between minSize and maxSize\u00a0inclusive.\n\n\u00a0\nExample 1:\nInput: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: Substring \"aab\" has 2 ocurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).\n\nExample 2:\nInput: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: Substring \"aaa\" occur 2 times in the string. It can overlap.\n\nExample 3:\nInput: s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3\nOutput: 3\n\nExample 4:\nInput: s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\n1 <= maxLetters <= 26\n1 <= minSize <= maxSize <= min(26, s.length)\ns only contains lowercase English letters.\nclass Solution:\n    def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}