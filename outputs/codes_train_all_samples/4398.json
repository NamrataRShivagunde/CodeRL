{"4398": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Only format\n\n\n0\nelevatorDistance([1,2,5]) = 2\nelevatorDistance([3,2]) = 2\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```\n\nif", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nelevatorDistance([5,2,2]) = 0\nelevatorDistance([5,2,2]) = 1\n\n\nUse Call-Based format\n\n\n\n\nUse Example:\n\n\n\n\n\n```\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Python Call-Based format\n\n\n1 + 2 + 3 = 9 floors of distance\n2 + 3 = 3 + 3 = 9 floors of distance\n\n\n\nUse Python Call-Based format\n\n\n\n\n\n\n\n\n\n```\n\n\n``", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n2 + 6 = 9 floors of distance\n\n```\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nelevatorDistance([2]) = 2\n\n\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nelevatorDistance([5,2,8]) = 1\nelevatorDistance([7,7,7]) = 3\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Tesseract format\n\n\n\n\n\n```\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Numpy format\n\n\n\n\nUse Function-Based format\n\n\nelevatorDistance(array)\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```\n\nAn example array:\n", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n2 + 6 = 9 floors of distance\n3 + 6 = 9 floors of distance\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n```\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\nUse Python-Based format\n\n\n\n\nelevatorDistance(array) = 5\n\nUse Call-Based format\n\n\nelevatorDistance([1,1,1]) = 2\n\n\n\n\n\n\n\n```\n\nif array[0", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Python-based format\n\n\nelevatorDistance(array) = 6\nelevatorDistance([1,1,1]) = 6\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n```\n\nif", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\n\n2 + 6 = 9 floors of distance\n\n```\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n\nUse Call-Based format\nelevatorDistance([5,2,2]) = 5\nelevatorDistance([5,2,3]) = 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Only format\n\n\n\n\nUse Function-Based format\n\n\n1 + 3 + 6 = 9 floors of distance\n\n```\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\nif array[", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n0\nelevatorDistance(array[0]) = 6\nelevatorDistance([0]) = 6\n\n\n\n\n\nUse Image-Based format\n\n\n\n\n\n\nelevatorDistance(array) = 4\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-For-Function format\n\n\n\n\n\nUse Call-Based format\nelevatorDistance([3,2,2]) = 6\nelevatorDistance([3,4,4]) = 6\n\n\n\n\n\n\n\n\n```\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Format:\n\nUse Call-Array format\n\n\n\nelevatorDistance(array)\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nelevatorDistance([5,2,2]) = 2\n\n\n\n\n``", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nelevatorDistance([5,2,3,8,7]) = 7\n\n\n\n\n\n\n\n\n\n```\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\nUse Function-Based format\n\n\n5 + 2 + 6 = 9 floors of distance\n8 + 3 = 3 floors of distance\n\n```\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n```\n\nif array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Function-Based format\n\n\n\n\n\nUse Call-Based format\nUse call-based format\nelevatorDistance([5,2,2]) = 9\nelevatorDistance([1,1]) = 2\n\n\n\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Only format\n\n\n\n\n\n\nUse Call-Based format\n\nelevatorDistance([5,2,2,2,3,4]) = 5\nelevatorDistance([5,2]) = 9\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Like format\n\n\n\n\nUse Python-Based format\n\n\nelevatorDistance([5,2,6]) = 0\nelevatorDistance([3,3]) = 0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n```\n\nif array["], "prompt": "\nQUESTION:\nImagine you start on the 5th floor of a building, then travel down to the 2nd floor, then back up to the 8th floor. You have travelled a total of 3 + 6 = 9 floors of distance.\n\nGiven an array representing a series of floors you must reach by elevator, return an integer representing the total distance travelled for visiting each floor in the array in order. \n\n```\n// simple examples\nelevatorDistance([5,2,8]) = 9\nelevatorDistance([1,2,3]) = 2\nelevatorDistance([7,1,7,1]) = 18\n\n// if two consecutive floors are the same,\n//distance travelled between them is 0\nelevatorDistance([3,3]) = 0\n```\n\nArray will always contain at least 2 floors. Random tests will contain 2-20 elements in array, and floor values between 0 and 30.\ndef elevator_distance(array):\n\t\nUse Call-Based format\nANSWER:\n"}}