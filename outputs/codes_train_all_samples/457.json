{"457": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n    amount = 1\n\n\n\n\n\n   \n    amount = 1\n\nUse Call-Based format\n\n -> int:\n   \n        return self.coinChange(coins, amount)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmount:\n10\n\n\n\n\n1 <= coins", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\n\n\n1 <= amount <= 100\n\n0 <= amount <= 100\n1 <= coins[i] <= 231 - 1\n\n0 <= coins[i] <= 231 - 1\n\n\n\n\n\n::                \n\n                \n\n\n\n\n\n\n\nYou are given c", "\nUse Call-Based format\n\n\n    def coinChange(self, coins: List[int], amount: int):\n        return 0\n\nUse Call-Based format\n\n\n\n\n   \n\n\n -> int:\n       :\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= amount <= 231\n\n\n\n\nInput:", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\n\n\n\n\n    def coinChange(self, coins: List[int], amount: int):\n        return amount\n\nUse Call-Based format\n\n\n\n:\n   :\n        \n\n\n        \n\n\n\n\n\n\n\nThe coins are given by two", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n    def coinChange(self, coins: List[int], amount: int):\n\n\n\n\n\n   :\n       ...\n\n\n\n\n\n\n\n\n\n\nYour coins are made up by different denominations.\n\n\n\n\nYou are given", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n    def coinChange(self, coins: List[int], amount: int):\n        return -1\n\n\n\n\n   \n        \n\n\n\n\n\nYou are given coins of different denominations and a total amount of money amount\n\n\n\n\n\n\n\nA function to make up the c", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return coinChange(self, coins, amount)\n\n\n\n\n\n   \n\n\n\n\n   :\n        \n\n\nThis is a call-based format\n\n\n\n\n\n\n1 <= amount <= 5\n\n\n\n\n\n\n\n\n\n\n\n\n        coins: List[int", "\nUse Call-Based format\n\n    def coinChange(self, coins: List[int], amount: int):\n       \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n    pass\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe function is called to calculate the coins\n\n\n\n\n\nYes, you are", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n    -> int:\n    return self.coinChange(coins, amount)\n\n\n\n\n\n\nYou are given coins of different denominations and a total amount of money amount.\n\n\n\n\n\n\n\nYou are given", "\nUse Call-Based format\nUse Call-Based format\n\n\n    return self.coinChange(coins, amount)\n\n\n\n\n\n   \n\n\n -> int:\n        \n    -> int:\n\nThis is a call-based format\n\n\n\n\n\n\n\nYou are given a coins list of numbers\n\n\n\n\n\nYou are given coins of", "\nUse Call-Based format\n\n\n    def coinChange(self, coins: List[int], amount: int):\n        return 0\n\n\n\n   \n\n\n\n   \n        return self.coinChange(coins, amount)\n\n\n\n\n\n\n\n\n\n\nYou are given coins of different denominations and a total amount of money amount\n\n\n\n", "\nUse Call-Based format\n\n    def coinChange(self, coins: List[int], amount: int):\n        return self.coinChange(coins, amount)\n\n\n\n\n\n   \n\n\n\n   :\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given coins of different denominations", "\nUse Call-Based format\n\n    def coinChange(self, coins: List[int], amount: int) -> int:\n\n\n\n\n\n   \n\nUse Python-Based format\n\n\n   :\n        \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n1 <= coins <= 3\n\n1 <=\n\n10", "\nUse Call-Based format\n\n    pass\n\n\n\n1 <= amount <= 231\n1 <= amount <= 104\n1 <= amount <= 131\n1 <= coins.length <= 231\n1 <= coins.length <= 1\n\nConstraints:\n\n\n   \n\n\n::\n        \n\n                \n\n\n\n\n\n\n\n\nYou are given coins", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n    def coinChange(self, coins: List[int], amount: int):\n\n   \n\n\n\n   :\n        pass\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\n    >>> c", "\nUse Call-Based format\nUse Call-Based format\n\n\n    self = self\n\n\n\n\n\n   \n    self = self\n\n\n\n\n -> int\n    -> int:\n        \nUse Call-Based format\n\n\n\n\n\nYou are given coins of different denominations and a total amount of money amount\n\n\n\n\n\n\n\nyou are given c", "\nUse Call-Based format\n\n\n    def coinChange(self, coins: List[int], amount: int):\n        return 0\n\n\n\n\n\n   \n\n\n\n   :\n        return 0\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nAmount:\n\n\n\n\nExample 1:\n", "\nUse Call-Based format\n\n\n    coinChange(self, coins: List[int], amount: int) -> int:\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   :\n\n\n\n\n\n\nThe coins are given by the call.\n\n\n\n\nYou are given by the call.\n\n\n\n\nyou are given c", "\nUse Call-Based format\nUse Call-Based format\n\n    coinChange(self, coins: List[int], amount: int):\n\n\n\n\n\n   \n\n\n\n    def coins(self, coins: List[int]):\n\n   \n                \n\n\n\n\n\n\n\n\n\n\n\n\n\nYou are given coins of different denom", "\nUse Call-Based format\n\n\n    def coinChange(self, coins: List[int], amount: int):\n        return amount\n\n\n\n\n   \n\n\n\n   :\n        return amount\n\n\n\n\n\n\nYou are given a list of coins and a total amount of money amount\n\n\n\n\nAmount = 5\n\nExample 1:\n\n2"], "prompt": "\nQUESTION:\nYou are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\n\u00a0\nExample 1:\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n\nExample 2:\nInput: coins = [2], amount = 3\nOutput: -1\n\nExample 3:\nInput: coins = [1], amount = 0\nOutput: 0\n\nExample 4:\nInput: coins = [1], amount = 1\nOutput: 1\n\nExample 5:\nInput: coins = [1], amount = 2\nOutput: 2\n\n\u00a0\nConstraints:\n\n1 <= coins.length <= 12\n1 <= coins[i] <= 231 - 1\n0 <= amount <= 104\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}