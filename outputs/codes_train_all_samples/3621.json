{"3621": {"code": ["\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nANSWER:\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python \n\nfor i in", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nuse Call-Based format\n\nUse Call-Based format\n\nExample:\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n#^2``", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nThis kata is not call-based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThe\n\n\n\n\n\nThe```\n\n\n\n\n\n\n\n\n\n\n\n```python \n\nfor", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nThis kata is not call-based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe` \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n# Examples:\n\n#", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\t\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n''''')\n\n\n\n# Chapter 6\n#\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUsage:\n\n\n\n\n\n\n\n\n\n\n\n \n\nThe\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n``", "\nUse Call-Based format\n\n\n\n\n\n\n\n# 1\n\n\n\n# 2\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\t```python\n\tprimeMaxlengthChain()``` \n\n``", "\n\n\nUse Call-Based format\n\nUse Call-Based format\nANSWER:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n:\n\t\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis kata is not", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nLet's call the function\n\n\n\n\n\n\n\n\t\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfor i in range(", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python \n\nprimeMaxlength", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nANSWER:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nThe prime ``` 2 + 5 + 7 + 11``` \n\n\n\n\n\n\n\n\n\n\n\n```python\n\nif ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nThis kata is a call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n\n\n\n\n\n\t\tif ``val", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nAn example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python \n\nif", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nThe function is called for testing \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\ndef\n\n\n\nThis kata", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\nThe\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n\n\n\tif \ufffd", "\n\n\nUse Call-Based format\n\nUse Call-Based format\nANSWER:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfor n in [2,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nThis kata is call-based format\n\n\n\nThe\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis kata is not call-based. This", "\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nExample:\n\n``python\n\nfor n in [1,2,3,4,5,6,5,6]\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\nfor n in", "\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # \ufffd", "\n\n\nUse Call-Based format\nANSWER:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n \n\nThe prime ``` 1```  is the prime.\n\nThe\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python"], "prompt": "\nQUESTION:\nThis kata is inspired on the problem #50 of the Project Euler. \n\nThe prime ``` 41```  is the result of the sum of many consecutive primes.\n\nIn fact, ``` 2 + 3 + 5 + 7 + 11 + 13 = 41 , (6 addens)   ``` \n\nFurthermore, the prime ``` 41```  is the prime below ``` 100 (val_max)```  that has the longest chain of consecutive prime addens.\n\nThe prime with longest chain of addens for ```val_max = 500``` is ```499``` with ```17``` addens. \n\nIn fact:\n```3+5+7+11+13+17+19+23+29+31+37+41+43+47+53+59+61= 499```\n\nFind the function ```prime_maxlength_chain()```(primeMaxlengthChain() javascript), that receives an argument ```val_max```, the upper limit, all the found primes should be less than ```val_max``` and outputs this found prime.\n\nLet's see some cases:\n```python\nprime_maxlength_chain(100) == [41]\nprime_maxlength_chain(500) == [499]\n```\nIf we have more than one prime with these features, the function should output an array with the found primes sorted.\n```python\nprime_maxlength_chain(499) == [379, 491]\n```\nRandom Tests for `val_max` (`valMax`)\n```\n100 \u2264 val_max \u2264 500.000\n```\nEnjoy it!\ndef prime_maxlength_chain(n):\n\t\nUse Call-Based format\nANSWER:\n"}}