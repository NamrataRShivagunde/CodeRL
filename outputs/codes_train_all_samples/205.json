{"205": {"code": ["\nUse Call-Based format\n\nUse Call-Based format\n\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n\n\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    To", "\nUse Call-Based format\n\n\n    findMaxForm(self, strs, m, n):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nExample 2:\n\n\nExample 3:\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    m", "\nUse Call-Based format\n\n\n    @findMaxForm(self, strs, m, n) -> int\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the computer", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    findMaxForm(self, strs, m, n):\n        return self.findMaxForm(strs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nExample 0:\n\nUse Call-Based format\n\nExample 1:\n\nOutput: 0\n\n\n\nNote:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    m =", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def findMaxForm(self, strs, m, n):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the computer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    m = 5\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def findMaxForm(self, strs, m, n):\n        \n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\nIn", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the computer world", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nExample 3:\n\nInput: Array = {\"10\", \"0001\"}\nOutput: 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\nUse Call-Based format\n\n\nExample 3:\n\nInput: Array = {\"10\"}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n    def findMaxForm(self, strs, m, n):\n        return self.findMaxForm(strs, m, n)\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n", "\nUse Call-Based format\nUse Call-Based format\n\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nExample:\n\nExample 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\n\nIn", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nExample:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    findMaxForm(self, strs, m, n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\n\nUse Call-Based format\n\n\n\n\nExample 4:\n\n\nIn", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUsage:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample 3:\n"], "prompt": "\nQUESTION:\nIn the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.\nFor now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.\n\n\nNow your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.\n\n\n\nNote:\n\nThe given numbers of 0s and 1s will both not exceed 100\nThe size of given string array won't exceed 600.\n\n\n\nExample 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\nOutput: 4\n\nExplanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are \u201c10,\u201d0001\u201d,\u201d1\u201d,\u201d0\u201d\n\n\n\nExample 2:\n\nInput: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n\nExplanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\nclass Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}