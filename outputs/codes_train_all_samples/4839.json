{"4839": {"code": ["\n\t\"\"\"\n\n\n\n\n\n\n\n-\n- raise-argument-error\n- raise-argument-error\n- raise-argument-error\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n### Tests\n\ndons = [", "\n\nUse Call-Based format\n\n\n\n\n\nnew_avg(arr, newavg)\n\n\n\n\n\n\n\n\n- return `-1` or ERROR\n\n\n- return `-1`\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n\n\n\n```\n\nif not array_equal", "\n\n\n\n\n\n\n\n\n\n\n\n```\n\nnew_avg([dons, navg])\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n- raise-argument-error\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n- The `dons` list", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n- Use Call-Based format\n\n-\n\n- return `n` donations \n\n- raise-argument-error\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif `n` is None", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n- return `-1` or `NaN` or `NaN`.\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndons = [14, 30, 5, 7, 9, 11", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n- return 149 \n\n- return 149\n\n- return 149 \n\n- raise-argument-error\n\n- raise-argument-error\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nif dons =", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n- raise-argument-error\n\n\n\n- return `-1`\n- return `-1`\n\n- raise-argument-error\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- return `149`\n- raise-argument-error\n\n\n\n\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n- return `0` or `-1` or `-1` \n\n- return `-1` or `-1` \n\n\n\ndef\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\nreturn new_avg\n\n\n\n\n\n# ---\n\n# The use", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n- return `14` or `30`\n- return `-1`\n\n-\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\ndef new_avg(arr, newavg):\n\t\n\n\n#\n# - is an association", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n- return 0 or 1\n- return 1 or 2\n- raise-argument-error or 2\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nreturn new_avg(arr, newavg)\n\n\n\n\n#\nif arr[0]", "\nUse Call-Based format\n\n\n\n\n\n\n\nnew_avg(arr, newavg)\n\nReturns:\n\nn\n\n\n\n\n\n- return `-1` or ERROR\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif `arr` is None or", "\n\n\n\n\nUse Call-Based format\n\n\n\n\nreturn 1\n\n\n\n\n\n\n\n\n\nreturn 42\n\n```\n\n- return 42\n- return 42\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\ndef new_avg(arr, newavg):\n\t\n#", "\n```\n\n\n\n\n\n\n- return 149 or 149\n- return 149 or 2\n\n```\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnew_avg = new_avg\nnew_avg = None\n\n\n\n\n\n\nif `", "\n\n\n\n\nUse Call-Based format\n\n\n\n- return `-1` or `-2` or `-3` \n\n- echo `ERROR` or `DomainError` \n\n- return `-1` or `-2` \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# TODO: check return type", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n- return `0` or `-1`\n- return `-1` or `-1`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n#\nif [14, 30, 5, 7, 9, 15] > [d", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n-\n- raise-argument-error\n- raise-argument-error\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif `arr` is empty or `n == 0`:\n\n\n\n```\n", "\n\n\n\nUse Call-Based format\n\n-\n-\n-\n\n\nnew_avg(arr, newavg)\n\n- raises an error or return `-1`\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# TESTING\n#\n\n\n\n# TESTING\n#\n# Check", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- do not use call-based format\n\n\n\n\n\n```\n\n\n\n```\n\nif `dons =", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nif new_avg(arr, newavg)!= newavg:\n\t\nReturn a new_avg\n\nReturns: \n\nnew_avg\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n# TODO: \n#\n#  ", "\n\n\n\n\n\n\n\n\n\n\n- Return an error or a list of errors\n- raise-argument-error or ValueError\n\n- raise-argument-error or ValueError\n\n- raise-argument-error or ValueError\n\n-\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn [dons[i] for i in"], "prompt": "\nQUESTION:\nThe accounts of the \"Fat to Fit Club (FFC)\" association are supervised by John as a volunteered accountant.\nThe association is funded through financial donations from generous benefactors. John has a list of\nthe first `n` donations: `[14, 30, 5, 7, 9, 11, 15]`\nHe wants to know how much the next benefactor should give to the association so that the \naverage of the first `n + 1` donations should reach an average of `30`.\nAfter doing the math he found `149`. He thinks that he made a mistake.\nCould you help him?\n\nif `dons = [14, 30, 5, 7, 9, 11, 15]` then `new_avg(dons, 30) --> 149`\n\nThe function `new_avg(arr, navg)` should return the expected donation\n(rounded up to the next integer) that will permit to reach the average `navg`. \n\nShould the last donation be a non positive number `(<= 0)` John wants us to throw (or raise) an error or\n\n- return Nothing in Haskell\n- return None in F#, Ocaml, Scala\n- return `-1` in C, Fortran,  Nim, PowerShell, Go, Prolog\n- echo `ERROR` in Shell\n- raise-argument-error in Racket\n\nso that he clearly sees that his expectations are not great enough.\n\nNotes: \n\n- all donations and `navg` are numbers (integers or floats), `arr` can be empty.\n- See examples below and \"Test Samples\" to see which return is to be done.\n\n```\nnew_avg([14, 30, 5, 7, 9, 11, 15], 92) should return 645\nnew_avg([14, 30, 5, 7, 9, 11, 15], 2) \nshould raise an error (ValueError or invalid_argument or argument-error or DomainError) \nor return `-1` or ERROR or Nothing or None depending on the language.\n```\ndef new_avg(arr, newavg):\n\t\nUse Call-Based format\nANSWER:\n"}}