{"1954": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n1 <= req_skills.length <= 16\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= req_skills.", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n1 <= req_skills.length <= 16\n1 <= people.length <= 60\n\n\n\n\n   \n    return smallestSufficientTeam(self, req_skills, people)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a project:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= req_skills.length <=\n\n\n", "\nUse Call-Based format\n\n\n\n\n\nA project has two requirements:\n\nA project has two requirements:\n\nA project has two requirements:\n\nA project has two requirements:\n\nA project has two requirements:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n0 <= req_sk", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nA project with a list of required skills\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+\n\n+\n\n+", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\nreturns:\n\n1,2\n\n\u00a0\nReturns:\n\n1\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n''')\n\n\n\n\n\n\n1 <= req_skill", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n1 <= req_skills.length <= 16\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= req_skills.length <= 16\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nThe project is a project\n\nUse Call-Based format\n\nConstraints:\n\n1 <= req_skills.length <= 16\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    req_skills: List", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return smallestSufficientTeam(self, req_skills, people)\n\n\n\n\n   \n    return [1,2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1, 2\n\n\n\n\n\n\n    req_skills =", "\n    return self.smallestSufficientTeam(req_skills, people)\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nExample 3:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n    ask a team of the smallest possible skills\n\n   \n\n\n\n\n\n   ", "\n    return [0]\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nuse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n1 <= req_skills.length <= 20\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= req_skill", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n\n    Use Call-Based format\n\n\n    Use Call-Based format\n\n    Use Call-Based format\n\n    Conversions:\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= req_skills.length <= 16\n\n\n\n\n\n1 <=", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n1 <= req_skills.length <= 16\n\n1 <= people.length <= 60\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn a project you have a list of required", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n    smallestSufficientTeam(self, req_skills, people)\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n    >>> from project import Project\n    >>>", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n\n\n   \n        return [0, 1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= req_skills.", "\n    return smallestSufficientTeam(self, req_skills, people)\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nContact:\n   \n\n\n\n   \n    return [0]\n\n\n\n\n\n\n\n\n\n\n\n\n    A project has multiple required skills.\n\n\n\n    In", "\n    return 1,2\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n    return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n1 <= req_skill", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nOutput: [0,1]\n\nConstraints:\n\n1 <= req_skills.length <= 16\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    >>> from projects import Project\n   ", "\n    return [0,1,2]\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n1 <= req_skills.length <= 16\n\n1 <= people.length <= 60\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= req_skills.length <=\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\u00a0Use Call-Based format\n\n\n\n\n   \n    smallestSufficientTeam(self, req_skills, people)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    req_skills = ["], "prompt": "\nQUESTION:\nIn a project, you have a list of required skills req_skills,\u00a0and a list of people.\u00a0 The i-th person people[i]\u00a0contains a list of skills that person has.\nConsider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill.\u00a0 We can represent these teams by the index of each person: for example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].\nReturn any\u00a0sufficient team of the smallest possible size, represented by the index of each person.\nYou may return the answer in any order.\u00a0 It is guaranteed an answer exists.\n\u00a0\nExample 1:\nInput: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\nOutput: [0,2]\nExample 2:\nInput: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\nOutput: [1,2]\n\n\u00a0\nConstraints:\n\n1 <= req_skills.length <= 16\n1 <= people.length <= 60\n1 <= people[i].length, req_skills[i].length, people[i][j].length\u00a0<= 16\nElements of req_skills and people[i] are (respectively) distinct.\nreq_skills[i][j], people[i][j][k] are\u00a0lowercase English letters.\nEvery skill in people[i]\u00a0is a skill in req_skills.\nIt is guaranteed a sufficient team exists.\nclass Solution:\n    def smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}