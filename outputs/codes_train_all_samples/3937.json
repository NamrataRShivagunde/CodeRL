{"3937": {"code": ["\n\n\nmax_sumDig(2000, 4) -----> [11, 1200, 1200]\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 4) -----> [1210, 12555]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig = max_", "```\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1, 2, 3]\n\nHappy coding!!\n\n\n\n\n\n\n\n\n\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\nmax_sumDig()\n\n\n\n> [1, 2, 3", "\n\n\n\n\nHappy coding!!\n\n\n\nmax_sumDig(2000, 6) -----> [1110, 12555]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1210, 12555]\n\n\n\n```\n\nmax", "\n\n\nmax_sumDig(2000, 4) -----> [141, 1100, 1200]\n\n\n\n\n\n\n\n\n\n\n\n\n\n      nMax = 100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [11, 1110, 12555]\n\n\n\n``", "\n\nmax_sumDig(2000, 3) -----> [20, 1, 4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      10010 + 10020 + 10020 + 1100 + 1100 + 1100 + 1100 + 2000\n\n\n\n\n\n\n\n\n\n\n\n\n\n    max_sumDig()\n    max", "\n\n\nmax_sumDig(2000, 3) -----> [19, 18, 12]\n\nmax_sumDig(2000, 4) -----> [19, 18]\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\n\n\n      [1100, 11", "\n\nmax_sumDig(2000, 6) -----> [1400, 1400, 1200]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      1.0\n\n    3.2\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\n# - The function", "\n\n\n\n\nHappy coding!!\n\n\n\n\n\nmax_sumDig(2000, maxSum) -----> [1000, 1000, 1110, 1250, 1250, 1250]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\n\n```\n\n1", "\n\n\nmax_sumDig(2000, 3) -----> [1, 2, 3]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1, 2, 3]\n\n\n\n\n\n\nmax_sumDig()\n\n\n      maxSum = maxSumDig()\n", "\n\n\nmax_sumDig()\n\nmax_sumDig()\n\n1\n\n2) - The maximum sum of all found numbers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 4) -----> [1, 2, 3]\n\n\n\n\n> [1, 2", "\n\nmax_sumDig(2000, 3) -----> [1200, 1200]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1110, 1200, 1200]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\n#!/", "\n```\n\n\nmax_sumDig(2000, 1) -----> [1, 2, 3]\n\n```\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\nmax_sumDig(1000, 3) -----> [3, 3]\n\n\n\n\n```", "```\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1110, 1120, 1250]\n\nHappy coding!!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\nmax_sumDig()\n\n\n\n> [1110,", "\n\n\nmax_sumDig(2000, 3) -----> [1110, 1210, 12555]\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1, 1110, 12555]\n\n\n\n\n\n\nmax_sumDig", "\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1, 2, 3, 4, 5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1, 2, 3]\n\nmax_sumDig() ----->\n\n\n```", "\n\n\n\nmax_sumDig(2000, 3) -----> [1200, 1200]\n\nmax_sumDig(2000, 4) -----> [1100, 1200]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig()\n\nmax_sumDig()\n> [", "\n\n\nmax_sumDig(2000, 3) -----> [1000, 1, 2, 3]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      num < maxSum\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1000, 1110]\n\n\n```", "\n\n\nmax_sumDig(2000, 3) -----> [1200, 1200]\n\n\n\n\n\n\n\n\n\n\n\n     \n\n```\n\n      10**2 * 10**2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [1000, 2000]\n\n``", "\n\n\n\n\n\n\nmax_sumDig(2000, 3) -----> [141, 1700, 1700]\n\n\n\n\n\n\n\n\n\n      [1000, 1001]\n      [1000, 1001]\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig(3000, 1) -----> [1000]\n\n\n``", "\n\n\nmax_sumDig(2000, 3) -----> [1000, 1200, 1200]\n\nmax_sumDig(2000, 3) -----> [1000, 1200]\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmax_sumDig = max_sumDig\ndef max"], "prompt": "\nQUESTION:\nWe want to find the numbers higher or equal than 1000 that the sum of every four consecutives digits cannot be higher than a certain given value.\nIf the number is ``` num = d1d2d3d4d5d6 ```, and the maximum sum of 4 contiguous digits is ```maxSum```, then:\n```python\nd1 + d2 + d3 + d4 <= maxSum\nd2 + d3 + d4 + d5 <= maxSum\nd3 + d4 + d5 + d6 <= maxSum\n```\nFor that purpose, we need to create a function, ```max_sumDig()```, that receives ```nMax```, as the max value of the interval to study (the range (1000, nMax) ), and a certain value, ```maxSum```, the maximum sum that every four consecutive digits should be less or equal to. The function should output the following list with the data detailed bellow:\n\n```[(1), (2), (3)]```\n\n(1) - the amount of numbers that satisfy the constraint presented above \n\n(2) - the closest number to the mean of the results, if there are more than one, the smallest number should be chosen.\n\n(3) - the total sum of all the found numbers\n\nLet's see a case with all the details:\n```\nmax_sumDig(2000, 3) -------> [11, 1110, 12555]\n\n(1) -There are 11 found numbers: 1000, 1001, 1002, 1010, 1011, 1020, 1100, 1101, 1110, 1200 and 2000\n\n(2) - The mean of all the found numbers is:\n      (1000 + 1001 + 1002 + 1010 + 1011 + 1020 + 1100 + 1101 + 1110 + 1200 + 2000) /11 = 1141.36363,  \n      so 1110 is the number that is closest to that mean value.\n\n(3) - 12555 is the sum of all the found numbers\n      1000 + 1001 + 1002 + 1010 + 1011 + 1020 + 1100 + 1101 + 1110 + 1200 + 2000 = 12555\n\nFinally, let's see another cases\n```\nmax_sumDig(2000, 4) -----> [21, 1120, 23665]\n\nmax_sumDig(2000, 7) -----> [85, 1200, 99986]\n\nmax_sumDig(3000, 7) -----> [141, 1600, 220756]\n```\n\nHappy coding!!\ndef max_sumDig(nMax, maxSum):\n\t\nUse Call-Based format\nANSWER:\n"}}