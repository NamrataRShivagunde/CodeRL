{"2919": {"code": ["\n Explanation\n\n\n# Broduction\n\n# Droduction\n\n# Independent\n\n- [scout]\n- [masterpiece]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n# Run\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  # The two last letters are always", "\n\n# Input / Output\n\nEncode(\"scout\",1939)\n\n# Step\n\n\n\n\n\n\n\n\n\n\n# Step\n\n# Encrypt \n\nEncode(\"scout\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Step\n\n\n\n\n\n\n# Task\n\n\n\n\n b  c", "\n\n# The algorithm\n\nEncode(\"scout\",1939)\n\n# The function\n\nEncode(\"masterpiece\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n# Example:\n\n\n\n\n\n\n-\n\n# Example:\n\n# Example:\n\n\n\n\n 2 :\n\n", "\n\n\n# Introduction\n\n# Encrypted\n\nEncode(\"scout\",1939);  ==> [ 0 1 0 1 0 1 0 0]\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n\n\n  # The first part is", "\n\n\n# Induction\n\n- [scout]\n- [masterpiece]\n- [scout]\n\n# Output\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Introduction\n\n# Input / Output\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n 4", "\n\n\n# Example\n\nEncode(\"scout\",1939)\nEncode(\"masterpiece\",1939)\n\n# Example\n\nEncode(\"scout\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# End of the task\n\n\n\n\n\n\n\n 3(a,b,c,d,", "\n\n# Introduction\n\nEncode(\"scout\",1939);\n\n# Introduction\n\nEncode(\"masterpiece\",1939);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The function\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n encode(\"scout\",", "\n\n\n# Introduction\n\nEncode(\"scout\",1939,1939,1939)\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n# Test\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n-\n\n\n# Task\n\n\n\n\n\n\n s(n,o", "\n\n\n\n\n# Generator\n\n# Function\n\n# Generator\n\n# Generator\n\nEncode(\"scout\",1939);\n\n\n\n\n\n\n\n\n# Output\n\n\n\n\n \n \n  0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# End of task\n\n\n\n-\n\n\n\n encode(str,key,", "\n\n\n\n# Generator\n\nEncode(\"scout\",1939,1939)\n\n# Generator\n\nEncode(\"masterpiece\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Test\n\n\n\n c  b  d  e", "\n\n\n# Introduction \n\nEncode(\"scout\",1939)\n\n# Input / Output\n\nEncode(\"masterpiece\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n# Task\n\n\n\n\n-\n- - - - - -\n-\n- 1 ", "\n\n# Input / Output\n\n#\n\n# Encrypt\n\nEncode(\"scout\",1939)\n# Encrypt(\"masterpiece\",1939)\n# Encrypt(\"masterpiece\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# In case of encrypted word\n\n\n  4  2", "\n\n Run\n\n# Example\n\nEncode(\"scout\",1939)\n\n# Example\n\nEncode(\"masterpiece\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Function\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\n# The task\n\n\n v  9  6  7  2 ", "\n\n Example\n\nEncode(\"scout\",1939);  ==> [ 14 18 18 27 20]\n\n\n\n\n\n\n\n# Encrypt\n\nEncode(\"scout\",1939);  ==> [ 14 18 18 18]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  enc\n\n``", "\n\n\n# Input / Output\n\n# Task\n\nEncode(\"scout\",1939);  ==> [ 20 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n i  k  j  5  9 ", "\n Example\n\n- [scout]\n- [masterpiece]\n```\n\n# Test\n\n\n\n\n\n\n\n# Example\n\n# Encrypt\n\nEncode(\"scout\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n-\n\n\n\n\n\n\n# Example:\n\n\n- [", "\n\n# Hunter\n\n\n\n\n# Salutation\n\n# Chinese\n\n# Greek\n\n# Test\n\n\n\n# Encrypt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Test\n\n-\n\n\n\n\n\n# Test\n\n\n\n  # The first example\n", "\n\n\n\n# A simple example\n\n# Demonstration\n\n# Testing\n\n# Example\n\nEncode(\"scout\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Output\n\n# Example\n\n\n  18  6 ", "\n\n\n# A simple function that can be called to encode a string to an array of integers.\n\n# Example:\n\n# Input / Output\n\nEncode(\"scout\",1939)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-\n\n\n# Function\n\n\n\n\n\n\n\n# Task\n\n\n\n", "\n\n# Sign\n\n# Pass\n\n# Output\n\n\n\n# Test\n\n- [scout]\n- [masterpiece]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n    pass\n\n#"], "prompt": "\nQUESTION:\n# Introduction \n\nDigital Cypher assigns to each letter of the alphabet unique number. For example:\n\n```\n a  b  c  d  e  f  g  h  i  j  k  l  m\n 1  2  3  4  5  6  7  8  9 10 11 12 13\n n  o  p  q  r  s  t  u  v  w  x  y  z\n14 15 16 17 18 19 20 21 22 23 24 25 26\n```\n\nInstead of letters in encrypted word we write the corresponding number, eg. The word scout:\n\n```\n s  c  o  u  t\n19  3 15 21 20\n```\nThen we add to each obtained digit consecutive digits from the key. For example. In case of key equal to `1939` :\n\n```\n   s  c  o  u  t\n  19  3 15 21 20\n + 1  9  3  9  1\n ---------------\n  20 12 18 30 21\n  \n   m  a  s  t  e  r  p  i  e  c  e\n  13  1 19 20  5 18 16  9  5  3  5\n+  1  9  3  9  1  9  3  9  1  9  3\n  --------------------------------\n  14 10 22 29  6 27 19 18  6  12 8\n```\n\n# Task\n\nWrite a function that accepts `str` string and `key` number and returns an array of integers representing encoded `str`.\n\n# Input / Output\n\nThe `str` input string consists of lowercase characters only.\nThe `key` input number is a positive integer.\n\n# Example\n\n```\nEncode(\"scout\",1939);  ==>  [ 20, 12, 18, 30, 21]\nEncode(\"masterpiece\",1939);  ==>  [ 14, 10, 22, 29, 6, 27, 19, 18, 6, 12, 8]\n```\n\n# Digital cypher series\n- [Digital cypher vol 1](https://www.codewars.com/kata/592e830e043b99888600002d)\n- [Digital cypher vol 2](https://www.codewars.com/kata/592edfda5be407b9640000b2)\n- [Digital cypher vol 3 - missing key](https://www.codewars.com/kata/5930d8a4b8c2d9e11500002a)\ndef encode(message, key):\n\t\nUse Call-Based format\nANSWER:\n"}}