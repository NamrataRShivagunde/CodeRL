{"1865": {"code": ["\n\n\n\n\n\n\n\n\nInput: grid\nOutput: 3\n\nExplanation:\n\u00a0\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\n\ufffd              [\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\n\n\n\ufffd              [\"#\",\".\",\".\",\"B\",\"", "\n\n\n\n\n\n\n\n\n\n              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 2\n\nExplanation:\n\n\n   \n\n\ufffd              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 2\n\n\n\n\n\n\n\n\n\ufffd\n\n\n\u00a0\n\ufffd\n              [\"#\",\"#\",\"#", "\n\n\n\n\n\n\n\n\nOutput: 0\n\nExplanation:\n\n\n\u00a0\n\n\n   \u00a0\n       \n\n\ufffd              [\"#\",\".\",\".\",\"B\",\"T\",\"#\"],\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nOutput: 1\n\nExplanation:\n\ufffd              [\"#\",\".\",\".\",\"B\",\"#\"],", "\u00a0\n\n\n\n\n\n\nExplanation:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 4\n\nExplanation:\n\n\n\nInput: grid = [[\"#\"]]\nOutput: 2\n\nExplanation:\n\n\n\n\n\n\n\n\ufffd\n\n\n\n\n\n\n\n\",\"\n\n\ufffd              [\"", "\n\n\n\n\n\n\n\n\n\nExplanation:\n\nInput: grid = [\n      [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]\n      Output: 3\n\n\n\n\n\n               \n\n\n\ufffd              [\"#\",\".\",\".\",.\",\"T\",\"#\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\ufffd              [\"#\",\".\",\"", "\n\n\n\n\n\n\n\n\n\n              [\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\n\nExplanation:\n\n\n              [\"#\",\"#\",\"#\",\"#\",\"#\"]\n\n\n\n\ufffd              [\"#\"]\n\n\n\n\n\n\n\n\n\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\"]]\n\n\ufffd", "\n\n\n\n\n\n\nInput: grid\nOutput: 4\n\nExplanation:\n\nExample 1:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 4\n\nExample 2:\n\nInput: grid\n\n\n\n\n\n\n\n\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ufffd              [\"#", "\n\n\n\n\n\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 2\n\nExplanation:\n\nExample 1:\n\nInput: grid = [[\"#\"]]\nOutput: 3\n\nExplanation:\n\n\n\n\n\n\n\n\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n\ufffd              [\"#\",\"", "\n\n\n\n\n\n\n\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 1\n\nExplanation:\n\u00a0\n\n\n\n\n\n\n\ufffd              [\"#\",\".\",\".\",\"B\",\"T\",\"#\"],\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\n\n\n\ufffd              [\"#\",\".\"", "\n\n\n\n\n\n\n\n\n\nExplanation:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 1\n\nExplanation:\n\n\n\n\n\n              \n\n\ufffd              [\"#\",\"#\",\"#\",\"#\",\"#\"]\n\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\n\n\ufffd              [\"", "\n\n\n\n\n\n\n\n\nExplanation:\n\nInput: grid\nOutput: 3\n\nExplanation:\n\n\u00a0\n\n\u00a0\nExplanation:\n\nExample:\n\n\n\n       \n\n\n\ufffd\n\n\n\n\n\n\n\n\n\n1:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\"]]\n\n\n\ufffd             ", "\n\n\n\n\n\n\n\n\n\n\nExample 1:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 4\n\nExample 2:\n\n\n\n\u00a0\n\n\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\"]]\n\n\ufffd             ", "\n\n\n\n\n\n\n\n\n\n              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 0\n\n\n\n\n\ufffd              [\"#\",\"#\",\"#\",\"#\",\"#\"]\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\n\n\ufffd              [\"#\",\"", "\n\n\n\n\n\n\n\n\n\n\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\n\nExplanation:\n\n\n\n   \n    0\n\n\ufffd              [\"#\",\".\",.\",\",\"]\nOutput: 4\n\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\n\n\ufffd              [\"", "\n\n\n\n\n\n\nOutput: 0\n\nExample 1:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 1\n\nExample 2:\n\nInput: grid = [[\"#\"]]\nOutput: 3\n\nExplanation:\n[\"#\"]\n[\"\"]\n\n\n\n\n\n\ufffd\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\nExplanation:\n\n\n\n              [\"#\",\".\",\".\",\"S\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\"S\",\"#\"]\nOutput: 2\n\n\n\n   \n\n\ufffd\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\nInput: grid = [\n\n\n\ufffd              [\"#\",\".\"", "\n\n\n\n\n\n\n\n\n\n\nOutput: 2\n\nExplanation:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\n\n\n\n\n\ufffd              [\"#\",\".\",\".\",\"S\",\"#\"]\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\n\n\n\n\ufffd              [\"#\",\".\"", "\n\n\n\n\n\n\n\n\n\nOutput: 0\n\nExplanation:\n\nExample:\n\nInput: grid = [\n                [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]\n                [\"#\",\"#\",\"#\",\"#\"]\n\n\n\n\n\n\n\ufffd\n\n\n\n\n\n\n\n\ufffd\n\n\n\n\n\ufffd              [\"#\",\".\",\".\"", "\n\n\n\n\n\n\n\n\n\n              [\"#\",\".\",\".\",\"S\",\"#\"]]\nOutput: 1\n\nExplanation:\n\n\n\n\n\ufffd              [\"#\",\".\",\".\",\"B\",\"#\"]]\nOutput: 2\n\n\n\n\n\n\n\n\n\n\n\nExample 4:\n\nInput: grid = [\n\n\n\ufffd              [\"#\",\"", "\n\n\n\n\n\n\nOutput: 3\n\nExplanation:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\n\nExplanation:\n\n\n\n\n\n\n\n   \n\n\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ufffd              [\"#\",\".\",\".\",\"B\",\"#\"],"], "prompt": "\nQUESTION:\nStorekeeper is a\u00a0game\u00a0in which the player pushes boxes around in a warehouse\u00a0trying to get them to target locations.\nThe game is represented by a grid of size\u00a0m x n, where each element is a wall, floor, or a box.\nYour task is move the box 'B' to the target position 'T' under the following rules:\n\nPlayer is represented by character 'S'\u00a0and\u00a0can move up, down, left, right in the grid if it is a floor (empy cell).\nFloor is represented by character '.' that means free cell to walk.\nWall is represented by character '#' that means obstacle\u00a0\u00a0(impossible to walk there).\u00a0\nThere is only one box 'B' and one\u00a0target cell 'T' in the grid.\nThe box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.\nThe player cannot walk through the box.\n\nReturn the minimum number of pushes to move the box to the target. If there is no way to reach the target, return\u00a0-1.\n\u00a0\nExample 1:\n\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\nExplanation: We return only the number of times the box is pushed.\nExample 2:\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: -1\n\nExample 3:\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n\u00a0              [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\".\",\"#\"],\n\u00a0              [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 5\nExplanation:  push the box down, left, left, up and up.\n\nExample 4:\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n\u00a0              [\"#\",\"S\",\"#\",\".\",\"B\",\"T\",\"#\"],\n\u00a0              [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: -1\n\n\u00a0\nConstraints:\n\nm ==\u00a0grid.length\nn ==\u00a0grid[i].length\n1 <= m <= 20\n1 <= n <= 20\ngrid contains only characters\u00a0'.', '#',\u00a0 'S' , 'T',\u00a0or 'B'.\nThere is only one character\u00a0'S', 'B'\u00a0and\u00a0'T'\u00a0in the grid.\nclass Solution:\n    def minPushBox(self, grid: List[List[str]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}