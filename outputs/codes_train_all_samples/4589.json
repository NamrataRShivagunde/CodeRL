{"4589": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\nComplete the solution. It should return the value of the array at the index provided\n:\n\n\n\n\n\n\n\n\n\t\nUse Python format\n\nComplete the solution. \n\n\n\n\n\n\n\n\n\n\n\nComplete the solution.\n\nExample:\n\n\n\n\n\nComplete the solution\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nComplete the solution\n\n\n\n\n\nComplete the solution\n\nComplete the solution\n\n\n\n\t\nUse Call-Based format\n\nComplete the solution\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete the solution.\n\nExample:\n```python\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nComplete the solution\n\n\nUse Call-Based format\n\nExample:\n\ndef solution(items, index, default_value):\n\t\nUse Call-Based format\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete the solution.\n\nExample:\n\n\n\n\n\nComplete the solution. It", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nComplete the solution\n:\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nComplete the solution\n\n\n\n\t\nComplete the solution\n\n\n\n\n\n\n\nExample:\n```python\n\n\n\nComplete the solution\n\n\n\n\nComplete the solution\n\nExample", "\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\nComplete the solution. It should return the value of the array at the index provided. \n:\n\n\n\n\n\n\n\n\n\n\n# positive values work as long as they are not out of the length bounds\n\n\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nComplete the solution. It should return the default value.\n:\n\n\n\n\n\nComplete the solution. It should return the default value\n\n\n\n\nComplete the solution\n\n\n\n\n\n\n\n\n\n\n\nUse Python format\n\nComplete the solution\n\n\n\n\n\n    >>> from haskell", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n# negative values will always be negative\n\n\n\n\n\n\n\nUse Call-Based format\nComplete the solution.\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\n\n# negative values should be negative\n\n\n\nComplete the solution\n\n\n\n\n\n```python\nitems", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n# negative values should be a number or a random number.\nsolution(items, index, default_value)\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\nComplete the solution.\n\nExample:\n```python\n\n\n\n\n\n```python\n", "\t\nUse Call-Based format\n\n\n\nUse Call-Based format\nComplete the solution\n:\nComplete the solution\n\n\n\n\n\nComplete the solution\n\n\n\n\n\nComplete the solution\n\n\n\n\n\n\n# negative values work as long as they are not out of the length bounds\n\n\n\nComplete the solution\n\n\n\n\nComplete the solution\n\nExample:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nDo not use the Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\nBe\n2\n\n\n\n\nExample:\n\n\t# call-based format\n\n\n\n\n\nif index is out of", ":\nUse Call-Based format\n\n\n\nUse Call-Based format\nComplete the solution. Use Call-Based format\n:\n\n\n\n\n\nComplete the solution\n\nComplete the solution\n\n\n\n\n\nComplete the solution\n\n\n\n\n\n\n# negative values work as long as they are not out of the length bounds \n\n\n\n\n\n\n\n\n\tReturns:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nComplete the solution\n\n\n\n\nUse Call-Based format\nINPUT:\n\t\nUse Call-Based format\nINPUT:\n\n\n\nComplete the solution\nINPUT:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete the solution\n\n\n\n\n\n\n```python\nitems =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\n\n\n\n\n\n\nCall-Based format\n\n\n\n\n\t\nUse Python format\n\n\nCall-Based format\n\nExample:\n# Use Python format\n\n\n\n\n\n\n\n\n\nComplete the solution.\n\nExample:\n\n\n\n\n\n\n```python\n", "\n\n\n# negative values work as long as they aren't out of the length bounds\n\n\nUse Call-Based format\n:\n\n\n\n\n\nComplete the solution\n\n\n\n\t\nUse Python format\n\nComplete the solution\n\n\n\n\n\n\n\n\n\n\nComplete the solution\ndefault_value:\n\n\"\"\"\n\n\n\n\nComplete the solution\n\n```", "\t\n\n\n\nUse Call-Based format\n\nComplete the solution. It should return the value of the items at the index provided.\n:\n\n\n\n\nComplete the solution.\n\n\n\n\n\nComplete the solution. It should return the default value. \n\n\n\n\n\n\n\n\n\nComplete the solution\n\n\n\n\nComplete the solution\n\nExample:\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nComplete the solution\n\n\n\n\n\nUse Call-Based format\nExample:\n\ndef solution(items, index, default_value):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete the solution\n\nExample:\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nDo you want to use call-based format?\n\nExample:\n```python\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\nExample:\n```python\n\n\n\n\n\n\n\n\n# negative values work as long as they are not", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nComplete the solution. It should return the value of the items in the default_value argument.\n:\n\n\ndef\n\n\n\n\n\n\n\nComplete the solution. It should return the default value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nitems = [1..3", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nDo you want to use call-based format\n\n\n\n\nDo you want to use call-based format\nDo you want to use call-based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComplete the solution.\n\nExample:\n\n\n\n\n\n\n```python\nitems", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nDo you want to use the call-based format?\n:\n\n\n\n\n\n\nUse Call-Based format\n\nBe\n\n\n\nBe 2\n\n\n\n\n\n\n\n```python\n\n\n\n\nComplete the solution\n\n\n\n\n\n```python\nitems = [1..3"], "prompt": "\nQUESTION:\nComplete the solution. It should try to retrieve the value of the array at the index provided. If the index is out of the array's max bounds then it should return the default value instead. \n\nExample:\n```Haskell\nsolution [1..3] 1 1000 `shouldBe` 2\nsolution [1..5] (10) 1000 `shouldBe` 1000\n-- negative values work as long as they are not out of the length bounds\nsolution [1..3] (-1) 1000 `shouldBe` 3\nsolution [1..3] (-5) 1000 `shouldBe` 1000\nsolution [1..3] (-3) 1000 `shouldBe` 1\nsolution [1..5] (-3) 1000 `shouldBe` 3\n-- for Haskell default value will always be a (random) number, not a character.\n```\n\n```python\ndata = ['a', 'b', 'c']\nsolution(data, 1, 'd') # should == 'b'\nsolution(data, 5, 'd') # should == 'd'\n\n# negative values work as long as they aren't out of the length bounds\nsolution(data, -1, 'd') # should == 'c'\nsolution(data, -5, 'd') # should == 'd'\n```\ndef solution(items, index, default_value):\n\t\nUse Call-Based format\nANSWER:\n"}}