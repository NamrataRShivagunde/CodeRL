{"2934": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\ndef\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a lowercase string that has alphabetic characters", "\nUse Call-Based format\n\n\ndef solve(s):\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\ndef normalize(s):\n\t\nUse Call-Based format\n\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n[Word values](https://en", "\nUse Call-Based format\nUse Call-Based format\n\ndef normalize(s):\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\t\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a lowercase string that has al", "\n\nUse Call-Based format\n\ndef _solve(s):\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n \n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ns = s.lower()\n\nif not s: return 0", "\nUse Call-Based format\n\n\ndef solve(s):\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\nUse Python-Based format\n\n\n\n\n\t\n:\n\n\nUse Set-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a lowercase string that has alphabetic characters only", "\nUse Call-Based format\nUse Call-Based format\n\ndef\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef _(s):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n", "\nUse Call-Based format\nUse Call-Based format\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a lowercase string that has alphabetic characters only", "\nUse Call-Based format\nUse Call-Based format\n\ndef solve(s):\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\nlambda(s):\n\t\nUse Call-Based format\n\n\t\n:\n\n\n\n\n\n\n\n\n\n[Word values](https://en.wik", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nIf you are using Kata, please try:\n\ndef solve(s):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven a lowercase string that has al", "\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\ndef\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n:\n\nIf you are using Kata,\n\n\n\n\n\n\n\n\n\"\n    1) b\n   ", "\nUse Call-Based format\nUse Call-Based format\n\ndef solve(s):\n\t\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n    s = 'aeiou'\n    v = 'b", "\nUse Call-Based format\n\n\ndef solve(s):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a lowercase string that has al", "\nUse Call-Based format\nUse Call-Based format\n\ndef\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\ndef __init__(self, s):\n\t\nUse Call-Based format\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\ns = \"s\"\n\n    #", "\nUse Call-Based format\n\n\ndef solve(s):\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\ndef get(s):\n\t\nUse Call-Based format\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n   :param s:\n   :return", "\nUse Call-Based format\n\ndef normalize(s):\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\ndef\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n    \"\"\"\n    s = s.lower()\n", "\nUse Call-Based format\nUse Call-Based format\n\ndef\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n**\n\n\n\t\nUse Call-Based format\n\ndef tokenize(s):\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\ns = \"abcd\"", "\nUse Call-Based format\nUse Call-Based format\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n[Word values", "\nUse Call-Based format\n\n\ndef find(s):\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\ndef\t\n\n\n\n\n\ndef\n\t\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # Example", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\nfunction solve(s)\n\n\n\n\n\t\t\n\nUse Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a lowercase string that has alphabetic characters", "\nUse Call-Based format\nUse Call-Based format\n\ndef\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\ndef\n\t\nUse Call-Based format\n\n\n\n\n\t\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples:\n\n#  K"], "prompt": "\nQUESTION:\nGiven a lowercase string that has alphabetic characters only and no spaces, return the highest value of consonant substrings. Consonants are any letters of the alphabet except `\"aeiou\"`. \n\nWe shall assign the following values: `a = 1, b = 2, c = 3, .... z = 26`.\n\nFor example, for the word \"zodiacs\", let's cross out the vowels. We get: \"z **~~o~~** d **~~ia~~** cs\"\n\nFor C: do not mutate input.\n\nMore examples in test cases. Good luck!\n\nIf you like this Kata, please try:\n\n[Word values](https://www.codewars.com/kata/598d91785d4ce3ec4f000018)\n\n[Vowel-consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\ndef solve(s):\n\t\nUse Call-Based format\nANSWER:\n"}}