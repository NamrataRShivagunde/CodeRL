{"1791": {"code": ["\n\n\n\n\n**Syntax**\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`maze->grid[0][0]``\n```if:c\na `char[][]````\n```if:java\n```\n\n\n\n\n\n\n\n\n\n\n - `'C'` turn back  \n", "\n\n**Syntax**\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`char[][]`\n```if:c\na `char[][][]`\n```if:java\na `char[][][]`\n```\n\n\n\n\n\n\n\n\n - `'S'` turn", "\n\n\n\n\n\n\n\n\n\n---\n\nEscape the function `escape` as a function:\n\n_The end of the code:\n\n_The end of the code:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Error**\n---\n\n\n\n - `'S'` turn top  \n -", "\n\n**Important**\n---\n\nImportant**\n---\n\nImportant **\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n```if:c`\na `char[][]`\n```\n`\n\n\n\n\n\n - `'H'` move one step backwards  \n -", "\n\n**Functions**\n---\n\nWrite the function `escape`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_The sounds can't be facing, but you're not in the code. \n```\n\n\n---\n\n\n\n\n\n\n - `'W'` turn top  \n - `'", "\n\n\n\n\n\n\n\n\n**Syntax**\n---\n\nEscape the function `escape`\n---\n\nEscape the function `escape`\n---\n\nchar **grid`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n```\n\n\n\n\n\n**Exception**\n---\n\n\n**Error**\n\n - `'S'`", "\n\n\n\n\n**Parameters**\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchar[][]`\n```if:c\na `char *`\n```if:c\na `char **`\n```if:c\n```\n\n\n\n\n\n\n\n\n\n**Keyboard**\n\n\n``", "\n\n**Help**\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse the function `escape` to escape the maze `maze`\n```\na `char`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Notes**\n---\n\n\n**Improved**\n---\n\n`", "\n\n**Syntax**\n---\n\n\nEscape the function `escape`\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_A maze is too big!  \n```\n```\n```\n\n\n**Input**\n---\n\n\n\n\n - `'A'` turn top", "\n\n**Help**\n---\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n_That's terrible!\n_That's terrible!  \n_That's terrible!  \n\n\n\n\n\n\n\n\n - `'R'` turn up  \n - `'L'`", "\n\n**Help**\n---\n\n\n\n\n\n\n\n\n\n\n\nescape\n---\n\n\n\n\n\n\n\n\n\n\n`maze[0][0]`\n```if:c`\na `char **grid`\n```if:java\n`\n\n\n\n\n\n\n\n\n\n - `'B'` turn back  \n - `'", "\n\n**Syntax**\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`maze->escape`\n```if:c`\na `char[][]`\n```if:java\n`if:java\n```\n\n\n\n\n\n\n\n\n - `'A'` turn back  \n - `'k'", "\n\n**Keyboard**\n---\n\nWrite the function `escape`\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n---\n\n\n---\n\n_That's terrible!\n_That's terrible!  \n_That's terrible!\n\n\n\n\n\n - `'S", "\n\n**Escape**---\n\nEscape the function `escape`\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if:c`\na `char **grid`\n```\n```\n\n\n\n\n\n```if:c`\na `char **grid`\n\n```", "\n\n**Escape**---\n\nEscape the function `escape`:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nchar[][]`\n```if:c\na `char[][]`\n```if:java\n`\n\n\n\n\n\n\n\n**Note**\n\n\n\n\n\n** - `'S'` turn", "\n\n\n\n\n\n**Input**---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`maze`\n```if:c\na `char[][]`  \n - `':'` turn forward  \n - `'-` turn right  \n\n\n\n\n\n\n\n\n\n\n\n\n - `'B'` turn back  \n -", "\n\n\n\n\n**Error**\n---\n\nError message:\n_That's terrible!\n_That's terrible!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n```\n\n\n\n\n\n\n\n**Debug**\n---\n\n`maze->width`\n`maze->height`", "\n\n**Functions**\n---\n\nEscape the function `escape`\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n**Tags**\n---\n\n\n\n\n\n\n\n\n**Notes**\n---\n\n\n**Notes**\n\n**\n - `'T'` turn back  \n -", "\n\n**Syntax**\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`escape`\n`maze`\n```if:c`\na `char **grid`  \n`\n\n\n```\n```\n\n---\n\n\n\n\n**Examples**\n---\n\n\n\n - `'V'` turn up  \n - `'", "\n\n**Keyword**\n---\n\nWrite the function `escape`\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Signal**\n---\n\n\n*\n\n**Keyboard**\n\n```if:c`\na `char *`  \n - `'z"], "prompt": "\nQUESTION:\n_That's terrible! Some evil korrigans have abducted you during your sleep and threw you into a maze of thorns in the scrubland D:  \nBut have no worry, as long as you're asleep your mind is floating freely in the sky above your body._\n> **Seeing the whole maze from above in your sleep, can you remember the list of movements you'll have to do to get out when you awake?**\n\n---\n\n\n**Input**\n---\n---\n\nYou are given the whole maze `maze` as a 2D grid, more specifically in your language:\n```if:ruby,javascript,python\nan array of strings\n```\n```if:java\na `char[][]`\n```\n```if:ruby,javascript,python,java\n`maze[0][0]` is the top left-hand corner\n```\n```if:c\na `Maze*` (a struct with three fields: `unsigned height`, `unsigned width`, `char **grid`)\nEach line is '\\0' terminated, but the array of lines is not.  \n`maze->grid[0][0]` is the top left-hand corner.\n```\n```if:java,javascript,ruby\n`maze[maze.length - 1][maze[0].length - 1]` is the bottom right-hand corner\n```\n```if:python\n`maze[len(maze) - 1][len(maze[0]) - 1]` is the bottom right-hand corner\n```\n```if:c\n`maze->grid[maze->height - 1][maze->width - 1]` is the bottom right-hand corner.\n```\nInside this 2D grid:\n - `' '` is some walkable space  \n - `'#'` is a thorn bush (you can't pass through)  \n - `'^'`, `'<'`, `'v'` or `'>'` is your sleeping body facing respectively the top, left, bottom or right side of the map.\n \n---\n\n\n**Output**\n---\n---\nWrite the function `escape` that returns the list/array of moves you need to do relatively to the direction you're facing in order to escape the maze (you won't be able to see the map when you wake up). as an array of the following instructions:  \n - `'F'` move one step forward  \n - `'L'` turn left  \n - `'R'` turn right  \n - `'B'` turn back   \n > Note: `'L'`,`'R'`, and `'B'` **ONLY** perform a rotation and will not move your body\n \n```if:javascript,ruby,python,java\nIf the maze has no exit, return an empty array.\n```\n```if:c\nIf the maze has no exit, return `NULL`.\n```\n* This is a real maze, there is no \"escape\" point. Just reach the edge of the map and you're free!\n* You don't explicitely HAVE to find the shortest possible route, but you're quite likely to timeout if you don't **;P**\n* Aside from having no escape route the mazes will all be valid (they all contain one and only one \"body\" character and no other characters than the body, `\"#\"` and `\" \"`. Besides, the map will always be rectangular, you don't have to check that either)\ndef escape(maze):\n\t\nUse Call-Based format\nANSWER:\n"}}