{"3405": {"code": ["\n\n\n\n\n\n\npython\npow_root_pandigit(388, 3, 4)\n\n```python\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\npython\npow_root_pandigit()\n\npython\npython\n\n\npandigit(388, 2,", "```\n\n\n\n\n\npython\npow_root_pandigit(388, 2, 3)\n\n```\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit(1750, 3, 4)\n\"\"\"\n\n\n\n\npandigit(288", "\npython\npow_root_pandigit(val, n, k)\n\n\n\n\n\n\n\npython\npow_root_pandigit()\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit()\n\"\"\"\n\n\n\n\npandigit(388", "```\npython\npow_root_pandigit()\n\"\"\"\n\n\n\n\n\n\n\npython\npow_root_pandigit(2, 3, 4)\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit()\n\n\npandigit(", "\n\n\n\n\npython\n\npandigitals\n\n```\n\n\n\n\n\npython\npow_root_pandigit(1750, 3, 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\npython\n\n\npython\nval > 1\n```\n\n\npandigit(2", "```\n\n\n\n\n\n\n\n```python\npow_root_pandigit()```\n\nThe function should be able to be used in a complex way:\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npython\n\n# \u221b1750 = 9\n#\n\npandig", "```\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit(val, n, k)\n\npandigitals\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nTHIS IS NOT an ideal case:\n\nn = 1\n```\n\n\n\n\npython\n\npandigit(2,", "```\n\n\n\n\n\npython\npow_root_pandigit(1, 1, 1)\n\n```\n\n\n\n\n\n\n\n\n\npython\n# \u221b1750 = 5\n```\n\n\n\n\n\n\n\n\n\n\n\n\npython\npython\n\n\n```\n\npandigit(388, 2", "\n\n\n\n\n\n\n\npython\npow_root_pandigit(388, 3, 3) # 1\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npandigitals\n\"\"\"\n\npython\n\npython\n\npandigitals\n\n\n\npandigit", "\n```python\n\n\n\n\n\n\n\n\n\n\n\n# \u221b1750 = 12\n\n# \u221b1750 = 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit(388, 3)\n\n```\n\n\n\n\n\npandigit", "```\n\npython\n```\n\n```\n\n\npython\nroot_pandigit(388, 2, 3)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n# \u221b1750 = 2\n# \u221b1750 = 4\n\n\n\npandigit", "```\n\n\n\n\n\npython\npow_root_pandigit(388, 2, 5)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit(1750, 3, 4)\n\n```\n\n\n\npandigit(2, 3", "\n```\n\n\n\n\n\n\npython\npow_root_pandigit(388, 3, 3)\n\"\"\"\n\n\n\npython\n\n\n\n\n\npython\npow_root_pandigit(388, 3, 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npandigit(388, 2", "\n\n\n\n\n\npython\npow_root_pandigit()\n\"\"\"\n\n\npython\npow_root_pandigit()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit(388, 2, 3)\n\n```\n\n\n\n\npandigit(3", "\npython\npow_root_pandigit()\n\"\"\"\n\n\n\n\n\n\n\npython\n\n\npython\nroot_pandigit(388, 3, 4) == [[1, 2, 3]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit()\n\n\n\np", "\n\n\n\n\n\npython\npow_root_pandigit(388, 3, 2)\n# \u221b388 = 3\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\npython\n\npython\n\npandigitals\n\n\npandigit(", "```\n\npython\n```\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandigit(1750, 3, 4)\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\npandigit(388, 2, 3)\n\n\n\n\n\npandigit(3", "\n\n\n\n\n\npython\npow_root_pandigit(1, 1) == 1\n\"\"\"\n\n\n\npython\npow_root_pandigit(1, 2, 2) == 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\npow_root_pandit\n\n\npand", "\n\"\"\"\n\n\n\n\npython\npow_root_pandigit(388, 3, 3)\n\n```\n\n\n\n\n\n\n\n\npandigit(1728, 3, 4)\n\n```\n\n\n\n\n\n\n\n\n\npython\n\npython\n\n```python\n\n\npandigit(388, 2", "\npython\npow_root_pandigit()\n\"\"\"\n\n\n\n\n\npython\npow_root_pandigit()\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n```python\npow_root_pandigit()```\n\npython\n\npython\n\n\npandigit(17"], "prompt": "\nQUESTION:\nA **pandigital number** is one that has its digits from ```1``` to ```9``` occuring only once (they do not have the digit 0).\n\nThe number ```169```, is the first pandigital square, higher than ```100```, having its square root, ```13```, pandigital too.\n\nThe number ```1728``` is the first pandigital cubic, higher than ```1000```, having its cubic root, ```12```, pandigital too.\n\nMake the function ```pow_root_pandigit()```, that receives three arguments:\n\n- a minimum number, ```val```\n\n- the exponent of the n-perfect powers to search, ```n```\n\n- ```k```, maximum amount of terms that we want in the output\n\nThe function should output a 2D-array with an amount of k pairs of numbers(or an array of an only pair if we have this case). Each pair has a nth-perfect power pandigital higher than val with its respective nth-root that is pandigital, too.\n\nThe function should work in this way:\n```python\npow_root_pandigit(val, n, k) = [[root1, pow1], [root2, pow2], ...., [rootk, powk]]\n\"\"\"\nroot1 < root2 <.....< rootk\nval < pow1 < pow2 < ....< powk\nroot1 ^ n = pow1 // root2 ^ n = pow2 //........// rootk ^ n = powk\nall pairs rooti, powi are pandigitals\n\"\"\"\n```\nLet's see some examples:\n```python\npow_root_pandigit(388, 2, 3)== [[23, 529], [24, 576], [25, 625]] # 3 pairs (k = 3)\n```\nFor a different power:\n```python\npow_root_pandigit(1750, 3, 5) == [[13, 2197], [17, 4913], [18, 5832], [19, 6859], [21, 9261]] # 5 pairs (k = 5)\n```\n\nThe output in not inclusive for val.\n```python\npow_root_pandigit(1728, 3, 4) == [[13, 2197], [17, 4913], [18, 5832], [19, 6859]]\n# \u221b1728 = 12\n```\n\nThe result may have less terms than the required:\n```python\npow_root_pandigit(600000000, 2, 5) == [25941, 672935481] # If the result has an only one pair, the output is an array\n```\nFurthermore, if the minimum value, ```val``` is high enough, the result may be an empty list:\n```python\npow_root_pandigit(900000000, 2, 5) == []\n```\n\nYou may suposse that the input ```val```, ```n``` will be always:  ```val > 10``` and ```n > 2```.\n\nEnjoy it!!\ndef pow_root_pandigit(val, n, k):\n\t\nUse Call-Based format\nANSWER:\n"}}