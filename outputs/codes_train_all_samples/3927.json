{"3927": {"code": ["\n\n\n\n\n\n\n- n and p are both positive integers\n- k are the power of n and p.\n\n```python\n\n> n = n * p\n\n```python\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n```python\n\n# Example 2", "\n\n\n\n\n\n\n\n\n\ndig_pow(n, p)\n\n\n```python\n\nn = 2\np = 2\n\n```python\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n> n ~= p\n\n\n\n```python\nn = 2\np = 3", "\n\n\n\n\n\n\n\n> n and p are both positive integers\n> n and p are not both positive integers\n> k is the number of powers of n and p\n\n> k is the number of powers of p\n\n>\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> n = 2^2 +", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n```python\n\nUse Call-Based format\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> n = n * p\n\n> k = k * n\n\n> =\n\n\n\n\n\n\n```", "\n\n\n\n\nUse Call-Based format\n\n\n\n> n^p = n^p\n\n> p^n = p^n\n\n**NOTE**:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n# python\n\nn^p = n * p\n\n>>>\n\n>>>\n\n``", "\nUse Call-Based format\n\n\n\n\n\n\nn = n * p\n\np = p * n\n\n\n**NOTE**:\nn should be a positive integer\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> should return 1 or -1\n\n\n```python\n\n>\n\n\n\n\n```", "\n\n\nn = n * p\n\np = p * n\n\n\n\n\n:\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\ndig_pow(n, p)\n\n```python\n\n\n\n\n\n\n\n\n  n = n ^ n\n ", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n> n < p < k = k * n\n\n> n > p\n\n> k < n\n\n> k * p\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**NOTE**:\n- n and p", "\n\n\n\n\n\n \n\n\np = n\nn = 1\nk = 3\n\n```python\n# Chapter 7\n\n\n\n```python\n\n# Use Python-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n* This function is used to find the number of a particular", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nn^p = n^p\n\n```python\n\nif n is not an integer\ndig_pow(n, p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\nN = 2  # a =", "\nUse Call-Based format\n\n\n> n = n * p\n\n>>> dig_pow(n, p)\n\n>>> dig_pow(n, k)\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n>\n\n>\n\nn = n * 1\np =", "\n\n\n\n> dig_pow(n, p)\n\n\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n\n> n and p are in Call-Based format\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n> + 2\u2074 = 2 * 2\n\n\n\n\n\n\n\n\n> n = 3\n\n", "\n\n\n\n\n\n\n\n\n```python\n\n# Example\n# dig_pow(n, p)\n\nThe following is a Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n> n = n * p\n```\n\n\n\n\n\n\n\n\n```python\n\n\n> n = 3 -", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n> n == 2\ndig_pow(n, 3) == 2\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> n, p should be positive integers\n\n\n\n\n\n```python\n\n>\n\n\n```python\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n> n is a positive integer and p is a positive integer\n> k is a positive integer\n```\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> n and p should be integers\n> n and p should be positive integers\n\n> =\n\n```python", "\n\n\n> dig_pow(n, p)\n\nUse Call-Based format\n\n```python\n\nif n is not a positive integer:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> n = 0 \np = 0 \n\n> k = 0\n\n> +\n```\n\n\n``", "\n\n\n\n1\u00b9\u00b9\u00b9\u00b9\u00b9\u00bb\u00b9\u00bb\u00bb\u00ba\n\n:\n\n```\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\u00b9\u00b9\n\n1\u00b9\u00bb\n\n\n```python\n\n\n\n```\n\n", "\n\n\n# Examples:\n\n> dig_pow(n, p)\n\n# Example\n\n\n\n\n:\n\n\n# Example\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n> n = 1\np = 3\n\n>>> dig_pow(1, 2)\n", "\n\n\ndig_pow(n, p)\n\nUse Call-Based format\n\n\n\n\n\n```python\n\n# See also\n#\n\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n> n = 2^n + 3^p = 2^p\n\n> =\n\n\n\n\n\n\nn = 2^n +", "\n\n\n\n\n\nUse Call-Based format\n\n```python\n\n# Doctest:\n\n# [#] dig_pow(n, p)\n\n\n\n\n\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n\n#\n\n# [#]\n\n# n:\n# n ="], "prompt": "\nQUESTION:\nSome numbers have funny properties. For example:\n\n> 89 --> 8\u00b9 + 9\u00b2 = 89 * 1\n\n> 695 --> 6\u00b2 + 9\u00b3 + 5\u2074= 1390 = 695 * 2\n\n> 46288 --> 4\u00b3 + 6\u2074+ 2\u2075 + 8\u2076 + 8\u2077 = 2360688 = 46288 * 51\n\nGiven a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p \n- we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n. \n\nIn other words:\n\n> Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k\n\nIf it is the case we will return k, if not return -1.\n\n**Note**: n and p will always be given as strictly positive integers.\n\n```python\ndig_pow(89, 1) should return 1 since 8\u00b9 + 9\u00b2 = 89 = 89 * 1\ndig_pow(92, 1) should return -1 since there is no k such as 9\u00b9 + 2\u00b2 equals 92 * k\ndig_pow(695, 2) should return 2 since 6\u00b2 + 9\u00b3 + 5\u2074= 1390 = 695 * 2\ndig_pow(46288, 3) should return 51 since 4\u00b3 + 6\u2074+ 2\u2075 + 8\u2076 + 8\u2077 = 2360688 = 46288 * 51\n```\ndef dig_pow(n, p):\n\t\nUse Call-Based format\nANSWER:\n"}}