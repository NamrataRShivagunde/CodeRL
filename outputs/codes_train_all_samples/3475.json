{"3475": {"code": ["\n:\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\t\n\n\n\n\nUse Call-Based format\n\n* Digits depending on base\n* Extra character depending on extra character\n\n\n\n\n\n\n\n\n\n\n\n\nThe function/class/class, which should", "\n:\n\nUse Call-Based format\n\t\n\n\n\nUse Call-Based format\n\n\n\t\n\n\n\nTo_integer:\n\nTo an integer\n\n\n\n\t\n\n\nTo an integer\n\n\n\n\n\n\n\nnull\nnull\n\n\n\n\n\n\n\n\nnull\nnull\nnull\nnull\nnull\nnull\n\n\n\n\n   ", "\n:\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\t\n:\n\n\n\n\n\n\n\nReturn an integer\n\n\n\n* Digits depending on base\n* Digits depending on extra character\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse function/class, which should be a", "\n:\n\nUse Call-Based format\n\t\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n* Digits depending on base\n* Digits depending on extra character\n\n\n\n\n\n\n\nto_integer(string)\n\n\n\n\n\n\n\n\n\n\n\n    `to_integer", "\n:\n\n\n\n\n\n\n\n\t\n\n\n\n\nConvert a string to an integer\n\n\n\n\t\n\n\n    >>> to_integer(string)\n\t\n\nConvert a string to an integer\n* Digits depending on base\n\n\n\n\n\n\n\n\nUse function/class\n\n\n\n\n\n\n\nTo integer\n\nQUESTION:\n\n", "\n\nUse Call-Based format:\n\nUse Call-Based format\n\n\n:\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\nreturn to_integer(string)\n\n\n* Digits depending on base\n* Digits depending on extra character\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\b\n#", "\n:\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nTo_integer:\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\t\n\n\nTo_integer:\n\n\n* Digits depending on base\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Use a function/class, which should be", "\n:\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\t\nUse Call-Based format\n\nCall-Based format\n\n\n\n\n\t\n\n\nto_integer(string)\n\n\n*\n\n\n\n\n\n\n\nTo an integer:\n\n\n\n\n\n\nThis function is designed to be used in", "\n:\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n:\n\n\n\nUse Call-Based format\n\n\n\t\n\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n* Digits depending on base\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n - `-`\n* `0b", "\nUse Call-Based format:\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nto_integer(string)\n\n\nTo an integer\n* Digits depending on base\n* Digits depending on extra character\n\n\n\n\n\n\n\n\n\n\n\n\nfunction:\n\t# -", "\nUse Call-Based format:\nUse Call-Based format\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n:\n\n\n\t\n\n\t\nUse Call-Based format:\n\n\n\n\n\n\n\n* Digits depending on base\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    This function/class", ":\nUse Call-Based format:\n\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\t\n\n\nUse Call-Based format:\n\n\n\n\n\t\n\n\nReturn an integer\n\n\n* Digits depending on base\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck if the input string is an integer:", "\n:\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n:\n\n\n\t\n\n:\n\n\nTo an integer\n\n\n\t\n\n\n\n\n\n\n\n\n\nto_integer(string)\n\nUse Function-Based format\n\n\n\n\n\n\n\ndef to_integer(string):\n", "\n\nUse Call-Based format:\n\n\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\t\n\n\nto_integer(string):\n\t\nReturn an integer\n\n*\n* Digits depending on base\n\n\n\n\n\n\n\n\n\n\n\n\nCheck input string is an integer", "\nUse Call-Based format:\n\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n\n\n\n\t\n\n\n\nUse Call-Based format\n\n\n\t\n\n\nto_integer(string)\n\n\n*\n\n\n\n\nto_integer(string)\n\n\n\n\n\n\n\nCheck if the input string is an integer\n", "\n:\n\n\nUse Call-Based format\n\t\n\nUse Call-Based format\n:\n\n- Use Call-Based format\n\n\n\t\n\n\n\n\n\t\n\n\n-\n\n\n\n\n* Digits depending on base\n* Optional `0`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Format:\n* Optional `-`", "\n\nUse Call-Based format:\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n:\n\n\n\n\t\n\n\n\n\n\n\n\t\n\n\nreturn int(string)\n\n\n\n* Digits depending on base\n* Extra characters depending on base\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA function/class, which", "\n:\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\n\n\t\nUse Call-Based format\n\nTo-Integer:\n\nConvert a string to an integer\n\n\n\n\t\n\nTo an integer\n\n\n\n\n\n\n\nto_integer(string)\n\n\n\n\n\n\n\n\n\nUse function/class, which should return an", "\n\nUse Call-Based format:\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n:\n\nUse Call-Based format\n:\n\n\t\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\nTo integer:\n\n    string\n\n\n\n\n\n\n\n\n\n\n\n    string\n\t\n+ `-`", "\n\nUse Call-Based format:\n\n\n\t\nUse Call-Based format\n:\n\n\n\n\t\n\n\n\n\nReturn an integer\n\n\n\t\n\n\nTrue if the input is an integer, False otherwise.\n\n\n* Digits depending on base\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf the input string is not in any of the"], "prompt": "\nQUESTION:\nImplement a function/class, which should return an integer if the input string is in one of the formats specified below, or `null/nil/None` otherwise.\n\nFormat:\n* Optional `-` or `+`\n* Base prefix `0b` (binary), `0x` (hexadecimal), `0o` (octal), or in case of no prefix decimal.\n* Digits depending on base\n\nAny extra character (including whitespace) makes the input invalid, in which case you should return `null/nil/None`.\n\nDigits are case insensitive, but base prefix must be lower case.\n\nSee the test cases for examples.\ndef to_integer(string):\n\t\nUse Call-Based format\nANSWER:\n"}}