{"1980": {"code": ["\n\u00a0\n\n\n\n\n\n\n\n\n\t\t// Skiplist\n\t\n\n\n    add(int target):\n    add(int target);\n    // add(int num)\n\n\n\n\n\n    add(int num):\n\n\n\n\n\n\n\n\n\n\n\n\nadd(int target):\n    def add(int target):\n       [", "\n\u00a0\u00a0add(int target)\u00a0\u00a0add(int num)\u00a0\u00a0add(int num)\u00a0\u00a0add(int num)\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n   ()\n\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def add(int num):\n        return true;\n\n", "\n\u00a0\n\n\n\n\n\n\n\n\n    A function:\n    Skiplist.add(1)\n    // return true;\n\n\n\n\n\n   ...\n\n       ...\n add(int num):\n       ...\n\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n    function add(int target):\n        return true;\n\n add(int", "\n\u00a0\u00a0add(int target)\u00a0add(int target)\u00a0add(int target)\u00a0add(int target)\u00a0add(int target)\n\n\n\n\n\n\n\n\n\n\n\n\n   ()\n\n\ufffd\n\n\n\n\n\n\nadd(1):\n    return true;\n\n\n\n    return true;\n\n search(int", "\n\n\n\n\n\n\n\n\n\n\n\n\nadd(int num):\n    return true;\n\n\n\n    add(int num):\n        return false;\n\n\n    add(int num):\n        return true;\n\n\ufffd\n\n\n\n\n\n\n\n\n\nadd(0);\n\nadd(1);\n\nadd(0);\n\n\n add", "\n\n\n\n\n\n\n\n\nadd(int target) :\nInsert a value into a target.\n\nadd(int target) :\nInsert a value into a target.\n\nadd(int target) :\nInsert a value into a target.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    add(int num):\n        return true", "\n\n\n\n\n\n\n\n\nadd(int target) : Add a value to a Skiplist.\n\n\nadd(int target):\n    return true;\n\n\n\n\n    def search(int target):\n        return false;\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n add(int num):\n        return true", "\n\u00a0\n\n\n\n\n\n\n\nadd(int target) :\nAdd a value to Skiplist.\n\n\u00a0Examples:\n\nplist.add(0) :\nAdd a value to Skiplist.\n\n\n\n\n   ()\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return true;\n\n\n search(int target):", "\n\u00a0\u00a0add(int target):\n\u00a0add a value to the Skiplist.\n\n\n\n\n\n\n\n\nadd(int target) :\n    Add a value to the Skiplist.\n\n\n\n\n   () {\n    }\n\n\n\n\n\n\n\n\n\nadd(0)\nadd(1);\n\n\n add(int num", "\u00a0\n\u00a0\n\u00a0\n\n\n\n\n\n\nadd(int num):\n    return false;\n\n\u00a0\n\n\n   (int num) :\n    return false;\n add(int num) :\n    return false;\n\n\n\ufffd\n\n\n\n\n\n\n\nadd(0);\n    // return false\n\n\n add(int num):\n", " \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\nadd(int num):\n    return true;\n\nplist.search(0)\n    return false;\n\n\n\n\n   ()\n\ufffd\n\n\n\n\n\n\n\n\n\n\n    def search(int num):\n        return false;\n\n.search", "\n\nadd(int target):\nAdd a value to a Skiplist.\n\nTarget\u00a0in the Skiplist:\n\n\n\n\n\n\n\n\n\n\n\n\n    def add(int target) {\n        //\n    }\n\n   () {\n\n\n\n\n\n\n\n\n\n\n\n    def search(int num):\n        return true\n.", "\n\n\n\n\n\n\n\n\n\n\n\n    >>>\n\n   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\ufffd\n\n\n add(int num)\n    >>>\n\n:\n\n\n\n\n\n\n\n\n\n\n\n    add(int num):\n        return false;\n\n   ", "\u00a0insert a value into a Skiplist.\n\n\n\n\n\n\n\n\n\n\nadd(int num):\n    return false;\n\n\n\n\n    def search(int target) {\n        return false;\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n    def add(int num):\n        return true;\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n    <div class=\"skip_list\">\n        <div class=\"skip_list\">\n        <div class=\"skip_list\">\n\n\n\n   \n    add(int num)\n\ufffd\n\n\n\n\n\n\n\n\n\n}", "\n\u00a0\n\n\n\u00a0\n\n\n\n\nadd(int num)\n    add(1)\n    add(2)\n    add(1)\n    add(1);\n\n\n\n\n    def search(int target):\n\n() {}\n\n\n\n\n\n\n\n\n\n\n   \n    def add(int target):\n        return true;\n   ", "\n\u00a0\n\n\n\n\n\n\n\n\n\nO(log(n))\n\n1.0\u00a0\n\u00a0\n\n\nplist()\n\n\n\n\n    def add(int num):\n        return true\n\n\n   \n\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def add(int num):\n        return true\n\n       ", "\n\n\n\n\n\n\n\n\n\n\n\n\n    add(int target):\n    add(int target)    // add a value to the Skiplist.\n\n        erase(int target)\n\n\n\n\n\n\n    erase(int target):\n\n() {\n\n\n\n\n\n\n\n\n\n\n\n\n    add(0)\n search(int target", "\n\nadd(int target) : Insert a value into a Skiplist.\n\u00a0\n\n\n\n\n\n\n\n\nadd(int target):\n    return false;\n\n\n\n\n    return true;\n\n\n   () {\n        return true;\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n    add(int num):\n        return true", "\u00a0\n\u00a0\n\n\n\n\n\n\n\n\nadd(int target):\n    return true;\n\nplist.search(0)   // return true\n\nskiplist.erase(0)   // return true\n\n\n\n\n   () {}\n\ufffd\n\n\n\n\n\n\n\n\n\n\n\n    search(int target):\n        return false;\n"], "prompt": "\nQUESTION:\nDesign a Skiplist without using any built-in libraries.\nA Skiplist is a data structure that takes\u00a0O(log(n)) time\u00a0to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be\u00a0comparatively short and the idea behind Skiplists are just simple linked lists.\nFor example:\u00a0we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. The\u00a0Skiplist works this way:\n\nArtyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons\nYou can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add\u00a0,\u00a0erase\u00a0and search\u00a0can be faster than O(n).\u00a0It can be proven\u00a0that the average time complexity for each operation is O(log(n)) and space complexity is O(n).\nTo be specific, your design should include these functions:\n\nbool search(int target) : Return whether\u00a0the target exists in the Skiplist\u00a0or not.\nvoid add(int num):\u00a0Insert a value into the SkipList.\u00a0\nbool erase(int num): Remove a value in\u00a0the Skiplist.\u00a0If num\u00a0does not exist in the Skiplist, do nothing and return false. If there exists multiple num values, removing\u00a0any one of them is fine.\n\nSee more about Skiplist :\u00a0https://en.wikipedia.org/wiki/Skip_list\nNote that duplicates may exist in the Skiplist, your code needs to handle this situation.\n\u00a0\nExample:\nSkiplist skiplist = new Skiplist();\n\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0);   // return false.\nskiplist.add(4);\nskiplist.search(1);   // return true.\nskiplist.erase(0);    // return false, 0 is not in skiplist.\nskiplist.erase(1);    // return true.\nskiplist.search(1);   // return false, 1 has already been erased.\n\u00a0\nConstraints:\n\n0 <= num, target\u00a0<= 20000\nAt most 50000\u00a0calls will be made to search, add, and erase.\nclass Skiplist:\n    def __init__(self):\n    def search(self, target: int) -> bool:\n    def add(self, num: int) -> None:\n    def erase(self, num: int) -> bool:\n# Your Skiplist object will be instantiated and called as such:\n# obj = Skiplist()\n# param_1 = obj.search(target)\n# obj.add(num)\n# param_3 = obj.erase(num)\nUse Call-Based format\nANSWER:\n"}}