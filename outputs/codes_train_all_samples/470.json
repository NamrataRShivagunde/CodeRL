{"470": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nA.sort()\nA.sort()\ntarget.sort()\n\n\u00a0\nReturns:\n\nint\n\n\n   :\n\n\nUse Call-Based format\n\n                \n\n\n\n\n\n\n\n\n\nA = 2\n\n\n\nGiven an integer array", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nA.length <= 3\nA.length <= 6\ntarget <= 2\ntarget <= 3\n\nExample:\n    A = [1,2,3,3]\n\nUse Call-Based format\n\n\n:\n\n\n\n                \n\n\n\n\n\n\n\n\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nA.length = 3\nA.append(2)\nA.append(3)\nA.append(3)\n\n\u00a0\nConstraints:\n\n\n\n   :\n\n\n\n        \n\n\n\n\n\n\n\n\nA = [2, 2]\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\n    def threeSum(self, A: List[int], target: int):\n\n\n\n\n\n   :\n\nGiven an integer array A, and an integer target, return the number of distinct 3-tuple tuples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA[i] = 1\n\n\n\nGiven an integer", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nA.length = 4\nA.sort()\nA.sort()\n\nOutput:\n\n\n\n   :\n\n\nThe answer is modulo 107.\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nA = [1, 2, 3]\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nA.length <= 3\nA.length <= 10\n\n\n   ):\n        pass\n        \n\n\nThe answer is modulo target.\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA = 3\n\n\n\n\n\nGiven an integer array A,", "\nUse Call-Based format\n\n\n\n\n\nA.length = 3\ntarget = 1\n\n\u00a0\n\n\n   ) -> int:\n        \nUse Call-Based format\n\nGiven an integer array A, and target, return the answer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA = [1, 2, 3]\n\n\n", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\nA.length <= target <= 3\n\n\n   ):\n        \"\"\"\n\n\n\nA.length = 2\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n\nA = A.cumsum()\n\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n    def twoSum(self, A, target: int):\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nUse Python-Based format\n\n\n\n\n\n\n\n\nA.sort()\n\n\n\n\n\nGiven an integer array A, and target,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nA.length >= 3 and A.length <= 4\n\n\n   :\n\n\nThe answer is modulo target.\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array A, and an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based formatA.length = 3\nA.index = 0\nA.index = 1\nA.index = 2\n\n\n\n   :\n\n\n\n                \n\n\n\n\n\n\n\n\n\n\nA = [1,2,2]\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n    def threeSum(self, A: List[int], target: int):\n       \n\n       \n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nA = [1,2,3]\n\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nA.length <= 3\nA.append(1)\nA.append(2)\nA.append(3)\n\nReturns:\n\n\n\n   :\n\n\n\n\nUse Call-Based format    \n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array A, and an", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nA.length = 3\nA.append(2)\nA.append(3)\n\n\u00a0\n\n\n   :\n\n\n\n\nUse Python Call-Based format\nUse Python Call-Based format\n\n\n\n\n\n\n\n\n\nA = 3\n\nOutput:\n\n\n\nGiven", "\nUse Call-Based format\n\n\n    def threeSum(self, A, target: int):\n       \nUse Call-Based format\n\n\nA.length = 3\nA.index = 0\nA.index = 1\n\n\n\n   \n\n\n\n\n\n        \n\n\n\n\n\n\n\n\nA = 3 * 3 * 3\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nA.length = 3\nA.sort()\nA.sort()\n\nReturns:\n\nint:\n\n\n   :\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nA = [1, 2]\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nA.length == 3\nA.length == 4\nA.length == 6\nA.length == 8\n\nConstraints:\n\n0 <= target <= 100\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array A,", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nA.length = 3\ntarget = 3\n\n\u00a0\n\n\n   ) -> int:\n        \"\"\"\n\nUse Call-Based format\n\nReturns the answer modulo target\n\n\n\nUse Call-Based format    \n\n\n\n\n\n\n\n\n\nA = A + 2\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nA.length <= 2\nA.length <= 3\nA.length <= 4\n\nConstraints:\n\n0 <= target <= 3\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA[i] = 2\n\n\n\nGiven an integer array A", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\nA.length >= 3\nA.length <= 4\n\n\n   ) -> int:\n\n\nA = 3 * A.length\ntarget = 3\n\n\n\n        \n\n\n\n\n\n\n\n\n\nA = 3 * A\n\n\n\n\nGiven an integer array A"], "prompt": "\nQUESTION:\nGiven an integer array A, and an integer target, return the number of\u00a0tuples\u00a0i, j, k\u00a0 such that i < j < k and\u00a0A[i] + A[j] + A[k] == target.\nAs the answer can be very large, return it modulo\u00a0109 + 7.\n\u00a0\nExample 1:\nInput: A = [1,1,2,2,3,3,4,4,5,5], target = 8\nOutput: 20\nExplanation: \nEnumerating by the values (A[i], A[j], A[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n\nExample 2:\nInput: A = [1,1,2,2,2,2], target = 5\nOutput: 12\nExplanation: \nA[i] = 1, A[j] = A[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.\n\n\u00a0\nConstraints:\n\n3 <= A.length <= 3000\n0 <= A[i] <= 100\n0 <= target <= 300\nclass Solution:\n    def threeSumMulti(self, A: List[int], target: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}