{"3922": {"code": ["\n```\n\n\n\n# Task\n\n\n\n\n# Note:\n\n# Note:\n\n\n\n\n\n# Example:\n\n# Task\n\n\n# Task\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n is 0. current number is 1", "\n\n Note:\n\n- `arr.length < n`, you will jump to the end of `arr`.\n\n Note:\n\n Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Step\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n# Step\n\n\n\n\n\n```\n\n# Example:\n\n#\n", "\n\n```\n\n# Examples\n\n# Example\n\n# Example\n\n# Example\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n current number is 0 < n < 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n is a positive integer, `", "\n# Example\n\n\n# Examples\n\n# Example 3\n\n\n    0,3,0,3,3,2,3,3\n\n\n\n\n\n\n\n\n\n\n\n\n Jump\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n 1 < n < 3, so 1 -> 2", "\n```\n Task\n\n Task\n\n\n\n# Task\n\n\n# Example\n\n\n# Task\n\n\n\n# Task\n\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n# Task\n\n\n  ^", "\n```\n\n\n# Run\n\nYou are a frog. \n\n\n\n# Explanation\n\n\n\n\n\n\n\n\n\n# Note:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Task\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n is 1, 2", "\n\n\n\n# Note:\n\n# Task\n\n\n\n\n\n\n# Example:\n\n# Task\n\nYou will jump softly\n\narr = [0,3,1,2,3,4,5,6]\n\n# Note:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is 1,", "\n\n\n# Note:\n\n    :\n    \n     :\n     :\n     :\n     :\n     :\n     :\n     :\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n [2,3", "\n```\n\n# Run\n\n# Example\n\n# Jump\n\n\n\n\n\n\n\n\n\n# Note\n\n\n\n\n\n\n\n\n\n# Task\n\n\n# Task\n\n\n\n\n\n\n \n\n```\n\n\n\n\n\n\n\n\n\n# Note\n\n\n\n\n```\n\n\n# Example:\n\n\n", "\n\n\n# Example\n\n# Note\n\n- current number is 1, 3, 1, -3, -3, -3, -3, -3, -3, -3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n# End of task\n\n\n\n\n is 0, 3", "\n\n Example:\n\n# Task\n\n  [0,3,1,-3,-3,0,1,-3,2,3,4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n# Example:\n\n\n", "\n```\n\n\n# Examples\n\n# Example\n\n# Task\n\nYou are a lonely frog.\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 0 < n < 3, so 0 ->", "\n Example:\n\n# Example\n\n%_\n```\n\n# Examples\n\n# Example\n\n\n\n\n# Example\n\n%_\n\n# Example\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n# Note:\n\n\n\n```\n\n is 2", "\n Example:\n\n# Step 1\n\n# Step 2\n\n# Step 3\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n\n\n\n\n\n```\n\n# Example 1\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n  # All the rules below\n\n \n\n\n\n 1 < n < 3, so", "\n# Example\n\n```\n\n# Example\n\n# Example\n\n\n\n\n\n\n\n\n\n\n# Note\n\n\n\n\n\n# Example\n\n\n# Task\n\n\n# Task\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is 0, 3, 0", "\n Step 1\n\n---\n\n\n\n\n\n\n\n\n# Task\n\n\n\n# Example\n\n\n# Task 1\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n\n\n is 0, 3", "\n```\n\n# Experimental\n\n# Task\n\n# Example\n\n# Example\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n jump\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is 0 < n < 3, so 0", "\n# Example\n\n# Example 1\n\n# Example 2\n\n# Example 3\n\n# Example 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Jumping\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n```\n\n is 0, i is", "\n Example:\n\n\n\n\n\n# Example\n\n\n## Parameters\n\n\n\n\n\n\n# Note:\n\n# Note\n\n \n\n\n The end of the example above\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example:\n\n# Task\n\n\n\n\n\n\n 1 < n < 3\n", "\n\n Example:\n\n# Task\n\n\n# Task\n\n\n# Task\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n# Example:\n\n# Task\n\n\n\n\n\n```\n is"], "prompt": "\nQUESTION:\n# Task\n\nYou are a lonely frog. \n\nYou live on an integer array.\n\nThe meaning of your life is to jump and jump..\n\nNow, here comes your new task. \n\nYou are given an integer array `arr` and a positive integer `n`.\n\nYou will jump following the rules below:\n\n- Your initial position at `arr[0]`. arr[0] will always be `0`.\n\n- You will jump according to the number of current position(arr[i])\n  - That is, if the number is a positive integer, let say 3, you will jump forward 3 steps; If the number is a negative integer, let say -3, you will jump backward 3 steps; If the number is 0, you will stay here for a little rest.\n\n- The number of current position(arr[i]) will increase decrease by 1 after each turn (jump or stay).\n  - That is, if the number of current position(arr[i]) is greater than or equal to `n`, the number will decrease 1; if the number at current position(arr[i]) is less than `n`, the number will increase 1.\n\nYou will stop jumping when you reach the exit (your position greater than or equal to arr.length). Please tell me, at the moment, how many elements in `arr` are equal to `n`?\n\n# Note\n\n- `3 <= arr.length <= 1000`, `1 <= n <= 9`\n\n- Frog will never jump backward out of `arr`.\n\n# Example\n\nFor `arr = [0,3,0,1,-3], n = 3`, the output should be `2`.\n```\n Let us jump softly:\n \n [0,3,0,1,-3]\n  ^--You are here, current number is 0, you stay here. \n     currect number 0 < n, so 0 -> 1\n [1,3,0,1,-3]\n  ^--You are here, current number is 1, you will jump forward \n     to position 1. current number 1 < n, so 1 -> 2\n [2,3,0,1,-3]\n    ^--You are here, current number is 3, you will jump forward \n       to position 4. current number 3 >= n, so 3 -> 2\n [2,2,0,1,-3]\n           ^--You are here, current number is -3, you will jump backward\n              to position 1. current number -3 < n, so -3 -> -2\n [2,2,0,1,-2]\n    ^--You are here, current number is 2, you will jump forward \n       to position 3. current number 2 < n, so 2 -> 3\n [2,3,0,1,-2]\n        ^--You are here, current number is 1, you will jump forward\n           to position 3. current number 1 < n, so 1 -> 2\n [2,3,0,2,-2]\n           ^--You are here, current number is -2, you will jump backward\n              to position 2. current number -2 < n, so -2 -> -1\n [2,3,0,2,-1]\n      ^--You are here, current number is 0, you stay here.\n         current number 0 < n, so 0 -> 1\n [2,3,1,2,-1]\n      ^--You are here, current number is 1, you will jump forward \n         to position 3. current number 1 < n, so 1 -> 2\n [2,3,2,2,-1]\n        ^--You are here, current number is 2, you will jump forward to position 5.\n     current number 2 < n, so 2 -> 3\n [2,3,2,3,-1] exit\n               ^--You are here, you reach to the exit.\n \n At the moment, arr[1] and arr[3] are equal to n.\n So, the output should be 2.\n```\nFor `arr = [0,-1,-2,-3,-4], n = 4`, the output should be `2`.\n```\n Let's us jump fast ;-)\n \n [0,-1,-2,-3,-4]\n  ^\n [1,-1,-2,-3,-4]\n  ^\n [2,-1,-2,-3,-4]\n     ^\n [2, 0,-2,-3,-4]\n  ^\n [3, 0,-2,-3,-4]\n        ^\n [3, 0,-1,-3,-4]\n  ^\n [4, 0,-1,-3,-4]\n           ^\n [4, 0,-1,-2,-4]\n  ^\n [3, 0,-1,-2,-4]\n              ^\n [3, 0,-1,-2,-3]\n  ^\n [4, 0,-1,-2,-3]\n           ^\n [4, 0,-1,-1,-3]\n     ^\n [4, 1,-1,-1,-3]\n     ^\n [4, 2,-1,-1,-3]\n        ^\n [4, 2, 0,-1,-3]\n     ^\n [4, 3, 0,-1,-3]\n           ^\n [4, 3, 0, 0,-3]\n        ^\n [4, 3, 1, 0,-3]\n        ^\n [4, 3, 2, 0,-3]\n           ^\n [4, 3, 2, 1,-3]\n           ^\n [4, 3, 2, 2,-3]\n              ^\n [4, 3, 2, 2,-2]\n     ^\n [4, 4, 2, 2,-2]\n              ^\n [4, 4, 2, 2,-1]\n        ^\n [4, 4, 3, 2,-1]\n              ^\n [4, 4, 3, 2, 0]\n           ^\n [4, 4, 3, 3, 0] exit\n                 ^\n At the moment, arr[0] and arr[1] are equal to n.\n So, the output should be 2.\n```\n\nFor `arr = [0,-1,-2,-3,-4], n = 3`, the output should be `0`.\n```\n Let's jump fast ;-)\n \n [0,-1,-2,-3,-4]\n  ^\n [1,-1,-2,-3,-4]\n  ^\n [2,-1,-2,-3,-4]\n     ^\n [2, 0,-2,-3,-4]\n  ^\n [3, 0,-2,-3,-4]\n        ^\n [3, 0,-1,-3,-4]\n  ^\n [2, 0,-1,-3,-4]\n           ^\n [2, 0,-1,-2,-4]\n  ^\n [3, 0,-1,-2,-4]\n        ^\n [3, 0, 0,-2,-4]\n     ^\n [3, 1, 0,-2,-4]\n     ^\n [3, 2, 0,-2,-4]\n        ^\n [3, 2, 1,-2,-4]\n        ^\n [3, 2, 2,-2,-4]\n           ^\n [3, 2, 2,-1,-4]\n     ^\n [3, 3, 2,-1,-4]\n           ^\n [3, 3, 2, 0,-4]\n        ^\n [3, 3, 3, 0,-4]\n              ^\n [3, 3, 3, 0,-3]\n  ^\n [2, 3, 3, 0,-3]\n           ^\n [2, 3, 3, 1,-3]\n           ^\n [2, 3, 3, 2,-3]\n              ^\n [2, 3, 3, 2,-2]\n     ^\n [2, 2, 3, 2,-2]\n              ^\n [2, 2, 3, 2,-1]\n        ^\n [2, 2, 2, 2,-1] exit\n                  ^\n \n At the moment, there is no element equal to n.\n So, the output should be 0.\n```\n\n[Base idea taken from [here](https://adventofcode.com/2017/day/5)]\ndef jumping(arr, n):\n\t\nUse Call-Based format\nANSWER:\n"}}