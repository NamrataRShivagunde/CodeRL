{"3333": {"code": ["\n## Example\n# Use Call-Based format\n\n\n# Output\n- The result will be a boolean\nreturn a or b\n\n## Example\n\n\n\n:\n\n\n\n\n:\n## Task\n:\n\n\n\n\n:\n:\n\n\n\n\n:\n\n\n# Task\n\n\n\n\n:\n Task\n\n# Task\n\n:\n## Task", "\n# Example\n\n# Example\n\n\n#\n\n\n:\n## Example\n\n\n\n# Task\n\n\n\n# Output\n\n# Output\n\n# The same format as above\n\n:\n:\n\n-\n:\n:\n\n\n\n\n:\n\n\n# Task\n\n\n\n\n:\n## Task\n\n\n## Task\n:\n# Task\n", "\n## Example\n\ndef func_xor(a,b)\n\nUse Call-Based format\n\n\n\n# Output\n\n:\n## Task\n\n\n\n\n:\n## Task\n:\n## Task\n\n-\n:\n:\n\n\n\n:\n\n\n\n:\n## Task\n\n# Task\n:\n## Task\n\n\n:\n# Task\n#", "\n\n\n\nif not all input are truthy, then return `true`\nif not all input are truthy\n\n\t\n\n:\n## Example\n\n\n\n\n:\n:\n## Task\n\n\n-\n:\n:\n\n\n\n\n:\n\n\n\n# Output\n-\n\n## Task\nION:\n## Task\n\n\n:\n## Task\n", "\n## Example\n- The function must be called with two arguments\n\n\n\n# Output\n- The return value of the function\n\n\n\n:\n\n\n\n:\n## Task\n:\n:\n## Task\n\n\n:\n## Task\n:\n\n\n\n\n\n:\n\n\n# Task\n\n\n\n:\n## Task\n\n\n# Task\n# Task\n", "\n## Example\n# func_xor(a,b)\n\nUse Call-Based format\n\n\n\n:## Task\n\n\n## Example\n\n:## Example\n\n# Task\n\n# Example\n:## Task\n:\n-\n:## Example\n:\n\n#\n\n:\n\n\n# Output\n\n\n:\n## Task\n\n\n:\n## Task\n", "\n# Example\n\ndef func_or(a,b):\n\t\nUse Call-Based format\n\n\n# Output\n\n\n\n:\n## Task\n\n\n\n:\n## Task\n:\n\n\n\n\n:\n:\n\n\n\n:\n\n\n## Task\n\n\n# Task\n\n\n:\n## Task\n\n\n:\n## Task\nYou can", "\n## Example\n# Example\n\n\n\n\t\nUse Call-Based format\n## Output\n# Output\n\n:\n## Task\n\n\n\n## Task\n\n:\n## Task\n:\n:\n\n-\n:\n:\n\n\n\n:\n\n\n# Task\n\n\n\n:\n## Task\n\n# Task\n# Task\n\n\n## Task\n\n#", "\n\n\n\n\n:\n## Task\nUse Call-Based format\n\n\n## Example\n\n# Input\na,b\n\n\n:\n## Task\n:\n## Task\n\n\n:\n## Task\n:\n\n\n\n:\n## Task\n\n\n\n\n# Task\n\n\n:\n## Task\n\n\n# Task\n\n:\n## Task\nYou can", "\n# Example\n\n# Example\ndef func_xor(a,b):\n\t\nUse Call-Based format\n\n\n\n# Output\n\n\n\n:\n\n\n\n\n:\n## Task\n:\n\n\n-\n\n# Task\n:\n\n\n\n\n\n\n:\n\n\n# Task\n\n\n\n:\n\n\n:\n## Task\nYou need", "\n# Answer\n- Function call\n\nUse Call-Based format\n\n\n\n# Task\n\n\n# Output\n\n\n:\n## Task\n\n\n\n\n:\n## Task\n:\n:\n\n\n\n:\n## Task\n:\n\n\n\n\n:\n## Task\n\n\n\n## Task\n\nION:\n## Task\n\n\n:\n# Task\n", "\n## Example\ndef func_xor(a,b):\n\t\nUse Call-Based format\n\n\n\n## Output\n\n#:\n## Task\n\n\n\n:\n## Task\n:\n## Task\n\n\n-\n:\n:\n\n\n\n\n:\n\n\n# Task\n\n\n\n:\n## Task\n\n\n:\n## Task\nYou can use", "\n# Example\n\n# Example\na = func_or(a,b)\n\nUse Call-Based format\n\n\n# Task\n\n\t\n\n:\n\n\n\n:\n## Task\n\n## Task\n:\n\n\n-\n:\n:\n\n\n\n\n:\n\n\n\n\n:\n## Task\n\n\n## Task\n## Task\nYou need to", "\n## Example\n\n@func_or(a,b)\n\nUse Call-Based format\n\n\n\n## Task\n:\n\n\n\n:\n## Task\n:\n:\n## Task\n\n\n:\n:\n\n\n\n:\n\n# Task\n\n\n## Task\n\n# Task\nION:\n## Task\n\n\n\n# Task\n\n## Task\n", "\n\n\n\n# Output\n- You can use Call-Based format\ndef func_xor(a,b):\n\t\nUse Call-Based format\n\n# Examples\n\n\n\n:\n\n\n\n\n:\n\n\n\n:\n:\n\n\n\n\n:\n\n\n\n# Task\n\n\nION:\n## Task\n\n\n# Task\n\n## Task\n", "\n## Example\ndef func_xor(a,b):\n\t\nUse Call-Based format\n\n\n\n## Task\n\n:\n\n\n\n:\n## Task\n\n:\n## Task\n\n\n\n:\n:\n\n\n\n:\n## Task\n\n\n\n# Output\n-\n\n:\n## Task\n\n\n## Task\n## Task\nYou need to", "\n\n\nif a is True, a is True\nif b is True, b is True\nif b is True\nreturn a\n\n# Example\n\n\n:\n\n:\n\n:\n:\n\n\n\n\n:\n:\n\n\n\n:\n\n# Task\n\n\n\n## Task\n\n\n:\n# Task\n\n\n# Task\n:\n## Task\n", "\n\n\n\n\n:\n## Task\n\nUse Call-Based format\n\n# Task\n# Task\n\n\n\n:\n## Task\n\n\n## Task\n\nUse Call-Based format\n\n# Task\n:\n\n\n\n\n:\n:\n\n\n\n:\n\n\n# Task\n\n\n\n\n:\n## Task\n\n\n:\n## Task\nYou", "\n# Example\n\n\n- Check that all input are True\n- Check if all input are False\n\n\n## Output\n\t\n:\n\n\n\n:\n## Task:\n## Task\n\n\n\n:\n:\n\n\n\n:\n## Task\n\n\n\n\n:\n## Task\n\nION:\n## Task\n\n\n# Task\n# Task\n\n# Task", "\n## Example\n# Example: func_or(a,b)\n\n\n\n\t\n\n## Task\n:\n## Task\n\n\n\n\n:\n## Task\n:\n## Task\n\n\n-\n\t:\n## Task\n:\n\n\n\n\n\n:\n\n\n\n## Task\n\n:\n## Task\n\n\n# Task\n## Task\n\n##"], "prompt": "\nQUESTION:\n## Task\nYou need to implement two functions, `xor` and `or`, that replicate the behaviour of their respective operators:\n\n- `xor` = Takes 2 values and returns `true` if, and only if, one of them is truthy.\n- `or` = Takes 2 values and returns `true` if either one of them is truthy.\n\nWhen doing so, **you cannot use the or operator: `||`**.\n\n# Input\n- Not all input will be booleans - there will be truthy and falsey values [the latter including also empty strings and empty arrays]\n- There will always be 2 values provided\n\n## Examples\n- `xor(true, true)` should return `false`\n- `xor(false, true)` should return `true`\n- `or(true, false)` should return `true`\n- `or(false, false)` should return `false`\ndef func_or(a,b):\n\t\nUse Call-Based format\nANSWER:\n"}}