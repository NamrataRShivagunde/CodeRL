{"304": {"code": ["    def numFriendRequests(self, ages: List[int]) -> int:\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nage[A]\u00a0+ 7\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\nSome people will make friend requests.\n\n\n\n\nif A!=", "    return 1\n\n\u00a0\nUse Call-Based format\n    def numFriendRequests(self, ages: List[int]):\n        \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n       \n\n100 -> 100\n\n\u00a0\n\n\n\nA person is asking.\n\n\n\nPerson A will", "\nUse Call-Based format\n\n\n    def numFriendRequests(self, ages: List[int]) -> int:\n        return 2\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\nSome people will make friend requests.\n\n\n\nif A", "\nUse Call-Based format\n\n    def friends(self, ages: List[int]):\n        return self.numFriendRequests(ages)\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n       \n\n100\n\n\u00a0\n\n\n\n\nA\n\n\n\nA will NOT friend request person", "    return self.numFriendRequests(ages)\n\nuse Call-Based format\n        pass\n\nUse Call-Based format\nSome people will make friend requests.\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\n\n       \n\n\n\n\nEveryone will make friend requests.\n\n\u00a0\n\n\n\nSome people will make friend", "    return self.numFriendRequests(ages)\n\n\n\n    def numFriendRequests(self, ages: List[int]):\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n       \n\n\n\n\n\n\nage[B]\u00a0> 100\n\n\nA\ufffd", "\n\nUse Call-Based format\n\n    def numFriendRequests(self, ages: List[int]):\n        \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n   \nUse Call-Based format\n\n\n\nThe person will make friend requests\n\n\n\n\n\nif A == B, A", "\nUse Call-Based format\nage[i]\u00a0= age[i]\n\nUse Call-Based format\n        pass\n\n\nSome people will make friend requests.\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n       \n\n\n\nSome people will make friend requests.\n\n\nB\nSome people will make friend requests. The", "\nUse Call-Based format\nUse Call-Based format\n\n    def numFriendRequests(self):\n        return 1\n\n\nThe call-based format\n\n\n\n\nUse Call-Based format\nage[A]\u00a0+ 7\n\n\n\n\n\n\n\n   \n\n\n\n\nA person will make friend requests\n\n\n\n\n\nA person will NOT friend", "    def numFriendRequests(self, ages: List[int]) -> int:\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n   \n\n\n\n\u00a0\n\n\n\nA friend request person B\n\n\n\nif A!= B", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    def numFriendRequests(self, ages: List[int]):\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n100\n\n\n\n\nSome people will make friend requests.\n\n\u00a0\n\n\nPerson A", "\n    def friends(self, ages: List[int]) -> int:\n        \n\n\n    def friends(self, ages: List[int]) -> int:\n\n\n\n\n\n\n\nage[A]\n\n\n\n\n\n\n\n   \n\n\n\n\nUse Python-based format\n\n\nA\n\nEveryone will make a friend request person", "\n    def friends(self, ages: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\nSome people will make friend requests.\n\n\n\n\n\nTotal number of people to make", "\n    def numFriendRequests(self, ages: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nage[A]\u00a0>= 0\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\nSome people will make friend requests.\n\n\n\nif A", "\nUse Call-Based format\n\nUse Call-Based format\n    def __call__(self, ages: List[int]):\n\n\nSome people will make friend requests.\n\n\n\n\n\n\n\n\n\n\n\u00a0age[A]\n\u00a0age[B]\n\n\n       \n\n\n   \n\n\n\n\nSome people will make friend requests. The", "    def numFriendRequests(self, ages: List[int]) -> int:\n        \n\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\nThe number of people will make friend requests.\n\n\n\n\nSome people will make friend requests", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n    pass\n\n\nSome people will make friend requests\n\nUse Call-Based format\n\n\n\n\nSome people will make friend requests.\n\n\n\n\n\n\n\n       \n\n100\n\n\u00a0\n\n\n\n\nSome people will make friend requests.\n\n\n\nA is a", "\nUse Call-Based format\n\n   \n    def ages(self, ages: List[int]) -> List[int]:\n        \"\"\"\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0 -> 20.\n\n\n   \n\n\n\n\n\n\nEveryone will make friend requests.\n\n\n\nif A", "    def numFriendRequests(self, ages: List[int]) -> int:\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nage[A]\u00a0+ 7\n\n\n\n\n\n\n\n\n       \n\n\n\n\nFriend requests\n\n\n\n\nSome people will make friend requests. The\ufffd", "    def numFriendRequests(self, ages: List[int]) -> int:\n        \nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nage[A]\n\n\n\n\n\n\n\n\n\n1 <= ages.length <= 20000.\n\n\n\n\n\n\n\nEveryone who has a friend request"], "prompt": "\nQUESTION:\nSome people will make friend requests. The\u00a0list of their ages is given and\u00a0ages[i]\u00a0is the age of the\u00a0ith person.\u00a0\nPerson A will NOT friend request person B (B != A) if any of the following conditions are true:\n\nage[B]\u00a0<= 0.5 * age[A]\u00a0+ 7\nage[B]\u00a0> age[A]\nage[B]\u00a0> 100 &&\u00a0age[A]\u00a0< 100\n\nOtherwise, A will friend request B.\nNote that if\u00a0A requests B, B does not necessarily request A.\u00a0 Also, people will not friend request themselves.\nHow many total friend requests are made?\nExample 1:\nInput: [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.\n\nExample 2:\nInput: [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\nExample 3:\nInput: [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n\n\u00a0\nNotes:\n\n1 <= ages.length\u00a0<= 20000.\n1 <= ages[i] <= 120.\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}