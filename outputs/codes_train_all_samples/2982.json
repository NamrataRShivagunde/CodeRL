{"2982": {"code": ["\n\nUse Call-Based format\n\n\n\n\n\n\n\n\ndef\n\n\n\t\nUse Call-Based format\n\nUse Python format\n\n\n\nfor example:\n```python\npascal(5)\n\n\n\n\n\n\n\n\n   1   2   1   1\n  \n\n\tp\n\t\n\n\n\n\n\tpascal(", "\t\n\n\n\n\n\n\n\n\n\n\n\n\npascal(p):\n\t\nUse Call-Based format\n\n\n\n\n\npascal(depth) # should return a single 1-dimensional array\n\n\n\n\n   1   1   1   1   1   1   1   1\n\n\n\n\npascal\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo build a pascal triangle, use the `pascal(depth)` function to build the triangle\n\n\n\n\n\n\n\n\n\n\n\n   1   1   1   1   1   1   1   1   1   1\n\n\n\n\n\n\n\n\n\n``", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\npascal(p) # should return a nested array\n\n\n\n\n\n\n\n\n\n\n\n   2   2   1   1   2   1   1   1   1   1  \n\n\n\n\n\n\n\n\nHere you will create", "\t\nUse Call-Based format\n\n\n\n\n\t\n\n\ndef\npascal(p)\n\t\n\n\n\n\t\nThis function will create a pascal triangle from the given depth\n\n\n\n\n\n\n\n\n\n\n\n   1   1   1   1   1   1   1\n\np\n\n\np\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nThis function will create a Pascal's triangle\n\n\n\n\n\t\tp = 2\n\n\n   1   1   1   1   1   1   1\n\n\n    \n\n\tp\n\t\n\n\n\n\n\n\tif you want", "\t\nUse Call-Based format\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n:\n\np = 3\n\n\nHere you will create a Pascal's triangle\n\n\n\n\n\n\n\n\n\n\n   1   1   1   1   1   1   1   1   1   1   1\n\n\n\n\n\n\n\n\n```", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nThis function will create a Pascal's triangle\n\n\n\n\nThis function will return the Pascal's triangle up to the given depth\n\n\n\n\n\n\n\n   2   1   1   1   1  \np\n\n\np\n\n\n\n\n\n```", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n```python\npascal(p)\n\nUse Call-Based format\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 1   2   3   1   1   1   1   1   1   1  \n\n\n\t\n\t\n\n\n\tHere you", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nThis function is a function\nUse Call-Based format\n```python\npascal(depth)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   2   3   1   1   1  \n\n\n\n\npascal(p):\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n```python\npascal(p)\n\nUse Call-Based format\n\n\n\n\n   1   1   1   1   1   1   1   1   1   1   1\n\n\n\n\t\n\n\n\n\n\t\n``", "\n\n\n\n\n\n\n\t\nUse Call-Based format\n\ndef\n\t\n\n\n\t\n\n\t\nIf you use the function with call-based format, you will use a function that takes a depth of depth `p`.\n\n\n\n\n\n\n\n\n   1   1   1\n\np\n\n\t\n\n\t\n\n\n\n\t\n\tif you", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function will build the classic Pascal's triangle.\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   2   3   4   1\n   4  \n\n\n```python\np\n\n\n\n\n\n\tp =", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\ndef\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n   1   2   3   4   6   4   1   1   1   1   1  \n\n  \n\n\n\n\n\n\n\n\n\n\n```python\n", "\n\n\n\n\n\n\n\n\n\n\n```python\n#python\npascal(3)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npascal(p):\n\t\nUse Call-Based format\n\n\n\n\n   1   1   1   1   1\n\n\n\n\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n```python\npascal(3)\n```\n\nHere you will create the Pascal's triangle\n\n\n\n\n\n\n\n   2   2   1   1    \n\n\tp = 3\n\n\n\n\n\nHere you will", "\nUse Call-Based format\n\n\n\n\n\n\ndef\n\t\nUse Call-Based format\n\ndef pascal(depth):\n\t\n\n\n\n\nReturns:\n\npascal(depth)\n\n\n\n\n\n\n\n\n\n   1   1   1   1   1   1   1   1\n\n\n\n\n\n\n\n\n\n```", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nThis function will create the pascal-based triangle (using the given depth).\n\nExample:\n\ndef pascal(depth):\n\t\n\n\n\n\n\n\n\n\n\n 1   1   1   1   1\n  \n\n\n\n\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function returns a nested array with the same shape as the `p`.\n\nExample:\n\n\n\n\n\n\n\n\n\n\n   2   2   1   1   1   1   1\n\n\n\n\np\n\n\n\n\n\n```python", "\n\n\n\n\n\n\n\n\ndef\n\n\n\t\nUse Call-Based format\n\n```python\npascal(p)\n```\n\n\nTo build a Pascal's triangle\n\n\n\n\n\n\n\n\t\n\t\n   1   1   1   1   1\n\np\n\n\t\n\n\t\n\n\n\n\t\n```"], "prompt": "\nQUESTION:\nHere you will create the classic [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle).\nYour function will be passed the depth of the triangle and you code has to return the corresponding pascal triangle up to that depth.\n\nThe triangle should be returned as a nested array.\n\nfor example:\n```python\npascal(5) # should return [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n```\n\nTo build the triangle, start with a single 1 at the top, for each number in the next row you just take the two numbers above it and add them together (except for the edges, which are all `1`), e.g.:\n```\n              [1]\n            [1   1]\n          [1   2   1]\n        [1   3   3   1]\n```\ndef pascal(p):\n\t\nUse Call-Based format\nANSWER:\n"}}