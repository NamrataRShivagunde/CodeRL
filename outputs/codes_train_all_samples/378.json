{"378": {"code": ["\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n          \n\n\n\n          \nGiven an empty array containing only positive integers, find if the array can be partitioned into two subsets.\n\n\n\n\n\n\n\n\n\n\n\nGiven an array containing only positive integers, find if the array contains only positive integers\n\n\n\nGiven a", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n           \n\nThe array can not be partitioned into equal sum subsets.\n\nNote:\n\n\n   \n       \n\n\n\n\n\nUse Call-Based format\n\n\nNote:\n\n\n\nUse Call-Based format\n\nGiven an array containing only positive integers:\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n          \n\n\n   \n        pass\n        \n\nUse Call-Based format\n\n\n\n\n\n\n\n\nIf the array is non-empty and contains only positive integers, then check if the array can be partitioned into two subsets.\n\n\n\n\n\n\n\n\nGiven an array containing only positive integers", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n   \n        return self.canPartition(nums)\n\n\n\n           \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE:\n\nNote:\n\n\n\nGiven an empty array containing only positive integers:\n\n\nGiven", "Use Call-Based format\n\n       \n\n\n\n\n\n\n\n          \n\n\nThe array can not be partitioned into equal sum subsets.\n\n\n   \n        \nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven an array containing only positive integers, find if the array can be partitioned into two subsets\n\n\n\n\nNote:\n\nNote", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n          \n\n\n\n           \n\n\n\n\nGiven an array containing only positive integers, find the partitioning of the non-empty array containing only positive integers.\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Given an array containing only positive integers", "\nUse Call-Based format\n\n       \n\n\n\n\n\n\n          \n\n\n\nThe array cannot be partitioned into equal sum subsets.\n\n\n   \n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven an array containing only positive integers containing only positive integers.\n\n\nGiven", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n          \n\n\n\n   \n        pass\n\nThe array can be partitioned into two subsets.\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nNOTE:\n\n\n\nGiven an array containing only positive integers:\n\n\n\nGiven a non", "\nUse Call-Based format\nUse Call-Based format\n\n    \n\n\n\n\n\n\n\n   \n        \nUse Call-Based format\n\n\n          \nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array containing only positive integers, find if the array\n\n\n", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n\n          \n\n\nThis example returns true if the array can be partitioned into equal sum subsets.\n\n\n   \n       \n\n\nNote:\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\nThe array can't be partitioned\n\n\n\nGiven", "\nUse Call-Based format\n\n    def canPartition(self, nums: List[int]) -> bool:\n\n\n\n\n\n\n   \n\n\n\n           \n\n\n\nNote:\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\nGiven an array containing only positive integers containing only positive integers, find if\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n       \nUse Call-Based format\n\nThe array can't be partitioned into equal sum subsets.\n\n   \n        \n\n\n\n\n\n\n\n\n\nNote:\n\nUse Call-Based format\n\nNote:\n\nUse Call-Based format\n\n\n\n\nGiven a non-empty array", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n\n          \n\n\n   \n\n\nNote:\n\nGiven an array containing only positive integers, find if the array can be partitioned into two subsets of equal sum.\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an empty array containing only positive integers:\n\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n    pass\n\n\n\n\n\n\n\n   \n       \n\n\n\n          \n\n\n\n\nIf the array is not empty, find the array is partitioned into two subsets of equal sum elements.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nNote:\n\nExample 1:", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n          \n\n\n\n\n          \n\nUse Call-Based format\n\n\n\nNote:\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nNOTE:\n\n\n\n\n\n\nGiven an empty array containing only positive integers:\nGiven a", "\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n\n          \n\n\n          \n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nNote:\n\n\n\n\nGiven an array containing only positive integers containing only positive integers, find if the array contains only positive integers containing only positive integers.\n\n\n\n", "\nUse Call-Based format\n\n\n\n\nThe array can not be partitioned into equal sum subsets.\n\n\nExample:\n\nOutput:\n\n\n\n   \n        \n\n\n   \n        pass\n        \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array containing only positive integers,", "Use Call-Based format\n\n    pass\n\n\n\n\n\n\n   \n        return self.canPartition(nums)\n\n\n\n\n           \nUse Call-Based format\n\n\n\n\n\nNote:\n\nUse Call-Based format\n\n\nNote:\n\n\n\n\nNote:\n\n\n\n\nGiven an array containing only positive integers:\n\n\nGiven a", "Use Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n          \n\n\n\n\n\n\n        \nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nNote:\n\n\n\nUse Call-Based format\n\n\n\nNote:\n\n\n\n\n\nGiven an empty array containing only positive integers, find", "Use Call-Based format\n\n    def canPartition(self, nums: List[int]) -> bool:\n        \nUse Call-Based format\n\n\n\n\n\n\n          \n\n\n\n          \n\n\n\n\n\n\n\n\n\n\n\nThe array is non-empty and contains only positive integers.\n\n\n\n\n\nGiven an array containing only positive integers, find"], "prompt": "\nQUESTION:\nGiven a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n\n\nNote:\n\nEach of the array element will not exceed 100.\nThe array size will not exceed 200.\n\n\n\nExample 1:\n\nInput: [1, 5, 11, 5]\n\nOutput: true\n\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n\n\n\nExample 2:\n\nInput: [1, 2, 3, 5]\n\nOutput: false\n\nExplanation: The array cannot be partitioned into equal sum subsets.\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        \nUse Call-Based format\nANSWER:\n"}}