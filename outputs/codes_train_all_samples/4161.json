{"4161": {"code": ["\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1/2\n1/3\n2/3\n1/4\n\n\n\n\n\nHere's how", "\n\n\n\n\n\n\n    Example:\n\n    def rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n\n   \n\n\n\n\n\n\n\n\nHere's the way to construct a list containing rationals:\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere's how to get the list", "\n\n\n\n\n\n    Example:\n\n    rat_at(1)\n\n   ...\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\n\n    Example:\n   \n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\nThe above code would look like", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\treturn rat_at(n)\n\n\n\n\n\nHere's how to do the following:\n\n   \n\ndef rat(n):\n\t\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n```if:kata\n   \n\n```\n", "\n\n\n\n    - The number of rational numbers\n\n    - The number of rationals\n\n    - The number of rationals\n\n```\n\n   \n\n\n\n\n\n\n\n\n\nHere's a way to construct a list:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     \n   \n\n    # In the kata:", "\nUse Call-Based format\n\n\n\n\n\n\n\n* Use kata format\n\n    Create a list of rationals at a finite index:\n\n   \n\n\n\n\t\n\n\nHere's a function that returns a list of rationals:\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\nHere's a way to get a", "\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n\n\t\nCreate a list of rationals\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t# Example\n\n\n\n\n\n\n\t# Example\n\n\n\t# Example 2:", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\n\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n1/1\n1/2\n1/3\n\n\n\n\n\nHere", "\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n\n\t\n\t\n\n\n\n\n\n\n\t\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n    1/1\n    2/1\n\n```\n\n\n\n\n\t\n\n\n", "\n\n\treturn rat_at(n)\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n\t\n\t\n\t\n\n\t\n\t\t\n1\n\n\n\n\n\n\n\n\n\n```if:kata\n\n\n\n\n\n\t\nHere's how to traverse the binary tree", "\n\n\t\n\n\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n\n\t\n\n\n\t\n\n\n\n\n\t\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n```if:python\n\n\n\n\n\n```if:", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n# TODO:\n# TODO:\n# TODO:\n\n\n\n\n\n\n\n\n\n\n\nHere's a way to represent a list of rationals:\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n# rat_at(n)\n#\nHere", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**NOTE**\n\nThis method is not stable\n\n```if:python\n\n\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\n\n\n\n\nHere's a way to construct a list containing rationals:\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return [ n ]\n\n\n\n\n```if", "\n\n\n\nif:haskell\nHere's a way to build a list of rationals:\n\n\n```\n\n[ 1/1, 2/1, 3/2, 3/1 ]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n```if:h", "\n\n\n    rat_at(1)\n    rat_at(2)\n    rat_at(3)\n\n\n\n\n\n\n\n\n\n\n\treturn rat_at(n)\n\n\n\nHere's how to get the list of rationals:\n\n\n\n\n\n\n\n\n\n   \n\n\n\n   \n   \nHere's how to get", "\nUse Call-Based format\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n\n\n\n\n\n\n\nHere's how we do this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere's how to traverse the binary tree where", "\n\n\n\n\n\n\n\n\n\n\t\ndef rat_at(n):\n\t\nUse Call-Based format\nQUESTION:\n\n\t\n\n\n\n\nHere's a way to construct a list containing rationals:\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere's how you can construct a list containing every rational", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nHere's a way to construct a list containing rationals:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\nHere's the way", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\ndef rat_at(n):\n\t\nUse Call-Based format\nQUESTION:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\t\n2\n\n\n\n\n\n\n\n\n\n\n    1/1\n    2/1\n   \n\n\n\nHere's how"], "prompt": "\nQUESTION:\nHere's a way to construct a list containing every positive rational number:\n\nBuild a binary tree where each node is a rational and the root is `1/1`, with the following rules for creating the nodes below:\n* The value of the left-hand node below `a/b` is `a/a+b`\n* The value of the right-hand node below `a/b` is `a+b/b`\n\nSo the tree will look like this:\n\n```\n                       1/1\n                  /           \\ \n            1/2                  2/1\n           /    \\              /     \\\n       1/3        3/2        2/3       3/1\n      /   \\      /   \\      /   \\     /   \\\n   1/4    4/3  3/5   5/2  2/5   5/3  3/4   4/1\n \n ...\n```\n\nNow traverse the tree, breadth first, to get a list of rationals.\n\n```\n[ 1/1, 1/2, 2/1, 1/3, 3/2, 2/3, 3/1, 1/4, 4/3, 3/5, 5/2, .. ]\n```\n\nEvery positive rational will occur, in its reduced form, exactly once in the list, at a finite index.\n\n```if:haskell\nIn the kata, we will use tuples of type `(Integer, Integer)` to represent rationals, where `(a, b)` represents `a / b`\n```\n```if:javascript\nIn the kata, we will use tuples of type `[ Number, Number ]` to represent rationals, where `[a,b]` represents `a / b`\n```\n\nUsing this method you could create an infinite list of tuples:\n\nmatching the list described above:\n\nHowever, constructing the actual list is too slow for our purposes. Instead, study the tree above, and write two functions:\n\nFor example:\ndef rat_at(n):\n\t\nUse Call-Based format\nANSWER:\n"}}