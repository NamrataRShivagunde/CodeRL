{"289": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    maxSumTwoNoOverlap(self, A, L, M)\n\n\n\n   \n    V = maxSumTwoNoOverlap(A)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nA is a list of non-negative integers.\n\nUse Call-Based format\n\n\n\n    maxSumTwoNoOverlap(self, A, L, M)\n\n\n\n\n\n\n\n\n\nA is non-negative integers.\n\n\n\n\nGiven an array A of non", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\nmaxSumTwoNoOverlap(self, A, L, M) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA must be non-negative integers\n\n\n\n\n\nGiven an array A of non-negative integers", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nL + M >= A.length\nL + M >= A.length\nM + M >= A.length\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nA is a list of integers\nGiven an array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    maxSumTwoNoOverlap(self, A, L, M) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA[i] + A[j]\n\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nL + M <= A.length\n\n    def maxSumTwoNoOverlap(self, A, L, M):\n        return 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative integers", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   \n    maxSumTwoNoOverlap(self, A, L, M)\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative integers:\n\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n <A>\n\n\u00a0Note:\n\nL = 0\nM = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nA is a non-negative array.\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nL >= 1\nM >= 1\n\n\n\n\n\n\n\n    maxSumTwoNoOverlap(self, A, L, M)\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative integers, return the maximum sum of elements\n\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n    maxSumTwoNoOverlap(self, A, L, M)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    maxSumTwoNoOverlap(self, A, L, M)\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array A of non-negative integers", "\nUse Call-Based format\n\n\n    maxSumTwoNoOverlap(self, A, L, M)\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n    maxSumTwoNoOverlap(self, A, L, M)\n\n\n\n\n\n\n\n\n\n\n\n\n\nV = maxSumTwoNoOverlap(A)\n\n\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nA[i] = 1\nA[j] = 2\nA[i+1] = 3\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative integers:\n\n\n\nGiven an array A", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nA = [int, int]\n\n\n\n\n\nThe maxSumTwoNoOverlap() function is deprecated.\n\n\n\n\n\n\n\n\n\n, 3, 2, 3, 6, 7, 9, 8, 1\n\n\n\n\n\n\n\n\nGiven an array A of non-", "\nUse Call-Based format\n\n\n    maxSumTwoNoOverlap(self, A, L, M) -> int:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n    maxSumTwoNoOverlap(A, L, M)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative integers", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nL >= 1\nM >= 1\nL >= 1\nM >= 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nV = maxSumTwoNoOverlap(A)\n\n\n\nGiven an", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n    maxSumTwoNoOverlap(self, A, L, M):\n    return A[i]\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\u00a0\n\n\nGiven an array A of non-", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\nL + M >= A.length\n\n\n\n\n\nGiven an array A of non-negative integers, return the maximum sum of elements in A.\n\n\u00a0Note:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n L + M <= A.length\n\n\n    def maxSumTwo(self, A) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative", "\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n    def maxSumTwoNoOverlap(self, A, L, M):\n        return 0\n\n\n\n\n\n\n\n\n\n\n\nL = 3\nM = 2\n\n\n\nGiven an array A", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    return self.maxSumTwoNoOverlap(A, L, M)\n\n\n\n\n\n\n1,4,2,3,4,5,3,9\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of non-negative"], "prompt": "\nQUESTION:\nGiven an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths\u00a0L and M.\u00a0 (For clarification, the L-length subarray could occur before or after the M-length subarray.)\nFormally,\u00a0return the largest V for which\u00a0V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and either:\n\n0 <= i < i + L - 1 < j < j + M - 1 < A.length, or\n0 <= j < j + M - 1 < i < i + L - 1 < A.length.\n\n\u00a0\n\n\n\nExample 1:\nInput: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2\nOutput: 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n\n\nExample 2:\nInput: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2\nOutput: 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n\n\nExample 3:\nInput: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3\nOutput: 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.\n\n\u00a0\nNote:\n\nL >= 1\nM >= 1\nL + M <= A.length <= 1000\n0 <= A[i] <= 1000\nclass Solution:\n    def maxSumTwoNoOverlap(self, A: List[int], L: int, M: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}