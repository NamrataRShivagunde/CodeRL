{"3804": {"code": ["# Example\n# Example\n\n## Example\n#\n\n\n\n\n\n# Example\n\n# Task:\n\n# Example\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n\n# Task:\n\n\n\n## Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n\n## Examples:\n#", "\n\n#\n\n\n## Example:\n\n# Example:\n\n# Task:\n\n# Example:\n\n# Example:\n\n\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n\n# Task", "\n\n\n\n\n\n# Task:\n\n# Example:\n\n## Example:\n\n# Example:\n\n\n\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n# Task:\n\n# Task:\n\n\n\n\n\n# Task:\n\n#", "# Author:\n# Description:\n#\n\n\n\n\n\n# Example:\n#\n\n\n\n\n\n\n# Task:\n# Task:\n\n\n\n# Task:\n\n\n## Function:\n#\n\n\n\n\n\n\n\n___\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n# Task:\n\n## Example:\n", "\n\n\n\n\n\n# Test:\n\n# Task:\n\n\n\n\n\n# Task:\n\n\n\n\n\n## Example:\n# Task:\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n___\n\n## Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n## Example:", "# Task:\n\n# Example:\n# Task:\n# Example:\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n\n# Task:\n\n\n# Example:\n\n\n\n\n\n\n\n\n\n\n\n## Output:\n\n#\n\n\n\n##\n\n\n\n# Task:", "\n# Run the command!\n\n\n\n\n\n# Example:\n# Task:\n\n# Example:\n\n# Example:\n\n\n\n\n# Task:\n\n\n\n# Task:\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n## Example:\n\n", "\n\n\n\n\n# Example:\n#\n\n\n# Task:\n\n\n\n\n\n\n# Task:\n\n\n\n\n\n# Task:\n\n\n\n# Task:\n\n\n\n\n\n\n\n## Example:\n\n## Example 1:\n\n\n\n\n\n\n\n\n## Example 2:\n\n## Input range:\n\n\n\n\n\n#", "# Example\n\n\n\n\n#\n\n## Example\n# Task:\n\n\n\n\n\n\n# Task:\n\n# Example:\n\n# Task:\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n\n\n\n\n## Example:\n\n\n\n\n\n\n# Task:\n\n\n\n\n# Task:\n\n# Task:\n", "\n\n\n\n\n\n\n# Task:\n\nIf the first term is the first one, the second one is the second one\nmin_length_num(1, 10)\n\n___\n\n## Example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Example 1:\n\n\n\n\n\n##\n#", "\n\n\n\n\n\n\n# Task:\n\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n\n## Example:\n\n# Task:\n\n\n\n## Example:\n\n\n\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Input range:\n\n\n\n#", "\n\n\n\n\n\n# Successful coding!!\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n# Task:\n\nmin_length_num(num_dig, ord_max):\n\n\n\n\n\n\n# Task:\n", "\n# Description:\n\n\n\n\n\n\n## Description:\n\n# Task:\n\n\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n## Example:\n\n\n\n#\n#", "#\n# Author:\n#\n# Author:\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n# Task:\n\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n\n\n## Task:", "\n\n#\n\n\n\n\n\n\n# Task:\n\n# Example:\n\n# Example:\n\n# Task:\n\n\n\n\n\n\n# Task:\n\n\n## Example:\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n\n\n# Task:\n\n", "\n\n\n\n\n#\n#\n\n\n\n\n\n\n#\n\n\n# Task:\n\n#\n\n\n## Example:\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n\n___\n\n## Example:\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n## Output format\n\n\n# Task:", "\n\n\n# Example:\n\nmin_length_num(ord_max, ord_max)\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n## Example:\n\n## Input range:\n\n\n\n\n# Task", "\n\n\n\n\n# Example:\n\n## Example:\n\n# Example:\n\n\n\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n\n# Task:\n\n# Task:\n\n\n\n\n# Task:\n\n\n# Task:\n\n## Example:\n", "#\n# Description:\n#\n\n\n\n\n\n\n\n\n\n\n\n# Task:\n\n\n\n# Task:\n\n\n# Task:\n\n\n## Functions\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example:\n\n## Example code:\n# Task:\n\n\n\n\n## Example:\n\n## Example:\n\n\n\n#", "\n\n\n\n\n# Task:\n\n\n\n\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n\n\n# Task:\n\n\n\n\n\n\n\n\n\n\n             # no terms before the 11th one has 7 digits\n\n\n___\n\n\n# Task:\n\n\n# Task:\n\n\n\n\n# Task:\n\n```"], "prompt": "\nQUESTION:\n# Task:\n\nWe define the \"self reversed power sequence\" as one shown below:\n\n\n\nImplement a function that takes 2 arguments (`ord max` and `num dig`), and finds the smallest term of the sequence whose index is less than or equal to `ord max`, and has exactly `num dig` number of digits.\n\nIf there is a number with correct amount of digits, the result should be an array in the form:\n\n```python\n[True, smallest found term]\n[False, -1]\n```\n\n## Input range:\n\n```python\nord_max <= 1000\n```\n\n___\n\n## Examples:\n\n```python\nmin_length_num(5, 10) == [True, 10]   # 10th term has 5 digits\nmin_length_num(7, 11) == [False, -1]  # no terms before the 13th one have 7 digits\nmin_length_num(7, 14) == [True, 13]   # 13th term is the first one which has 7 digits\n```\n\nWhich you can see in the table below:\n\n```\nn-th Term    Term Value\n1              0\n2              1\n3              3\n4              8\n5              22\n6              65\n7              209\n8              732\n9              2780\n10             11377\n11             49863\n12             232768\n13             1151914\n14             6018785\n```\n\n___\n\nEnjoy it and happy coding!!\ndef min_length_num(num_dig, ord_max):\n\t\nUse Call-Based format\nANSWER:\n"}}