{"4587": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n',\n\t\n\n\n\n\n\nKata\n\t\n\t\n\nUse Call-Based format\n\n\n\n\n\nparse a string into a list of integers\n\n\n\n\n\n\n# Kata uses a function", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n',\n\t\n\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n`string`\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n1.", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n'', `',\n\n\n\n\n\n\n''\n\n\n\"\"\n\n\n\n\t\n\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n''\n\n\n\n\n\n\n\n''\n\n# Kata\n#", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n` or `\n\t\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nparse a string using a function that parses a string\n\n\n'\n\n\n\n#", "\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n` or\n\nUse Call-Based format\n\n',\n\n\n\n\n\n\n\n\n''', ''\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n'nX' represents a single integer.\n\n\n\n'\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n` or\n\n\n\n'',\n\t\n\n\n\n\n\n\n\n''\n''\n\n\t\n\n\n\n''\n\n\n\n\n\n\n\n\n\n1. The input string must be a string\n2.\n\n\n\n\n\n'\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n` or `, `.\n\n\n\n\n\n\n',\n\t\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nThe Kata Kata function is a Kata function\n\n\n\n'nX'\n\n\n\n", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n''\n` or\n\t\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n''''''\n\n\n\n\n''\n\n''''\n\nreturn [int(token", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n',\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis Kata is a function that parses a string which is composed from tokens of integers\n\n\n'\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n',\n\n\n\n\n',\n\t\n\n\n\t\nUse Call-Based format\n\nExample:\n\n\trange_parser(string)\n\n\n\n\t\n\n\n\n\n\n\n\n'nX'\n\n\n\n\n\n\n\nin Kata you are implement a function that", "\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n'0', '1', '2', '3', '4', '5', or '6'\n\n\n\n\n\n`, `',\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparse a string which is composed from tokens\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n',\n\n\t\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nUse Call-Based format\n\ndef range_parser(string):\n\t\nUse Call-Based format\n\n\n\n\n\n\n", "\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n',\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe range parser uses call-based format\n\n\n'nX' -> [nX]\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n''\n',\n\n\n\n\n\n\n\n'n1-n2' -> [1]\n\n'n3-n4' -> [5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Kata is", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n` or\n\n\n\n',\n\t\n\n\n\n\n\n\n\n'n1-n2' -> [1]\n\n'n4-n5' -> [5]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    This", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n'', `', `',\n\t\n\n\n\n\n\n1-10,5-10,5-25:2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1. The function returns a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n', `', '` or `, `.\n\nThe input string must be a call-based format\nINPUT:\n\nstring:\n\n\n\n\n',\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n    Kata uses a function", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n',\n\n\n\n',\n\t\n\n\n\n\n\n\t\nUse Call-Based format\n\t\n\n\t\n\n\nKata Kata\n\nUse Kata format\n\n\n\n\n\n'n1-n2' -> [1]\n\n\n\n'\n\n\n\n   ", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n`\n\n'1-10,5-25' -> [1, 10, 24]\n\n\n\n\n',\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKata:\n\nKata.range_parser(string):\n\n,\n\n", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n`\n\n\n\nUse Call-Based format\n\n',\n\t\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\nIn this Kata you are implement a function that parses a string.\n\n\n'X'\n\n\n"], "prompt": "\nQUESTION:\nIn this Kata you are to implement a function that parses a string which is composed from tokens of the form 'n1-n2,n3,n4-n5:n6' where 'nX' is a positive integer. Each token represent a different range:\n\n'n1-n2' represents the range n1 to n2 (inclusive in both ends).\n'n3' represents the single integer n3.\n'n4-n5:n6' represents the range n4 to n5 (inclusive in both ends) but only includes every other n6 integer.\n\nNotes:\n1. The input string doesn't not have to include all the token types.\n2. All integers are assumed to be positive.\n3. Tokens may be separated by `','`, `', '` or ` , `.\n\nSome examples:\n\n'1-10,14, 20-25:2' -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 20, 22, 24]\n\n'5-10' -> [5, 6, 7, 8, 9, 10]\n\n'2' -> [2]\n\nThe output should be a list of integers.\ndef range_parser(string):\n\t\nUse Call-Based format\nANSWER:\n"}}