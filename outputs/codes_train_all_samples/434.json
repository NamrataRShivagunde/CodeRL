{"434": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def longestSubarray(self, nums: List[int]) -> int:\n       \n\n\n\n   \n\n\n\n\n\n\n,\n\n\u00a0\n\nDelete one element from an array\n\n\n\nDelete one element from an array of binary array nums\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return len(nums)\n\n\u00a0\n\n\n\n   \n        pass\n\nUse Call-Based format\n\n\n\n\n,\n\n\nDelete only 1's from all of the subarray of the binary array.\n\n\n\nDelete only 1's from the binary array numsGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\u00a0\n\nGiven a binary array nums, you should delete one element from it.\n\n\n   :\n        pass\n\n\n\n\n\n\n\n\n\u00a0\n\nDelete one element from an array\n\n\n\n\n\nGiven a binary array nums, you should delete", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n        return self.longestSubarray(nums)\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n,\n\ndelete 1 from the array nums\n\n\n\n\nDelete 1 element from the binary array nums\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def __len__(self):\n        return self.length\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   :\n\n\n\n\n\n\n,\n\u00a0\n\nUse Call-Based format\n\n\n\n\nGiven a binary array nums, you", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n   \n    return self.longestSubarray(nums)\n\nUse Call-Based format\n\n\n   \n       ...\n\n\nUse Call-Based format\n\n\n\n,\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\nGiven a binary array nums, you should delete", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n        return self.longestSubarray(nums)\n\n\u00a0\n\nUse Method-Based format\n\n        pass\n\n\n\n\n\n,\n\n\nUse Call-Based format\n\n\n\n\nGiven a binary array nums, you should", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n   \n       ...\n        \nUse Call-Based format\n\n\n   \n       ...\n\nDelete only 1 element from an array.\n\n\n\n\n,, 1\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary array nums, you should", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    return self.longestSubarray(nums)\n\n\n\n   \n       ...\n\n\nDelete a number from a binary array nums\n\n\n,\n\ndelete a number from a binary array nums\n\n\n\n\n\nGiven a binary array nums, you should", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def list(self, nums: List[int]) -> List[int]\n\nUse Call-Based format\n\n\n\n\n   :\n                \n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a binary array nums, you", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n        return 0\n\n\u00a0\n\n\n\u00a0\n\nReturns the size of the longest subarray containing only 1's in the resulting array.\n\n\u00a0\n\n   :\n        \n\n\n\n\n\n,\n\n\n\nExample 1:\n\n\n\n\nGiven a binary array nums,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def length(self, nums: List[int]) -> int:\n        return len(nums)\n\nUse Call-Based format\n\nConstraints:\n\n\n\n\n   :        \n\n\n\n,\n\n\n\n\n\n\n\n\nGiven a binary array nums, you should delete", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    return self.longestSubarray(nums)\n\n\n\n   \n        pass\n\n\n\n\n\n,1,\n\n\nGiven a binary array nums, you should delete one element from it.\n\n\n\nGiven a binary", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n        return self.longestSubarray(nums)\n\n\n\n   \n       ...\n        \n\n\n\n\n\n,1,1,1,1,1]\n\u00a0\n\n\n\n\n\n\n\nGiven a binary array nums, you should delete", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n        return longestSubarray(self, nums)\n\n\n\nUse Call-Based format\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n,\n\n\nUse Call-Based format\nGiven a binary array nums,\n\n\n\nExample\nGiven a binary", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n   \n    return self.longestSubarray(nums)\n\n\n\n   \n       ...\n\n\n\n\n\nDelete all non-empty numbers in a binary array.\n\n\n\n\ndelete all non-empty numbers in a binary array\n\n\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n        return self.longestSubarray(nums)\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\n,\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven a binary array nums, you should delete", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n    def longestSubarray(self, nums: List[int]) -> int:\n   \n\n\n\n   \n       ...\n\n\n\n\n\n\n,\n\nDelete all elements in a binary array with value 1.\n\nGiven a binary array nums,\n\n\n\u00a0\n\nGiven a", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n    def longestSubarray(self, nums: List[int]) -> int:\n        \n\n\n\n\n   \n        pass\n        \n\n\n\n\n,\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven a binary array nums, you should", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n   :\n        pass\n        \nUse Call-Based format\n\nDelete a binary array with only one element from it.\n\n\n\n,\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a binary array nums,"], "prompt": "\nQUESTION:\nGiven a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's\u00a0in the resulting array.\nReturn 0 if there is no such subarray.\n\u00a0\nExample 1:\nInput: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.\nExample 2:\nInput: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].\nExample 3:\nInput: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element.\nExample 4:\nInput: nums = [1,1,0,0,1,1,1,0,1]\nOutput: 4\n\nExample 5:\nInput: nums = [0,0,0]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\nnums[i]\u00a0is either\u00a00\u00a0or\u00a01.\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}