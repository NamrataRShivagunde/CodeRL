{"222": {"code": ["\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nThe longest subsequence is found\n\nA\n\n\n\n\n\nA sequence X", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nA sequence X_1,..., X_n\n\n\n\n\n\n\nA sequence X_1,..., X_n\n\nA sequence X_1\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\nA sequence X_1\n\n\n\n\n\n\nA sequence X_", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nA sequence X_1,..., X_n\nX_n\n\n\n\n\n\n\n\n    lenLongestFibSubseq(self, A)\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence\n\n\n\n\n\n\n\nA sequence X_", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nA sequence X_1, X_2,..., X_n is fibonacci-like.\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nExample 3:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1,", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nA sequence X_1, X_2,..., X_n\n\n\n\n\n\n\n\n\u00a0Note:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\nA sequence X_1,", "\nUse Call-Based format\n\n\n    def lenLongestFibSubseq(self, A: List[int]) -> int:\n\n\n\nA sequence X_1,..., X_n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1,..., X_n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\nA sequence X_1,..., X_n is fibonacci-like.\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nA sequence X_1,..., X_n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1", "\nUse Call-Based format\n\n\nUse Call-Based format\nA sequence X_1,..., X_n\n\n\n\n\n\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\nA sequence X_1\n\n\n\n\nExample 3:\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nA sequence X_1,..., X_n is fibonacci-like\n\n\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nA sequence X_1, X_2,..., X_n is fibonacci-like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1\n\n\n\n\n\n\nA sequence X_", "\nUse Call-Based format\n\n\nUse Call-Based format\nA sequence X_1,..., X_n\u00a0is fibonacci-like\n\n\nA sequence X_1,..., X_n\n\n\n\n\n\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1, X_", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1,..., X_n\n\n\n\n\n\nA", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nA sequence X_1, X_2,..., X_n is fibonacci-like\n\n\n\n\n\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \nA sequence X_1,..., X_n\n\n\nA sequence X_1,..., X_n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1,..., X_n\n\n\n\n\nA", "\nUse Call-Based format\n\n\n    Call-Based format\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n\n\n\n\n\n\u00a0\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nA sequence X_1,..., X_n\n\n\n\n\n\nA sequence", "\nUse Call-Based format\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n\n\n\n\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1,", "\nUse Call-Based format\n\n\nUse Call-Based format\nA sequence X_1, X_2,..., X_n is fibonacci-like\n\n\n\n\nA sequence X_1,..., X_n is fibonacci-like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nA sequence X_1,..., X_n,..., X_n\n\n\n\n\n\u00a0\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\nA sequence X_1,..., X_n\n\n\n\n\n\nA sequence", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nA sequence X_1,..., X_n\u00a0is fibonacci-like\n\nA sequence X_1,..., X_n\u00a0is fibonacci-like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nA sequence X_1,..., X_n\nX_n\n\nExplanation:\n\n0 <= n <= 3\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nA sequence X_1,...\n\n\n\n\n\n\nA sequence"], "prompt": "\nQUESTION:\nA sequence X_1, X_2, ..., X_n\u00a0is fibonacci-like if:\n\nn >= 3\nX_i + X_{i+1} = X_{i+2}\u00a0for all\u00a0i + 2 <= n\n\nGiven a strictly increasing\u00a0array\u00a0A of positive integers forming a sequence, find the length of the longest fibonacci-like subsequence of A.\u00a0 If one does not exist, return 0.\n(Recall that a subsequence is derived from another sequence A by\u00a0deleting any number of\u00a0elements (including none)\u00a0from A, without changing the order of the remaining elements.\u00a0 For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].)\n\u00a0\n\n\nExample 1:\nInput: [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation:\nThe longest subsequence that is fibonacci-like: [1,2,3,5,8].\n\nExample 2:\nInput: [1,3,7,11,12,14,18]\nOutput: 3\nExplanation:\nThe longest subsequence that is fibonacci-like:\n[1,11,12], [3,11,14] or [7,11,18].\n\n\u00a0\nNote:\n\n3 <= A.length <= 1000\n1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9\n(The time limit has been reduced by 50% for submissions in Java, C, and C++.)\nclass Solution:\n    def lenLongestFibSubseq(self, A: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}