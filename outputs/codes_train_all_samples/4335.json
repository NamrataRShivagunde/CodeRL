{"4335": {"code": ["\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nAnagrams\n\n\n\t\n\n\n\n\nabba, abbb, abcc, abcd, abcd, abcc\n\nabcc, abcc, abcc\n\n\n\n\n\n\n\n\n\n\naabb, abcd", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\nabba & abbba\n\nabbbb & abbba\n\nabbbb & abbbb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.\n1.\n2.\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\nA\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nabba & abbba & abbba & abbba => true\n\n\n\n\n\n\n\n\n\n```\nabba & abbba =>", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nA word is anagram?\n\n\nUse Call-Based format\n\n\n\n\n\nA word is anagram\n\nQUESTION:\n\n\n\n\n\n\n```\n", "\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\nThe following is the example:\n\n\n\n\t\nA list of words are anagrams of two words of the same word.\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\nA list of words are an", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```\n\n\t\nUse Function-Based format\n\n\n\n\n\n\n\nAnagrams\n\n\n\n\n```\n\n\n\n\n\nA word is anagrams of two words.\n\n```\n\n\n```\n\n\n\n\n\n\n```", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nAnagrams:\n\n'abba' & 'abbba' => true\n'abbbb' & 'abbbb' => false\n```\n\n\n\n\n\n\n\n\n\n```\n\nif word[", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\nAnagrams of one word\n\nUse Call-Based format\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n    Anagrams:\n\n\t=>\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\nUse Call-Based format\n\nAnagrams\n\n\n\nabba & abbba == true\n\nabbbc & abbba == false\n\nabbbc & abbbb == false\n\n\n\n\n\n\n\n``", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nUse Call-Based format\n\n\t\nAnagrams are one of the two words in anagrams of a word.\n\n\n\n\n\nUse Call-Based format\nAnagrams are two words.\n\n\n\n\n\n```\n\t", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\nAnagrams\n\n\n\nUse Call-Based format\n\nA word is anagrams of one word\n\n\n\n\n\n\n\n\n\nAnagrams of the same word are anagrams of two words.\n\n\n\n\n\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nreturn anagrams(word, words)\n\n\n\t\n\n\n\n\nabba\nabbb\nabca\nabbb\nabbb\nabbb\n\n\n\n\n\n\n\n\n\nA word is anagram of one word\n\n\n\n\n\n\n\n```", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\nUse Call-Based format\n\n\t\n\n\nUse Call-Based format\n\n\n\nabba\nabbb\nabbb\nabbb\nabbb\nabbb\nabbb\n\n\n\n\n\n\n\n\n\n\n\n```\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nabba\n\nabbba\nabbbb\nabbbb\nabbbb\n\n\n\n\n\t\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n    A list of words with the same letters as the anagram", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe word \"abba\" is anagram of the word \"abcd\" and \"abcda\" are anagrams of the word \"abbba\".\n\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\nA word is anagram of two words\n\n\n\n\nA word is anagram of two words\n\nA word is anagram of two words\n\n\naabb\nabcd\nabbb\n\n\n\n\n\n```", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\t\n\n\n\n\n\naabb\nbcd\nbcd\nbcd\nbcd\nbcd\nbcd\nbcd\nbcd\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\nif", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\nUse Call-Based format\n\nA word is anagram?\n\n\n\nAnagrams:\n\n\n\n\n\nWhat is an anagram?\n\n```\n\n\n\n```\n\n\n\n    A word is anagram of any", "\n\n\n\n\nUse Call-Based format\n\n\n\n```\n\n\n```\n\n\n\nThis function is called from the original code\n\nUse Python-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnagrams:\n\n```\naabb\naabb\n\n```\n\n\n\n\n\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\nabba\nabbb\nabca\nabbbb\nabca\nabbbb\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```\n"], "prompt": "\nQUESTION:\nWhat is an anagram? Well, two words are anagrams of each other if they both contain the same letters. For example:\n\n```\n'abba' & 'baab' == true\n\n'abba' & 'bbaa' == true\n\n'abba' & 'abbba' == false\n\n'abba' & 'abca' == false\n```\n\nWrite a function that will find all the anagrams of a word from a list. You will be given two inputs a word and an array with words. You should return an array of all the anagrams or an empty array if there are none. For example:\n\nanagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']) => ['aabb', 'bbaa']\n\nanagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']) => ['carer', 'racer']\n\nanagrams('laser', ['lazing', 'lazy',  'lacer']) => []\ndef anagrams(word, words):\n\t\nUse Call-Based format\nANSWER:\n"}}