{"152": {"code": ["\nUse Call-Based format\n\n\n\n    m > 2\n\nUse Call-Based format\n\n\nn == m\n\nn == m\n\nn == m\n\n\u00a0\n\n\n\n\n\n\n\n\n    maxDistance(self, position, m)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 <= n <= 10^", "\n\n\n\n\nUse Call-Based format\n\nn == position.length\nm == position.length\nn == m.length\nm == position.length\n\nUse Call-Based format\n\nExample:\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\nm == 2\n\n\n\n\n\nn = 6\n", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\n\n    maxDistance(self, position, m) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn == m\n\n\n\n\n\nn = position.length\nm", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nn == position.length\nn == m == position.length\nm == position.length\n\nExplanation:\n\n\n\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\nn = m\n", "\n\n\n\n\nUse Call-Based format\n\n\nn == position.length\nn == m == position.length\nm == position.length\nn == m\n\nExplanation:\n\n\n   \n\n\n\n   \n    maxDistance = 3\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\nm = 2\n\n", "\nUse Call-Based format\n\n\n    maxDistance(self, position, m) -> int\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \n    def maxDistance(self, position, m):\n        return m\n\n\n\n\n\n\n\n\n\n\n\n2 <= n <= 10^5\n\n\n\n\n\n\nn = 2\n\n", "\n\n\n\n\n\n\nn == position.length\nn == m == position.length\nm == position.length\nn == m == position.length\n\nExplanation:\n\n\n\n\n\n\n   \n        maxDistance(self, position, m)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n    position = [1,", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    maxDistance(self, position, m) -> int\n\n\n\n\n\n\n    maxDistance(self, position, m) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 <= n <= 10^5\n\n\n\nn = m", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nRick is not call-based\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe maximum magnetic force of the balls is 4\n\n\n\n\n\n\nn =", "\n\n\n\nUse Call-Based format\n\n    maxDistance(self, position, m)\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n    minDistance(self, position, m)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn == position.length\n\n\n\n\nn == position", "\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nn == position.length\nn == m == position.length\n\u00a0\n\n\n\n\n\n\n\n   \n    maxDistance(self, position, m)\n\n\n\n\n\n\n\n\n\n\n\nA minimum magnetic force is required.\n\n\n\n\n\nn = m\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n    maxDistance(self, position, m) -> int\n\n\n\n\n\n\n\n\n\n\n2 <= m <= 10^5\n\n\n\n\n\n\n\n\n\n\n    In universe E", "\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nn == position.length\nm == position.length\n\u00a0\n\n\n\n\n\n\n\n\n\n    maxDistance(self, position, m) -> int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = position.length\n2 <=", "\nUse Call-Based format\n\n\n    minDistance(position, m)\n\nUse Call-Based format\n\n\n\n\n\n\n\nn == position.length\nn == m == position.length\n\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n    Inputs", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n    def minDistance(self, position, m):\n        return m\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    position = [1,", "\n\n\n\n\n\n\n1 <= n <= m <= n\n1 <= m <= m\n2 <= n <= m\n1 <= m <= n\n2 <= m <= n\n\nExplanation:\n\n\n   \n\n\n\n   \n       \n\n\n\n\n\n\n\n\n\n\n1 - 1\n\n2 - 1\n\n\n\n\n\n\n\nn = m\n", "\n\n\n\n\n\nUse Call-Based format\n\nn == m\n\nn == m\n\nn == m\n\nn == position.length\nn == m\nn == position.length\nm == position.length\n\nn == m\n\nExplanation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    In", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nn == position.length\nm == position.length\nn == m.length\n\u00a0\n\n\n   \n\n\n\n\n\n    maxDistance(self, position, m)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn == position.length\n2", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n    \n\n\n\n\n\n1 <= m <= 10^3\n\n2 <= m <= 10^9\n\n1 <= m <= 10^4\n\n2 <= m <= 10^9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    For n = 2", "\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nn == m == 3\n\n\n\n\nn = m\n"], "prompt": "\nQUESTION:\nIn universe Earth\u00a0C-137, Rick discovered a special form of magnetic force between\u00a0two balls if they are put in his new invented basket. Rick has\u00a0n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum\u00a0magnetic force\u00a0between any two balls is maximum.\nRick stated that\u00a0magnetic force between two different balls at positions x and y is |x - y|.\nGiven the integer array position\u00a0and the integer m. Return the required force.\n\u00a0\nExample 1:\n\nInput: position = [1,2,3,4,7], m = 3\nOutput: 3\nExplanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n\nExample 2:\nInput: position = [5,4,3,2,1,1000000000], m = 2\nOutput: 999999999\nExplanation: We can use baskets 1 and 1000000000.\n\n\u00a0\nConstraints:\n\nn == position.length\n2 <= n <= 10^5\n1 <= position[i] <= 10^9\nAll integers in position are distinct.\n2 <= m <= position.length\nclass Solution:\n    def maxDistance(self, position: List[int], m: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}