{"442": {"code": ["\nUse Call-Based format\n\n\n\n\nn == grid.length\nn == grid[0].length\nn == grid[0].length\nn == grid[0].length\nn == grid[0].length\nn == grid[0].length\n\n\u00a0\n\n\n\n\n\n\n\n                \n\n\n\n\n\n\n\n\n\n\n\nGiven a n", "\nUse Call-Based format\n\n\n\n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\nAnswering:\n\nn\u00a0x n\n\n\nn\n\n#\n\n#\n\n\n#\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\nn\u00a0x n\u00a0\n\n\n   \n\n\n\n        minSwaps(self, grid)\n       \n\n       \n        pass\n\nReturns the minimum number of swaps required to make a grid valid.\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\u00a0\n\nThe minimum number of sw", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n          \n\n\nThe grid must be a list of n\u00a0x n\u00a0int\n\n          \n    pass\n        \n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n\ngrid[i][j] is 1 or 2\n\n\n\n\nThe first cell of", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        return 0\n\n\u00a0\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nn == n\n\nn == n\n\n\n\nGiven an n\u00a0", "\nUse Call-Based format\n\n\n\n\n\n\n\n    minSwaps(self, grid)\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n          \n       ...\n        \n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\n\n\n\n\nOutput: 0\n\n\u00a0\n\n\nGiven a n\u00a0x n", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nn == n\u00a0\nn == n\u00a0\nn == n\u00a0\nn == n\u00a0\nn == n\u00a0\nn == n\u00a0\nn == n\u00a0\nn == n\nn == n\nn == n\u00a0\n\n\n\n\n\n\n\n                \n\n\n\n\n\n\n\n\n\nThe grid is valid.\n\nOutput: 0\n\n\n\nGiven a grid,\n\ngiven a\nGiven a grid,\n\ngrid = [[", "\nUse Call-Based format\n\n\n    minSwaps(self, grid):\n        return 0\n\n\n\n\n\n          \n        return 0\n\n\n\n   \n    pass\n\nReturns the minimum number of swaps needed to make a grid valid.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe grid is valid if all rows of a grid are", "\n\n\n\n\nUse Call-Based format\n\nn > 1000\nn > 200\nn < 200\nn > 200\nn > 200\nn > 1000\nn > 100\nn == 100\nn > 200\nn == 100\nn > 200\nn == 100\nn == 100\nn == 100\nn == 100\n\n\n\n\n\n\n\n\n                \n\n\n\n\n\n\n\nThe grid can be valid.\n\n\n\n\n\n\nGiven an n\u00a0x n binary grid,\n\n\n\n\n\n\nInput:\n\ngrid\n\n\n\n\n\n\n\ngrid\n\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n        return self.minSwaps(grid)\n\n\nn\n\n\u00a0\n\n    pass\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\nOutput: 0\n\n\u00a0\n\n\nThe grid can be valid if all", "\n\n\n\n\n\n\n\n\n    minSwaps(self, grid) -> int\n\n\u00a0\n\n\n\n\nUse Call-Based format\n\n        return 1\n\n\n\n\n          \n    pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nn == n\u00a0x n\n\n\n\n\nGiven an n\ufffd", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def minRows(self, grid):\n        return len(grid)\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n        pass\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\nThe grid is valid\n\n\n\n\n\nFor each row, a grid can be valid", "\nUse Call-Based format\n\n\n\n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn\n\n\n\n\n\n\n                \n\n\n\n\n\n\n\n\n\nOutput: -1\n", "\n\n\n\nUse Call-Based format\n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\n\n\u00a0\n\n\n   :\n\n\n\n                \n\n\n\n\n\n\n\n\n\n\n\nIf the main diagonal", "\nUse Call-Based format\n\n\n\n\n\n\n\n          \n\n\n\n    minSwaps(self, grid: List[List[int]])\n        \nUse Call-Based format\n       \n       \n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven a n\u00a0x n\u00a0binary grid:\n\nGiven a", "\nUse Call-Based format\n\n\n\n\n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\nn == n\n\n\u00a0\n\n\n   \n\n\n\n           \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a n\u00a0", "\nUse Call-Based format\n\n\n\n\n\n\n\n    def minSwaps(self, grid: List[int]) -> int:\n        return 1\n\n\u00a0\n\nFunctions:\n\n\n\n\n          \n    pass\n\n\n\n\n\n\n\n\n\n\n\nThe grid is valid\n\u00a0\n\n\n\n\nn\u00a0x n\u00a0binary", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n    grid[i][j] is not 0 or 1\n\n          \n        return 0\n\n\n\n    minSwaps(self, grid)\n\n           \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\nGiven a n\u00a0x n\u00a0binary grid,", "\n\n\n\n\nUse Call-Based format\n\n\nn\u00a0== n\nn\u00a0== n\u00a0\nn\u00a0== n\u00a0\nn\u00a0 == n\u00a0\nn == n\u00a0\nn\u00a0 == n\u00a0\nn == n\u00a0\nn == n\nn\u00a0\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n    minSwaps(self, grid)\n\n\u00a0\n\n\nReturns:\n\nn\n\n\n\n\n    minSwaps(self, grid)\n\n\u00a0\n\n\n                        \n\n\n\n\n\n\n\n\nn == n\nn == n\n\n\u00a0\n\nGiven an n"], "prompt": "\nQUESTION:\nGiven an n\u00a0x n\u00a0binary grid, in one step you can choose two adjacent rows of the grid and swap them.\nA grid is said to be valid if all the cells above the main diagonal are zeros.\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\nThe main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).\n\u00a0\nExample 1:\n\nInput: grid = [[0,0,1],[1,1,0],[1,0,0]]\nOutput: 3\n\nExample 2:\n\nInput: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\nOutput: -1\nExplanation: All rows are similar, swaps have no effect on the grid.\n\nExample 3:\n\nInput: grid = [[1,0,0],[1,1,0],[1,1,1]]\nOutput: 0\n\n\u00a0\nConstraints:\n\nn == grid.length\nn == grid[i].length\n1 <= n\u00a0<= 200\ngrid[i][j] is 0 or 1\nclass Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}