{"4756": {"code": ["\n\n\nRe.findall()\n\nThe expression re.findall() returns a list of MatchObject instances\n\nqwrtypsdfghjklzxcvbnm\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n\n\n\n=====Function D", "\n\n\n\n\n\nfindall(r'\\w',re.findall,re.findall,re.finditer,re.findall)\n\nfinditer()\n\n\n\n\nfindall()\n\n\n\n\n\n\n\n\n\nfindall()\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n=====", "\n\n\nre.findall()\n\nre.finditer()\n\nre.finditer()\n\nre.findall()\n\n\n\n\nQUESTION:\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n\n\n\n=====Function", "\n\n\n\n\n\nfindall()\n\n=====Function Descriptions=====\nre.findall()\nre.findall(r'\\w')\n# Use Standard Input format\n\n\n\n=====Function Descriptions=====\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n====", "\n\nfindall()\n\n=====Function Descriptions=====\nre.finditer()\nUse Standard Input format\n\n\nQUESTION:\nfindall()\n\nfinditer()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n=====Function Descriptions=====\nre", "\n\n\nResearching a string and using the following function:\nre.findall()\n\nReturns:\nMatchObject instances\n\n\n\nQUESTION:\nfindall()\n\n\n\n\n=====Function Descriptions=====\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n=====", "\n=====Function Description=====\nre.findall()\n\nUse Standard Input format\n\n\n\n\nQUESTION:\nfindall()\n\nEnter your code:\nre.findall()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Description=====\nre.findall()\n\n\n=====Function Description=====\n=====", "\n\n\n\n\n\nfindall()\n\n=====Function Descriptions=====\nre.findall()\nre.findall()\n\n=====Constraints=====\nre.finditer()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n=====Function Descriptions", "\n\nfindall()\n\nre.finditer()\n\nre.finditer()\n\nAnswer:\n\n\n\n\nfinditer()\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n=====Problem Statement====", "\n\n\n\n\n\nfindall(r'\\w')\n\n=====Function Descriptions=====\nre.findall(r'\\w')\n\n\n\n\n\nfindall()\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n\n\nfindall()\n\n\n\n=====Function Descriptions=====", "\n\n\n\n\n\nfindall()\n\n=====Function Descriptions=====\nre.findall()\nre.finditer()\n\n=====Constraints=====\nre.finditer()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Problem Statement=====\nre.findall()\n\n\n\n\n=====Function Descriptions====", "\n\n\n\n\n\nfindall()\n\n=====Function Descriptions=====\nre.finditer()\nre.findall()\n\n=====Constraints=====\nre.finditer()\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\n\n\n\n\n\n\n\n\n\n\n=====Output Format=====\n\n\n\n=====Function Descriptions", "\n\n\nre.findall()\n\nre.finditer()\n\nre.finditer()\n\nre.finditer()\n\nAnswer:\n\n\n\n\n\n\n\n\nfindall()\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=========", "\n\n\n\n\n\nfindall()\n\n=====Function Descriptions=====\nre.findall()\nre.findall(r'\\w')\n\nUse Standard Input format\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n\nfindall()\n\n\n\n=====Function Descriptions", "\n\nfindall()\n\n=====Function Descriptions=====\nre.findall()\n\nUse Standard Input format\n\n\nQUESTION:\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n=====", "\n\n\n\n\n\nfindall()\n\n[AEIOU]\n\n\nAEIOU\n\nfindall()\n\nfindall()\n\n\n\nfindall()\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n\n\n\nfindall()\n\n\n\n=====Function Descriptions====", "\n\nfindall()\n\nUse Standard Output format\nANSWER:\nA4,9,1,3\n\n\nfindall()\n\n=====Function Descriptions=====\nre.finditer()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n=====Function Descriptions====", "\n\nfindall()\n\nAnother function to find a substring of a string.\n\nWhat you have to do?\n\n\nQUESTION:\nfindall()\n\nfinditer()\n\n\n\n\nfinditer()\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n=====Function D", "\n\nfindall()\n\nT.e. A,B,C,D,G,G,D,D,D,D,G,G\n\n\n:\nfindall()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n=====Function Descriptions=====\n", "\n\n\nre.findall()\n\nre.finditer()\n\nprint matches\n\nprint matches\n\nprint matches\n\nprint matches\n\nprint vowels\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions=====\nre.findall()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n=====Function Descriptions====="], "prompt": "\nQUESTION:\n=====Function Descriptions=====\nre.findall()\n\nThe expression re.findall() returns all the non-overlapping matches of patterns in a string as a list of strings.\nCode\n\n>>> import re\n>>> re.findall(r'\\w','http://www.hackerrank.com/')\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']\n\nre.finditer()\n\nThe expression re.finditer() returns an iterator yielding MatchObject instances over all non-overlapping matches for the re pattern in the string.\nCode\n\n>>> import re\n>>> re.finditer(r'\\w','http://www.hackerrank.com/')\n<callable-iterator object at 0x0266C790>\n>>> map(lambda x: x.group(),re.finditer(r'\\w','http://www.hackerrank.com/'))\n['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']\n\n=====Problem Statement=====\nYou are given a string S. It consists of alphanumeric characters, spaces and symbols(+,-).\nYour task is to find all the substrings of S that contains 2 or more vowels.\nAlso, these substrings must lie in between 2 consonants and should contain vowels only.\n\nNote :\nVowels are defined as: AEIOU and aeiou.\nConsonants are defined as: QWRTYPSDFGHJKLZXCVBNM and qwrtypsdfghjklzxcvbnm.\n\n=====Input Format=====\nA single line of input containing string S.\n\n=====Constraints=====\n0<len(S)<100\n\n=====Output Format=====\nPrint the matched substrings in their order of occurrence on separate lines.\nIf no match is found, print -1.\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nUse Standard Input format\nANSWER:\n"}}