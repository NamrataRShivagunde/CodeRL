{"2441": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based formatGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\n    s = \"b\"\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n:\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\nGiven a string s", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\ns = \"abc\"\nGiven a string s of lower and upper case English letters.\n\n\n\nGiven a", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\nGiven a string s", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a string s of lower and", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\ns contains only lowercase letters and upper case letters.\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n    def makeBad(self, s):\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s:\n\n\nGiven a string s of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper", "\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\n    makeGood(self, s: str) -> str\n\nGiven a string s:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s:\n\n\n\n\n\n\nGiven a string s of", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\ns contains only lowercase letters.\n\n\n\nGiven a string s of lower and upper case English letters.\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and", "\nUse Call-Based format\n\n\nUse Call-Based formatGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven a string s of lower and upper", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\n\nGiven a string s:\n\n\n   :\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s:\n\n\n\n\nGiven a string s of lower and", "\nUse Call-Based format\n\n\nUse Call-Based formatGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\nGiven a string s of", "\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n    pass\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper", "\nUse Call-Based format\n\n\n\n\ns contains only lowercase letters and upper case letters.\n\n\n\n\n    def makeBad(self, s: str):\n        return s\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\nGiven a string s of lower", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven a string s of lower and upper case English", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\u00a0\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper case", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\u00a0\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\nGiven a string", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\nGiven a string", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven a string s of lower and upper case English letters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns = \"abc\"\n\n\u00a0\n\n\n\n\nGiven a string s of lower and"], "prompt": "\nQUESTION:\nGiven a string s of lower and upper case English letters.\nA good string is a string which doesn't have\u00a0two adjacent characters s[i] and s[i + 1] where:\n\n0 <= i <= s.length - 2\ns[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case\u00a0or vice-versa.\n\nTo make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.\nReturn the string after making it good. The answer is guaranteed to be unique under the given constraints.\nNotice that an empty string is also good.\n\u00a0\nExample 1:\nInput: s = \"leEeetcode\"\nOutput: \"leetcode\"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".\n\nExample 2:\nInput: s = \"abBAcC\"\nOutput: \"\"\nExplanation: We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"\n\nExample 3:\nInput: s = \"s\"\nOutput: \"s\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 100\ns contains only lower and upper case English letters.\nclass Solution:\n    def makeGood(self, s: str) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}