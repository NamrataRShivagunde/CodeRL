{"2872": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nINPUT:\n\t\nUse Call-Based format\n\nINPUT:\n```n``.\n\n\nINPUT:\n\n\n:\n\n\n(n):\n:`\n`\n:\n\n\n\n\n:\n\n\n\n\nINPUT:\n```int n``", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nINPUT:\n\t\nUse Call-Based format\n\nINPUT:\n```n```\n\nINPUT:\n```n```\n\n\n\n:\n``(n)::\n:``\n:\n\n:\n:\n`\n\n\nINPUT:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n`coin(n)```\n\nUse Call-Based format\nINPUT:\n```coin(n)```\n\nINPUT:\n```n```\n\n\n\n\n:\n``\n():\n:``\n:\n`\n\n:\n\n`\n\n\n\nINPUT", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n:\n\nUse Call-Based format\nINPUT:\n```n```\n\nUse Call-Based format\nINPUT:\n```n```\n\nINPUT:\n\n\n\n:\n``\n(n)::\n:``\n:\n\n\n\n:\n`\n\n\nINPUT", "\n\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nINPUT:\n```coin(n)```\n\nINPUT:\n```n`\n\n\n\n\n:\n``(n)::\n:``\n:\n\n\n\n\n\n\n\n\nINPUT:\n```", "\nUse Call-Based format\nUse Call-Based format\n\n\n:\n\n\n\n\n\n\n   \n\t\nUse Call-Based format\n\nINPUT:\n```n``.\n\nINPUT:\n```n```\n\nINPUT:\n(n)```\n:`\n`\n:\n\n\n\n:\n\n`\n\n\tn = 2\n\n", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse C-Based format\n\nINPUT:\n```char*```\n\nUse Call-Based format\n\n\n\n\n\n\nNO DATA:\n\n\n\n:\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n```char*```\n\nWhen finished sort all", "\nUse Call-Based format\n\n\n\n\n\n\ncoin(n):\n\nUse Call-Based format\nINPUT:\n```n```\n\nUse Call-Based format\nINPUT:\n```n```\n\nINPUT:\n```n```\n\n`\n\n``(n):\n:`\n\n:\n\n\n\n\n`\n\n\nINPUT", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nINPUT:\n\nUse Call-Based format\n:\n\nUse Call-Based format\nINPUT:\n```int```\n\nINPUT:\n\nINPUT:\n\n\n:\n``(n):\n:``\n:\n\n\n\n:\n\n`\n\n\n\nINPUT:\n``", "\nUse Call-Based format\nUse Call-Based format\nINPUT:\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\t\nUse Call-Based format\nINPUT:\n```n```\n\n\n\n\n:\n``(n)::\n:``\n:\n\n\n\n:\n\n\n\n\n\n\n\n```k", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nINPUT:\n```n```\n\nUse Call-Based format\nINPUT:\n```n```\n\n\n\n:\n\n``\n:\n:\n``\n:\n\n\n\n:\n\n\n\n\n\n# :\n# n =", "\nUse Call-Based format\nUse Call-Based format\nINPUT:\n\t\nUse Call-Based format\n\n\n:\n\t\nUse Call-Based format\nINPUT:\n```n```\n\nINPUT:\n```n```\n\n\n\n:\n``\n(n)::\n:``\n:\n\n:\n:\n`\n\n\n\nINPUT", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\nINPUT:\n```char*```\n\n\n\n\n:\n`\n`\n\n\n:\n\n\n:\n\n\n\n\n:\n\n\n\n\n\nINPUT:\n```int n```\n", "\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\nn = 0\n\nThe number of times you want to test a coin\nINPUT:\n```int n```\n\nINPUT:\n```int n```\n\n\n(n):\n:``\n:\n\n\n\n\n:\n\n\n\n\n\n```char*```\n", "\n\n\n\n\nUse Call-Based format\n\nINPUT:\n\nUse Call-Based format\n\nUse Call-Based format\nINPUT:\n\t\nUse Call-Based format\n\nUse Call-Based format\nINPUT:\n\nINPUT:\n\n\n\n\n``\n):\n:``\n:\n\n\n\n\n\n\n\n\nINPUT:\n```int n``", "\nUse Call-Based format\nUse Call-Based format\nINPUT:\n\t\nUse Call-Based format\n\n\n:\n\nINPUT:\n```n```\n\nUse Call-Based format\nINPUT:\n```n```\n\n\n\n\n:\n``(n)::\n:``\n:\n\n\n\n\n`\n\n\n\nINPUT:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n`coin(n)```\n\nINPUT:\n```n < n < 18```\n\nUse Call-Based format\nINPUT:\n```n = 0```\n\n\n\n:\n`(n)::\n:``\n:\n\n:\n:\n`\n\nINPUT:", "\n\nUse Call-Based format\n\n\n\n:\n\nUse Call-Based format\nINPUT:\n```coin(n)```\n\nUse Call-Based format\nINPUT:\n```coin(n)```\n\nINPUT:\n```coin(n)```\n\n\n\n:\n``(n):\n:``\n:``\n", "\nUse Call-Based format\nUse Call-Based format\nINPUT:\n\nUse Call-Based format\n\n\n:\n\nUse Call-Based format\nINPUT:\n```n``.\n\nUse Call-Based format\nINPUT:\n```n```\n`\n\n:``()::\n:`\n\n:\n\n\n\n\n`\n\n\n\nINPUT:", "\nUse Call-Based format\nUse Call-Based format\nINPUT:\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n`\nINPUT:\n```n```\n\nINPUT:\n```n```\n\n\n\n:\n``():\n:``\n:\n\n\n\n:\n\n\n\n\n\n```n = 5"], "prompt": "\nQUESTION:\nIn this kata you will be given an **integer n**, which is the number of times that is thown a coin. You will have to return an array of string for all the possibilities (heads[H] and tails[T]). Examples:\n```coin(1) should return {\"H\", \"T\"}```\n```coin(2) should return {\"HH\", \"HT\", \"TH\", \"TT\"}```\n```coin(3) should return {\"HHH\", \"HHT\", \"HTH\", \"HTT\", \"THH\", \"THT\", \"TTH\", \"TTT\"}```\nWhen finished sort them alphabetically.\n\nIn C and C++ just return a ```char*``` with all elements separated by```,``` (without space):\n```coin(2) should return \"HH,HT,TH,TT\"```\nINPUT:\n```0 < n < 18```\nCareful with performance!! You'll have to pass 3 basic test (n = 1, n = 2, n = 3), many medium tests (3 < n <= 10) and many large tests (10 < n < 18)\ndef coin(n):\n\t\nUse Call-Based format\nANSWER:\n"}}