{"1800": {"code": ["\n\n\n\n\n\n\n\n''\n\n\n\n\n\n\n\n### The Fair Example\n\n**Notes**\n\n* The number of primes below `1000` is represented by a number of primes.\n\n\n\n\n\n\n\n\n\n\n\n\n ==> 119\n\n> 119\n\n\n\n\n\n\n\n\n\n\n\n\n### The", "\n\n\n\n\npython\n[1, 2, 3]\n1\n\n\npython\n[1, 2, 3]\n1\n\n\n\n''\n\n## Your Output\n\n> 331 ==> 631 ==> 631\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n''',\n''\n\n        # The", "\n'''\n\n\n\n''\n\n\n```python\n[3, 3, 1] ==> [3, 3, 2] ==> [3, 3]\n```\n\n\n\n\n\n\n\n\n\n''\n\n\n\n\n\n\n> 941\n\n\n\n\n\n## The Primes\n\n> 3\n'''\n\n\n    # Here we define", "\n\n\n\n\n\npython\n\npermutational_primes(1000, 3)\n\n\n\n\n\n\n\n\n\n```python\n\n\n\n\n''\n\n## Primes\n\n# See above example\n\n149 ==> 419 ==> 941 ==> 741\n\n\n\n\n\n\n\n\n\n\n\n# Here we go from the above example", "\n\n\npython\n[3, 9, 4, 6, 7, 8]\n\n**Notes**\n\nThe number of primes below `1000`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 0\n\n```\n\n\n\n\n\n'''\n\n\n\n    ######\n", "```\n\n\n\n**Notes**\n\nThe number of primes above the given limit is not represented by the smallest prime permutation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n''\n\n\n\n\n[0, 0]\n[0, 0]\n\n**Notes**\n\n\n\n\n\n\n\n\n41\n'''\n#", "\n\n\n\n\n'''\n\n\n\n```python\n[0, 1, 2, 3, 4, 3, 5, 3, 4, 5, 7]\n```\n''\n\n'''\n'''\n.\n\n''\n\n\n\n\n''')\n\n\n> 119 ==> 119\n\n\n\n\n\n\n\n\n\n\n\n# Above the", "\n\n\n\n\n\n\n''\n\n## The Function\n\n## The Primes\n\n**Notes**\n\npython\n[1, 2, 3] ==> 3\n\n\n\n\n\n:\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n> 341\n\n```\n\n>\n\n\n\n\n\n#\n# List of", "```\n\n```\n\nThis task is only used in the test.\n\n**Notes**`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 341 ==> 119 ==> 239 ==> 357\n\n\n\n\n\n\n\n\n\n> 361\n\n\n\n\n\n\n\n11 = (419, 491, 941", "```\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n**Notes**\n\nThe number of primes below `1000` is represented by three primes.\n\nThe number of primes above `1000` has three permutations:\n\n\n\n\n\n''''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Primes\n", "```\n\n\n\n\n\n### Example\n\n**Note**\n\n```\n\n\n\n\n\n'\n\n## Primes\n\n> 931 ==> 369 ==> 711\n\n\n\n'\n\n```\n\n\n''\n\n> 941 ==> 741\n\n\n\n\n\n## Example\n\n\n39 ==> 419 ==> 9", "```\n\n\n```\n\nThe function returns a list of the smallest and largest permutations of the given number:\n\n1, 2, 3, 4, 5, 6\n\n\n\n''\n\n\n\n\n\n,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn_max = int(n_", "```\n\n\n\n\n\n\n\n\n\n''\n\n\n''''\n\n## An example\n\n## The primes\n\n''\n\n419 ==> 119 ==> 319 ==> 941\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 941\n\n\n\n\n\n\n\n\n\n\n\n\n## An example", "```\n\n```\n\npython\n\n'''\n\n## The Function\n\nThe function is created and returned.\n\n## Example\n\n\n\n\n\n\n9\n\n\n```\n\n\n\n\n\n\n\n\n> 319 ==> 357 ==> 357\n\n\n\n## The Functions\n\n>\n\n> 0\n\n\n\n\n\n# The", "```\n\n\n\n\n\n''\n\n\n''\n\n\n```python\n[149, 419, 441] ==> [0, 0]```\n\n\n\n\n\n\n> 419 ==> 359\n\n\n\n\n\n\n\n\n\n\n\n\n> 941\n\n\n\n\n\n\n\n\n\n# Description\n## Example 1\n", "```\n\n```\n\nThis example shows how the original number is represented by the set of primes.\n\n**Notes**`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 419 ==> 941\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 337\n\n\n\n\n\n\n\n\n\n\n    # The following code", "```\n\n```\n\npython\n[149, 419, 941]\n```\n\n\n\n'''\n\n### Example\n\nThe task is created by the following example:\n> 791\n\n\n\n''\n'''\n\n\n9\n\n\n\n\n\n\n> 521\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n## Example", "```\n\n```\n\nThis task is only for the following examples:\n\n**Notes**\n\nThe number of primes below `1000`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n''\n\n\n> 511\n\n```\n\n'''\n\n\n\n\n\n\n## Primes above `", "```\n\n\n```\n\nThe function returns a list of the number of permutational primes.\n\n**Notes**\n\n\n\n\n\n\n\n\n\n\n\n\n.\n.\n\n ==> 941 ==> 0\n\n\n\n\n.\n\n\n\n\n\n\n```\n\n\n\n, 2,\n\n\n## Other Examples\n\n41", "\n\n\n\n\n\n''\n''\n## Functions\n\n## Basic\n\n### Primes\n\n### Primes\n\n### Primes\n\n### Primes\n\n## Primes\n\n\n\n\n> 118\n\n''\n> 077\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# The following code is from:\n"], "prompt": "\nQUESTION:\nThe prime `149` has 3 permutations which are also primes: `419`, `491` and `941`.\n\nThere are 3 primes below `1000` with three prime permutations:\n```python\n149 ==> 419 ==> 491 ==> 941\n179 ==> 197 ==> 719 ==> 971\n379 ==> 397 ==> 739 ==> 937\n```\n\nBut there are 9 primes below `1000` with two prime permutations:\n```python\n113 ==> 131 ==> 311\n137 ==> 173 ==> 317\n157 ==> 571 ==> 751\n163 ==> 613 ==> 631\n167 ==> 617 ==> 761\n199 ==> 919 ==> 991\n337 ==> 373 ==> 733\n359 ==> 593 ==> 953\n389 ==> 839 ==> 983\n```\n\nFinally, we can find 34 primes below `1000` with only one prime permutation: \n```python\n[13, 17, 37, 79, 107, 127, 139, 181, 191, 239, 241, 251, 277, 281, 283, 313, 347, 349, 367, 457, 461, 463, 467, 479, 563, 569, 577, 587, 619, 683, 709, 769, 787, 797]\n```\n\nEach set of permuted primes are represented by its smallest value, for example the set `149, 419, 491, 941` is represented by `149`, and the set has 3 permutations.\n\n**Notes**\n* the original number (`149` in the above example) is **not** counted as a permutation;\n* permutations with leading zeros are **not valid**\n\n## Your Task\n\nYour task is to create a function that takes two arguments:\n* an upper limit (`n_max`) and\n* the number of prime permutations (`k_perms`) that the primes should generate **below** `n_max`\n\nThe function should return the following three values as a list:\n* the number of permutational primes below the given limit,\n* the smallest prime such prime,\n* and the largest such prime\n\nIf no eligible primes were found below the limit, the output should be `[0, 0, 0]`\n\n## Examples\n\nLet's see how it would be with the previous cases:\n```python\npermutational_primes(1000, 3) ==> [3, 149, 379]\n''' 3 primes with 3 permutations below 1000, smallest: 149, largest: 379 '''\n\npermutational_primes(1000, 2) ==> [9, 113, 389]\n''' 9 primes with 2 permutations below 1000, smallest: 113, largest: 389 '''\n\npermutational_primes(1000, 1) ==> [34, 13, 797]\n''' 34 primes with 1 permutation below 1000, smallest: 13, largest: 797 '''\n```\n\nHappy coding!!\ndef find_prime_kPerm(n, k):\n\t\nUse Call-Based format\nANSWER:\n"}}