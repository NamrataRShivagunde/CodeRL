{"331": {"code": ["\nUse Call-Based formatUse Call-Based format\n\nUse Call-Based formatUse Call-Based format\nUse Call-Based format\n\n\n       pass\n        \n\n\n\n\u00a0\nUse Call-Based format\n\n\nExample 3:\n   \n\nUse Python format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\nGiven two numbers, hour and minutes", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nConstraints:\n\n0 <= hour <= 12\n0 <= minutes <= 59\n        \n\n\n:                \n\n                \n\n\nUse Call-Based format\n\n\n\nGiven two numbers", "\nUse Call-Based format\n\n\n    Return:\n        angleClock(self, hour, minutes)\n\nUse Call-Based format\n\n\n\n\n       \n\n\n\n\n\u00a0\n\u00a0\n\n        pass\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\nGiven two numbers, hour and", "\nUse Call-Based format\n\n\n    angleClock(self, hour, minutes):\n        return 0.0\n\nUse Call-Based format\nhour <= hour <= 12\nminutes <= minutes <= 59\n\n\n\n      ...\n\n\n\n   :\nUse Call-Based format        \n\n\n\n\n\n\n\n\n\n\n\nGiven a two numbers, hour and minutes.", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\nReturns:\n\nfloat:\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven two numbers, hour and minutes. Return", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nMinute is not a valid time.\n\n\n   \n\n\n\n\n\u00a0\n\n    \"\"\"\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven two numbers, hour and minutes.\n\n\nGiven two numbers", "\nUse Call-Based formatUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n        return 0\n        \n\u00a0\n\n\nUse Call-Based format\n\n\n):\n    \"\"\"\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nGiven two numbers, hour and minutes.", "\nUse Call-Based format\n\n\n\n\n0 <= hour <= 12\n0 <= minutes <= 59\n0 <= minutes <= 59\n\n\n   \n\nUse Call-Based format\n\n\n\u00a0\nUse Call-Based format\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven two numbers, hour and minutes.\n\n\nGiven two", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\u00a0\n\n\u00a0\n\n\n    return angleClock(hour, minutes)\n                \n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven two numbers, hour", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\u00a0\n\u00a0\n    pass\nUse Call-Based format\n\n\n\n\n\n\n\nSecond number is a number.\nSecond number is a number.\n\n\n\nGiven two numbers,", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n       pass\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two numbers, hour and minutes", "\nUse Call-Based format\n\n\n    angleClock(self, hour: int, minutes: int):\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\u00a0\n\n   ...\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven two numbers, hour and minutes", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nMinute hand\n\n\n   \n\n\n\n\n\u00a0\nUse Call-Based format\n\nclass Call:\n    def angleClock(self, hour: int, minutes: int):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\nGiven two numbers, hour and minutes.", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nHour, minutes\nMinutes must be a positive number.\n\n\n   \n\n\n\n\n\u00a0\nUse Call-Based format\n\nInput: hour, minutes:\n        \n\n    \"\"\"\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven two numbers, hour and minutes. Return", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\u00a0\n\n\n   ...\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\nGiven two numbers, hour and minutes.\n\n\u00a0\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n       \n\nUse Call-Based format\n\nUse Python-Based format\n\n\n\u00a0\n\nReturns:\n\n0 <= hour <= 12\n0 <= minutes <= 59\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two numbers, hour and minutes", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nHour and Minute must be between 1 and 59.\n\n\n   \n\n\n\n\n\u00a0\n\u00a0\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven two numbers, hour and minutes.\n\nGiven two", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\nInput: hour, minutes\nOutput: 60\n\n\u00a0\nConstraints:\n\n0 <= hour <= 12\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n0\n\n\u00a0\n\n\nGiven two numbers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    return self.angleClock(hour, minutes)\n\n\n\n\n\u00a0\n\nUse Call-Based format\nClass:\n   :\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven two numbers, hour and minutes.\n\nGiven two", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n        return self.angleClock(hour, minutes)\n\n\u00a0\n\n\nUse Call-Based format\n\n\n   \n       ...\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven two numbers, hour and minutes."], "prompt": "\nQUESTION:\nGiven two numbers, hour and minutes. Return the smaller angle (in degrees) formed between the hour and the minute hand.\n\u00a0\nExample 1:\n\nInput: hour = 12, minutes = 30\nOutput: 165\n\nExample 2:\n\nInput: hour = 3, minutes = 30\nOutput: 75\n\nExample 3:\n\nInput: hour = 3, minutes = 15\nOutput: 7.5\n\nExample 4:\nInput: hour = 4, minutes = 50\nOutput: 155\n\nExample 5:\nInput: hour = 12, minutes = 0\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= hour <= 12\n0 <= minutes <= 59\nAnswers within\u00a010^-5\u00a0of the actual value will be accepted as correct.\nclass Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        \nUse Call-Based format\nANSWER:\n"}}