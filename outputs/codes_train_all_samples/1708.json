{"1708": {"code": ["\n# Call-Based format\n\n\n\nUse Call-Based format\n\n\n# Memory Manager Contract\n\n## read(size)\n\n## release(index)\n\n## write(index, value)\n\n\n\n\n\n\n\n\n#\n\n\n\n##\n#\n\n\n#\n\n\n\n# Memory Manager Contract\n\n##\n\n\n___\n\n\n#", "\n# Memory Manager Contract\n\n#\n\n\n\n#\n\n#\n\nUse Call-Based format\n\n#\n\n\n#\n\nUse Call-Based format\n\n#\n\n\n\n\n\n\n\n\n##\n\n\n\n\n##\n\n\n\n\n##\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n#\n\n## read(", "\n# Call-Based format\n\n\n# Memory Manager\n\n## __init__(self, memory)\n\n# Call-Based format\n\n# Call-Based format\n\n\n\n\n\n## read(index)\n\n\n\n\n\n\n\n\n##\n\n\n\n\n##\n\n\n\n\n\n\n## write(index)\n\n\n\n\n\n#\n#", "\n\n# Call-Based format\n\n\n\n# Call-Based format\n\n\n# Call-Based format\n\n# Call-Based format\n\n\n# Call-Based format\n\n# Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n##\n\n\n## Init\n\n##\n\n\n\n\n\n\n\n\n# Memory Manager Contract\n", "\n# Call-Based format\n\n\n\nUse Call-Based format\n\n\n# Main\n\n# Memory Management Contract\n\n### Examples\n\n\n\n\n\n\n# Main\n\n___\n\n# Memory Management Contract\n\n\n\n\n##\n\n\n\n\n\n\n##\n\n\n\n\n## read(index, value):\n\n##\n\n\n##\n\n##\n", "\nUse Call-Based format\n\n\n\n\n# Memory Manager\n\n## __init__(memory)\n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n# Constructor\n\n## __init__\n\n##\n\n\n\n\n## __init__(self)\n\n\n\n\n\n\n\n# Memory Manager\n\n## __init__\n\n\n\n##", "\n# Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n# Memory Manager\n\n## __init__\n\n# The standard usage\n\n## __init__(self)\n\n\n##\n\n\n\n\n##\n\n\n\n\n\n\n#\n\n\n\n## __init__\n\n\n\n\n\n\n\n\n#\n# Pre-", "\n# Call-Based format\n\n\n\n\n# Call-Based format\n\n# Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n# Memory Manager\n\n## __init__\n\n\n\n\n\n\n\n\n##\n\n\n#\n#\n\n\n\n\n## read(size)\n\n## write(index)\n\n\n\n\n#", "\n\n# Call-Based format\n\n# Memory Manager Contract\n\n## call()\n\n# Create method\n\n# Call-Based format\n\n\n\n\n\n\n\n\n\n# Instance\n\n\n\n\n# Instance Contract\n\n## __init__\n\n##\n\n\n\n\n##\n\n\n\n\n# Data\n\n\n\n\n___\n\n\n# Use Call-", "\n# Call-Based format\n\n\n# Pre-Process-Based format\n\n# Call-Based format\n\n# Call-Based format\n\n___\n\n# Memory Manager Contract\n\n#\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n##\n\n\n\n\n##\n\n\n\n\n\n#\n_\n\n# Memory Manager Contract\n\n\n\n", "\n# Call-Based format\n\n\n\n# Call-Based format\n\n\n\n# Memory Manager Contract\n\n## __init__()\n\nThis method is used for call-based format\n\n\n\n\n\n\n\n\n# Call-Based format\n\n\n\n##\n\n\n\n\n\n## __init__\n\n##\n\n\n\n\n#\n\n## __on_", "\n\n# Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n# Call-Based format\n\n\n\n\n\n# Memory Manager Contract\n\n## __init__(self, memory)\n\n\n\n\n\n\n\n\n## __init__(memory)\n\n\n\n\n\n\n\n# Memory Manager Contract\n\n##\n\n##\n\n## __on", "\n\n# Call-Based format\n\nuse Call-Based format\n\n\n\n# Call-Based format\n\n\n\n\n# Memory Manager\n\n## memory_manager(size)\n\n## memory_manager(size)\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n\n\n\n# Memory Manager Contract\n\n\n_\n\n##\n\n# Read and write", "\nUse Call-Based format\n\n\n\n# Call-Based format\n\n\n\n# Internal Interface\n\n## __init__(memory)\n\n\n\n\n\n# Call-Based format\n\n\n\n\n##\n\n## __init__()\n\n\n\n\n##\n\n\n\n\n# Memory Manager Interface\n\n\n\n\n\n\n# Initialization:\n#\n#", "\n\n# Memory Manager Contract\n\n# Create Method\n\n# Init method\n\n\n\n\nUse Call-Based format\n\n\n\n\n# Memory Manager Contract\n\n## Memory Manager Contract\n\n## read(size)\n\n# Release(index)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n# Memory Manager Contract\n", "\n# Call-Based format\n\n\n\n# Call-Based format\n\n\n\n# Internal format\n\n## allocate(size, index, value)\n\n## release(index, value)\n\n## write(index, value)\n\n## write(index, value)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n# Read", "\n# Call-Based format\n\n\nUse Call-Based format\n\n\n# Memory Manager Contract\n\n\n# Memory Manager Contract\n\n# Use Call-Based format\n\n\n\n# Memory Manager Contract\n\n\n\n\n\n\n\n\n\n## __init__\n\n##\n\n\n\n\n## __init__\n\n\n\n\n\n\n\n# Memory Management Contract\n\n##", "\n# Call-Based format\n\n\n\n# Call-Based format\n\n\n\n\n# Internal Contract\n\n## _\n\n# Internal Contract\n\n## _\n\n\n# Internal Contract\n\n## _\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##\n\n##\n\n\n\n\n\n#\n\n\n\n\n\n# Internal Contract\n\n## _", "\nUse Call-Based format\n\n# Memory Manager Interface\n\n## __init__(self, memory)\n\n\n\n\n\n\n\n# Memory Manager\n\n#\n\n# Internal Interface\n\n## __init__(self)\n\n\n\n\n\n\n\n\n\n##\n\n##\n\n\n\n\n\n\n\n#\n\n\n\n\n\n#\n\n## write", "\n# Call-Based format\n\n\n\n# Memory Manager Contract\n\n## __init__(self, memory)\n\n\n\n\n\n# Memory Manager\n\n## __init__(memory)\n\nThis method is call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## init()\n\n##\n\n# This is an"], "prompt": "\nQUESTION:\nOne of the services provided by an operating system is memory management. The OS typically provides an API for allocating and releasing memory in a process's address space. A process should only read and write memory at addresses which have been allocated by the operating system. In this kata you will implement a simulation of a simple memory manager.\n\nThe language you will be using has no low level memory API, so for our simulation we will simply use an array as the process address space. The memory manager constructor will accept an array (further referred to as `memory`) where blocks of indices will be allocated later.\n\n___\n\n# Memory Manager Contract\n\n## allocate(size)\n\n`allocate` reserves a sequential block (sub-array) of `size` received as an argument in `memory`. It should return the index of the first element in the allocated block, or throw an exception if there is no block big enough to satisfy the requirements.\n\n## release(pointer)\n\n`release` accepts an integer representing the start of the block allocated ealier, and frees that block. If the released block is adjacent to a free block, they should be merged into a larger free block. Releasing an unallocated block should cause an exception.\n\n## write(pointer, value)\n\nTo support testing this simulation our memory manager needs to support read/write functionality. Only elements within allocated blocks may be written to. The `write` method accepts an index in `memory` and a `value`. The `value` should be stored in `memory` at that index if it lies within an allocated block, or throw an exception otherwise.\n\n## read(pointer)\n\nThis method is the counterpart to `write`. Only indices within allocated blocks may be read. The `read` method accepts an index. If the `index` is within an allocated block, the value stored in `memory` at that index should be returned, or an exception should be thrown otherwise.\ndef __init__(self, memory):\n\t\nUse Call-Based format\nANSWER:\n"}}