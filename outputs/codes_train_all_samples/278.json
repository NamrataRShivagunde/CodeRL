{"278": {"code": ["\nUse Call-Based format\n\n\u00a0\n\n    pass\n\n\n\n\n\n\n    pass\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nInput:\n    digits:\n   \n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\u00a0\nConstraints:\n\nGiven an", "\n\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n\n   \n        return self.largestMultipleOfThree(digits)\n        \nUse Call-Based format\n\n\n\n\u00a0\n\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\nGiven an integer array of digits, return the largest", "\nUse Call-Based format\n\n\u00a0\n\n    def largestMultipleOfThree(self, digits: List[int]):\n        return digits[0]\n\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven an integer array of digits, return the largest", "\nUse Call-Based format\n\n\u00a0\n\n\n    pass\n\n\n\n\n\n\n    def smallestMultipleOfThree(self, digits: List[int]):\n\n\n\n\n\n\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\nGiven an integer", "\nUse Call-Based format\n\n\u00a0\n    pass\n\n\n\nUse Call-Based format\n\n\n\n   \n\n\nUse Call-Based format\n\n\n\u00a0\n\u00a0\n\u00a0\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an integer array of digits", "\nUse Call-Based format\n\n\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n\n\n\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an integer array of digits, return the", "\nUse Call-Based format\n\n\u00a0\n\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n\n\n\n\n\u00a0\n\n   \n\n\n\n\n\u00a0\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array of digits, return the", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n\u00a0\n\n\u00a0\nUse Call-Based format\n\n\u00a0\n\nConstraints:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array of digits", "\nUse Call-Based format\n\n\n\n    def largestMultipleOfThree(self, digits: List[int]):\n        return \"0\"\n\nUse Call-Based format\n\n\n\n   \n        return \"9\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\nGiven an integer array", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\u00a0\n\n    pass\n\n\u00a0\n\n\nUse Call-Based format\n\nUse Call-Based format\nInput:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= i <= 3\n", "\nUse Call-Based format\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n   \n        return self.largestMultipleOfThree(digits)\n\n\n\n\n\u00a0\n\n\u00a0\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\nGiven an integer array of digits", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    pass\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\u00a0\n\nUse Python-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\nGiven an integer array of", "\nUse Call-Based format\n\n\n\n    pass\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n        return self.largestMultipleOfThree(digits)\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an integer array of digits, return", "\nUse Call-Based format\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n    return \"981\"\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\nReturns:\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven an integer array of digits, return the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\n    pass\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array of digits, return", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n    pass\n\n\n\n\n\u00a0\n\u00a0\n\n\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\n\n\n\n\n\u00a0\nGiven an integer array of digits,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    def largestMultipleOfThree(self, digits: List[int]):\n\n\n\n\n\n\n   \n\n\n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\u00a0\n\n\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n        pass\n\n\n\n\n\u00a0\n\n\n\n\nUse Call-Based format\n\n\n\u00a0\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\n\n\nGiven an integer array of digits, return", "\nUse Call-Based format\n\n\n\u00a0\n\n    pass\n\n\n\n\n\n\u00a0\n\n    pass\n\n\u00a0\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n    Given an integer array", "\nUse Call-Based format\n\n\n    def digits(self, digits: List[int]):\n        return \"a\"\n\n\n\n\n\n\n   \n    return \"a\"\n\n\n\n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= digits <= 10^4\n\n\nGiven an"], "prompt": "\nQUESTION:\nGiven an integer array of digits,\u00a0return the largest multiple of three that can be formed by concatenating some of the given digits in any order.\nSince the answer may not fit in an integer data type, return the answer as a string.\nIf there is no answer return an empty string.\n\u00a0\nExample 1:\nInput: digits = [8,1,9]\nOutput: \"981\"\n\nExample 2:\nInput: digits = [8,6,7,1,0]\nOutput: \"8760\"\n\nExample 3:\nInput: digits = [1]\nOutput: \"\"\n\nExample 4:\nInput: digits = [0,0,0,0,0,0]\nOutput: \"0\"\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 10^4\n0 <= digits[i] <= 9\nThe returning answer must not contain unnecessary leading zeros.\nclass Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        \nUse Call-Based format\nANSWER:\n"}}