{"1974": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Recursive format\n\n\n   \n\n\nUse Call-Based format\n\n\n __init__(self)\n\n       \n        \n\nUse Call-Based format\n\n\n\n\n\n\n    Given a binary tree,", "\n\nUse Call-Based format\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n    null\n    /\n    \\\n     2\n    /\n\n\n    \n  # type: TreeNode\n\n\n   \n       \n\n\n\n\n\n\n\n\n\nGiven a binary tree, return the post", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\n\n\n   \n    1\n    2\n    3\n    null\n    / \n\n   \n\nUse Recursive format\n\n\n\n\n\n   \n    null\n     2\n     1\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n     null\n      \\\n     /\n     /\n     \\\n     /\n     \\\n     /\n\nUse Call-Based format\n\n\n   \n\n        # Definition for a binary tree node\n\n   \n   \n\n\n\n\n   \n     2\n    null\n   ", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\n\n   \n    null\n\n\nUse Recursive format\n\n\n\n\n        val = 0\n        \nUse Call-Based format\n\n        [1,null,2,3]\n\n\nReturns:\n\n\n   \n\n\n\n\n\n\n\nGiven a binary tree", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    null\n     1\n     null\n     2\n    /\n     3\n\n\n\n   \n\n\n\n       \n   \n\n\n\n\n\n    1\n    2\n    3\n   \n\n", "\nUse Call-Based format\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\n\n__init__(self, root: TreeNode)\n\n\n       \n       \n\n\n\n\n\n    1\n    2\n    null\n   \n\n   ", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n  \n   null\n\n\n   \n        4\n        2\n        \n __init__(self, root: TreeNode, val: int)\n\n\n   \n   \n\n\n\n\n\n   \n    1\n    null\n\n   ", "\nUse Call-Based format\n\n   \n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\n\n   \n\n\n\n\n  \n\n        val = 1\n\nUse Call-Based format\n\n   \n\n\n\nUse Recursive format\n\n\n\n\n\n   \n\n\nGiven a binary tree, return", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n      1\n      2\n      3\n\n\n\n \n\n __init__(self):\n        pass\n\nUse Call-Based format\n\n       \n   \n   ...\n\n\n\n   \n\n\n    Given a binary", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n   \n      / /  \\\n      / \\\n\nUse Recursive format\n\nUse Call-Based format\n\n    \n(self):\n\n       \n        \nUse Recursive format\n\n\n\n\n\n\n\n\n# Definition for a binary tree", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n\n   \n__init__(self)\n\nUse Call-Based format\n\n   \n\n\n\nGiven a binary tree, return the postorder traversal of its values.\n\n\n\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse Recursive format\n\n\n    1\n    2\n    null\n   \n\n __init__(self)\n\n\n   \n\n\n\n\n\n\n\n   \n      1\n    2\n    3\n\n\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n   \n    null\n\n\n\n   \n        1\n     2\n     3\n\n       \n\n\nUse Recursive format\n\n\nUse Call-Based format\n\n\n\n    1\n    null\n   \n\nGiven", "\nUse Call-Based format\n\n   \n\nUse Call-Based format\n\n\n\n\n \n\n\n\n   \n     null\n     null\n\nUse Call-Based format\n\n   \n    1\n     2\n    null\n    null\n    \\\n     2\n    /\n     3\n\n\n   \n   \n\n\n\n\n1\n2\n3\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n   \n    null\n     1\n    2\n     3\n\n\n\n   \n        \n\n\n\n   \n   \n    val = 0\n    \n\nUse Call-Based format\n\n\n  \n\n\n    Given a binary tree,", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n   \n\n\nUse Call-Based format\n\n \n__init__(self)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    1\n    null\n     2\n    /\n   ", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nUse Recursive format\n\nUse Call-Based format\n\n   \n    1\n     2\n    null\n    \\\n     3\n\n\n   \n   \n\n\n\n\n\n       \n        [1,null,2]\n\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n   \n\nUse Call-Based format\n\nUse Call-Based format\n\n   \n __init__(self)\n\nUse Recursive format\n   \n   \n    #  Example:\n        #\n\n\n\n\n  \n   1\n   2\n\n\n", "\nUse Call-Based format\n\n   \n    return postorderTraversal(self, root)\n\n\n\n\n\n   \n\n\nUse Recursive format\n\n\n    null\n    \\\n    /\n     2\n    /\n\n\n  \n__init__(self):\n\n   \n       \n\n\n\n\n\n        1\n        2\n        3\n       \n\n   "], "prompt": "\nQUESTION:\nGiven a binary tree, return the postorder traversal of its nodes' values.\n\nExample:\n\n\nInput:\u00a0[1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\nOutput:\u00a0[3,2,1]\n\n\nFollow up: Recursive solution is trivial, could you do it iteratively?\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        \nUse Call-Based format\nANSWER:\n"}}