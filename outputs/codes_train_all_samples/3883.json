{"3883": {"code": ["\n\nUse Call-Based format:\n\n\n\nUse Call-Based format:\n\nUse Call-Based format\n\n\n\n\n\n\n\n```if c:\n\n```if h:\n\n\n\n\n```if h:\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\"failed\"\n\n```\n#", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nHaskell:\n\n* Solve a string\n* Solve a string\n```\n\n\n\n\n\ndef\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n```\n\n\n\n\t\n```\n# Example:\n*", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n```if v:\nIn v:\nIn v:\nIn v:\n```\n\n```if c:\n\n```\n\n\n\ndef\n\n\n\n\n```if v:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if h:", "\nUse Call-Based format\n\n\nif c:\n\nif b:\nif c:\nreturn \"b\"\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n```if v:\n\n\n\t\n\n\n\n```if h:\nif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if i", "\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\nPARAM:\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if a:\n\n\n\n\n\n\n```else\n\n\n\n\n\n\n\n\n\n```\n", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n```if kata:\n\n\tsolve(\"kata\") = \"kata\"\n\n\n\n```else\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n```if v:", "\n\n\n\n\n\n\n\nIf we use the Kata format:\n\n```if c:\n\nIf we use the Kata format:\n\n```\n\n\n```\n\n\n\n\n\n\n\ndef\n\n\n\n\n\n```\n\ndef\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n``", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nRETURN:\n\n```\n\n\n\n\n```if c:\n`\n\n```if k:\n\n```\n\n\n\n\n\ndef\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\nif (c)\n\n", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n```if c:\n\n\n\n\n```if k:\n\n\n\n\n```if k:\n\n\n\n\n\n\n\n```if v:\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n```if k:\n", "\n\t\n\n\n\nHaskell:\n\n* This is a call-based format\n* The first letter is the capital letter. \n\n```\n\nThe second letter is the capital letter. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if c:\n\nif", "\n\t\treturn \"failed\"\n\n\n\n```if a:\nreturn \"failed\"\n```\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nReturns a string\n\n```\n\n\n\n\n\n\t\nReturns:\n\t\n\n\n\n\n\n\n\n\n\n\n\n```if a:\n", "\n\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\nEXAMPLE:\n\n\n\n\n\n\n\treturn \"failed\"\n\t\n\n\n\n\n\ts = \"kata\"\n\t\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n```if c:\n*", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nsolve(s)\n\n\nSolve\n\n```if c:\nif c:\nreturn \"failed\"\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if c:\n\nIf", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n```if c:\nin c:\nreturn \"failed\"\n```\n\n\n\n\n\ndef\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n```\n\n\n`\n# Ch", "\n\n\nSolve a string.\n\n```if c:\n\n`if a:\n\n```\n\n\n```\n\n\n\n\n\n\n\n\n\n\n```if b:\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if a:", "\n\t\nUse Call-Based format\n\n\n\n\n\nSolve a string:\n\n[Haskell]\n\n[Haskell]\n\n\n\n\n\n\n\nSolve a string\n\n\n\n```if c:\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if c:\nif", "\n\nUse Call-Based format:\n\n\n* A string is a Vowel or a Consonant value.\n* A string is a consonant. \n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n```\ndef:\n\t\n\n\n\n\n\n\n\n\n\n\n`ahev` = \"hu", "\n\n\n\n\n\n\n\n\n\n\n\n\nHaskell:\nUse Call-Based format\n\nWould you like to use Call-Based format\n\n```if c:\n\nIf we use C:\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if c:\nIf we", "\n\n\nsolve(\"haskell\") = \"haskell\"\nsolve(\"kata\") = \"kata\"\n\nSolve:\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\ndef\n\t\n\n\n\n\n```if b:\nIf we\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```if c:\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n`if c:\n\nIf you want to use this Kata, please try:\n\n[A-Z]\n\n\n\n```\nif c:\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`ahev` = \"h\"`\n"], "prompt": "\nQUESTION:\nIf we alternate the vowels and consonants in the string `\"have\"`, we get the following list, arranged alphabetically:\n`['ahev', 'aveh', 'ehav', 'evah', 'vahe', 'veha']`. These are the only possibilities in which vowels and consonants are alternated. The first element, `ahev`, is alphabetically lowest. \n\nGiven a string:\n* alternate the vowels and consonants and return the lexicographically lowest element in the list\n* If any two or more vowels or consonants must follow each other, return `\"failed\"`\n* if the number of vowels and consonants are equal, the first letter of the result must be a vowel.\n\nExamples: \n\n```Haskell\nsolve(\"codewars\") = \"failed\". However you alternate vowels and consonants, two consonants must follow each other\nsolve(\"oruder\") = \"edorur\"\nsolve(\"orudere\") = \"ederoru\". This is the only option that allows you to alternate vowels & consonants.\n```\n\n```if c:\nIn C, return an allocated string even if the response is \"failed\".\n```\n\nVowels will be any of \"aeiou\". Input will be a lowercase string, no spaces. See test cases for more examples. \n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Consonant value](https://www.codewars.com/kata/59c633e7dcc4053512000073)\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\ndef solve(s):\n\t\nUse Call-Based format\nANSWER:\n"}}