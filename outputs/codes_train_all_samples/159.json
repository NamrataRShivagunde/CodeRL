{"159": {"code": ["\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    pass\n        \n\n\n\n\u00a0\n\n    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n   \n    raise TypeError('constrainedSubsetSum is not implemented')\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return the", "\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n\n    print self.constrainedSubsetSum(nums, k)\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array of integers and an integer k, return the sum\n\n\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    return self.constrainedSubsetSum(nums, k)\n\n\n\n\n\u00a0\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return the maximum", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\nConstraints:\n\n1 <= k <= nums.length <= 10^5\n\n\n\n\n   \n\n        \n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return the", "\nUse Call-Based format\n\n\n\n\n\n\n\n   \n    return self.constrainedSubsetSum(nums, k)\n\n\n\n   \n    self = Solution()\n        \nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an integer array nums and k, return the maximum sum of that array.\n\n\nGiven", "\nUse Call-Based format\n\n\n    self = Solution()\n\n\nUse Call-Based format\n\n\n\n   \n    self = Solution()\n        \nUse Call-Based format\n\n\n\n\n        pass\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nk = 2\n\n\n\n\nGiven an integer array nums and k,", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n   \n    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return the", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n\n\n\n\u00a0<= k <= nums.length\n\n\u00a0\nReturns:\n\n\u00a0\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    self, nums, k\n\n\n\n   \n        pass\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n10^5 < k < 10^5\n\n\n\n\nGiven an integer array nums", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n   \n\n\n\n   \n        pass\n\n\n\nUsage:\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nnums:\n-1,2,3,4,5,6,7\n\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n    def constrainedSubsetSum(self, nums, k):\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return the", "\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n    pass\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\nk = 0\n\n\n\n\nGiven an integer array nums and k,", "\nUse Call-Based format\n\n\n    @Use Call-Based format\n\n\n\n\n   \n    self.constrainedSubsetSum(nums, k)\n\n\n\n   \n        # TODO: implement this\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n   \n    def constrainedSubsetSum(self, nums, k):\n        return -1\n\n\n\n\n\n\n\n\n\n\n\n\nSum of subsequences of an array and return the maximum sum.\n\n\nExample\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n   \n    pass\n\n\n\n\n\n\n\u00a0\n\nReturns:\n\n    k\n\n\u00a0\n\nExample:\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\u00a0\n\nGiven an integer array nums and k, return the", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\n\u00a0\n\n    pass\n\n\u00a0\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an integer array nums and", "\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n\n\u00a0\n\n    pass\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n    Returns the maximum sum of a list of integers\n\n\n\n\n\nGiven an integer array nums and k", "\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n   \n\n\nk = 2\n\n\u00a0\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\nk > nums.length\n\nk = 2\n\n\n\n    nums = [10,2,5,20]\n\n\nGiven an integer", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n   \n\n\nk = 1\n\n\u00a0\nExample:\n    def constrainedSubsetSum(self, nums, k: int):\n        return 0\n\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums and k, return"], "prompt": "\nQUESTION:\nGiven an integer array\u00a0nums\u00a0and an integer k, return the maximum sum of a non-empty subsequence\u00a0of that array such that for every\u00a0two consecutive integers in the subsequence,\u00a0nums[i]\u00a0and\u00a0nums[j], where\u00a0i < j, the condition\u00a0j - i <= k\u00a0is satisfied.\nA\u00a0subsequence\u00a0of an array is\u00a0obtained by deleting some number of elements (can be\u00a0zero) from the array, leaving the remaining elements in their original order.\n\u00a0\nExample 1:\nInput: nums = [10,2,-10,5,20], k = 2\nOutput: 37\nExplanation: The subsequence is [10, 2, 5, 20].\n\nExample 2:\nInput: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation: The subsequence must be non-empty, so we choose the largest number.\n\nExample 3:\nInput: nums = [10,-2,-10,-5,20], k = 2\nOutput: 23\nExplanation: The subsequence is [10, -2, -5, 20].\n\n\u00a0\nConstraints:\n\n1 <= k <= nums.length <= 10^5\n-10^4\u00a0<= nums[i] <= 10^4\nclass Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}