{"2726": {"code": ["\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n>digits\n\n\n\n>digits\n\n\nUse Call-Based format\n3 * sqroot(length).\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n>\n\n>", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n>>> \"SquareIt\"\n\n\n\nUse Call-Based format\nlength\nlength\n\n\n>1.0\n\n\nUse Call-Based format\n\n>1.0\n\n\n\n\n\nGiven an", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n>digits\n\n\n\t\n\n\n\n\n\n>digits\n\n\n\n\n\nUse Call-Based format\n\n\n\n>\n\nUse Call-Based format\n\n>\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n>\n\n12", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n>\n\n\n\n\n\n\n\n>\n\nUse Call-Based format\nlength = length + 2 * sqroot(length) + sqroot(length)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n>\n\n", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n>digits\n\nUse Call-Based format\n\n>digits\n\n\n>digits\n\n\n\n\n\nUse Call-Based format\n>digits\n\n\n\n\n\n\n\n>121212\n\n>121212", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n>digits\n\n\n\n\n\n\n\n\n\n\n>digits\n\n\nUse Call-Based formatlength\nlength\n\n\n>10^10\n\n\n\n>10^10\n\n\n\n\n\n\n\n## Example:\n\n# 0.", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n>\n\n\n\n\n\n\n\nUse Call-Based format\n(length).\n\nUse Call-Based format\n\n\n\n> 0x\n\n\n\n> 0x\n\n\n\n\n\n\n\n> 0x\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n>1212\n\n\n\t\n\n\n\n\n\n\n>=1212  \n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n>123123123\n\n\n\n\n\n>1212", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n>1212root(length)\nlength\n\n\n>1212\n\n>1212\n\n\n>123123123\n\n\n\n\n\n>1212\n\n>12", "\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n>digits\n\n\n\n\n1. Use Call-Based format\n\n\nUse Call-Based format\n\n>1\n\n\n>1\n\n>1\n\n\n\n\n\n1. If the length is not a", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n>5.5\n\n\n\n\n\n\nUse Call-Based formatroot(length)\n(length).\n\nUse Call-Based format\n\n>5.5.\n\nUse Call-Based format\n\n\n\n\n\nGiven an integer,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n>digits\n\t\n\n\n# Example:\n#\n\nUse Call-Based format\n#\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n>123123123123\n\n\n\n#\n#\nSAN", "\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n>1212\n\n\n\n\n\n2x2 perfect square\n3x3 perfect square\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n>123123123\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n>digits\n\n\n\n>digits\n\n\n\n\nUse Call-Based formatlength\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n>10\n\n\n\n\n\n\n>1212\n>12", "\n\t\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n>\n\n\n\t\n\n\n\nUse Call-Based format\n\n\n\n>\n\nUse Call-Based format\n>\n\n\n>\n\n\n\n\n\n\n====\n\n0.  1.", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n>digits\n\n\n\n\n\nThe following code is written to the calling code:\n\n\n\n>digits\n\n\n>digits\n\nUse Call-Based format\n\n>digits\n\n\n\n\n\n>=1212\n", "\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n\n>\n\n\n\n\n\n\n\n\n3x3 perfect square\n\n3x3 perfect square\n\n4 digits:\n\n3 digits:\n4 digits\n\n5 digits:\n3 digits\n\n\n\n\n\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n>digits\n\n\n\t\n\n\n\n\n>\n\n\n>\n\n\n\n>\n\nUse Call-Based format\n\n>\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n>\n\n\n\n\n\n\n\n\n>\n\n>\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\n\n\n>=1x2\n\nUse Call-Based format\n>1x2\n\nUse Call-Based format\n(length)\n\n\n\nUse Call-Based format\n\n\n>3\n\n\n\n\n\n==>\n==>", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n>\n121212123123123\n\n\n\t\n\n\n\n\n\n(length).\n\n\n>2x2 perfect square\n>3x3 perfect square\n\n\n\n\n\n\n\n==>"], "prompt": "\nQUESTION:\nGiven an integer, if the length of it's digits is a perfect square, return a square block of sqroot(length) * sqroot(length). If not, simply return \"Not a perfect square!\".\n\nExamples:\n\n1212 returns:\n\n>1212  \n\nNote: 4 digits so 2 squared (2x2 perfect square). 2 digits on each line.\n\n123123123 returns: \n>123123123\n\nNote: 9 digits so 3 squared (3x3 perfect square). 3 digits on each line.\ndef square_it(digits):\n\t\nUse Call-Based format\nANSWER:\n"}}