{"4843": {"code": ["\n\n\n\n\n\n\n\n\n\n\n\n\n`t`\n`k`\n`max`\n`t`\n`k`\n`max`\n`k`\n`k`\n\n\n\n\n\n``\n\n\n\n`\n\n`\n\n\n\n\n\n\n\n\n\n\n\n``\n\n\n\n163, 3, ys) ->", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`chooseBestSum`\n`chooseBestSum` -> 163\n`chooseBestSum`\n`chooseBestSum`\n`\n`k`\n\n\n3, ys) -> 163`\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n163, 3, ys) ->", "\n\n\n\n\n\n\n\n\n[1, 2, 3]`\n\n\n\nk = 3\n\nExample:\n\n`t = 174`\n`choose_best_sum(1, t) -> 174`\n\n\n\n`\n\n`\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n163, 3, ys)", "\n\n\n\n\n\n\n\n\nChoose the biggest sum of distances to visit. \n\nExample:\n\n`ls = [50]`\n`chooseBest_sum(163, 3, ls) -> -1\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n163, 3, ys) -> nil (", "\nKotlin:\n\n\n\n\n\n\n\n\n\n\n\n\nk = 3\n\nWHERE:\n\n`k = 1`\n`chooseBestSum(k, k) -> 1\n\n\n`\n\n3, ys) -> 174\n\n\n\n\n\n\n\n\n`k = 2`\n`t = 1`\n\n\n\n\n\n163,", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\nk = 3\n\nExample: \n\n`ts = [50]`\n`chooseBestSum(163, 3, ts) -> 153\n\n\n\n\n\n``\n\n\n\n\n\n\n``\n\n\n\n163, 3, ys) -> -1 (or", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk = 3\n\n\n`\n\nchooseBestSum(k, ts) -> 163\n\n\n`\n\n3, ys) -> 163\n\n37`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`k = [0]`\n\n163, 3, ys", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[163, 235, 235]`\n\nChoose the biggest possible sum of distances between towns \n\nExample:\n\n`ts`\n`\n\n`xs`\n`\n\n\n\n``\n\n\n\n\n\n\n\n``\n\n\n\n163, 3, ys) ->", "\n\n\n\n\n\n\n\n\n\n\n\n\n[0,1]\n\n\n\n[0,1]`\n\n[1,1]`\n\n\n`\n\n3, ys) -> 163\n\n3, ys) -> 163\n\n\n\n\n\n\n\n\n\n\n\n\n`\n\n\n\n163, 3, ys) -> 174", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk = 3\n\n`chooseBestSum(163, 3, ys) -> 163\n\n\n`chooseBestSum(163, 3, xs) -> 163\n\n`3, ys) -> 163\n\n\n\n\n\n\n\n\n\n\n`\n\n\n163, 3, ys) -> nil (", "\n\n\n\n\n\n\n\n\n\n\n`t = 3`\n`k = 3`\n`choose_best_sum(t, k) -> null\n\n\n\n\n\n\n\n`\n\n3, ys) -> -1`\n, k, ts, ys) -> 163\n\n\n\n\n\n\n\n`\n\n\n163, 3, ys) ->", "\n\n\n\n\n\n\n\n\n\n[50, 51, 50, 52, 52]`\n\n[50, 51, 52]`\n\n\n\n\n\n\n`\n`choose_best_sum(33, 3, ys) -> 59\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n163, 3, ys) -> 0\n`choose_", "\n\n\n\n\n\n\n\n\n`k = 3`\n`t = 174`\n`k = 174`\n\nQUESTION:\n\nJohn and Mary want to travel between a few towns\n\n\n\n\n\n\n\n\n_3, ys) -> 163`\n\n\n\n\n\n\n\n\n\n\n\n\n163, 3, ys", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`\n`\n\n`chooseBestSum`\n\n`chooseBestSum`\n\n`chooseBestSum`\n\n`chooseBestSum`\n\n`k`\n\n`k`\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n163, 3, ys)", "\n\n\n\n\n\n\n\n\n\n\n\n`\n\nchooseBestSum(162, 3, xs) -> 163\n\n\n`chooseBestSum(163, 3, ys) -> 163`\n\n\n``\n`\n\n`\n\n\n\n\n`\n\n\n\n\n\n`k = 3`\n\n\n\n\n\n163, 3, ys)", "\n\n\n\n\n\n\n\n\n\n\n[50]`\n`chooseBestSum(50, 3) -> 174`\n`chooseBestSum(50, 3) -> 163`\n\n\n\n\n\n\n\n\n`\n\n`\n\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n163, 3, ys) -> nil (", "\n\n\n\n\n\n\n\n\n[3]\n`chooseBestSum(163, 3, ts) -> 163\n\n\n\nk = 3\n\n\n\n`163, 3, ys) -> 163\n\n3, ys) -> 163`\n\n\n\n\n\n\n\n\n`k = 3`\n`\n\n\n163, 3, ys) -> nil", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk`\n\n`\n`chooseBestSum(163, 3, ys) -> 163\n\n`k`\n\n\n`\n\n3, ys) -> -1`\n\n`\n\n\n\n\n\n\n\n\n``\n\n\n\n163, 3, ys) -> nil (", "\n\n\n\n\n\n\n\n\n\n\n`k = 3`\n`t = 174`\n`k = 174`\n\nExample:\n\nJohn and Mary want to travel between 3 towns \n\n\n\n\n\n\n\n\n\n_3, ys) ->\n\n\n\n\n\n\n\n`\n\n\n\n`k`\n163, 3", "\n\n\n\n\n\n\n\n\n`chooseBestSum`\n`chooseBestSum`\n`chooseBestSum`\n`chooseBestSum`\n`chooseBestSum`\n`chooseBestSum`\n\nThe list\n\n\n`\n\n\n\n`3, ys) -> 163\n\n\n\n\n\n\n\n\n`\n\n163, 3, ys) -> nil "], "prompt": "\nQUESTION:\nJohn and Mary want to travel between a few towns A, B, C ... Mary has on a sheet of paper a list of distances between these towns.\n`ls = [50, 55, 57, 58, 60]`.\nJohn is tired of driving and he says to Mary that he doesn't want to drive more than `t = 174 miles` and he\nwill visit only `3` towns.\n\nWhich distances, hence which towns, they will choose so that the sum of the distances is the biggest possible to please Mary and John?\n\nExample: \n\nWith list `ls` and 3 towns to visit they can make a choice between: \n`[50,55,57],[50,55,58],[50,55,60],[50,57,58],[50,57,60],[50,58,60],[55,57,58],[55,57,60],[55,58,60],[57,58,60]`.\n\nThe sums of distances are then:\n`162, 163, 165, 165, 167, 168, 170, 172, 173, 175`.\n\nThe biggest possible sum taking a limit of `174` into account is then `173` and the distances of the `3` \ncorresponding towns is `[55, 58, 60]`.\n\nThe function `chooseBestSum` (or `choose_best_sum` or ... depending on the language) will take as parameters `t` (maximum sum of distances, integer >= 0), `k` (number of towns to visit, k >= 1) \nand `ls` (list of distances, all distances are positive or null integers and this list has at least one element).\nThe function returns the \"best\" sum ie the biggest possible sum of `k` distances less than or equal to the given limit `t`, if that sum exists,\nor otherwise nil, null, None, Nothing, depending on the language. With C++, C, Rust, Swift, Go, Kotlin return `-1`.\n\nExamples: \n\n`ts = [50, 55, 56, 57, 58]`\n`choose_best_sum(163, 3, ts) -> 163`\n\n`xs = [50]`\n`choose_best_sum(163, 3, xs) -> nil (or null or ... or -1 (C++, C, Rust, Swift, Go)`\n\n`ys = [91, 74, 73, 85, 73, 81, 87]`\n`choose_best_sum(230, 3, ys) -> 228`\n\nNote: don't modify the input list `ls`\ndef choose_best_sum(t, k, ls):\n\t\nUse Call-Based format\nANSWER:\n"}}