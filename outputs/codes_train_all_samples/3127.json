{"3127": {"code": ["\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n```\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\nUse Python-Based format\n\n\n\n\n\n```python\n\nUse Python-Based format\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n```\n\nUse Call-Based format\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n # ['hol', 'lo ', 'wor', 'ld']\n\n\n\n\n\n\n```python\n\n\n\n```python\nstring", "\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n`\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\n\n\n\n\nUse Call-Only format\n\n\n```\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n**Example:**\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Python format\n```\n\n\n\n\n\n\n\n\n\n\nstring_chunk(string, n=2)\n\n\n\n\n\n\n\n\n\n\n```python\n#", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n```python\nstring_chunk(string, n=0):\n\t\n\n:\n\n\n\n\n:\n\n\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n```python\n# The", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\n```\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\n\nUse Function-Based format\n\n\nstring_chunk('hello world', 3) # ['hello', 'world']\n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n```\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Function-Based format\n\n\n\n\n\n\n\n # ['','','','']\n\n\n\n\n\n\n```\n\n\n\n\n\n```python\n# if", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n`\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n\n```python\n# python\nstring_chunk(string, n=0) # ['hello', 'world']\n\n\n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n```\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n`\n\n\n\n\n\n\n\n:\n\nUse Call-Based format\n\n\n\n\n\n\nstring_chunk(string, 3)\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n```\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\nstring_chunk(string, n=5) # ['hello', 'world']\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\n```python\nstring_", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n```\n\n\n\n\nUse Call-Format\nUse Function-Based format\nUse Call-Only format\n\n\n\n\t\nUse Python format\n\nUse Python-Call-Based format\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should write a function that takes", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nUse Call-Based format\n\n`\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Python format\n\n\n\n\n\n\nUse String-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\n# if you are", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n```\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based string format\nUse Call-Based string_chunk\n```\n\t\n:\n\n\n:\n\n\n\n\n\n\n\n\nstring_chunk('hello world', 3)\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\nstring_chunk(string, n=0) # []\n\n\t\nUse Python format\n\nUse Python chunking\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n```python\nstring_chunk('", "\nUse Function-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n```\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Function-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n```python\n\n\n\n\n\n\n\n\n\n\n```python\nstring_chunk('", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n```\n\n\n\nUse Call-Format\n\n\n\n\t\nUse Call-Format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nstring_chunk('Hello world', 2)\n\n\n\n\n\n\n\n\n\n```python\nstring_", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n`\n\n\n\nUse Function-Based format\n\n\n\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nUse function:\n\nUse Function-Based format\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nUse Call-Based format\n```\n\n\n\nUse Python format\n\n\n\n\t\nUse Python format\n\n\n\n\n\n\n\n\n\n```\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n```python\n#!/usr", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n```\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\t\nUse Numpy format\n\n\n\n\n\nUse Function-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n```python\nstring_chunk('", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n```\n\n\n\n\n\nUse Call-Only format\n\n\n\n\n\t\nUse Function-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstring_chunk('hello world', 2, 1)\n\n\n\n\n\n```python"], "prompt": "\nQUESTION:\nYou should write a function that takes a string and a positive integer `n`, splits the string into parts of length `n` and returns them in an array. It is ok for the last element to have less than `n` characters.\n\nIf `n` is not a valid size (`> 0`) (or is absent), you should return an empty array.\n\nIf `n` is greater than the length of the string, you should return an array with the only element being the same string.\n\nExamples:\n\n```python\nstring_chunk('codewars', 2) # ['co', 'de', 'wa', 'rs']\nstring_chunk('thiskataeasy', 4) # ['this', 'kata', 'easy']\nstring_chunk('hello world', 3) # ['hel', 'lo ', 'wor', 'ld']\nstring_chunk('sunny day', 0) # []\n```\ndef string_chunk(string, n=0):\n\t\nUse Call-Based format\nANSWER:\n"}}