{"4974": {"code": ["\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n## Example:\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n# Example data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Example data:\n\n```python\n\n\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour data is in two-dimensional format:\n\n```python\n\n\n\n\n\n``", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nData:\ndata\n\nExample:\n\ndata = \n\n# Use Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    # Note:\n    \"The first item is always", "\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n```python\npython\nuser_contacts(data)```\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n[98110, None, None]\n\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\n\n\ndef user_contacts(self, data):\n\t\t#", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\nSEND:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n[[\"Grae Drake\", 98110]]\n\n\n\n\n   ", "\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nREQUIRE:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE:\n\nYou have created a function `user_contacts()` which takes two or three lists like this:\n\n\n\n\n", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n## Examples\n#\n# You", "\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\nThe data should be a two-dimensional list like ``[user_name, user_zip_code]``\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following data are for example:\n\n```python\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nSEND DATA:\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following data will be extracted to the `data` variable:\n\n```python\n{\n\tdata\n\t\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n  You have gotten back a list of two-dimensional lists like the above.\n\n```python\n[[\"Grae Drake\", 98110]]```\n\n):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    The", "\n\n\n\n\n\nUse Call-Based format\n\nPARAM:\ndata\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Example:\n\n\n\"\"\"\n\n\n        #  TODO:\n       ", "\n\n\n\n\nUse Call-Based format\nANSWER:\nUse Call-Based format\n\nCONFIRM:\n\nUse Call-Based format\n:\n\n\n\n\n\n:\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nuser_contacts():\n\n   \n\n\n\nThe following are the data", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[98110, 94101, None]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n[[\"Grae Drake\", 98110]]\n\n\n\n\n``", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n[98110, 94101, 11201]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQUESTION:\n\nThe data you requested is:\n\n```python\n[]\n\n", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nWHERE:\n\n```python\nuser_contacts(data)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following example shows how to ship a small gift", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nThe following data is expected to be in two-dimensional format:\n\n```python\ndata\n```\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n[\"Grae Drake\", 98110]\n\n\n\n\n```python", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nNOTE:\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUSER:\n\nA\n\n\n\n```python\n[", "\n\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nuser_contacts(data):\n\n\n\n\n\nThe following user's contact", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nFROM:\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe data can be a list of two or three items:\n\n```python\n[]\n\n"], "prompt": "\nQUESTION:\nYou're putting together contact information for all the users of your website to ship them a small gift. You queried your database and got back a list of users, where each user is another list with up to two items: a string representing the user's name and their shipping zip code. Example data might look like:\n\n```python\n[[\"Grae Drake\", 98110], [\"Bethany Kok\"], [\"Alex Nussbacher\", 94101], [\"Darrell Silver\", 11201]]\n```\nNotice that one of the users above has a name but _doesn't_ have a zip code.\n\nWrite a function `user_contacts()` that takes a two-dimensional list like the one above and returns a dictionary with an item for each user where the key is the user's name and the value is the user's zip code. If your data doesn't include a zip code then the value should be `None`.\n\nFor example, using the input above, `user_contacts()` would return this dictionary:\n```python\n{\n    \"Grae Drake\": 98110,\n    \"Bethany Kok\": None,\n    \"Alex Nussbacher\": 94101,\n    \"Darrell Silver\": 11201,    \n}\n```\n\nYou don't have to worry about leading zeros in zip codes.\ndef user_contacts(data):\n\t\nUse Call-Based format\nANSWER:\n"}}