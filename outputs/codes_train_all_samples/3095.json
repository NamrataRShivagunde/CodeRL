{"3095": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\nQUESTION:\n\nAdd a number and a string to a number.\nUse Call-Based format\nANSWER:\n\nION:\n:\n\n\n:\n\n::\n\n\t::\n\n\n:\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\t>>> from pprint import pprint", "\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format\nCOMMA:\n\n:\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is a Python 3 equivalent of python `+`.\n\n\n\n\n", "\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nEXAMPLE:\n\n    This function is called from `kata.add()`\nION:\nION::\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python 3 format\n\n\n\n\n\n\n\n>>> a = 2\n>>> b = 3", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\nUse Call-Based format\nEXAMPLE:\n\n\n\n\n\nUse Call-Based format:\n\n\n\n\nUse Python Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n +\n+ a + b\n+\n", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\nUse Call-Based format\nEXAMPLE:\n\n    my_add(a, b)\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+\n+\n+\n+\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\n\nEXAMPLE:\n\n\nuse Call-Based format\n\n\n:\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmy_add(a, b)\n\n\n\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nUse Python Call-Based format\n\n\n    a + b\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe following would be a good example:", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\nEXAMPLE:\n\n\n\nEXAMPLE:\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nTry with a Python `+` operator\nION:\n\n\n\n\n...", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\nUse Call-Based format\nINPUT:\n\nUse Call-Based format\nOUTPUT:\n\n:\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n +\n+\n+\n+\n\n\n+\n+", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Python Call-Based format\n\n\n\n\nUse Call-Based format\nINPUT:\n\nUse Call-Based format\nOUTPUT:\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\nYou do not understand this format\nION:\n\n\n\n\t", "\t\nUse Call-Based format\t\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\n\n\nUse Call-Based format\nSELECT:\n\n\nSELECT:\n\nUse Call-Based format:\n\n\n\n:\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n## Example 2", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nEXAMPLE:\n\n\n\n\n\nEXAMPLE:\n:\n\n\n\n\n\nUse Python Call-Based format\n\n\t\n\n\n\n\n\nUse Python Call-Based format\n\n\n\n\n\n\n\n## Examples:\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nHINT:\n\nUse Call-Based format\nHINT:\n\nUse Call-Based format\nCONDITION:\n\n:\n:\n::\n\n\n::\n\n\n:\n\n\n\n\n\n\nThe sum is returned.\n\n\n\n+\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nSEE:\n\n:\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n+\n\n\n\n+\n\n+\n\n\n+\n\n\n+", "\t\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\nUse Call-Based format\n\nNOTE:\n\n\n\n\n\n\nNOTE:\n:\n\n\n\nUse Python Call-Based format\n:\n\n\n\n\n\n\n\n\n\nThe following are the expected forms:\n\n\n\n\n\n\n1:\nIf", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\nUse Call-Based format\nEXAMPLE:\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\nAdd two numbers together\n\n\n\n\n\n\n\n\n\n\n\n\nThe following examples are available:\n\n\n\n\n\n\n+ 1, 2, 3, 4\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\n\n\nThe `+` operator is a Python `+` operator.\nUse Call-Based format\nEXAMPLE:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nA python operator plus operator\n\n\n\n\n\n\n\n\n\n\n\n- The `-` operator is", "\nUse Call-Based format\nUse Call-Based format\n\n\n:\n\nUse Call-Based format\n\nNOTE: use Python 3\nNOTE: use Python 2\nNOTE: use Python 3\nNOTE: use Python 3\n\nEXAMPLE:\n\n\n\n:\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI'd rather not like adding", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+\n\n\n\n\n+\n+\n+\n+\n", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\nEXCEPTION:\n\nUse Call-Based format\nEXAMPLE:\n\n\n\n:\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n* You can add different types of data:\n"], "prompt": "\nQUESTION:\nYou like the way the Python `+` operator easily handles adding different numeric types, but you need a tool to do that kind of addition without killing your program with a `TypeError` exception whenever you accidentally try adding incompatible types like strings and lists to numbers.\n\nYou decide to write a function `my_add()` that takes two arguments. If the arguments can be added together it returns the sum. If adding the arguments together would raise an error the function should return `None` instead.\n\nFor example, `my_add(1, 3.414)` would return `4.414`, but `my_add(42, \" is the answer.\")` would return `None`.\n\nHint: using a `try` / `except` statement may simplify this kata.\ndef my_add(a, b):\n\t\nUse Call-Based format\nANSWER:\n"}}