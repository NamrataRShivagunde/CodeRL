{"1758": {"code": ["\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\t\n\n\n\t\n\t\nUse Python format\n\n\n```python\n\n\n\n\n\n\n\nbaba', 'babba']\n\n # ['aabb', 'abaa', 'baba', 'babab', 'bbbb']\n\n\n\n\n\n\n\t\n", "\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\t\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n', 'b', 'b']\n # ['b', 'a', 'b', 'a', 'b']\n\n\t\n\n\n```\n\n\n\t\n\n```", "\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\t\n\t\t\n\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nbaba', 'babb', 'bbba', 'bbbaba', 'bbbba', 'babb']\n\n\n\n\n\n\n", "\n\n\n\n\t\n\n\n\n\n\t\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\nbab', 'babb', 'babab', 'babb', 'babb', 'bba', 'bba', 'bbaa', 'bbbb']\n\n\ndef\n\n\n\n\n\n\t\n\n\n```python", "\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\n\n```python\n\n\n\n\n\n\n\n\n\n\nab', 'abb', 'bab', 'bab', 'bbb', 'bbb', 'bbb', 'bbb', 'bbb']\n\n\n\n\n\n\n\n\n``", "\n\n\n\n\n\n\n\nUse Call-Based format\n\n\t\n\t\n\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\n\nbaba', 'bbbab']\npermutations('aabb'); # ['abaa', 'babb', 'baab', 'baab']\n\ndef\n\n\n\n\n\n\n\n```python\nper", "\n\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\t\t\n\n\n\n\n\t\n\n\n\n\n\nUse Call-Based format\nabab', 'abba', 'bbab', 'bbba', 'bbab', 'bbbb', 'bbbb', 'babb']\n\n\t\n\n\n\n\t\n\n", "\n\n\n\n\n\n\n\n\t\n\t\n\t\n\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n```python\nprint(permutations(string))```\n\n\n\n\n\n\n\nUse Call-Based format', 'abab', 'baba', 'babb', 'bbaa']\n\n\n\n\n\n\n\t\n\n``", "\n\n\n\n\t\n\n\n\nUse Call-Based format\n\n\n\t\n\t\n\n\n\n\t\n\t\n\n```python\n\n\n\n\n\n\n\n\nbaba', 'babb', 'bbb', 'baa', 'bbb', 'bbb']\n\n\n```\n\ndef\t\n\n\n\n\n\n\t\n\n```", "\n\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\t\nUse Call-Based format\n\n```python\nprint(permutations(string))\n```\n\n\n\n\n\n\n\nbabb', 'baa', 'bbb', 'bbb', 'bbbb', 'bbbb', 'bbbb']\n\n\n\n\n\n\n\n\n", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\n\t\n\n\n\n\t\n\t\n\n\n\n\n\nUse Call-Based format\n\n\n\n\naabb', 'baba', 'bbba', 'bbbb', 'bbbb', 'baba', 'babb']\n\n\n\ndef\n\n\n\n\ndef\n\n\n", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\t\n\n\n\t\n\t\n\n\n```python\nprint(permutations(string))\n```\n\n\n\n\nUse Call-Based format\n\nab', 'bb']\n # ['bab', 'bb', 'babb']\n\n\n\n\n\n\t\n\n\n```python", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\t\n\t\n\n```python\n\n```\n\n\n\n\n\n\n\n\n\n\nbaba', 'bbb', 'bbb']\n # ['ab', 'abab', 'ab', 'bab', 'ab']\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\t\n\t\nUse Python format\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\naabb', 'baba', 'babb', 'babba']\n # ['aabb', 'baba', 'bba', 'bbba']\n\n\n\n\n\t\n\n", "\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\t\n\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\nabab', 'abbb', 'bbbb', 'bbbb', 'bbab', 'bbbbb', 'bbbb', 'bbb']\n\n\ndef\n\n\n\n\n\n\t\n\n\n```python\nper", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\t\n\t\n\n\n\n\n\t\n\n\n\n\n\n\n\n\nbabb', 'baba', 'babb', 'bbab', 'babbb']\n\n # ['abaa', 'ababb', 'babbb']\n\n\n\n\n\n\n\t\n\n```python", "\n\n\n\t\n\n\n\nUse Call-Based format\n\n\n\t\n\t\n\t\n\t\n\n\t\n\n\t\n\n\n\n\n\n\n\n\nUse a kata kata by Kata.\n\nNOTE:bab', 'baba', 'babb', 'babb', 'abba']\n\n\n\n\n\n\ndef\n\n\n", "\n\n\n\n\n\n\n\n`\n\n\n\t\n\n\t\n\n\n\t\n\t\nUse Call-Based format\n\n\n\n\n\n\n\nUse Kata\n\nUse Kata kata', 'ab', 'abb', 'b', 'bab', 'b', 'bab', 'b', 'b']\n\n\n\n\n\n\n\t\n\n``", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\t\n\n\n\t\n\t\n\n\n\n\n\n\n\n\n\nab', 'bab', 'ba', 'baba', 'bbaa', 'bbbb', 'baab', 'babb', 'bbbb']\n\ndef\n\n\n```\n\ndef\n\n\n", "\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\t\t\n\n\n\n\n\t\n\t\n\n```python\n\ndef permutations(string):\n\t\n\n\n\n\n\n\nbaba', 'babb', 'bbbb', 'bbbb', 'baba', 'bbaa']\n\n\n\n\n\n\t\n\n```python\n"], "prompt": "\nQUESTION:\nIn this kata you have to create all permutations of an input string and remove duplicates, if present. This means, you have to shuffle all letters from the input in all possible orders.\n\nExamples:\n\n```python\npermutations('a'); # ['a']\npermutations('ab'); # ['ab', 'ba']\npermutations('aabb'); # ['aabb', 'abab', 'abba', 'baab', 'baba', 'bbaa']\n```\n\nThe order of the permutations doesn't matter.\ndef permutations(string):\n\t\nUse Call-Based format\nANSWER:\n"}}