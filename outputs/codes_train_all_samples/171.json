{"171": {"code": ["\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n       \n        return max(nums)\n\n\n\n\n\n\n\n\n   \n        return self.maxProduct(nums)\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nExample 3:\n\nGiven an", "\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n       \n\n\n\n\n\n\nExample 3:\n\n   \n        \nUse Python-Based format\n\n    maxProduct(nums)\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven an integer array nums,\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n       \n        return self.maxProduct(nums)\n\n\n\n\n\n\nUse Class-Based format\n\nclass\n        pass\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an integer array\u00a0", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n       \n\n\n\n\n\n\n\n\n   \n        pass\n\n    maxProduct(self, nums)\n\n\n\n\n\n\n2\n\n\nUse Call-Based format\nGiven an integer array\u00a0nums:\n\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n       \n\n\n\n\n\n   \n        \"\"\"\n\n\n    maxProduct(nums)\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1,2,4]\n\n\n\nUse Class Format\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n       \n        maxProduct(self, nums)\n\nUse Call-Based format\n\n\n\n\n   \n        return self.maxProduct(nums)\n\n\n\n\n\n\n\n\n\n\n\nGiven an integer array nums, find the contiguous subarray within nums\n\n\n\nGiven an", "\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n       \n        \n\n\n\n\n\n\n   \n        \"\"\"\n\n  >>> maxProduct(nums)\n\n[2,3] has the largest product 2.\n\n\n\n\n\n6.\n\n\n\n\n\n3 has the largest product 3.\n\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\nclass\n        pass\n\n\nThe maxProduct method is called `maxProduct`.\n\n\n\n[2,3]\n\n\n\n6.\n\n\n\n\nExample 1:\n\n\nExample 2:\n\n\n\n\n\n\nGiven an", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n        return self.maxProduct(nums)\n\n\nUse Python-based format\n\nUse Class-Based format\n\n\n\n\n\n   \n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 has the largest product 0.\n\n\nGiven an", "\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n       \n\n\n\n\n\n\n   \n        pass\n\n\n    maxProduct(self, nums)\n\n\n\n\n\nUse Python-Based format\n\n\n\n\n\n\nGiven a integer array\u00a0nums,\n\nExample 3:\n\nGiven", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Class-Based format\n       \n\n\n\n\n\n\n    maxProduct(self, nums: List[int]) -> int:\nReturns:\n6\n[2,4]\n\n\n\n\n\n1\n\n\n\nUse Call-Based format\n\n[0]\n\n\nExample\nGiven an integer", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nCall-Based format\n       \n\n\n\n\n\n\n\n    maxProduct(self, nums: List[int]) -> int:\n        \n\n\n\n\n\n\n\n\n\n\n\nExplanation:\n[2,3]\n\n\n\n\n\n\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n        pass\n\n\nUse Call-Based format\n\nUse Call-Based format\nclass\n\n\n\n\n    maxProduct(nums: List) -> int:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass\nGiven", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n              \n\n\n\n\n\n\n    maxProduct(self, nums: List[int]) -> int:\n\n\n\n\n[2,3]\n\n\n\n\n3.\n\n\n\n\n    [2,3,4]\n\n\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n       \n\n\n\n\n\n\n\nUse Call-Based format\n\nclass\n        pass\n        \nGiven an integer array\u00a0nums, find the largest product\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nExample 3:\n\nclass\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n       \n\n\n\n\n\n   \n        \"\"\"\n\n\n    maxProduct(nums: List[int])\n\n\n\n\n\n\n3.\n\n\n\nUse Call-Based format\n\n\n[3,4]\n\n\nExample 3:\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n       \n        return max(self.maxProduct(nums))\n        \nUse Call-Based format\n\n\n\n    maxProduct(self, nums):\n\n\n\n\n\n\n\n3.\n\n\n\nGiven an integer array\u00a0nums,\n\n\n\n\n\nGiven an integer", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n        pass\n\nUse Class-Based format\n\nUse Implementation-Based format\n\nUse Call-Only format\n\nUse Call-Based format\n\n\n\n\n\n    maxProduct(nums):\n\n\n\n\n\n\n\n\n\n\n-1\n\n\nclass\nGiven an integer", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n              \n\n\n\n\n\nExample 3:\n\n   \n        pass\n\n\nReturns:\n\n\nUse Python-Based format\n\n\n\nExample 1:\n\n\n\n\nGiven a contiguous subarray of an integer array\u00a0nums, find the contiguous subarray\n\n\nGiven", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n              \n\n\n\n\n\n\nUse Class-Based format\n\n\nclass\n        pass\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nnums = [2,3]\n\n\n\n\n\nGiven an integer"], "prompt": "\nQUESTION:\nGiven an integer array\u00a0nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\n\nExample 1:\n\n\nInput: [2,3,-2,4]\nOutput: 6\nExplanation:\u00a0[2,3] has the largest product 6.\n\n\nExample 2:\n\n\nInput: [-2,0,-1]\nOutput: 0\nExplanation:\u00a0The result cannot be 2, because [-2,-1] is not a subarray.\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}