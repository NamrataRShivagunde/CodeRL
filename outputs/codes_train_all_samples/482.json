{"482": {"code": ["\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n    arr = [3,2,4]\n\n\n\n    -> int:\n    \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n    arr = [6,2,4]\n\n\n\n\n\n\n    arr =", "\nUse Call-Based format\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n    return mctFromLeafValues(self, arr)\n\nUse Call-Based format\n\n\n   \n        pass\n\n\n\u00a0\n\n\n\u00a0\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n        \n    arr = [", "\nUse Call-Based format\n\n\n\n\n\n\n    \u00a0\n   \n    arr = [6,2,4]\n\nUse Call-Based format\n\n \u00a0\n\n   \n        pass\n\n\n\n\n\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\n\u00a0\n\n\n\n\n\n\u00a0\n\n\n\n    >>>", "\n\n\n    1 <= i <= 2\n    2 <= i <= 3\n    4 <= i <= 5\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n   \n\n\u00a0\n\n\n   \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\u00a0\n\n\n\u00a0\n\n\n1 <= i <", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\nExample 2:\n    arr = [6,2,4]\n\n\n\n\n   :\n        \n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n    arr =", "\nUse Call-Based format\n\u00a0\n\n\n\n\n\n   \n\n\u00a0\nUse Call-Based format\n\nExample 2:\n   \n\nUse Call-Based format\n\n\n   \n        pass\n        \n\n\n\n\n\n\n\n\n\n\n    arr[0] = 0\n    arr[2] = 2\n\n\n\n\n\n    arr[0", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\n\n\n\u00a0\nInput: arr = [2,3,4,6]\nOutput: 36\n\n\n\u00a0\nExample 2:\n\nUse Call-Based format\n\n\n\n\n   :\n        \n\n\n        \n\n\n\n\n\n\n\u00a0\nExample 2:\n\n", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n   \n    return self.mctFromLeafValues(arr)\n\n\n\n   \n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n2 <= arr.length <= 40\n", "\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n   \n\n\u00a0\nUse Call-Based format\n\nExample 2:\n\n\n\n\n   \n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\u00a0\n\n    arr = [2,4", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\n\n\n   \n    arr = [1,2,3]\n\n\u00a0\nExample 1:\n\n\n\n   \n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n2 <= arr.length <= 40\n\nGiven an array", "\n\n\n\nUse Call-Based format\n\n arr = [6,2,4]\n\n\n   \n    arr = [6,2,4]\n\n\n    \u00a0\n\u00a0\nUse Call-Based format\n\nClass:\n   :\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n    Output: 4", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n   \n   \n    arr = [6,2,4]\n\nUse Call-Based format\n\n\n   \n        pass\n        \n\n\u00a0\n\n\n\n\n\u00a0\n\n\n\u00a0\nUse Call-Based format\n\n\n\u00a0\n\n\n\u00a0\n\nBecause of", "\nUse Call-Based format\n\u00a0\n\n\n\n\nUse Call-Based format\n\n\n\n   \n    return self.mctFromLeafValues(arr)\n\n\n\n   \n        return 0\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\u00a0\n\n\n\n\u00a0\n\n\n\u00a0\n\n\n\u00a0\nINPUT: arr =", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nInput: arr = [6,2,4]\nOutput: 36\n\n\n\n   \n    arr = [6,2,4]\n\n\n\n   :\n                        \u00a0\n                \n\n\n\n\n\n\n\n\nGiven an array arr of positive integers:", "\nUse Call-Based format\n\u00a0\n\nUse Call-Based format\n\n arr = [6,2,4]\n\n\n   \n        arr = [6,2,4]\n        \n\n\n   \n        pass\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n\n    arr = [2", "\nUse Call-Based format\n\u00a0\n\n\n\n\n\n\u00a0\n\n   \n    arr = [12,2,4]\n\nUse Call-Based format\n\n 12        2        4    6    4\n\n\u00a0\nExample 2:\n   :\n        \n\n\n\n\n\n\n\n\n\n\u00a0\n\n\n\n\n    arr: [6,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n arr = [6,2,4]\n\n\n   \n    arr = [2,4,6]\n\n\n\n   \n    pass\n\n\nUse Call-Based format\u00a0\n\n\n\n\u00a0\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n    arr = [", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\u00a0\n\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nInput: arr\nOutput: 36\n\n\u00a0\n\nExample 2:\n\n\n\n\n\n                \n\n                \n\n\n\n\n\n   \n\nA unique", "\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\u00a0\nUse Call-Based format\n\n\u00a0\nUse Call-Based format\n\nInput: arr = [6,2,4]\nOutput: 16\n\nUse Call-Based format\n\n\n\n\n:                \u00a0\n                \n\n\n\n\n\n\n\n\nGiven", "\nUse Call-Based format\n\u00a0\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n\n\u00a0\n\n    2        3\n\n\u00a0\nExample 2:\n\n   \n        pass\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array arr of positive integers:\n"], "prompt": "\nQUESTION:\nGiven an array arr of positive integers, consider all binary trees such that:\n\nEach node has either 0 or 2 children;\nThe values of arr correspond to the values of each\u00a0leaf in an in-order traversal of the tree.\u00a0 (Recall that a node is a leaf if and only if it has 0 children.)\nThe value\u00a0of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.\n\nAmong all possible binary trees considered,\u00a0return the smallest possible sum of the values of each non-leaf node.\u00a0 It is guaranteed this sum fits into a 32-bit integer.\n\u00a0\nExample 1:\nInput: arr = [6,2,4]\nOutput: 32\nExplanation:\nThere are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.\n\n    24            24\n   /  \\          /  \\\n  12   4        6    8\n /  \\               / \\\n6    2             2   4\n\n\u00a0\nConstraints:\n\n2 <= arr.length <= 40\n1 <= arr[i] <= 15\nIt is guaranteed that the answer fits into a 32-bit signed integer (ie.\u00a0it is less than 2^31).\nclass Solution:\n    def mctFromLeafValues(self, arr: List[int]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}