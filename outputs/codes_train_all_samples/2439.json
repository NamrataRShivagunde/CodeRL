{"2439": {"code": ["\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nImplement strStr().\n\nImplement strStr().\n\n\n\nReturn 1 if needle is not part of haystack\n\n\nClass\n\nUse Java-Based format\nImplement strStr().\n\n\n\n\n\n\n\n\nReturn haystack index\n\n\n\n\n\nImplement strStr().\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Java-Based format\n\nUse Java-Based format\n\nCall-Based:\n\nUse Python-Based format\n\n\n\n\n\n\nExample 3:\n\n   \n\n\n\n\n\n\n\n\n\n\nImplement strIndex().\n\n\n\n\n\n\nImplement strIndex", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\n\n\n\nUse Java format\n\nUse C's strStr().\n\nUse Java-Based format\n\n\nClass Solution:\n   \n\n\n\n\n\n\n\n\n\n\nImplement strIdx().\n\n\n\n\n\n\nImplement strIdx", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nImplement strStr().\n\n\n\n\n\n\n\nImplement strStr().\nImplement strStr().\n\n\n\n\nUse Java-Based format\n\nImplementation:\n   \n\nUse Java-Based format\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\n\n\n\n\nImplement strStr().\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Python-Based format\n\nImplement strStr().\n\nImplement strStr().\n\n\n\nReturn 1 if haystack contains needle\n\n\nClass:\n   \n\nImplement strStr().\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\nImplement strStr().\n\n\n\n\n\nImplement str", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nUse Java-Based format\n\nImplement strStr().\n\n\n\n\nUse Java-Based format\nImplement strStr().\n\nImplement strStr().\n\n\n\nUse C-Based format\n\n\n\n\n\nImplement strStr().\n\nReturn the index of needle in haystack\n\n\n\n\nImplement strStr", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nImplement strStr().\n\nUse Java-Based format\n\n\n\n\n\nUse Java-Based format\n\nUse Python3:\n\nUse Java's strstr().\n\nUse Python 2:\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplement strStr().", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nImplement strStr().\n\n\n\n\n\n\n\nUse Java format\n\nUse Call-Based format\n\nImplement strStr().\n\n\n\n\nExample 3:\n\nUse C-Based format\n\n\n\n\n\n\n\n\n\n\n\nImplement str().\n\n\n\n\n\n\nImplement str().\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nImplement strStr().\n\nReturn the first occurrence of needle in haystack.\n\n\n\n\n\nUse Java format\n\nUse Python format\n\n\n\n\n\n\nUse Java format\n\nUse C format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplement strStr().\n\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nUse Java-Based format\n\nImplement strStr().\nImplement strStr().\n\n\n\n\nExample 3:\n   \nUse Python-Based format\nImplement strStr().\n\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\nImplement strStr().\n\n\n\n\n\nImplement strStr", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Java-Based format\n\nUse Call-Based format\n\nCall-Based:\n\n\nUse Java-Based format\n\n\n\n\nUse Java-Based format\n\nClass Solution:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplement strStr().", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nImplement strStr().\n\n\n\n\n\n\n\nUse Java-Based format\n\nImplement strStr().\n\nUse Java-Based format\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\n\n\n\n\n\n\nUse Java-Based format\n\n\n\n\n\nImplement strStr().\n\n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nImplement strStr()\n\n\n\n\n\nExample 3:\n\n\n\n\nUse Java-Based format\nImplement strStr().\n\nUse Call-Based format\nImplement strStr().\n\n\n\n\n\n\n\n\nImplement str().\n\n\n\n\n\n\nImplement str().", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nImplement strStr().\n\nUse Java-Based format\n\n\n\n\n\n\nExample 3:\n\nUse Python-Based format\n\n\n\n\n\n\nUse Java-Based format\n\n\nImplementation:\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplement strStr().\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n   \nImplement strStr().\nImplement strStr().\n\n\n\n\nExample 3:\n\n\nOutput: 1\n\n\n\nUse Java-Based format\n\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\n\n\n\n\nImplement strStr().\n\nReturn", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nExample 3:\n\nUse Java-Based format\n\nImplement strStr().\n\n\n\n\n\nReturns:\n\n \n\nImplement strStr().\n\n\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\nImplement strStr().\n\n\n\n\n\nImplement str", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nImplement strStr().\n\n\n\n\n\n\n\nUse Java-Based format\n\n\nImplement strStr().\n\n\n\n\nUse Java-Based format\n\n\nUse Java-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplement strStr().\n\n\n\n    Implement str", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nUse Java-Based format\n\nClass Solution:\n    def strStr(self, haystack: str, needle: str):\n        \nUse Java-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Java-Based format\n\n\n\n\n\nImplement str", "\nUse Call-Based format\n\n\n\n\n\nImplement strStr().\n\nUse Java-Based format\n\n\n\n\n\nUse Python-Based format\n\nUse Java-Based format\n\nImplement strStr().\n\nImplement strStr().\n\n\n\nUse Java-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplement strStr().", "\nUse Call-Based format\n\n\n\n\nImplement strStr().\n\n\n\n\nOutput: 0\n\n\n\n\nUse Java-Based format\n\nImplement strStr().\n\n\n\n\n\nExample 3:\n   \n\nImplement strStr().\n\nImplement strStr().\n\n\n\n\n\n\n\n\nImplement str().\n\n\n\n\nImplement str().\n\nOutput"], "prompt": "\nQUESTION:\nImplement strStr().\n\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\nExample 1:\n\n\nInput: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n\n\nExample 2:\n\n\nInput: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\n\n\nClarification:\n\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\n\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's\u00a0strstr() and Java's\u00a0indexOf().\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}