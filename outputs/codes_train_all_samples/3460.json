{"3460": {"code": ["\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n\nUse Call-Based format\", \"B\", \"C\", \"D\", etc.\n\n\n\n\n\n## Example\n\n# This is a very useful example\nUse Call-Based format\n\n\n\n\n## Examples\n\n\n\n\n\n```python\nimport re", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n## Example\n\nuse Call-Based format\nUse Call-Based format\", \"AB\", \"BC\", \"BC\", \"CD\", etc.\n\n\n\n\n\n\n\nGiven a string ``string`` that contains only letters, you have to\n\n\n\n\n\nGiven a string", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\", \"AB\", \"C\", \"D\", \"B\", \"C\", \"D\", etc.\n\n\n\n\n\n\n\n\n\n\n# Examples\n\n```python\nuniqcount(\"abcd\")\n\n\n\nGiven a", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Function-Based format\n\n\nUse Call-Based format\n\n\n\n```python\n\n\nUse Call-Based format\n\n\n# Example\n\n# Unique string count\n\", \"AB\", \"B\", \"C\", \"D\", etc.\n\n\n\n\n\n# Example\n\n\n\n\n``", "\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n# Formats\n## Examples\n\n\n\n\n\n\t\nUse Call-Based format\n\n## Examples\n\", \"AB\", \"C\", \"B\", \"C\", \"B\", \"B\", \"B\"\n\n\ndef\n\t\n\n\n\n\n\n```python\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\n\n\n\n\n\n''\n#\n\nUse Call-Based format\n\", \"AB\", \"BB\", \"C\", \"D\", \"AB\", \"BC\", etc.\n\n\n\n\n\n\n\n## Example\n\nGiven a string ``string`` that contains only letters\n\n\n\n\n## Example\n\n", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\t\nUse Function-Based format\n\n\n\n\t\n\n\nUse Call-Based format\", \"AB\", \"C\", \"D\", \"AB\", \"C\", \"B\", \"D\", \"D\"\n\n\n:\n\n\n\n\n# Examples\n\n\n\n\n\n\n#\n\n```python", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Function-Based format\n\n\n\n\n\t\nUse Python-based format\n\n\n\n# Examples\n#\n#\nUse Call-Based format\", \"AB\", \"C\", \"D\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Examples\n#\n#\n\n```python", "\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nReturns the number of unique strings in ``string`` that contains only letters.\n\nUse Call-Based format\n\", \"C\", \"D\", \"D\", \"C\"\n\n\n\n\n\n\n\n\n\n\n\n```python\n", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\nUse Call-Based format\n\n\\n\nUse Call-Based format\n\", \"AB\", \"C\", \"C\", \"B\", \"B\", etc.\n\n## Examples\n\n\n\n\n\n\n\n\n\n\n\n## Examples\n\n\n\n\n```python\nfor i", "\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\", \"C\", \"D\", \"B\", \"C\", \"B\", \"B\", \"D\"\n\n\n\n\n\n\n\n\n\n\n\n```python\nfor i in", "\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\nUse Function-Based format\n\n\n\n\n\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n## Examples\n\n\nuniqcount(\"abc\") = 2\n\n## Examples\n\n\n\n\n## Examples\n\n\n\n\n## Example\n\n\n\n```python", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n---\n\n\nUsage:\n\t\nUse Call-Based format\", \"AB\", \"AB\", \"AB\", \"AB\", \"AB\", \"B\", \"BB\", \"BB\"\n\n\n:\n\n\n\n\n\n\n\n\n\n```python\nfor i in", "\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n## Example\n\n\nUse Call-Based format\n\", \"AB\", \"ABB\", \"AB\", \"B\", \"C\", \"CD\", etc.\n\n\n\n\n\n\n\n\n\n\n#\n\n````python\ns = uniqcount", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\n\n\n\n````python\n\n\t\nUse Call-Based format\n\n# Examples\n\n## Examples\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n## Example\n\n\n```python", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\t\n\n\nUse Call-Based format\", \"AB\", \"C\", \"D\", \"C\", \"B\", etc.\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n```python\nfor i in range(len(s", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python Call-Based format\n\n\n\n\n# Examples\n```python\n\n# Use Call-Based format\n\n\n# Examples\n#\n# Example\n\", \"A\", \"B\", \"C\", \"D\", \"A\", \"B\"\n#\n\n\n\n\n\n\n\n\n```python", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\n\n\n\n\t\n\nUse Call-Based format\n\n\n\n## Example\n\n\nUse Call-Based format\n\n````python\n# uniqcount(s)``\nUse Call-Based format\n\n\n````python\n\n\nUse Call-Based format\n\n\n\n\n\n````python\n", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\nUse Python format\n\n\n\n```python\n\n\n\nUse Call-Based format\n\t\nUse Python format\n\n\n```python\n\nuse call_length(string)``\n\n\n\n\n\n\n\n```python\n\n\n\n\n\n\n\n```python", "\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\t\n\n\nUse Call-Based format\", \"AB\", \"C\", \"D\", \"B\", \"C\", \"D\", etc.\n\n\n\nUse Call-Based format\n\n\n\n\nGiven a string ``string`` that contains only letters, you have to\n\n\n\n\n\n``"], "prompt": "\nQUESTION:\nGiven a string ``string`` that contains only letters, you have to find out the number of **unique** strings (including ``string`` itself) that can be produced by re-arranging the letters of the ``string``.  Strings are case **insensitive**.\n\nHINT: Generating all the unique strings and calling length on that isn't a great solution for this problem. It can be done a lot faster...\n\n## Examples\n\n```python\nuniqcount(\"AB\") = 2      # \"AB\", \"BA\"\nuniqcount(\"ABC\") = 6     # \"ABC\", \"ACB\", \"BAC\", \"BCA\", \"CAB\", \"CBA\"\nuniqcount(\"ABA\") = 3     # \"AAB\", \"ABA\", \"BAA\"\nuniqcount(\"ABBb\") = 4    # \"ABBB\", \"BABB\", \"BBAB\", \"BBBA\"\nuniqcount(\"AbcD\") = 24   # \"ABCD\", etc.\n```\ndef uniq_count(s):\n\t\nUse Call-Based format\nANSWER:\n"}}