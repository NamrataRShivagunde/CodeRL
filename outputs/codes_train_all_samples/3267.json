{"3267": {"code": ["\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n~else:\n\n\t\nUse Python-Based format\n\n\n\t\nUse Python-Based format\n\n\n\n\t\nUse Python-Based format\n\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n~~~if:", "\n\n\n\n\nUse Call-Based format\n\n\n~else:c\n\n\n\t\nUse Python-Based format\ndef well(x):\n\t\nUse Python-Based format\n\ndef well(x):\n\t\nUse Call-Based format\n\t\n\n\n\t\t\n\n\n\n\n\n\n\n~~~endif:c\n\n\n\n\n\n\nFor", "\n\n\n\n\t\nUse Call-Based format\n\n\n~~~else:c\n\n\n\t\nUse Python-Based format\n\nfunction well(x):\n\t\nUse Python-Based format\n\n\t\nUse Python-Based format\n\n\n\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\n    x: array of values", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n\n\nreturn 'Use Call-Based format\n\ndef kata(x):\n\t\nUse Call-Based format\n\ndef kata(x):\n\t\n\t\n\n\n\t\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n~\n\n\n\n    $0", "\n\n\n\n\t\nUse Python-Based format\n\n\nUse Call-Based format\n~~~else:c\n\n\t\n\n\n\nUse Call-Based format\n\n\t\nUse Python-Based format\ndef well(x):\n\t\nUse Python-Based format\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n~else:c\n\t\n\nFor every", "\nUse Call-Based format\n\n\n\t\nUse C format\n\n\nUse Call-Based format\n~~~else\n\n\t\n\n\nUse Call-Based format\n\n\n\n\t\nUse String-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n~~~else:\n\n\n\n\n\n\n\n  - x: array of values\n ", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Python-Based format\n\nUse Simple Call-Based format\n\n\n\n\nUse Call-Based format\n\n~~~else:\n~~~endif\n\n\n\n\n\n\n\n\nFor every good kata idea", "\n\n\nUse Call-Based format\n\n\t\nUse Call-Based format\n\n\nUse C\nUse Call-Based format\n~else:c\n\n\n\t\n\t\n\nUse C-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n~~~else:c\n\n\n\n\n\n\n\n\n\n---\n###\n#", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n~else:\n\n\t\n\t\nUse Call-Based format\n\n\nreturn 'I smell an array!'\n\n~~~endif:c\n\t\n\nUse Call-Based format\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\t\n\nFor every good kata", "\n\nUse Call-Based format\n\n\n\n\n\n\nUse Call-Based format\n~else:c\n\n\t\nUse C-Based format\n\ndef well(x):\n\t\n\n\n\n\n\n\n\t\nUse Python format\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\nThis kata idea is a kata", "\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n~else:c\n\n\t\n\t\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n~~~else:c\n\n\n\n~else:c\n\t\nFor every", "\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\nUse C-Based format\n\nfunction well(x):\n\nUse C-Based format\nfunction well(x):\n\t\n\t\n\n\n\n\n\t\nUse Python-Based format\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\n  I smell", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\ndef well(x):\n\t\n\t\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\nFor every good kata idea there seem to be exactly one", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\n~endif\n\n\n\t\n\n\nUse Call-Based format\n\n\n\n\t\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\n\t\n\n\nYes, I check the array (x)", "\n\n\n\n\t\nUse Simple-Format\n\n\nUse Call-Based format\n~else:\n\n\t\n\n\n\n\nUse Python format\n\n\n\n\t\nUse Python-Based format\n\n~~~endif\n\n\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\t\n\n\n    * If you have 3 or more bad k", "\n\n\n\n\t\nUse Call-Based format\n\n\n~~~endif\n\n\n\t\nUse Python format\n\ndef well(x):\n\t\nUse Python-Based format\n\nfunction well(x):\n\t\nUse Python-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\n   \n\n\n\n\n\t\n\n\n* good:\n*", "\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n~~~if:x\nUse C format\n~~~else:x\n~~~else:c\n\n\t\n\t\n\n\n\n\t\nUse Python format\n\nUse Callable-Based format\n\n\n\n\n\n~~~endif\n\n\t\n\n\n\n\n\n  This is a", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\nUse Call-Based format\n~~~else:c\n\n\t\n\n\t\nUse Call-Based format\n\n\n\n\t\nUse Python-Based format\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n\t\tI smell a series of good kata", "\n\n\n\n\t\nUse Call-Based format\n\n\n~endif\n\n\treturn well(x)\n\n\n\n\n\nUse Call-Based format\n\nreturn 'Publish!'\n\n>>> if:c\n\n\t\nUse Python-Based format\n\n\n\n\n\n\n\n~~~endif\n\n\n\n\n\n\n\n\n------\n\n## Example 1", "\nUse Call-Based format\n\n\n\t\nUse Call-Based format\n\n\nUse C\nUse Call-Based format\n~else:\n\n\ndef well(x):\n\t\n\n\n\n\n\n\n\nCheck x for good ideas\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\nFor every good kata idea there are quite two good ideas '"], "prompt": "\nQUESTION:\nFor every good kata idea there seem to be quite a few bad ones!\n\nIn this kata you need to check the provided array (x) for good ideas 'good' and bad ideas 'bad'. If there are one or two good ideas, return 'Publish!', if there are more than 2 return 'I smell a series!'. If there are no good ideas, as is often the case, return 'Fail!'.\n\n~~~if:c\nFor C: do not dynamically allocate memory,\n      instead return a string literal\n~~~\ndef well(x):\n\t\nUse Call-Based format\nANSWER:\n"}}