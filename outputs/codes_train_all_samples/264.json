{"264": {"code": ["\nUse Call-Based format\nUse Call-Based format\n\n    \"\"\"\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\",\"\n    maxLength(self, arr)\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array of strings arr\n\nGiven an array of", "\nUse Call-Based format\nUse Call-Based format\n\n    print(self, arr)\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven an array of strings arr.", "\nUse Call-Based format\n\n\n    return 1\n\nUse Call-Based format\n\nGiven an array of strings arr.\nUse Call-Based format\n\n\n   \n\nUse Call-Based format\n\n\",\"\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\nGiven an array of strings", "\nUse Call-Based format\nUse Call-Based format\n\n    return self.maxLength(arr[i])\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of strings arr:\n\n\nGiven an array", "\nUse Call-Based format\n\nUse Call-Based format\n\n   ...\nUse Call-Based format\n\n\n\n   \n\nGiven an array of strings arr.\nReturn the maximum possible length of s.\n\n\n\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of strings arr.\n\n\nGiven an array", "\nUse Call-Based format\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nGiven an array of strings arr.\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\nGiven an array of strings arr. Each", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    return self.maxLength(arr)\n\n\n\n\n\n   \n\n\nGiven an array of strings arr. String s is a concatenation of all strings arr.\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of strings arr.\n\n\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n        return 1\n\n\n\n\n\n   \n        return 0\n\nGiven an array of strings arr.\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of strings arr.\n\nGiven an", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n    pass\n\n\n\n\n\n\nMax\n\nUse Call-Based format\nGiven an array of strings arr.\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\n\nGiven an array of strings arr.\n\n\nGiven an array", "\nUse Call-Based format\n\n\n    return 0\n\n\n\nUse Call-Based format\n\n\n        return self.maxLength(self.solution)\n\n\n\u00a0\n\n\n\n\",\"\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\nMaximal possible length:\n\n\n\nGiven an array of strings arr.\n\nGiven an", "\nUse Call-Based format\nUse Call-Based format\n\n:\n    pass\n\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n\",\"\n\nGiven an array of strings arr. String s is a concatenation of all sub-sequences in arr.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of strings arr.", "\nUse Call-Based format\n\n\n    pass\n\n\n\nArray of strings arr.\n\n\n\n   \n\nUse Call-Based format\n\n\n\"\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven an array of strings arr. String s is a concatenation of the strings arr.\n\n\n\n\n\n\nGiven an array of strings arr.", "\nUse Call-Based format\n\n\nUse Call-Based format\n\n        \"\"\"\n\n\n\n\n\n\n   \n    maxLength(self, arr)\n\nUse Call-Based format\n\n\n\n\",\"\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nGiven an array of strings arr. String", "\nUse Call-Based format\n\n\n   ...\n\nUse Call-Based format\n\n\nInput: arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"g\",\"r\",\"i\",\"u\",\"u\"]\nOutput: 16\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven an array of strings arr.", "\nUse Call-Based format\n\n\n    print(self.solution)\n\n\n\nArray of strings arr.\n\nUse Call-Based format\n\n\n          \n\n\n\",\"\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven an array of strings arr\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array of strings arr", "\nUse Call-Based format\n\n\n    maxLength(self, arr: List[str]) -> int:\n    \nUse Call-Based format\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nGiven an array of strings arr.\n\nGiven", "\nUse Call-Based format\nUse Call-Based format\n\n    pass\n\nUse Call-Based format\n\n\n\n\n\n   \n\n\n\nUsage:\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\nGiven an array of strings arr. Array", "\nUse Call-Based format\nUse Call-Based format\n\n:\n        pass\n\n\n\n\n\n\n   \n\n\nGiven an array of strings arr.\n\nUse Call-Based format\nConstraints:\n\n1 <= arr.length <= 16\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nGiven an array of strings arr.", "\nUse Call-Based format\nUse Call-Based format\n\n:\n\nUse Call-Based format\n\n\n\n\n   \n\n\nUse Call-Based format\nUse Call-Based format\n\",\"\n\nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array of strings arr.\n\n\nGiven an array of", "\nUse Call-Based format\n\n:\n    pass\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n\n\"\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\nGiven an array of strings arr. String s is a concatenation of strings arr.\n\n\n\n\n\n\nGiven an array of strings"], "prompt": "\nQUESTION:\nGiven an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.\nReturn the maximum possible length of s.\n\u00a0\nExample 1:\nInput: arr = [\"un\",\"iq\",\"ue\"]\nOutput: 4\nExplanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".\nMaximum length is 4.\n\nExample 2:\nInput: arr = [\"cha\",\"r\",\"act\",\"ers\"]\nOutput: 6\nExplanation: Possible solutions are \"chaers\" and \"acters\".\n\nExample 3:\nInput: arr = [\"abcdefghijklmnopqrstuvwxyz\"]\nOutput: 26\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 16\n1 <= arr[i].length <= 26\narr[i] contains only lower case English letters.\nclass Solution:\n    def maxLength(self, arr: List[str]) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}