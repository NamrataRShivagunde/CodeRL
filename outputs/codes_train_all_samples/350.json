{"350": {"code": ["\nUse Call-Based format\n\n\n    K = 1\nOutput: 1\n\n\nUse Call-Based format\n\n\n\n   \n        return self.subarraysWithKDistinct(A, K)\n        \n\n   \n\nUse Call-Based format\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\nGiven an array A of positive integers,", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n   \n    return self.subarraysWithKDistinct(A, K)\n\n\n\n   \n\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\nGiven an array A of positive integers", "\nUse Call-Based format\n\n\n    pass\n\n\n\n\n\n   \n        pass\n\n\n\n    def subarraysWithK(self, A: List[int], K: int):\n        pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 <= K <= A.length\n\n\nGiven an array A", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n   \n    \"\"\"\n\nUse Call-Based format\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nA[i] = 3\n\n\n\nGiven an array A", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    pass\n\nUse Call-Based format\n\n   \n    pass\n        \nUse Call-Based format\nUse Call-Based format\n\n\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\nK = 2\n\n\nGiven an array A", "\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        pass\n        \n\n\n\n    def subarraysWithK(self, A: List[int], K: int):\n        pass\n\nUse Call-Based format                            \n\n\n\n\n\n\n\nA = [1]\n\n#\n\nGiven an array", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\n\n\n\n1 <= A[i] <= A[j] <= A[k] <= A[i+1].\n\n   \n\n\n       \n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\nA is contiguous and not necessarily distinct.\n\n\n\nGiven an array A", "\nUse Call-Based format\n\n\n    subarraysWithKDistinct(self, A, K)\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n1\n\n\n\nBy using a contiguous and not necessarily distinct array,\n\n1\n\n\nGiven an array A", "\n\n\n\n    pass\n\n\nUse Call-Based format\n1 <= A[i] <= A[i] <= A[i]\nOutput: 7\n\n\n\n   \n    pass\n\n\n   \n\n\n\n\n\n\n\n1,2,3,4\n\n\nUse Call-Based format\n\n\n\n\nGiven an array A of positive integers, call a", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n   \n        return self.subarraysWithKDistinct(A, K)\n\n\n\n   \n    pass\n\nUse Call-Based format\n\n\n\n\n\n\n\n\nA and A are of positive integers.\n\n\n\n\nGiven an array A of positive integers", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n   \n    pass\n\n\n\n\n\n   \n    pass\nUse Call-Based format\nUse Call-Based format1, 2, 3, 4, 5, 6\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis function has been tested for performance.\n\n", "\nUse Call-Based format\n\n\n    subarraysWithKDistinct(self, A, K):\n        \nUse Call-Based format\n\n\n\n\n   \n\n\n\n   \n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n1,2,3,4,5\n\n\n\n\n\n\n\nGiven an array A of positive integers, call", "\nUse Call-Based format\nK = 2\n\n\nUse Call-Based format\n\n\n\n\n   \n       \n\n\n\n    def subarraysWithK(self, A, K: int):\n        return K\n\n    pass\n\n\n\n\n\nUse Call-Based format\n\n\n\nA is contiguous and not necessarily distinct integers\n\n\n\nGiven an array A of", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n\nUse Call-Based format\n\n\n\n   \n        pass\n        \n\n\n   \n    \"\"\"\n\n\n\n\n\nA is a contiguous array and K is an integer.\n\n\n\n\n\nA is a contiguous array of positive integers.\n\n\n\n\n\nGiven an array A of positive integers,", "\nUse Call-Based format\nK <= A[i] <= A[i+1]\n\n\n\n\n\n\n\n   \n\n\n\n\n\n    def subarraysWithK(self, A: List[int], K: int):\n        return 1\n        \nUse Call-Based format                       \n\n\n\n\n\n\n\n\n\n\n\nGiven an array A", "\nUse Call-Based format\n\n\n    print(self, A, K)\n\n\n\n\n\n   \n    print(self, A, K)\n    \n\n\n\n   \n    pass\n\n\n\n\n\n\nUse Call-Based format1,2,3,4,5\n\n\n\n\n\n\n\n\n\n\nGiven an array A of positive integers,", "\nUse Call-Based format\n\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n    def subarraysWithK(self, A, K: int):\n        return 1\n\nUse Call-Based format\n\n\n\n   \n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nGiven an array A of positive integers, call a", "\nUse Call-Based format\n\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n   \n\nUse Call-Based format\n\n   \n   ...\n\nUse Call-Based format\n\nA = [1,2,3]\nK = 2\n\n\n\n\n\n\n\n\n\n\n\nGiven an array A of positive integers:\nGiven an array", "\n\n\n\n    SubarraysWithKDistinct(self, A, K):\n        return 1\n\nUse Call-Based format\n\n\n\n\n   \n\n\n\n\n\n\u00a0\n\nUse Solution-Based format\n\n\n\n\n\n\n\nUse Call-Based format\n1,2,3,4\n\n\n\n\n\nGiven an array A of positive integers, call", "\nUse Call-Based format\n\n\n    pass\n\nUse Call-Based format\n\n\n\n   \n        pass\n\n\n\n   \n    subarraysWithKDistinct(self, A, K)\n        \nUse Call-Based format\n\n\n\n\n\n\n\nUse Call-Based format\nGiven an array A of positive integers:\n\nK = 2\n\n\nGiven an"], "prompt": "\nQUESTION:\nGiven an array A of positive integers, call a (contiguous, not necessarily distinct) subarray of A good if the number of different integers in that subarray is exactly K.\n(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)\nReturn the number of good subarrays of A.\n\u00a0\nExample 1:\nInput: A = [1,2,1,2,3], K = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n\nExample 2:\nInput: A = [1,2,1,3,4], K = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n\n\u00a0\nNote:\n\n1 <= A.length <= 20000\n1 <= A[i] <= A.length\n1 <= K <= A.length\nclass Solution:\n    def subarraysWithKDistinct(self, A: List[int], K: int) -> int:\n        \nUse Call-Based format\nANSWER:\n"}}