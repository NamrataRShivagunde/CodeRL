{"4083": {"code": ["\nUse Call-Based format\n\n# Performance tests\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t1, 2, 3\n\t\t2, 3\n\t\t3\n\t\t5\n\t\n___\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n# Notes\n\n* The", "\n\n\n\n\n\n# Author\n\n## Use Call-Based format\n\n# Examples\n\n\n```python\nUse Call-Based format\n\n\n\n___\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n\n\n\n___\n\n# Reviews\n\n## Reviews\n\n\n\n\n\n\n\n___\n\n#", "\n\n\n\n# Example\n\n\n# Example\n\n\n# Example\n\n\n__\n\n# Task\n\n\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n___\n\n\"\"\"\n\n\n# Tests\n", "\n\n\n\n# Performance\n\nPerformant version\n\nTest-Based format\n\nTests: 4\nArray size: 800,000\nValues range: [1, 50]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n# Task\n\n\n\n___\n\n\n\n```python\n", "\n\n# Safety\n\n# Examples\n\n# Example\n\n# It's call-based format\n\n\n\n\n:\n\n\n\n\n\n___\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n# Task\n\n\n# Tasks\n\n\n\n\n\n\n\n___\n\n\n\n___\n\n# Tasks\n\n", "\n\n# The Call-Based format\n\nuse Call-Based format\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n____\n\n# Tasks\n\n\n## Task\n\n\n\n\n___\n\n\n\n\n\n\n# Task\n\n\n\n\n\n___\n\n# References\n\n\n```python\n\n\n", "\n\n\n\n\n# Note\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n# Tasks\n\nTest codewars\nTest size: 800,000\nValues range: [1, 2, 3]\n\n___\n\n\n\n\n\n\n\n\n\n# Notes\n\n*", "\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n\nTest-Based format\n\nTest: 15\n\n\n\n\n\n\nTest: 15\n\nTest: 50\n\nTest: 50\n\n\n\n\n\n\n\n___\n\n\n\n\n\n___\n\n# Task\n\n\n\n\n\n\n\n\n\n__\n\n___\n\n# Example\n", "\n\n# Author\n\npython\n\nAuthor: GiacomoSorbi\n\n# About:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n___\n\n# Task\n\n\n\n\n\n\n___\n\n# Tasks\n\n# Example\n\n\n\n\n\n```python\n\n", "\n\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n\n# Example\n\npython\nperformant_smallest(arr, n)\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n___\n\n\n# Task\n\n\n\n\n\n\n\n\n\n___\n\n# Example", "\n\n# Example\n\n\n\n\n\n\n\n\n\n\n# Example\n\n_\n# Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n---\n\n\n# Example\n\n\n# Example\n\n\n```python\n\n\n\n\n\n\n___\n\n\n\n\n___\n\n# Task\n\n\n\n__", "\n\n\n\n# Performance\n\n___\n\n\n\n\n# Task\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_\n\n\n\n\n\n\n# Notes\n\n* This challenge is based on the call-Based format\n\n\n\n\n\n___\n\n# Task\n\n\n\n\n___\n\n# Task\n\n", "\n\n# Example\n\n# Example 1\n\n# Example 2\n\nTest 1\n\nTest 2\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\nThis challenge is based on GiacomoSorbi\n\n\n\n___\n\n\n\n\n\n___\n\n\n\n# Example", "\n\n# Example\n\n# Example\n\n# Example\n\n# Example\n\n   \n\n\n\n___\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n___\n\n\n\n# Task\n\n\n## Task\n\n# Tests\n\n\n\n\n\n\n___\n\n# Task\n\n\n\n\n___\n\n", "\n\n\n\n# Example\n\n\n```python\nperformant_smallest([arr, 1, 2, 3, 4, 5])\n```\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n\n\n\n\n# Task\n\n\n\n\n___\n\n\n\n\n\n\n___\n\n# Example\n\n", "\n\n\n\n\n# Performance\n\nTest-Based format\n\nTest: 15\nArray size: 800,000\nValues range: [1, 50]\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:\n\n___\n\n\n\n\n___\n\n# Task\n\n\n\n\n\n\n\n\n_\n\n___\n\n# Example", "\n\n# Example\n\n# Call-Based format\n\n# Examples\n\n# Tests: 15\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Example\n\n#\n\n___\n\n\n\n\n\n\n# Tasks\n\n\n\n\n\n\n___\n\n# Tasks\n\n\n\n\n____\n\n\n# Examples", "\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n# Example\n\n## Performance tests\n\n___\n\n# Task\n\nThe task is based on GiacomoSorbi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n# Task\n\n## Task\n\n\n\n\n\n___\n\n# Task\n\n\n\n\n``", "\n\n# Example\n\n# Example:\n\n# Test\n\nTest: 15\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n___\n\n# Task\n\n# Example\n\n---\n\n# Task\n\nTest:\n\n\n\n\n\n\n___\n\n# Task\n\n\n\n\n\n``", "\n\n# Example\n\n# Example\n\n# Example\n\nTest: 5\nTest: 4\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Task\n\n\n\n# Example\n\n\n\n___\n\n\n\n\n\n# Task\n\n\n\n\n\n___\n\n# Task\n\n\n\n\n\n# Notes\n\n"], "prompt": "\nQUESTION:\nThis challenge is based on [the kata](https://www.codewars.com/kata/n-smallest-elements-in-original-order) by GiacomoSorbi. Before doing this one it is advisable to complete the non-performance version first.\n\n___\n\n# Task\n\nYou will be given an array of random integers and a number `n`. You have to extract `n` smallest integers out of it **preserving the original order**.\n\n# Examples\n\n```python\nperformant_smallest([1, 2, 3, 4, 5], 3)     ==   [1, 2, 3]\nperformant_smallest([5, 4, 3, 2, 1], 3)     ==   [3, 2, 1]\nperformant_smallest([1, 2, 3, 4, 1], 3)     ==   [1, 2, 1]\nperformant_smallest([2, 1, 3, 2, 3], 3)     ==   [2, 1, 2]\n```\n\n# Notes\n\n* There will be duplicates in the array, and they have to be returned in the order of their each separate appearence.\n* This kata is an example of the \"know your data\" principle. Remember this while searching for the correct approach.\n\n# Performance tests\n\n```python\nTests: 15\nArray size: 800,000\nValues range: [1; 50]\nNumber of elements to return: 25-50% of the array\n```\ndef performant_smallest(arr, n):\n\t\nUse Call-Based format\nANSWER:\n"}}