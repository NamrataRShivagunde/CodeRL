{"3393": {"code": ["\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\t\n\n\n,\n2, 3, 42,\n3, 4, 7, 10, 12, 13, 178, 179\n\n\n\n\n\n\n\n\n\n#Example:\n#", "\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\nlist_squared(m, n)\n\n\n, 1, 2, 3, 4, 6, 1, 4, 8, 1, 1\n\n\n\n\n\n\n\ndivisors of 1 is :", "\n\n\n\n\n\n\n\n\n\nUse Call-Based format\n\n#Examples:\n# Examples:\n\n\nUse Call-Based format\nANSWER:\n\nDivisors of 1:\n\n1:\n42:\n\n\n\n\n\n\n\n\n\n\n,\n\n\n\n\n\n\n```\n\n\n\n    1.  2.  3.", "\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\n\n\nlist_squared(m, n)\nlist_squared(1, n)\n\n\n\n\n\n\n\n, 3, 4, 10, 11\n\n\n\n\n\n\n\n\n    # Examples:\n\n    # Example:\n\n\t# Example 2", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Fortran format\n\n\n\n\n\n\n, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n\n\n\n\n\n\n\n\n# Examples:\n#\nm, n = 2\n", "\nUse Call-Based format\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\t\n\t\n\n\n\n\n\n\n, 4, 6, 1, 2, 3, 1, 4, 1, 2, 2, 2, 2, 2, 1\n\n\n\n\n\n\n\n\n\n# Examples:\n\nm, n", "\n\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\nUse Call-Based format\n#Examples:\n\n\n\n#Examples:\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n, 1, 2, 3, 3, 2, 1, 2, 1\n\n\n\n\n\n\n\n\n#Examples:\n\n# Examples:\n", "\n\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\nQUESTION:\n\nReturn an array of arrays of arrays of arrays of tuples of strings\n\n\n\n\n\n\n, 4, 2, 1\n\n\n\n\n\n\n\n\n\n1.2.3.4.5 -", "\n\n\n\n\nUse Call-Based format\n:\n\n\n\n\n\nUse Call-Based format\n\n# Examples:\n\nUse Call-Based format\n\n\n\n\t\n\n\n\n\n\n\n, 2, 3, 5, 6, 7, 27, 1\n\n\n\n\n\n\n\n#Examples:\n\n# Examples:\n#\n#     m, n", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n\ndivisors of 42 is : 1, 2, 3, 6, 7, 14, 21, 42.\n\n:\n\n\n\n\n[1, 2", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n\n\n\n\t\n\n,\n2, 4, 9, 21, 42, 1, 2, 3, 4, 4, 2, 4, 4\n\n\n\n\n\n\n\n\n#Example", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, 172, 174, 175\n42 is a number\n246 is a number\n245 is a number\n245 is a number\n\n\n\n\n\n\n\n# An example of an array", "\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n**Note**\n\nUse Call-Based format\n\n\n\n\n\n\n, 142, 21, 1, 2, 2, 1, 4, 2, 4, 3\n\n\n\n\n\n\n\n\n# Examples:\n", "\n\n\n\n\nUse Call-Based format\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n#Examples:\n\nlist_squared(m, n)\n\n#Examples:\n\n2.\nlist_squared(m, n)\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n# Example:\nlist_squared(1, 1):\n\nUse Call-Based format\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n\n\n\n\n42 is a number\n42 is a number\n246 is a number\n246 is a number\n246 is a number\n\n:\n\n\n\n\n# Examples:", "\nUse Call-Based format\n\n\n\n:\nUse Call-Based format\n\n\n\n\n\nUse Call-Based format\n\n\n\n\n\t\nUse Call-Based format\n\n**Note**\n\n\n\n\n\n\n, \n5, 10, 9, 17, 23\n\n\n\n#Example:\n\n\n\n#Example:\n\n\n1 <= m <=", "\nUse Call-Based format\n\n\n\n\nUse Call-Based format\n\nUse Call-Based format\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n\n\n, 2500, 144, 239, 139\n\n\n\n\n\n\n\n```\n\nUse Call-Based format\nQUESTION:\n\n\n# Examples", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\n\n\n\n\n\t\n\n, 1, 2, 3, 4, 6, 7, 8, 9, 10, 10, 1\n\n\n\n\n\n\n#Examples:\n\n\n\tlist_squared(1, 2)", "\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\nThe sum of divisors is : 1, 2, 3, 4, 7, 6, 7, 9, 187, 1, 2.\n\n\n\n\n:\n\n\n\n\n## Examples", "\n\nUse Call-Based format\n\n\n\nUse Call-Based format\n:\nUse Call-Based format\n\n\n\n\n\n\n\n\t\nUse Call-Based format\n\n**Note**\n\n\n\n\n\n\t\n\n\n\n,\n42,\n42,\n42,\n\n\n\n\n\n\n\n\n\n\n# Examples:\n\n# Example 2:"], "prompt": "\nQUESTION:\nDivisors of 42 are : 1, 2, 3, 6, 7, 14, 21, 42.\nThese divisors squared are: 1, 4, 9, 36, 49, 196, 441, 1764.\nThe sum of the squared divisors is 2500 which is 50 * 50, a square!\n\nGiven two integers m, n (1 <= m <= n) we want to find all integers \nbetween m and n whose sum of squared divisors is itself a square.\n42 is such a number.\n\nThe result will be an array of arrays or of tuples (in C an array of Pair) or a string, each subarray having two elements,\nfirst the number whose squared divisors is a square and then the sum\nof the squared divisors.\n\n#Examples:\n```\nlist_squared(1, 250) --> [[1, 1], [42, 2500], [246, 84100]]\nlist_squared(42, 250) --> [[42, 2500], [246, 84100]]\n```\n\nThe form of the examples may change according to the language, see `Example Tests:` for more details.\n\n**Note**\n\nIn Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.\ndef list_squared(m, n):\n\t\nUse Call-Based format\nANSWER:\n"}}